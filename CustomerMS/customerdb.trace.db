2020-06-17 21:40:16 database: opening /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb (build 200)
2020-06-17 21:40:16 lock: 1 exclusive write lock requesting for SYS 
2020-06-17 21:40:16 lock: 1 exclusive write lock added for SYS 
2020-06-17 21:40:16 lock: 1 exclusive write lock unlock SYS 
2020-06-17 21:40:16 lock: 1 exclusive write lock requesting for SYS 
2020-06-17 21:40:16 lock: 1 exclusive write lock added for SYS 
2020-06-17 21:40:16 lock: 1 exclusive write lock unlock SYS 
2020-06-17 21:40:16 database: opened /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:40:16 lock: 1 exclusive write lock requesting for SYS 
2020-06-17 21:40:16 lock: 1 exclusive write lock added for SYS 
2020-06-17 21:40:16 lock: 1 exclusive write lock unlock SYS 
2020-06-17 21:40:16 database: connecting session #3 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:40:16 jdbc[3]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:40:16 jdbc[3]: 
/**/Connection conn0 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 21:40:16 jdbc[3]: 
/**/conn0.isReadOnly();
2020-06-17 21:40:16 jdbc[3]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 21:40:16 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:40:16 jdbc[3]: 
/**/conn0.isValid(1);
2020-06-17 21:40:16 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 21:40:16 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 21:40:16 jdbc[3]: 
/**/DatabaseMetaData dbMeta0 = conn0.getMetaData();
2020-06-17 21:40:16 jdbc[3]: 
/**/dbMeta0.getURL();
2020-06-17 21:40:16 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:40:17 database: connecting session #4 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:40:17 jdbc[4]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:40:17 jdbc[4]: 
/**/Connection conn1 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 21:40:17 jdbc[4]: 
/**/conn1.isReadOnly();
2020-06-17 21:40:17 jdbc[4]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 21:40:17 jdbc[4]: 
/**/conn1.getAutoCommit();
2020-06-17 21:40:17 database: connecting session #5 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:40:17 jdbc[5]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:40:17 jdbc[5]: 
/**/Connection conn2 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 21:40:17 jdbc[5]: 
/**/conn2.isReadOnly();
2020-06-17 21:40:17 jdbc[5]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 21:40:17 jdbc[5]: 
/**/conn2.getAutoCommit();
2020-06-17 21:40:17 database: connecting session #6 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:40:17 jdbc[6]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:40:17 jdbc[6]: 
/**/Connection conn3 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 21:40:17 jdbc[6]: 
/**/conn3.isReadOnly();
2020-06-17 21:40:17 jdbc[6]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 21:40:17 jdbc[6]: 
/**/conn3.getAutoCommit();
2020-06-17 21:40:17 database: connecting session #7 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:40:17 jdbc[7]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:40:17 jdbc[7]: 
/**/Connection conn4 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 21:40:17 jdbc[7]: 
/**/conn4.isReadOnly();
2020-06-17 21:40:17 jdbc[7]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 21:40:17 jdbc[7]: 
/**/conn4.getAutoCommit();
2020-06-17 21:40:17 database: connecting session #8 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:40:17 jdbc[8]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:40:17 jdbc[8]: 
/**/Connection conn5 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 21:40:17 jdbc[8]: 
/**/conn5.isReadOnly();
2020-06-17 21:40:17 jdbc[8]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 21:40:17 jdbc[8]: 
/**/conn5.getAutoCommit();
2020-06-17 21:40:17 database: connecting session #9 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:40:17 jdbc[9]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:40:17 jdbc[9]: 
/**/Connection conn6 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 21:40:17 jdbc[9]: 
/**/conn6.isReadOnly();
2020-06-17 21:40:17 jdbc[9]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 21:40:17 jdbc[9]: 
/**/conn6.getAutoCommit();
2020-06-17 21:40:17 database: connecting session #10 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:40:17 jdbc[10]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:40:17 jdbc[10]: 
/**/Connection conn7 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 21:40:17 jdbc[10]: 
/**/conn7.isReadOnly();
2020-06-17 21:40:17 jdbc[10]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 21:40:17 jdbc[10]: 
/**/conn7.getAutoCommit();
2020-06-17 21:40:17 database: connecting session #11 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:40:17 jdbc[11]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:40:17 jdbc[11]: 
/**/Connection conn8 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 21:40:17 jdbc[11]: 
/**/conn8.isReadOnly();
2020-06-17 21:40:17 jdbc[11]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 21:40:17 jdbc[11]: 
/**/conn8.getAutoCommit();
2020-06-17 21:40:17 database: connecting session #12 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:40:17 jdbc[12]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:40:17 jdbc[12]: 
/**/Connection conn9 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 21:40:17 jdbc[12]: 
/**/conn9.isReadOnly();
2020-06-17 21:40:17 jdbc[12]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 21:40:17 jdbc[12]: 
/**/conn9.getAutoCommit();
2020-06-17 21:40:17 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-17 21:40:17 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 21:40:17 jdbc[3]: 
/**/DatabaseMetaData dbMeta1 = conn0.getMetaData();
2020-06-17 21:40:17 jdbc[3]: 
/**/dbMeta1.supportsCatalogsInTableDefinitions();
2020-06-17 21:40:17 jdbc[3]: 
/**/dbMeta1.supportsSchemasInTableDefinitions();
2020-06-17 21:40:17 jdbc[3]: 
/**/dbMeta1.storesLowerCaseIdentifiers();
2020-06-17 21:40:17 jdbc[3]: 
/**/PreparedStatement prep0 = conn0.prepareStatement("SELECT NAME, VALUE FROM INFORMATION_SCHEMA.SETTINGS WHERE NAME IN (?, ?, ?, ?)");
2020-06-17 21:40:17 jdbc[3]: Plan       : calculate cost for plan [SETTINGS:-7:org.h2.table.MetaTable@22a59fc0]
2020-06-17 21:40:17 jdbc[3]: Plan       :   for table filter SETTINGS:-7:org.h2.table.MetaTable@22a59fc0
2020-06-17 21:40:17 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:40:17 jdbc[3]: Plan       :   best plan item cost 9,900 index meta
2020-06-17 21:40:17 jdbc[3]: Plan       : plan cost 9,901
2020-06-17 21:40:17 jdbc[3]: 
/**/prep0.setString(1, "MODE");
2020-06-17 21:40:17 jdbc[3]: 
/**/prep0.setString(2, "DATABASE_TO_UPPER");
2020-06-17 21:40:17 jdbc[3]: 
/**/prep0.setString(3, "DATABASE_TO_LOWER");
2020-06-17 21:40:17 jdbc[3]: 
/**/prep0.setString(4, "CASE_INSENSITIVE_IDENTIFIERS");
2020-06-17 21:40:17 jdbc[3]: 
/**/ResultSet rs0 = prep0.executeQuery();
2020-06-17 21:40:17 jdbc[3]: 
/*SQL l:78 #:4 t:3*/SELECT NAME, VALUE FROM INFORMATION_SCHEMA.SETTINGS WHERE NAME IN (?, ?, ?, ?) {1: 'MODE', 2: 'DATABASE_TO_UPPER', 3: 'DATABASE_TO_LOWER', 4: 'CASE_INSENSITIVE_IDENTIFIERS'};
2020-06-17 21:40:17 jdbc[3]: 
/**/rs0.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs0.getString(2);
2020-06-17 21:40:17 jdbc[3]: 
/**/rs0.getString(1);
2020-06-17 21:40:17 jdbc[3]: 
/**/rs0.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs0.getString(2);
2020-06-17 21:40:17 jdbc[3]: 
/**/rs0.getString(1);
2020-06-17 21:40:17 jdbc[3]: 
/**/rs0.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs0.getString(2);
2020-06-17 21:40:17 jdbc[3]: 
/**/rs0.getString(1);
2020-06-17 21:40:17 jdbc[3]: 
/**/rs0.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs0.getString(2);
2020-06-17 21:40:17 jdbc[3]: 
/**/rs0.getString(1);
2020-06-17 21:40:17 jdbc[3]: 
/**/rs0.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/prep0.close();
2020-06-17 21:40:17 jdbc[3]: 
/**/dbMeta1.storesUpperCaseIdentifiers();
2020-06-17 21:40:17 jdbc[3]: 
/**/dbMeta1.storesMixedCaseIdentifiers();
2020-06-17 21:40:17 jdbc[3]: 
/**/dbMeta1.storesUpperCaseIdentifiers();
2020-06-17 21:40:17 jdbc[3]: 
/**/dbMeta1.storesLowerCaseQuotedIdentifiers();
2020-06-17 21:40:17 jdbc[3]: 
/**/dbMeta1.storesUpperCaseQuotedIdentifiers();
2020-06-17 21:40:17 jdbc[3]: 
/**/dbMeta1.storesMixedCaseQuotedIdentifiers();
2020-06-17 21:40:17 jdbc[3]: 
/**/dbMeta1.getSQLKeywords();
2020-06-17 21:40:17 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:40:17 jdbc[3]: 
/*SQL #:1*/CALL DATABASE();
2020-06-17 21:40:17 jdbc[3]: 
/**/dbMeta1.supportsNamedParameters();
2020-06-17 21:40:17 jdbc[3]: 
/**/dbMeta1.supportsResultSetType(1004);
2020-06-17 21:40:17 jdbc[3]: 
/**/dbMeta1.supportsGetGeneratedKeys();
2020-06-17 21:40:17 jdbc[3]: 
/**/dbMeta1.supportsBatchUpdates();
2020-06-17 21:40:17 jdbc[3]: 
/**/dbMeta1.dataDefinitionIgnoredInTransactions();
2020-06-17 21:40:17 jdbc[3]: 
/**/dbMeta1.dataDefinitionCausesTransactionCommit();
2020-06-17 21:40:17 jdbc[3]: 
/**/dbMeta1.getSQLKeywords();
2020-06-17 21:40:17 jdbc[3]: 
/**/dbMeta1.getSQLStateType();
2020-06-17 21:40:17 jdbc[3]: 
/**/dbMeta1.locatorsUpdateCopy();
2020-06-17 21:40:17 jdbc[3]: 
/**/dbMeta1.getTypeInfo();
2020-06-17 21:40:17 jdbc[3]: 
/**/PreparedStatement prep1 = conn0.prepareStatement("SELECT TYPE_NAME, DATA_TYPE, PRECISION, PREFIX LITERAL_PREFIX, SUFFIX LITERAL_SUFFIX, PARAMS CREATE_PARAMS, NULLABLE, CASE_SENSITIVE, SEARCHABLE, FALSE UNSIGNED_ATTRIBUTE, FALSE FIXED_PREC_SCALE, AUTO_INCREMENT, TYPE_NAME LOCAL_TYPE_NAME, MINIMUM_SCALE, MAXIMUM_SCALE, DATA_TYPE SQL_DATA_TYPE, ZERO() SQL_DATETIME_SUB, RADIX NUM_PREC_RADIX FROM INFORMATION_SCHEMA.TYPE_INFO ORDER BY DATA_TYPE, POS");
2020-06-17 21:40:17 jdbc[3]: Plan       : calculate cost for plan [TYPE_INFO:-5:org.h2.table.MetaTable@2ee99c95]
2020-06-17 21:40:17 jdbc[3]: Plan       :   for table filter TYPE_INFO:-5:org.h2.table.MetaTable@2ee99c95
2020-06-17 21:40:17 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:40:17 jdbc[3]: Plan       :   best plan item cost 10,000 index meta
2020-06-17 21:40:17 jdbc[3]: Plan       : plan cost 10,001
2020-06-17 21:40:17 jdbc[3]: 
/**/ResultSet rs1 = prep1.executeQuery();
2020-06-17 21:40:17 jdbc[3]: 
/*SQL #:46 t:1*/SELECT TYPE_NAME, DATA_TYPE, PRECISION, PREFIX LITERAL_PREFIX, SUFFIX LITERAL_SUFFIX, PARAMS CREATE_PARAMS, NULLABLE, CASE_SENSITIVE, SEARCHABLE, FALSE UNSIGNED_ATTRIBUTE, FALSE FIXED_PREC_SCALE, AUTO_INCREMENT, TYPE_NAME LOCAL_TYPE_NAME, MINIMUM_SCALE, MAXIMUM_SCALE, DATA_TYPE SQL_DATA_TYPE, ZERO() SQL_DATETIME_SUB, RADIX NUM_PREC_RADIX FROM INFORMATION_SCHEMA.TYPE_INFO ORDER BY DATA_TYPE, POS;
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getStatement();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs1.close();
2020-06-17 21:40:17 jdbc[3]: 
/**/prep1.close();
2020-06-17 21:40:17 jdbc[3]: 
/**/conn0.getSchema();
2020-06-17 21:40:17 jdbc[3]: 
/**/conn0.getSchema();
2020-06-17 21:40:17 jdbc[3]: 
/**/dbMeta1.supportsNamedParameters();
2020-06-17 21:40:17 jdbc[3]: 
/**/Statement stat0 = conn0.createStatement();
2020-06-17 21:40:17 jdbc[3]: 
/**/ResultSet rs2 = stat0.executeQuery("select * from INFORMATION_SCHEMA.SEQUENCES");
2020-06-17 21:40:17 jdbc[3]: Plan       : calculate cost for plan [SEQUENCES:-9:org.h2.table.MetaTable@8e7174d]
2020-06-17 21:40:17 jdbc[3]: Plan       :   for table filter SEQUENCES:-9:org.h2.table.MetaTable@8e7174d
2020-06-17 21:40:17 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:40:17 jdbc[3]: Plan       :   best plan item cost 10,000 index meta
2020-06-17 21:40:17 jdbc[3]: Plan       : plan cost 10,001
2020-06-17 21:40:17 jdbc[3]: 
/*SQL */select * from INFORMATION_SCHEMA.SEQUENCES;
2020-06-17 21:40:17 jdbc[3]: 
/**/rs2.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs2.close();
2020-06-17 21:40:17 jdbc[3]: 
/**/stat0.close();
2020-06-17 21:40:17 jdbc[3]: 
/**/dbMeta1.getCatalogSeparator();
2020-06-17 21:40:17 jdbc[3]: 
/**/dbMeta1.isCatalogAtStart();
2020-06-17 21:40:17 jdbc[3]: 
/**/dbMeta1.getTypeInfo();
2020-06-17 21:40:17 jdbc[3]: 
/**/PreparedStatement prep2 = conn0.prepareStatement("SELECT TYPE_NAME, DATA_TYPE, PRECISION, PREFIX LITERAL_PREFIX, SUFFIX LITERAL_SUFFIX, PARAMS CREATE_PARAMS, NULLABLE, CASE_SENSITIVE, SEARCHABLE, FALSE UNSIGNED_ATTRIBUTE, FALSE FIXED_PREC_SCALE, AUTO_INCREMENT, TYPE_NAME LOCAL_TYPE_NAME, MINIMUM_SCALE, MAXIMUM_SCALE, DATA_TYPE SQL_DATA_TYPE, ZERO() SQL_DATETIME_SUB, RADIX NUM_PREC_RADIX FROM INFORMATION_SCHEMA.TYPE_INFO ORDER BY DATA_TYPE, POS");
2020-06-17 21:40:17 jdbc[3]: 
/**/ResultSet rs3 = prep2.executeQuery();
2020-06-17 21:40:17 jdbc[3]: 
/*SQL #:46*/SELECT TYPE_NAME, DATA_TYPE, PRECISION, PREFIX LITERAL_PREFIX, SUFFIX LITERAL_SUFFIX, PARAMS CREATE_PARAMS, NULLABLE, CASE_SENSITIVE, SEARCHABLE, FALSE UNSIGNED_ATTRIBUTE, FALSE FIXED_PREC_SCALE, AUTO_INCREMENT, TYPE_NAME LOCAL_TYPE_NAME, MINIMUM_SCALE, MAXIMUM_SCALE, DATA_TYPE SQL_DATA_TYPE, ZERO() SQL_DATETIME_SUB, RADIX NUM_PREC_RADIX FROM INFORMATION_SCHEMA.TYPE_INFO ORDER BY DATA_TYPE, POS;
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getStatement();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:40:17 jdbc[3]: 
/**/rs3.close();
2020-06-17 21:40:17 jdbc[3]: 
/**/prep2.close();
2020-06-17 21:40:17 jdbc[3]: 
/**/DatabaseMetaData dbMeta2 = conn0.getMetaData();
2020-06-17 21:40:17 jdbc[3]: 
/**/dbMeta2.getJDBCMajorVersion();
2020-06-17 21:40:17 jdbc[3]: 
/**/Clob clob0 = conn0.createClob();
2020-06-17 21:40:17 jdbc[3]: 
/**/clob0.free();
2020-06-17 21:40:17 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:40:17 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:40:17 jdbc[3]: 
/**/Statement stat1 = conn0.createStatement();
2020-06-17 21:40:17 jdbc[3]: 
/**/stat1.execute("drop table if exists customer_tbl CASCADE ");
2020-06-17 21:40:17 jdbc[3]: 
/*SQL */drop table if exists customer_tbl CASCADE;
2020-06-17 21:40:17 jdbc[3]: 
/**/stat1.getWarnings();
2020-06-17 21:40:17 jdbc[3]: 
/**/stat1.execute("drop table if exists log_tbl CASCADE ");
2020-06-17 21:40:17 jdbc[3]: 
/*SQL */drop table if exists log_tbl CASCADE;
2020-06-17 21:40:17 jdbc[3]: 
/**/stat1.getWarnings();
2020-06-17 21:40:17 jdbc[3]: 
/**/stat1.close();
2020-06-17 21:40:17 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:40:17 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:40:17 jdbc[3]: 
/**/Statement stat2 = conn0.createStatement();
2020-06-17 21:40:17 jdbc[3]: 
/**/stat2.execute("create table customer_tbl (id bigint generated by default as identity, customer_email varchar(255), customer_firstname varchar(255), customer_lastname varchar(255), primary key (id))");
2020-06-17 21:40:17 lock: 3 exclusive write lock requesting for SYS 
2020-06-17 21:40:17 lock: 3 exclusive write lock added for SYS 
2020-06-17 21:40:17 lock: 3 exclusive write lock unlock SYS 
2020-06-17 21:40:17 lock: 3 exclusive write lock requesting for SYS 
2020-06-17 21:40:17 lock: 3 exclusive write lock added for SYS 
2020-06-17 21:40:17 lock: 3 exclusive write lock requesting for CUSTOMER_TBL 
2020-06-17 21:40:17 lock: 3 exclusive write lock added for CUSTOMER_TBL 
2020-06-17 21:40:17 jdbc[3]: 
/*SQL t:4*/create table customer_tbl (id bigint generated by default as identity, customer_email varchar(255), customer_firstname varchar(255), customer_lastname varchar(255), primary key (id));
2020-06-17 21:40:17 lock: 3 exclusive write lock unlock SYS 
2020-06-17 21:40:17 lock: 3 exclusive write lock unlock CUSTOMER_TBL 
2020-06-17 21:40:17 jdbc[3]: 
/**/stat2.getWarnings();
2020-06-17 21:40:17 jdbc[3]: 
/**/stat2.execute("create table log_tbl (id bigint generated by default as identity, application_name varchar(255), level varchar(255), parent_span_id varchar(255), request varchar(255), response varchar(255), span_id varchar(255), time varchar(255), trace_id varchar(255), primary key (id))");
2020-06-17 21:40:17 lock: 3 exclusive write lock requesting for SYS 
2020-06-17 21:40:17 lock: 3 exclusive write lock added for SYS 
2020-06-17 21:40:17 lock: 3 exclusive write lock unlock SYS 
2020-06-17 21:40:17 lock: 3 exclusive write lock requesting for SYS 
2020-06-17 21:40:17 lock: 3 exclusive write lock added for SYS 
2020-06-17 21:40:17 lock: 3 exclusive write lock requesting for LOG_TBL 
2020-06-17 21:40:17 lock: 3 exclusive write lock added for LOG_TBL 
2020-06-17 21:40:17 jdbc[3]: 
/*SQL t:1*/create table log_tbl (id bigint generated by default as identity, application_name varchar(255), level varchar(255), parent_span_id varchar(255), request varchar(255), response varchar(255), span_id varchar(255), time varchar(255), trace_id varchar(255), primary key (id));
2020-06-17 21:40:17 lock: 3 exclusive write lock unlock SYS 
2020-06-17 21:40:17 lock: 3 exclusive write lock unlock LOG_TBL 
2020-06-17 21:40:17 jdbc[3]: 
/**/stat2.getWarnings();
2020-06-17 21:40:17 jdbc[3]: 
/**/stat2.close();
2020-06-17 21:40:17 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:40:18 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:40:18 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:40:18 jdbc[3]: 
/**/PreparedStatement prep3 = conn0.prepareStatement("select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=?");
2020-06-17 21:40:18 jdbc[3]: Plan       : calculate cost for plan [CUSTOMER0_]
2020-06-17 21:40:18 jdbc[3]: Plan       :   for table filter CUSTOMER0_
2020-06-17 21:40:18 jdbc[3]: Table      :     potential plan item cost 10,200 index PUBLIC.CUSTOMER_TBL.tableScan
2020-06-17 21:40:18 jdbc[3]: Table      :     potential plan item cost 230 index PUBLIC.PRIMARY_KEY_B
2020-06-17 21:40:18 jdbc[3]: Plan       :   best plan item cost 227.7 index PUBLIC.PRIMARY_KEY_B
2020-06-17 21:40:18 jdbc[3]: Plan       : plan cost 228.7
2020-06-17 21:40:18 jdbc[3]: 
/**/prep3.setLong(1, 1L);
2020-06-17 21:40:18 jdbc[3]: 
/**/ResultSet rs8 = prep3.executeQuery();
2020-06-17 21:40:18 jdbc[3]: 
/*SQL l:225*/select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=? {1: 1};
2020-06-17 21:40:18 jdbc[3]: 
/**/rs8.next();
2020-06-17 21:40:18 jdbc[3]: 
/**/rs8.close();
2020-06-17 21:40:18 jdbc[3]: 
/**/prep3.getMaxRows();
2020-06-17 21:40:18 jdbc[3]: 
/**/prep3.getQueryTimeout();
2020-06-17 21:40:18 jdbc[3]: Plan       : calculate cost for plan [SETTINGS:-7:org.h2.table.MetaTable@22a59fc0]
2020-06-17 21:40:18 jdbc[3]: Plan       :   for table filter SETTINGS:-7:org.h2.table.MetaTable@22a59fc0
2020-06-17 21:40:18 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:40:18 jdbc[3]: Plan       :   best plan item cost 9,900 index meta
2020-06-17 21:40:18 jdbc[3]: Plan       : plan cost 9,901
2020-06-17 21:40:18 jdbc[3]: 
/*SQL l:58 #:1*/SELECT VALUE FROM INFORMATION_SCHEMA.SETTINGS WHERE NAME=? {1: 'QUERY_TIMEOUT'};
2020-06-17 21:40:18 jdbc[3]: 
/**/prep3.close();
2020-06-17 21:40:18 jdbc[3]: 
/**/PreparedStatement prep4 = conn0.prepareStatement("insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?)", 1);;
2020-06-17 21:40:18 jdbc[3]: 
/**/prep4.setString(1, "ram@gmail.com");
2020-06-17 21:40:18 jdbc[3]: 
/**/prep4.setString(2, "Ram");
2020-06-17 21:40:18 jdbc[3]: 
/**/prep4.setString(3, "Thapa");
2020-06-17 21:40:18 jdbc[3]: 
/**/prep4.executeUpdate();
2020-06-17 21:40:18 lock: 1 exclusive write lock requesting for SYS 
2020-06-17 21:40:18 lock: 1 exclusive write lock added for SYS 
2020-06-17 21:40:18 lock: 1 exclusive write lock unlock SYS 
2020-06-17 21:40:18 lock: 3 shared read lock requesting for CUSTOMER_TBL 
2020-06-17 21:40:18 lock: 3 shared read lock ok CUSTOMER_TBL 
2020-06-17 21:40:18 jdbc[3]: 
/*SQL l:107 #:1 t:1*/insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?) {1: 'ram@gmail.com', 2: 'Ram', 3: 'Thapa'};
2020-06-17 21:40:18 jdbc[3]: 
/**/ResultSet rs9 = prep4.getGeneratedKeys();
2020-06-17 21:40:18 jdbc[3]: 
/**/rs9.next();
2020-06-17 21:40:18 jdbc[3]: 
/**/ResultSetMetaData rsMeta0 = rs9.getMetaData();
2020-06-17 21:40:18 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:40:18 jdbc[3]: 
/**/rsMeta0.getColumnCount();
2020-06-17 21:40:18 jdbc[3]: 
/**/rs9.getLong(1);
2020-06-17 21:40:18 jdbc[3]: 
/**/rs9.close();
2020-06-17 21:40:18 jdbc[3]: 
/**/prep4.getMaxRows();
2020-06-17 21:40:18 jdbc[3]: 
/**/prep4.getQueryTimeout();
2020-06-17 21:40:18 jdbc[3]: 
/**/prep4.close();
2020-06-17 21:40:18 jdbc[3]: 
/**/PreparedStatement prep5 = conn0.prepareStatement("select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=?");
2020-06-17 21:40:18 jdbc[3]: 
/**/prep5.setLong(1, 2L);
2020-06-17 21:40:18 jdbc[3]: 
/**/ResultSet rs10 = prep5.executeQuery();
2020-06-17 21:40:18 jdbc[3]: 
/*SQL l:225*/select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=? {1: 2};
2020-06-17 21:40:18 jdbc[3]: 
/**/rs10.next();
2020-06-17 21:40:18 jdbc[3]: 
/**/rs10.close();
2020-06-17 21:40:18 jdbc[3]: 
/**/prep5.getMaxRows();
2020-06-17 21:40:18 jdbc[3]: 
/**/prep5.getQueryTimeout();
2020-06-17 21:40:18 jdbc[3]: 
/**/prep5.close();
2020-06-17 21:40:18 jdbc[3]: 
/**/PreparedStatement prep6 = conn0.prepareStatement("insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?)", 1);;
2020-06-17 21:40:18 jdbc[3]: 
/**/prep6.setString(1, "hari@gmail.com");
2020-06-17 21:40:18 jdbc[3]: 
/**/prep6.setString(2, "Hari");
2020-06-17 21:40:18 jdbc[3]: 
/**/prep6.setString(3, "Neupane");
2020-06-17 21:40:18 jdbc[3]: 
/**/prep6.executeUpdate();
2020-06-17 21:40:18 jdbc[3]: 
/*SQL l:107 #:1*/insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?) {1: 'hari@gmail.com', 2: 'Hari', 3: 'Neupane'};
2020-06-17 21:40:18 jdbc[3]: 
/**/ResultSet rs11 = prep6.getGeneratedKeys();
2020-06-17 21:40:18 jdbc[3]: 
/**/rs11.next();
2020-06-17 21:40:18 jdbc[3]: 
/**/ResultSetMetaData rsMeta1 = rs11.getMetaData();
2020-06-17 21:40:18 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:40:18 jdbc[3]: 
/**/rsMeta1.getColumnCount();
2020-06-17 21:40:18 jdbc[3]: 
/**/rs11.getLong(1);
2020-06-17 21:40:18 jdbc[3]: 
/**/rs11.close();
2020-06-17 21:40:18 jdbc[3]: 
/**/prep6.getMaxRows();
2020-06-17 21:40:18 jdbc[3]: 
/**/prep6.getQueryTimeout();
2020-06-17 21:40:18 jdbc[3]: 
/**/prep6.close();
2020-06-17 21:40:18 jdbc[3]: 
/**/PreparedStatement prep7 = conn0.prepareStatement("select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=?");
2020-06-17 21:40:18 jdbc[3]: 
/**/prep7.setLong(1, 3L);
2020-06-17 21:40:18 jdbc[3]: 
/**/ResultSet rs12 = prep7.executeQuery();
2020-06-17 21:40:18 jdbc[3]: 
/*SQL l:225*/select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=? {1: 3};
2020-06-17 21:40:18 jdbc[3]: 
/**/rs12.next();
2020-06-17 21:40:18 jdbc[3]: 
/**/rs12.close();
2020-06-17 21:40:18 jdbc[3]: 
/**/prep7.getMaxRows();
2020-06-17 21:40:18 jdbc[3]: 
/**/prep7.getQueryTimeout();
2020-06-17 21:40:18 jdbc[3]: 
/**/prep7.close();
2020-06-17 21:40:18 jdbc[3]: 
/**/PreparedStatement prep8 = conn0.prepareStatement("insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?)", 1);;
2020-06-17 21:40:18 jdbc[3]: 
/**/prep8.setString(1, "ramila@gmail.com");
2020-06-17 21:40:18 jdbc[3]: 
/**/prep8.setString(2, "Ramila");
2020-06-17 21:40:18 jdbc[3]: 
/**/prep8.setString(3, "Karki");
2020-06-17 21:40:18 jdbc[3]: 
/**/prep8.executeUpdate();
2020-06-17 21:40:18 jdbc[3]: 
/*SQL l:107 #:1*/insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?) {1: 'ramila@gmail.com', 2: 'Ramila', 3: 'Karki'};
2020-06-17 21:40:18 jdbc[3]: 
/**/ResultSet rs13 = prep8.getGeneratedKeys();
2020-06-17 21:40:18 jdbc[3]: 
/**/rs13.next();
2020-06-17 21:40:18 jdbc[3]: 
/**/ResultSetMetaData rsMeta2 = rs13.getMetaData();
2020-06-17 21:40:18 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:40:18 jdbc[3]: 
/**/rsMeta2.getColumnCount();
2020-06-17 21:40:18 jdbc[3]: 
/**/rs13.getLong(1);
2020-06-17 21:40:18 jdbc[3]: 
/**/rs13.close();
2020-06-17 21:40:18 jdbc[3]: 
/**/prep8.getMaxRows();
2020-06-17 21:40:18 jdbc[3]: 
/**/prep8.getQueryTimeout();
2020-06-17 21:40:18 jdbc[3]: 
/**/prep8.close();
2020-06-17 21:40:18 jdbc[3]: 
/**/PreparedStatement prep9 = conn0.prepareStatement("select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=?");
2020-06-17 21:40:18 jdbc[3]: 
/**/prep9.setLong(1, 4L);
2020-06-17 21:40:18 jdbc[3]: 
/**/ResultSet rs14 = prep9.executeQuery();
2020-06-17 21:40:18 jdbc[3]: 
/*SQL l:225*/select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=? {1: 4};
2020-06-17 21:40:18 jdbc[3]: 
/**/rs14.next();
2020-06-17 21:40:18 jdbc[3]: 
/**/rs14.close();
2020-06-17 21:40:18 jdbc[3]: 
/**/prep9.getMaxRows();
2020-06-17 21:40:18 jdbc[3]: 
/**/prep9.getQueryTimeout();
2020-06-17 21:40:18 jdbc[3]: 
/**/prep9.close();
2020-06-17 21:40:18 jdbc[3]: 
/**/PreparedStatement prep10 = conn0.prepareStatement("insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?)", 1);;
2020-06-17 21:40:18 jdbc[3]: 
/**/prep10.setString(1, "david@gmail.com");
2020-06-17 21:40:18 jdbc[3]: 
/**/prep10.setString(2, "David");
2020-06-17 21:40:18 jdbc[3]: 
/**/prep10.setString(3, "Yonge");
2020-06-17 21:40:18 jdbc[3]: 
/**/prep10.executeUpdate();
2020-06-17 21:40:18 jdbc[3]: 
/*SQL l:107 #:1*/insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?) {1: 'david@gmail.com', 2: 'David', 3: 'Yonge'};
2020-06-17 21:40:18 jdbc[3]: 
/**/ResultSet rs15 = prep10.getGeneratedKeys();
2020-06-17 21:40:18 jdbc[3]: 
/**/rs15.next();
2020-06-17 21:40:18 jdbc[3]: 
/**/ResultSetMetaData rsMeta3 = rs15.getMetaData();
2020-06-17 21:40:18 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:40:18 jdbc[3]: 
/**/rsMeta3.getColumnCount();
2020-06-17 21:40:18 jdbc[3]: 
/**/rs15.getLong(1);
2020-06-17 21:40:18 jdbc[3]: 
/**/rs15.close();
2020-06-17 21:40:18 jdbc[3]: 
/**/prep10.getMaxRows();
2020-06-17 21:40:18 jdbc[3]: 
/**/prep10.getQueryTimeout();
2020-06-17 21:40:18 jdbc[3]: 
/**/prep10.close();
2020-06-17 21:40:18 jdbc[3]: 
/**/PreparedStatement prep11 = conn0.prepareStatement("select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=?");
2020-06-17 21:40:18 jdbc[3]: 
/**/prep11.setLong(1, 5L);
2020-06-17 21:40:18 jdbc[3]: 
/**/ResultSet rs16 = prep11.executeQuery();
2020-06-17 21:40:18 jdbc[3]: 
/*SQL l:225*/select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=? {1: 5};
2020-06-17 21:40:18 jdbc[3]: 
/**/rs16.next();
2020-06-17 21:40:18 jdbc[3]: 
/**/rs16.close();
2020-06-17 21:40:18 jdbc[3]: 
/**/prep11.getMaxRows();
2020-06-17 21:40:18 jdbc[3]: 
/**/prep11.getQueryTimeout();
2020-06-17 21:40:18 jdbc[3]: 
/**/prep11.close();
2020-06-17 21:40:18 jdbc[3]: 
/**/PreparedStatement prep12 = conn0.prepareStatement("insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?)", 1);;
2020-06-17 21:40:18 jdbc[3]: 
/**/prep12.setString(1, "peter@gmail.com");
2020-06-17 21:40:18 jdbc[3]: 
/**/prep12.setString(2, "Peter");
2020-06-17 21:40:18 jdbc[3]: 
/**/prep12.setString(3, "Parker");
2020-06-17 21:40:18 jdbc[3]: 
/**/prep12.executeUpdate();
2020-06-17 21:40:18 jdbc[3]: 
/*SQL l:107 #:1*/insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?) {1: 'peter@gmail.com', 2: 'Peter', 3: 'Parker'};
2020-06-17 21:40:18 jdbc[3]: 
/**/ResultSet rs17 = prep12.getGeneratedKeys();
2020-06-17 21:40:18 jdbc[3]: 
/**/rs17.next();
2020-06-17 21:40:18 jdbc[3]: 
/**/ResultSetMetaData rsMeta4 = rs17.getMetaData();
2020-06-17 21:40:18 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:40:18 jdbc[3]: 
/**/rsMeta4.getColumnCount();
2020-06-17 21:40:18 jdbc[3]: 
/**/rs17.getLong(1);
2020-06-17 21:40:18 jdbc[3]: 
/**/rs17.close();
2020-06-17 21:40:18 jdbc[3]: 
/**/prep12.getMaxRows();
2020-06-17 21:40:18 jdbc[3]: 
/**/prep12.getQueryTimeout();
2020-06-17 21:40:18 jdbc[3]: 
/**/prep12.close();
2020-06-17 21:40:18 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:40:18 lock: 3 shared read lock unlock CUSTOMER_TBL 
2020-06-17 21:40:18 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:40:18 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:40:18 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:40:18 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:40:18 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:40:18 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:40:18 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:41:41 database: closing /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb from shutdown hook
2020-06-17 21:41:41 lock: 3 shared read lock unlock SYS 
2020-06-17 21:41:41 database: disconnecting session #3
2020-06-17 21:41:41 database: disconnected session #3
2020-06-17 21:41:41 lock: 4 shared read lock unlock SYS 
2020-06-17 21:41:41 database: disconnecting session #4
2020-06-17 21:41:41 database: disconnected session #4
2020-06-17 21:41:41 lock: 5 shared read lock unlock SYS 
2020-06-17 21:41:41 database: disconnecting session #5
2020-06-17 21:41:41 database: disconnected session #5
2020-06-17 21:41:41 lock: 6 shared read lock unlock SYS 
2020-06-17 21:41:41 database: disconnecting session #6
2020-06-17 21:41:41 database: disconnected session #6
2020-06-17 21:41:41 lock: 7 shared read lock unlock SYS 
2020-06-17 21:41:41 database: disconnecting session #7
2020-06-17 21:41:41 database: disconnected session #7
2020-06-17 21:41:41 lock: 8 shared read lock unlock SYS 
2020-06-17 21:41:41 database: disconnecting session #8
2020-06-17 21:41:41 database: disconnected session #8
2020-06-17 21:41:41 lock: 9 shared read lock unlock SYS 
2020-06-17 21:41:41 database: disconnecting session #9
2020-06-17 21:41:41 database: disconnected session #9
2020-06-17 21:41:41 lock: 10 shared read lock unlock SYS 
2020-06-17 21:41:41 database: disconnecting session #10
2020-06-17 21:41:41 database: disconnected session #10
2020-06-17 21:41:41 lock: 11 shared read lock unlock SYS 
2020-06-17 21:41:41 database: disconnecting session #11
2020-06-17 21:41:41 database: disconnected session #11
2020-06-17 21:41:41 lock: 12 shared read lock unlock SYS 
2020-06-17 21:41:41 database: disconnecting session #12
2020-06-17 21:41:41 database: disconnected session #12
2020-06-17 21:41:41 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-17 21:41:41 jdbc[4]: 
/**/conn1.isValid(5);
2020-06-17 21:41:41 jdbc[3]: 
/**/conn0.close();
2020-06-17 21:41:41 jdbc[5]: 
/**/conn2.isValid(5);
2020-06-17 21:41:41 jdbc[6]: 
/**/conn3.isValid(5);
2020-06-17 21:41:41 jdbc[4]: 
/**/conn1.close();
2020-06-17 21:41:41 jdbc[7]: 
/**/conn4.isValid(5);
2020-06-17 21:41:41 jdbc[5]: 
/**/conn2.close();
2020-06-17 21:41:41 jdbc[8]: 
/**/conn5.isValid(5);
2020-06-17 21:41:41 jdbc[6]: 
/**/conn3.close();
2020-06-17 21:41:41 jdbc[9]: 
/**/conn6.isValid(5);
2020-06-17 21:41:41 jdbc[7]: 
/**/conn4.close();
2020-06-17 21:41:41 jdbc[10]: 
/**/conn7.isValid(5);
2020-06-17 21:41:41 jdbc[8]: 
/**/conn5.close();
2020-06-17 21:41:41 jdbc[11]: 
/**/conn8.isValid(5);
2020-06-17 21:41:41 jdbc[9]: 
/**/conn6.close();
2020-06-17 21:41:41 jdbc[12]: 
/**/conn9.isValid(5);
2020-06-17 21:41:41 jdbc[10]: 
/**/conn7.close();
2020-06-17 21:41:41 jdbc[11]: 
/**/conn8.close();
2020-06-17 21:41:41 jdbc[12]: 
/**/conn9.close();
2020-06-17 21:41:41 database: opening /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb (build 200)
2020-06-17 21:41:41 database: flush
org.h2.message.DbException: General error: "java.lang.IllegalStateException: The file is locked: nio:/Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb.mv.db [1.4.200/7]" [50000-200]
	at org.h2.message.DbException.get(DbException.java:194)
	at org.h2.message.DbException.convert(DbException.java:347)
	at org.h2.mvstore.db.MVTableEngine$1.uncaughtException(MVTableEngine.java:93)
	at org.h2.mvstore.MVStore.handleException(MVStore.java:2877)
	at org.h2.mvstore.MVStore.panic(MVStore.java:481)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:402)
	at org.h2.mvstore.MVStore$Builder.open(MVStore.java:3579)
	at org.h2.mvstore.db.MVTableEngine$Store.open(MVTableEngine.java:170)
	at org.h2.mvstore.db.MVTableEngine.init(MVTableEngine.java:103)
	at org.h2.engine.Database.getPageStore(Database.java:2659)
	at org.h2.engine.Database.open(Database.java:675)
	at org.h2.engine.Database.openDatabase(Database.java:307)
	at org.h2.engine.Database.<init>(Database.java:301)
	at org.h2.engine.Engine.openSession(Engine.java:74)
	at org.h2.engine.Engine.openSession(Engine.java:192)
	at org.h2.engine.Engine.createSessionAndValidate(Engine.java:171)
	at org.h2.engine.Engine.createSession(Engine.java:166)
	at org.h2.engine.Engine.createSession(Engine.java:29)
	at org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:340)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:173)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:152)
	at org.h2.Driver.connect(Driver.java:69)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:138)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:358)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:206)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:477)
	at com.zaxxer.hikari.pool.HikariPool.access$100(HikariPool.java:71)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:725)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:711)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:832)
Caused by: org.h2.jdbc.JdbcSQLNonTransientException: General error: "java.lang.IllegalStateException: The file is locked: nio:/Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb.mv.db [1.4.200/7]" [50000-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:505)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	... 33 more
Caused by: java.lang.IllegalStateException: The file is locked: nio:/Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb.mv.db [1.4.200/7]
	at org.h2.mvstore.DataUtils.newIllegalStateException(DataUtils.java:950)
	at org.h2.mvstore.FileStore.open(FileStore.java:166)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:381)
	... 27 more
Caused by: java.nio.channels.OverlappingFileLockException
	at java.base/sun.nio.ch.FileLockTable.checkList(FileLockTable.java:229)
	at java.base/sun.nio.ch.FileLockTable.add(FileLockTable.java:123)
	at java.base/sun.nio.ch.FileChannelImpl.tryLock(FileChannelImpl.java:1286)
	at org.h2.store.fs.FileNio.tryLock(FilePathNio.java:121)
	at java.base/java.nio.channels.FileChannel.tryLock(FileChannel.java:1178)
	at org.h2.mvstore.FileStore.open(FileStore.java:163)
	... 28 more
2020-06-17 21:41:41 database: closing /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:41:41 lock: 1 exclusive write lock requesting for SYS 
2020-06-17 21:41:41 lock: 1 exclusive write lock added for SYS 
2020-06-17 21:41:41 lock: 1 exclusive write lock unlock SYS 
2020-06-17 21:41:41 database: opening /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb (build 200)
2020-06-17 21:41:41 database: flush
org.h2.message.DbException: General error: "java.lang.IllegalStateException: The file is locked: nio:/Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb.mv.db [1.4.200/7]" [50000-200]
	at org.h2.message.DbException.get(DbException.java:194)
	at org.h2.message.DbException.convert(DbException.java:347)
	at org.h2.mvstore.db.MVTableEngine$1.uncaughtException(MVTableEngine.java:93)
	at org.h2.mvstore.MVStore.handleException(MVStore.java:2877)
	at org.h2.mvstore.MVStore.panic(MVStore.java:481)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:402)
	at org.h2.mvstore.MVStore$Builder.open(MVStore.java:3579)
	at org.h2.mvstore.db.MVTableEngine$Store.open(MVTableEngine.java:170)
	at org.h2.mvstore.db.MVTableEngine.init(MVTableEngine.java:103)
	at org.h2.engine.Database.getPageStore(Database.java:2659)
	at org.h2.engine.Database.open(Database.java:675)
	at org.h2.engine.Database.openDatabase(Database.java:307)
	at org.h2.engine.Database.<init>(Database.java:301)
	at org.h2.engine.Engine.openSession(Engine.java:74)
	at org.h2.engine.Engine.openSession(Engine.java:192)
	at org.h2.engine.Engine.createSessionAndValidate(Engine.java:171)
	at org.h2.engine.Engine.createSession(Engine.java:166)
	at org.h2.engine.Engine.createSession(Engine.java:29)
	at org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:340)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:173)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:152)
	at org.h2.Driver.connect(Driver.java:69)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:138)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:358)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:206)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:477)
	at com.zaxxer.hikari.pool.HikariPool.access$100(HikariPool.java:71)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:725)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:711)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:832)
Caused by: org.h2.jdbc.JdbcSQLNonTransientException: General error: "java.lang.IllegalStateException: The file is locked: nio:/Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb.mv.db [1.4.200/7]" [50000-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:505)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	... 33 more
Caused by: java.lang.IllegalStateException: The file is locked: nio:/Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb.mv.db [1.4.200/7]
	at org.h2.mvstore.DataUtils.newIllegalStateException(DataUtils.java:950)
	at org.h2.mvstore.FileStore.open(FileStore.java:166)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:381)
	... 27 more
Caused by: java.nio.channels.OverlappingFileLockException
	at java.base/sun.nio.ch.FileLockTable.checkList(FileLockTable.java:229)
	at java.base/sun.nio.ch.FileLockTable.add(FileLockTable.java:123)
	at java.base/sun.nio.ch.FileChannelImpl.tryLock(FileChannelImpl.java:1286)
	at org.h2.store.fs.FileNio.tryLock(FilePathNio.java:121)
	at java.base/java.nio.channels.FileChannel.tryLock(FileChannel.java:1178)
	at org.h2.mvstore.FileStore.open(FileStore.java:163)
	... 28 more
2020-06-17 21:41:41 lock: 1 shared read lock unlock SYS 
2020-06-17 21:41:41 lock: 2 shared read lock unlock SYS 
2020-06-17 21:41:41 database: closed
2020-06-17 21:41:42 database: opening /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb (build 200)
2020-06-17 21:41:42 lock: 1 exclusive write lock requesting for SYS 
2020-06-17 21:41:42 lock: 1 exclusive write lock added for SYS 
2020-06-17 21:41:42 lock: 1 exclusive write lock unlock SYS 
2020-06-17 21:41:42 lock: 1 exclusive write lock requesting for SYS 
2020-06-17 21:41:42 lock: 1 exclusive write lock added for SYS 
2020-06-17 21:41:42 lock: 1 exclusive write lock unlock SYS 
2020-06-17 21:41:42 lock: 1 exclusive write lock requesting for SYS 
2020-06-17 21:41:42 lock: 1 exclusive write lock added for SYS 
2020-06-17 21:41:42 lock: 1 exclusive write lock unlock SYS 
2020-06-17 21:41:42 lock: 1 exclusive write lock requesting for SYS 
2020-06-17 21:41:42 lock: 1 exclusive write lock added for SYS 
2020-06-17 21:41:42 lock: 1 exclusive write lock unlock SYS 
2020-06-17 21:41:42 lock: 1 exclusive write lock requesting for SYS 
2020-06-17 21:41:42 lock: 1 exclusive write lock added for SYS 
2020-06-17 21:41:42 lock: 1 exclusive write lock unlock SYS 
2020-06-17 21:41:42 lock: 1 exclusive write lock requesting for SYS 
2020-06-17 21:41:42 lock: 1 exclusive write lock added for SYS 
2020-06-17 21:41:42 lock: 1 exclusive write lock unlock SYS 
2020-06-17 21:41:42 lock: 1 exclusive write lock requesting for SYS 
2020-06-17 21:41:42 lock: 1 exclusive write lock added for SYS 
2020-06-17 21:41:42 lock: 1 exclusive write lock unlock SYS 
2020-06-17 21:41:42 lock: 1 exclusive write lock requesting for CUSTOMER_TBL 
2020-06-17 21:41:42 lock: 1 exclusive write lock added for CUSTOMER_TBL 
2020-06-17 21:41:42 lock: 1 exclusive write lock requesting for SYS 
2020-06-17 21:41:42 lock: 1 exclusive write lock added for SYS 
2020-06-17 21:41:42 lock: 1 exclusive write lock unlock CUSTOMER_TBL 
2020-06-17 21:41:42 lock: 1 exclusive write lock unlock SYS 
2020-06-17 21:41:42 lock: 1 exclusive write lock requesting for LOG_TBL 
2020-06-17 21:41:42 lock: 1 exclusive write lock added for LOG_TBL 
2020-06-17 21:41:42 lock: 1 exclusive write lock requesting for SYS 
2020-06-17 21:41:42 lock: 1 exclusive write lock added for SYS 
2020-06-17 21:41:42 lock: 1 exclusive write lock unlock LOG_TBL 
2020-06-17 21:41:42 lock: 1 exclusive write lock unlock SYS 
2020-06-17 21:41:42 lock: 1 exclusive write lock requesting for SYS 
2020-06-17 21:41:42 lock: 1 exclusive write lock added for SYS 
2020-06-17 21:41:42 lock: 1 exclusive write lock requesting for CUSTOMER_TBL 
2020-06-17 21:41:42 lock: 1 exclusive write lock added for CUSTOMER_TBL 
2020-06-17 21:41:42 lock: 1 exclusive write lock unlock SYS 
2020-06-17 21:41:42 lock: 1 exclusive write lock unlock CUSTOMER_TBL 
2020-06-17 21:41:42 lock: 1 exclusive write lock requesting for SYS 
2020-06-17 21:41:42 lock: 1 exclusive write lock added for SYS 
2020-06-17 21:41:42 lock: 1 exclusive write lock requesting for LOG_TBL 
2020-06-17 21:41:42 lock: 1 exclusive write lock added for LOG_TBL 
2020-06-17 21:41:42 lock: 1 exclusive write lock unlock SYS 
2020-06-17 21:41:42 lock: 1 exclusive write lock unlock LOG_TBL 
2020-06-17 21:41:42 database: opened /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:41:42 database: connecting session #3 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:41:42 jdbc[3]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:41:42 jdbc[3]: 
/**/Connection conn10 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 21:41:42 jdbc[3]: 
/**/conn10.isReadOnly();
2020-06-17 21:41:42 jdbc[3]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 21:41:42 jdbc[3]: 
/**/conn10.getAutoCommit();
2020-06-17 21:41:42 jdbc[3]: 
/**/conn10.getAutoCommit();
2020-06-17 21:41:42 jdbc[3]: 
/**/Statement stat3 = conn10.createStatement();
2020-06-17 21:41:42 database: connecting session #4 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:41:42 jdbc[3]: 
/**/stat3.execute("drop table if exists customer_tbl CASCADE ");
2020-06-17 21:41:42 jdbc[4]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:41:42 jdbc[4]: 
/**/Connection conn11 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 21:41:42 jdbc[4]: 
/**/conn11.isReadOnly();
2020-06-17 21:41:42 lock: 3 exclusive write lock requesting for CUSTOMER_TBL 
2020-06-17 21:41:42 jdbc[4]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 21:41:42 lock: 3 exclusive write lock added for CUSTOMER_TBL 
2020-06-17 21:41:42 jdbc[4]: 
/**/conn11.getAutoCommit();
2020-06-17 21:41:42 lock: 3 exclusive write lock requesting for SYS 
2020-06-17 21:41:42 lock: 3 exclusive write lock added for SYS 
2020-06-17 21:41:42 jdbc[3]: 
/*SQL t:2*/drop table if exists customer_tbl CASCADE;
2020-06-17 21:41:42 database: connecting session #5 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:41:42 jdbc[5]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:41:42 lock: 3 exclusive write lock unlock SYS 
2020-06-17 21:41:42 jdbc[5]: 
/**/Connection conn12 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 21:41:42 jdbc[3]: 
/**/stat3.getWarnings();
2020-06-17 21:41:42 jdbc[5]: 
/**/conn12.isReadOnly();
2020-06-17 21:41:42 jdbc[5]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 21:41:42 jdbc[3]: 
/**/stat3.execute("drop table if exists log_tbl CASCADE ");
2020-06-17 21:41:42 jdbc[5]: 
/**/conn12.getAutoCommit();
2020-06-17 21:41:42 lock: 3 exclusive write lock requesting for LOG_TBL 
2020-06-17 21:41:42 lock: 3 exclusive write lock added for LOG_TBL 
2020-06-17 21:41:42 lock: 3 exclusive write lock requesting for SYS 
2020-06-17 21:41:42 database: connecting session #6 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:41:42 lock: 3 exclusive write lock added for SYS 
2020-06-17 21:41:42 jdbc[6]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:41:42 jdbc[6]: 
/**/Connection conn13 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 21:41:42 jdbc[6]: 
/**/conn13.isReadOnly();
2020-06-17 21:41:42 jdbc[6]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 21:41:42 jdbc[6]: 
/**/conn13.getAutoCommit();
2020-06-17 21:41:42 jdbc[3]: 
/*SQL */drop table if exists log_tbl CASCADE;
2020-06-17 21:41:42 database: connecting session #7 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:41:42 lock: 3 exclusive write lock unlock SYS 
2020-06-17 21:41:42 jdbc[7]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:41:42 jdbc[3]: 
/**/stat3.getWarnings();
2020-06-17 21:41:42 jdbc[7]: 
/**/Connection conn14 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 21:41:42 jdbc[7]: 
/**/conn14.isReadOnly();
2020-06-17 21:41:42 jdbc[3]: 
/**/stat3.close();
2020-06-17 21:41:42 jdbc[7]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 21:41:42 jdbc[3]: 
/**/conn10.clearWarnings();
2020-06-17 21:41:42 jdbc[7]: 
/**/conn14.getAutoCommit();
2020-06-17 21:41:42 database: connecting session #8 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:41:42 jdbc[8]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:41:42 jdbc[8]: 
/**/Connection conn15 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 21:41:42 jdbc[8]: 
/**/conn15.isReadOnly();
2020-06-17 21:41:42 jdbc[8]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 21:41:42 jdbc[8]: 
/**/conn15.getAutoCommit();
2020-06-17 21:41:42 database: connecting session #9 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:41:42 jdbc[9]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:41:42 jdbc[9]: 
/**/Connection conn16 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 21:41:42 jdbc[9]: 
/**/conn16.isReadOnly();
2020-06-17 21:41:42 jdbc[9]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 21:41:42 jdbc[9]: 
/**/conn16.getAutoCommit();
2020-06-17 21:41:42 database: connecting session #10 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:41:42 jdbc[10]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:41:42 jdbc[10]: 
/**/Connection conn17 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 21:41:42 jdbc[10]: 
/**/conn17.isReadOnly();
2020-06-17 21:41:42 jdbc[10]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 21:41:42 jdbc[10]: 
/**/conn17.getAutoCommit();
2020-06-17 21:41:42 database: connecting session #11 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:41:42 jdbc[11]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:41:42 jdbc[11]: 
/**/Connection conn18 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 21:41:42 jdbc[11]: 
/**/conn18.isReadOnly();
2020-06-17 21:41:42 jdbc[11]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 21:41:42 jdbc[11]: 
/**/conn18.getAutoCommit();
2020-06-17 21:41:42 jdbc[3]: 
/**/conn10.close();
2020-06-17 21:41:42 lock: 3 shared read lock unlock SYS 
2020-06-17 21:41:42 database: disconnecting session #3
2020-06-17 21:41:42 database: disconnected session #3
2020-06-17 21:41:42 jdbc[4]: 
/**/conn11.close();
2020-06-17 21:41:42 lock: 4 shared read lock unlock SYS 
2020-06-17 21:41:42 database: disconnecting session #4
2020-06-17 21:41:42 database: disconnected session #4
2020-06-17 21:41:42 jdbc[5]: 
/**/conn12.close();
2020-06-17 21:41:42 lock: 5 shared read lock unlock SYS 
2020-06-17 21:41:42 database: disconnecting session #5
2020-06-17 21:41:42 database: disconnected session #5
2020-06-17 21:41:42 jdbc[6]: 
/**/conn13.close();
2020-06-17 21:41:42 lock: 6 shared read lock unlock SYS 
2020-06-17 21:41:42 database: disconnecting session #6
2020-06-17 21:41:42 database: disconnected session #6
2020-06-17 21:41:42 jdbc[7]: 
/**/conn14.close();
2020-06-17 21:41:42 lock: 7 shared read lock unlock SYS 
2020-06-17 21:41:42 database: disconnecting session #7
2020-06-17 21:41:42 database: disconnected session #7
2020-06-17 21:41:42 jdbc[8]: 
/**/conn15.close();
2020-06-17 21:41:42 lock: 8 shared read lock unlock SYS 
2020-06-17 21:41:42 database: disconnecting session #8
2020-06-17 21:41:42 database: disconnected session #8
2020-06-17 21:41:42 jdbc[9]: 
/**/conn16.close();
2020-06-17 21:41:42 lock: 9 shared read lock unlock SYS 
2020-06-17 21:41:42 database: disconnecting session #9
2020-06-17 21:41:42 database: disconnected session #9
2020-06-17 21:41:42 jdbc[10]: 
/**/conn17.close();
2020-06-17 21:41:42 lock: 10 shared read lock unlock SYS 
2020-06-17 21:41:42 database: disconnecting session #10
2020-06-17 21:41:42 database: disconnected session #10
2020-06-17 21:41:42 jdbc[11]: 
/**/conn18.close();
2020-06-17 21:41:42 lock: 11 shared read lock unlock SYS 
2020-06-17 21:41:42 database: disconnecting session #11
2020-06-17 21:41:42 database: closing /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:41:42 lock: 1 shared read lock unlock SYS 
2020-06-17 21:41:42 lock: 2 shared read lock unlock SYS 
2020-06-17 21:41:42 database: closed
2020-06-17 21:41:42 database: disconnected session #11
2020-06-17 21:42:06 database: opening /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb (build 200)
2020-06-17 21:42:06 lock: 1 exclusive write lock requesting for SYS 
2020-06-17 21:42:06 lock: 1 exclusive write lock added for SYS 
2020-06-17 21:42:06 lock: 1 exclusive write lock unlock SYS 
2020-06-17 21:42:06 lock: 1 exclusive write lock requesting for SYS 
2020-06-17 21:42:06 lock: 1 exclusive write lock added for SYS 
2020-06-17 21:42:06 lock: 1 exclusive write lock unlock SYS 
2020-06-17 21:42:06 lock: 1 exclusive write lock requesting for SYS 
2020-06-17 21:42:06 lock: 1 exclusive write lock added for SYS 
2020-06-17 21:42:06 lock: 1 exclusive write lock unlock SYS 
2020-06-17 21:42:06 database: opened /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:42:06 database: connecting session #3 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:42:06 jdbc[3]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:42:06 jdbc[3]: 
/**/Connection conn0 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 21:42:06 jdbc[3]: 
/**/conn0.isReadOnly();
2020-06-17 21:42:06 jdbc[3]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 21:42:06 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:42:06 jdbc[3]: 
/**/conn0.isValid(1);
2020-06-17 21:42:06 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 21:42:06 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 21:42:06 jdbc[3]: 
/**/DatabaseMetaData dbMeta0 = conn0.getMetaData();
2020-06-17 21:42:06 jdbc[3]: 
/**/dbMeta0.getURL();
2020-06-17 21:42:06 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:42:06 database: connecting session #4 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:42:06 jdbc[4]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:42:06 jdbc[4]: 
/**/Connection conn1 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 21:42:06 jdbc[4]: 
/**/conn1.isReadOnly();
2020-06-17 21:42:06 jdbc[4]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 21:42:06 jdbc[4]: 
/**/conn1.getAutoCommit();
2020-06-17 21:42:06 database: connecting session #5 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:42:06 jdbc[5]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:42:06 jdbc[5]: 
/**/Connection conn2 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 21:42:06 jdbc[5]: 
/**/conn2.isReadOnly();
2020-06-17 21:42:06 jdbc[5]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 21:42:06 jdbc[5]: 
/**/conn2.getAutoCommit();
2020-06-17 21:42:06 database: connecting session #6 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:42:06 jdbc[6]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:42:06 jdbc[6]: 
/**/Connection conn3 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 21:42:06 jdbc[6]: 
/**/conn3.isReadOnly();
2020-06-17 21:42:06 jdbc[6]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 21:42:06 jdbc[6]: 
/**/conn3.getAutoCommit();
2020-06-17 21:42:06 database: connecting session #7 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:42:06 jdbc[7]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:42:06 jdbc[7]: 
/**/Connection conn4 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 21:42:06 jdbc[7]: 
/**/conn4.isReadOnly();
2020-06-17 21:42:06 jdbc[7]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 21:42:06 jdbc[7]: 
/**/conn4.getAutoCommit();
2020-06-17 21:42:06 database: connecting session #8 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:42:06 jdbc[8]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:42:06 jdbc[8]: 
/**/Connection conn5 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 21:42:06 jdbc[8]: 
/**/conn5.isReadOnly();
2020-06-17 21:42:06 jdbc[8]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 21:42:06 jdbc[8]: 
/**/conn5.getAutoCommit();
2020-06-17 21:42:06 database: connecting session #9 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:42:06 jdbc[9]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:42:06 jdbc[9]: 
/**/Connection conn6 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 21:42:06 jdbc[9]: 
/**/conn6.isReadOnly();
2020-06-17 21:42:06 jdbc[9]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 21:42:06 jdbc[9]: 
/**/conn6.getAutoCommit();
2020-06-17 21:42:06 database: connecting session #10 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:42:06 jdbc[10]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:42:06 jdbc[10]: 
/**/Connection conn7 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 21:42:06 jdbc[10]: 
/**/conn7.isReadOnly();
2020-06-17 21:42:06 jdbc[10]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 21:42:06 jdbc[10]: 
/**/conn7.getAutoCommit();
2020-06-17 21:42:06 database: connecting session #11 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:42:06 jdbc[11]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:42:06 jdbc[11]: 
/**/Connection conn8 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 21:42:06 jdbc[11]: 
/**/conn8.isReadOnly();
2020-06-17 21:42:06 jdbc[11]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 21:42:06 jdbc[11]: 
/**/conn8.getAutoCommit();
2020-06-17 21:42:06 database: connecting session #12 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:42:06 jdbc[12]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:42:06 jdbc[12]: 
/**/Connection conn9 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 21:42:06 jdbc[12]: 
/**/conn9.isReadOnly();
2020-06-17 21:42:06 jdbc[12]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 21:42:06 jdbc[12]: 
/**/conn9.getAutoCommit();
2020-06-17 21:42:07 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-17 21:42:07 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 21:42:07 jdbc[3]: 
/**/DatabaseMetaData dbMeta1 = conn0.getMetaData();
2020-06-17 21:42:07 jdbc[3]: 
/**/dbMeta1.supportsCatalogsInTableDefinitions();
2020-06-17 21:42:07 jdbc[3]: 
/**/dbMeta1.supportsSchemasInTableDefinitions();
2020-06-17 21:42:07 jdbc[3]: 
/**/dbMeta1.storesLowerCaseIdentifiers();
2020-06-17 21:42:07 jdbc[3]: 
/**/PreparedStatement prep0 = conn0.prepareStatement("SELECT NAME, VALUE FROM INFORMATION_SCHEMA.SETTINGS WHERE NAME IN (?, ?, ?, ?)");
2020-06-17 21:42:07 jdbc[3]: Plan       : calculate cost for plan [SETTINGS:-7:org.h2.table.MetaTable@7c3101a]
2020-06-17 21:42:07 jdbc[3]: Plan       :   for table filter SETTINGS:-7:org.h2.table.MetaTable@7c3101a
2020-06-17 21:42:07 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:42:07 jdbc[3]: Plan       :   best plan item cost 9,900 index meta
2020-06-17 21:42:07 jdbc[3]: Plan       : plan cost 9,901
2020-06-17 21:42:07 jdbc[3]: 
/**/prep0.setString(1, "MODE");
2020-06-17 21:42:07 jdbc[3]: 
/**/prep0.setString(2, "DATABASE_TO_UPPER");
2020-06-17 21:42:07 jdbc[3]: 
/**/prep0.setString(3, "DATABASE_TO_LOWER");
2020-06-17 21:42:07 jdbc[3]: 
/**/prep0.setString(4, "CASE_INSENSITIVE_IDENTIFIERS");
2020-06-17 21:42:07 jdbc[3]: 
/**/ResultSet rs0 = prep0.executeQuery();
2020-06-17 21:42:07 jdbc[3]: 
/*SQL l:78 #:4 t:3*/SELECT NAME, VALUE FROM INFORMATION_SCHEMA.SETTINGS WHERE NAME IN (?, ?, ?, ?) {1: 'MODE', 2: 'DATABASE_TO_UPPER', 3: 'DATABASE_TO_LOWER', 4: 'CASE_INSENSITIVE_IDENTIFIERS'};
2020-06-17 21:42:07 jdbc[3]: 
/**/rs0.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs0.getString(2);
2020-06-17 21:42:07 jdbc[3]: 
/**/rs0.getString(1);
2020-06-17 21:42:07 jdbc[3]: 
/**/rs0.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs0.getString(2);
2020-06-17 21:42:07 jdbc[3]: 
/**/rs0.getString(1);
2020-06-17 21:42:07 jdbc[3]: 
/**/rs0.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs0.getString(2);
2020-06-17 21:42:07 jdbc[3]: 
/**/rs0.getString(1);
2020-06-17 21:42:07 jdbc[3]: 
/**/rs0.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs0.getString(2);
2020-06-17 21:42:07 jdbc[3]: 
/**/rs0.getString(1);
2020-06-17 21:42:07 jdbc[3]: 
/**/rs0.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/prep0.close();
2020-06-17 21:42:07 jdbc[3]: 
/**/dbMeta1.storesUpperCaseIdentifiers();
2020-06-17 21:42:07 jdbc[3]: 
/**/dbMeta1.storesMixedCaseIdentifiers();
2020-06-17 21:42:07 jdbc[3]: 
/**/dbMeta1.storesUpperCaseIdentifiers();
2020-06-17 21:42:07 jdbc[3]: 
/**/dbMeta1.storesLowerCaseQuotedIdentifiers();
2020-06-17 21:42:07 jdbc[3]: 
/**/dbMeta1.storesUpperCaseQuotedIdentifiers();
2020-06-17 21:42:07 jdbc[3]: 
/**/dbMeta1.storesMixedCaseQuotedIdentifiers();
2020-06-17 21:42:07 jdbc[3]: 
/**/dbMeta1.getSQLKeywords();
2020-06-17 21:42:07 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:42:07 jdbc[3]: 
/*SQL #:1*/CALL DATABASE();
2020-06-17 21:42:07 jdbc[3]: 
/**/dbMeta1.supportsNamedParameters();
2020-06-17 21:42:07 jdbc[3]: 
/**/dbMeta1.supportsResultSetType(1004);
2020-06-17 21:42:07 jdbc[3]: 
/**/dbMeta1.supportsGetGeneratedKeys();
2020-06-17 21:42:07 jdbc[3]: 
/**/dbMeta1.supportsBatchUpdates();
2020-06-17 21:42:07 jdbc[3]: 
/**/dbMeta1.dataDefinitionIgnoredInTransactions();
2020-06-17 21:42:07 jdbc[3]: 
/**/dbMeta1.dataDefinitionCausesTransactionCommit();
2020-06-17 21:42:07 jdbc[3]: 
/**/dbMeta1.getSQLKeywords();
2020-06-17 21:42:07 jdbc[3]: 
/**/dbMeta1.getSQLStateType();
2020-06-17 21:42:07 jdbc[3]: 
/**/dbMeta1.locatorsUpdateCopy();
2020-06-17 21:42:07 jdbc[3]: 
/**/dbMeta1.getTypeInfo();
2020-06-17 21:42:07 jdbc[3]: 
/**/PreparedStatement prep1 = conn0.prepareStatement("SELECT TYPE_NAME, DATA_TYPE, PRECISION, PREFIX LITERAL_PREFIX, SUFFIX LITERAL_SUFFIX, PARAMS CREATE_PARAMS, NULLABLE, CASE_SENSITIVE, SEARCHABLE, FALSE UNSIGNED_ATTRIBUTE, FALSE FIXED_PREC_SCALE, AUTO_INCREMENT, TYPE_NAME LOCAL_TYPE_NAME, MINIMUM_SCALE, MAXIMUM_SCALE, DATA_TYPE SQL_DATA_TYPE, ZERO() SQL_DATETIME_SUB, RADIX NUM_PREC_RADIX FROM INFORMATION_SCHEMA.TYPE_INFO ORDER BY DATA_TYPE, POS");
2020-06-17 21:42:07 jdbc[3]: Plan       : calculate cost for plan [TYPE_INFO:-5:org.h2.table.MetaTable@2c83ad6b]
2020-06-17 21:42:07 jdbc[3]: Plan       :   for table filter TYPE_INFO:-5:org.h2.table.MetaTable@2c83ad6b
2020-06-17 21:42:07 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:42:07 jdbc[3]: Plan       :   best plan item cost 10,000 index meta
2020-06-17 21:42:07 jdbc[3]: Plan       : plan cost 10,001
2020-06-17 21:42:07 jdbc[3]: 
/**/ResultSet rs1 = prep1.executeQuery();
2020-06-17 21:42:07 jdbc[3]: 
/*SQL #:46 t:1*/SELECT TYPE_NAME, DATA_TYPE, PRECISION, PREFIX LITERAL_PREFIX, SUFFIX LITERAL_SUFFIX, PARAMS CREATE_PARAMS, NULLABLE, CASE_SENSITIVE, SEARCHABLE, FALSE UNSIGNED_ATTRIBUTE, FALSE FIXED_PREC_SCALE, AUTO_INCREMENT, TYPE_NAME LOCAL_TYPE_NAME, MINIMUM_SCALE, MAXIMUM_SCALE, DATA_TYPE SQL_DATA_TYPE, ZERO() SQL_DATETIME_SUB, RADIX NUM_PREC_RADIX FROM INFORMATION_SCHEMA.TYPE_INFO ORDER BY DATA_TYPE, POS;
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getStatement();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs1.close();
2020-06-17 21:42:07 jdbc[3]: 
/**/prep1.close();
2020-06-17 21:42:07 jdbc[3]: 
/**/conn0.getSchema();
2020-06-17 21:42:07 jdbc[3]: 
/**/conn0.getSchema();
2020-06-17 21:42:07 jdbc[3]: 
/**/dbMeta1.supportsNamedParameters();
2020-06-17 21:42:07 jdbc[3]: 
/**/Statement stat0 = conn0.createStatement();
2020-06-17 21:42:07 jdbc[3]: 
/**/ResultSet rs2 = stat0.executeQuery("select * from INFORMATION_SCHEMA.SEQUENCES");
2020-06-17 21:42:07 jdbc[3]: Plan       : calculate cost for plan [SEQUENCES:-9:org.h2.table.MetaTable@e4e722f]
2020-06-17 21:42:07 jdbc[3]: Plan       :   for table filter SEQUENCES:-9:org.h2.table.MetaTable@e4e722f
2020-06-17 21:42:07 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:42:07 jdbc[3]: Plan       :   best plan item cost 10,000 index meta
2020-06-17 21:42:07 jdbc[3]: Plan       : plan cost 10,001
2020-06-17 21:42:07 jdbc[3]: 
/*SQL */select * from INFORMATION_SCHEMA.SEQUENCES;
2020-06-17 21:42:07 jdbc[3]: 
/**/rs2.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs2.close();
2020-06-17 21:42:07 jdbc[3]: 
/**/stat0.close();
2020-06-17 21:42:07 jdbc[3]: 
/**/dbMeta1.getCatalogSeparator();
2020-06-17 21:42:07 jdbc[3]: 
/**/dbMeta1.isCatalogAtStart();
2020-06-17 21:42:07 jdbc[3]: 
/**/dbMeta1.getTypeInfo();
2020-06-17 21:42:07 jdbc[3]: 
/**/PreparedStatement prep2 = conn0.prepareStatement("SELECT TYPE_NAME, DATA_TYPE, PRECISION, PREFIX LITERAL_PREFIX, SUFFIX LITERAL_SUFFIX, PARAMS CREATE_PARAMS, NULLABLE, CASE_SENSITIVE, SEARCHABLE, FALSE UNSIGNED_ATTRIBUTE, FALSE FIXED_PREC_SCALE, AUTO_INCREMENT, TYPE_NAME LOCAL_TYPE_NAME, MINIMUM_SCALE, MAXIMUM_SCALE, DATA_TYPE SQL_DATA_TYPE, ZERO() SQL_DATETIME_SUB, RADIX NUM_PREC_RADIX FROM INFORMATION_SCHEMA.TYPE_INFO ORDER BY DATA_TYPE, POS");
2020-06-17 21:42:07 jdbc[3]: 
/**/ResultSet rs3 = prep2.executeQuery();
2020-06-17 21:42:07 jdbc[3]: 
/*SQL #:46*/SELECT TYPE_NAME, DATA_TYPE, PRECISION, PREFIX LITERAL_PREFIX, SUFFIX LITERAL_SUFFIX, PARAMS CREATE_PARAMS, NULLABLE, CASE_SENSITIVE, SEARCHABLE, FALSE UNSIGNED_ATTRIBUTE, FALSE FIXED_PREC_SCALE, AUTO_INCREMENT, TYPE_NAME LOCAL_TYPE_NAME, MINIMUM_SCALE, MAXIMUM_SCALE, DATA_TYPE SQL_DATA_TYPE, ZERO() SQL_DATETIME_SUB, RADIX NUM_PREC_RADIX FROM INFORMATION_SCHEMA.TYPE_INFO ORDER BY DATA_TYPE, POS;
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getStatement();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs3.close();
2020-06-17 21:42:07 jdbc[3]: 
/**/prep2.close();
2020-06-17 21:42:07 jdbc[3]: 
/**/DatabaseMetaData dbMeta2 = conn0.getMetaData();
2020-06-17 21:42:07 jdbc[3]: 
/**/dbMeta2.getJDBCMajorVersion();
2020-06-17 21:42:07 jdbc[3]: 
/**/Clob clob0 = conn0.createClob();
2020-06-17 21:42:07 jdbc[3]: 
/**/clob0.free();
2020-06-17 21:42:07 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:42:07 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:42:07 jdbc[3]: 
/**/Statement stat1 = conn0.createStatement();
2020-06-17 21:42:07 jdbc[3]: 
/**/stat1.execute("drop table if exists customer_tbl CASCADE ");
2020-06-17 21:42:07 jdbc[3]: 
/*SQL */drop table if exists customer_tbl CASCADE;
2020-06-17 21:42:07 jdbc[3]: 
/**/stat1.getWarnings();
2020-06-17 21:42:07 jdbc[3]: 
/**/stat1.execute("drop table if exists log_tbl CASCADE ");
2020-06-17 21:42:07 jdbc[3]: 
/*SQL */drop table if exists log_tbl CASCADE;
2020-06-17 21:42:07 jdbc[3]: 
/**/stat1.getWarnings();
2020-06-17 21:42:07 jdbc[3]: 
/**/stat1.close();
2020-06-17 21:42:07 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:42:07 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:42:07 jdbc[3]: 
/**/Statement stat2 = conn0.createStatement();
2020-06-17 21:42:07 jdbc[3]: 
/**/stat2.execute("create table customer_tbl (id bigint generated by default as identity, customer_email varchar(255), customer_firstname varchar(255), customer_lastname varchar(255), primary key (id))");
2020-06-17 21:42:07 lock: 3 exclusive write lock requesting for SYS 
2020-06-17 21:42:07 lock: 3 exclusive write lock added for SYS 
2020-06-17 21:42:07 lock: 3 exclusive write lock unlock SYS 
2020-06-17 21:42:07 lock: 3 exclusive write lock requesting for SYS 
2020-06-17 21:42:07 lock: 3 exclusive write lock added for SYS 
2020-06-17 21:42:07 lock: 3 exclusive write lock requesting for CUSTOMER_TBL 
2020-06-17 21:42:07 lock: 3 exclusive write lock added for CUSTOMER_TBL 
2020-06-17 21:42:07 jdbc[3]: 
/*SQL t:5*/create table customer_tbl (id bigint generated by default as identity, customer_email varchar(255), customer_firstname varchar(255), customer_lastname varchar(255), primary key (id));
2020-06-17 21:42:07 lock: 3 exclusive write lock unlock SYS 
2020-06-17 21:42:07 lock: 3 exclusive write lock unlock CUSTOMER_TBL 
2020-06-17 21:42:07 jdbc[3]: 
/**/stat2.getWarnings();
2020-06-17 21:42:07 jdbc[3]: 
/**/stat2.execute("create table log_tbl (id bigint generated by default as identity, application_name varchar(255), level varchar(255), parent_span_id varchar(255), request varchar(255), response varchar(255), span_id varchar(255), time varchar(255), trace_id varchar(255), primary key (id))");
2020-06-17 21:42:07 lock: 3 exclusive write lock requesting for SYS 
2020-06-17 21:42:07 lock: 3 exclusive write lock added for SYS 
2020-06-17 21:42:07 lock: 3 exclusive write lock unlock SYS 
2020-06-17 21:42:07 lock: 3 exclusive write lock requesting for SYS 
2020-06-17 21:42:07 lock: 3 exclusive write lock added for SYS 
2020-06-17 21:42:07 lock: 3 exclusive write lock requesting for LOG_TBL 
2020-06-17 21:42:07 lock: 3 exclusive write lock added for LOG_TBL 
2020-06-17 21:42:07 jdbc[3]: 
/*SQL t:1*/create table log_tbl (id bigint generated by default as identity, application_name varchar(255), level varchar(255), parent_span_id varchar(255), request varchar(255), response varchar(255), span_id varchar(255), time varchar(255), trace_id varchar(255), primary key (id));
2020-06-17 21:42:07 lock: 3 exclusive write lock unlock SYS 
2020-06-17 21:42:07 lock: 3 exclusive write lock unlock LOG_TBL 
2020-06-17 21:42:07 jdbc[3]: 
/**/stat2.getWarnings();
2020-06-17 21:42:07 jdbc[3]: 
/**/stat2.close();
2020-06-17 21:42:07 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:42:07 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:42:07 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:42:07 jdbc[3]: 
/**/PreparedStatement prep3 = conn0.prepareStatement("select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=?");
2020-06-17 21:42:07 jdbc[3]: Plan       : calculate cost for plan [CUSTOMER0_]
2020-06-17 21:42:07 jdbc[3]: Plan       :   for table filter CUSTOMER0_
2020-06-17 21:42:07 jdbc[3]: Table      :     potential plan item cost 10,200 index PUBLIC.CUSTOMER_TBL.tableScan
2020-06-17 21:42:07 jdbc[3]: Table      :     potential plan item cost 230 index PUBLIC.PRIMARY_KEY_B
2020-06-17 21:42:07 jdbc[3]: Plan       :   best plan item cost 227.7 index PUBLIC.PRIMARY_KEY_B
2020-06-17 21:42:07 jdbc[3]: Plan       : plan cost 228.7
2020-06-17 21:42:07 jdbc[3]: 
/**/prep3.setLong(1, 1L);
2020-06-17 21:42:07 jdbc[3]: 
/**/ResultSet rs8 = prep3.executeQuery();
2020-06-17 21:42:07 jdbc[3]: 
/*SQL l:225*/select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=? {1: 1};
2020-06-17 21:42:07 jdbc[3]: 
/**/rs8.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs8.close();
2020-06-17 21:42:07 jdbc[3]: 
/**/prep3.getMaxRows();
2020-06-17 21:42:07 jdbc[3]: 
/**/prep3.getQueryTimeout();
2020-06-17 21:42:07 jdbc[3]: Plan       : calculate cost for plan [SETTINGS:-7:org.h2.table.MetaTable@7c3101a]
2020-06-17 21:42:07 jdbc[3]: Plan       :   for table filter SETTINGS:-7:org.h2.table.MetaTable@7c3101a
2020-06-17 21:42:07 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:42:07 jdbc[3]: Plan       :   best plan item cost 9,900 index meta
2020-06-17 21:42:07 jdbc[3]: Plan       : plan cost 9,901
2020-06-17 21:42:07 jdbc[3]: 
/*SQL l:58 #:1*/SELECT VALUE FROM INFORMATION_SCHEMA.SETTINGS WHERE NAME=? {1: 'QUERY_TIMEOUT'};
2020-06-17 21:42:07 jdbc[3]: 
/**/prep3.close();
2020-06-17 21:42:07 jdbc[3]: 
/**/PreparedStatement prep4 = conn0.prepareStatement("insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?)", 1);;
2020-06-17 21:42:07 jdbc[3]: 
/**/prep4.setString(1, "ram@gmail.com");
2020-06-17 21:42:07 jdbc[3]: 
/**/prep4.setString(2, "Ram");
2020-06-17 21:42:07 jdbc[3]: 
/**/prep4.setString(3, "Thapa");
2020-06-17 21:42:07 jdbc[3]: 
/**/prep4.executeUpdate();
2020-06-17 21:42:07 lock: 1 exclusive write lock requesting for SYS 
2020-06-17 21:42:07 lock: 1 exclusive write lock added for SYS 
2020-06-17 21:42:07 lock: 1 exclusive write lock unlock SYS 
2020-06-17 21:42:07 lock: 3 shared read lock requesting for CUSTOMER_TBL 
2020-06-17 21:42:07 lock: 3 shared read lock ok CUSTOMER_TBL 
2020-06-17 21:42:07 jdbc[3]: 
/*SQL l:107 #:1 t:1*/insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?) {1: 'ram@gmail.com', 2: 'Ram', 3: 'Thapa'};
2020-06-17 21:42:07 jdbc[3]: 
/**/ResultSet rs9 = prep4.getGeneratedKeys();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs9.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/ResultSetMetaData rsMeta0 = rs9.getMetaData();
2020-06-17 21:42:07 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:42:07 jdbc[3]: 
/**/rsMeta0.getColumnCount();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs9.getLong(1);
2020-06-17 21:42:07 jdbc[3]: 
/**/rs9.close();
2020-06-17 21:42:07 jdbc[3]: 
/**/prep4.getMaxRows();
2020-06-17 21:42:07 jdbc[3]: 
/**/prep4.getQueryTimeout();
2020-06-17 21:42:07 jdbc[3]: 
/**/prep4.close();
2020-06-17 21:42:07 jdbc[3]: 
/**/PreparedStatement prep5 = conn0.prepareStatement("select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=?");
2020-06-17 21:42:07 jdbc[3]: 
/**/prep5.setLong(1, 2L);
2020-06-17 21:42:07 jdbc[3]: 
/**/ResultSet rs10 = prep5.executeQuery();
2020-06-17 21:42:07 jdbc[3]: 
/*SQL l:225*/select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=? {1: 2};
2020-06-17 21:42:07 jdbc[3]: 
/**/rs10.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs10.close();
2020-06-17 21:42:07 jdbc[3]: 
/**/prep5.getMaxRows();
2020-06-17 21:42:07 jdbc[3]: 
/**/prep5.getQueryTimeout();
2020-06-17 21:42:07 jdbc[3]: 
/**/prep5.close();
2020-06-17 21:42:07 jdbc[3]: 
/**/PreparedStatement prep6 = conn0.prepareStatement("insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?)", 1);;
2020-06-17 21:42:07 jdbc[3]: 
/**/prep6.setString(1, "hari@gmail.com");
2020-06-17 21:42:07 jdbc[3]: 
/**/prep6.setString(2, "Hari");
2020-06-17 21:42:07 jdbc[3]: 
/**/prep6.setString(3, "Neupane");
2020-06-17 21:42:07 jdbc[3]: 
/**/prep6.executeUpdate();
2020-06-17 21:42:07 jdbc[3]: 
/*SQL l:107 #:1*/insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?) {1: 'hari@gmail.com', 2: 'Hari', 3: 'Neupane'};
2020-06-17 21:42:07 jdbc[3]: 
/**/ResultSet rs11 = prep6.getGeneratedKeys();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs11.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/ResultSetMetaData rsMeta1 = rs11.getMetaData();
2020-06-17 21:42:07 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:42:07 jdbc[3]: 
/**/rsMeta1.getColumnCount();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs11.getLong(1);
2020-06-17 21:42:07 jdbc[3]: 
/**/rs11.close();
2020-06-17 21:42:07 jdbc[3]: 
/**/prep6.getMaxRows();
2020-06-17 21:42:07 jdbc[3]: 
/**/prep6.getQueryTimeout();
2020-06-17 21:42:07 jdbc[3]: 
/**/prep6.close();
2020-06-17 21:42:07 jdbc[3]: 
/**/PreparedStatement prep7 = conn0.prepareStatement("select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=?");
2020-06-17 21:42:07 jdbc[3]: 
/**/prep7.setLong(1, 3L);
2020-06-17 21:42:07 jdbc[3]: 
/**/ResultSet rs12 = prep7.executeQuery();
2020-06-17 21:42:07 jdbc[3]: 
/*SQL l:225*/select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=? {1: 3};
2020-06-17 21:42:07 jdbc[3]: 
/**/rs12.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs12.close();
2020-06-17 21:42:07 jdbc[3]: 
/**/prep7.getMaxRows();
2020-06-17 21:42:07 jdbc[3]: 
/**/prep7.getQueryTimeout();
2020-06-17 21:42:07 jdbc[3]: 
/**/prep7.close();
2020-06-17 21:42:07 jdbc[3]: 
/**/PreparedStatement prep8 = conn0.prepareStatement("insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?)", 1);;
2020-06-17 21:42:07 jdbc[3]: 
/**/prep8.setString(1, "ramila@gmail.com");
2020-06-17 21:42:07 jdbc[3]: 
/**/prep8.setString(2, "Ramila");
2020-06-17 21:42:07 jdbc[3]: 
/**/prep8.setString(3, "Karki");
2020-06-17 21:42:07 jdbc[3]: 
/**/prep8.executeUpdate();
2020-06-17 21:42:07 jdbc[3]: 
/*SQL l:107 #:1*/insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?) {1: 'ramila@gmail.com', 2: 'Ramila', 3: 'Karki'};
2020-06-17 21:42:07 jdbc[3]: 
/**/ResultSet rs13 = prep8.getGeneratedKeys();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs13.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/ResultSetMetaData rsMeta2 = rs13.getMetaData();
2020-06-17 21:42:07 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:42:07 jdbc[3]: 
/**/rsMeta2.getColumnCount();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs13.getLong(1);
2020-06-17 21:42:07 jdbc[3]: 
/**/rs13.close();
2020-06-17 21:42:07 jdbc[3]: 
/**/prep8.getMaxRows();
2020-06-17 21:42:07 jdbc[3]: 
/**/prep8.getQueryTimeout();
2020-06-17 21:42:07 jdbc[3]: 
/**/prep8.close();
2020-06-17 21:42:07 jdbc[3]: 
/**/PreparedStatement prep9 = conn0.prepareStatement("select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=?");
2020-06-17 21:42:07 jdbc[3]: 
/**/prep9.setLong(1, 4L);
2020-06-17 21:42:07 jdbc[3]: 
/**/ResultSet rs14 = prep9.executeQuery();
2020-06-17 21:42:07 jdbc[3]: 
/*SQL l:225*/select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=? {1: 4};
2020-06-17 21:42:07 jdbc[3]: 
/**/rs14.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs14.close();
2020-06-17 21:42:07 jdbc[3]: 
/**/prep9.getMaxRows();
2020-06-17 21:42:07 jdbc[3]: 
/**/prep9.getQueryTimeout();
2020-06-17 21:42:07 jdbc[3]: 
/**/prep9.close();
2020-06-17 21:42:07 jdbc[3]: 
/**/PreparedStatement prep10 = conn0.prepareStatement("insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?)", 1);;
2020-06-17 21:42:07 jdbc[3]: 
/**/prep10.setString(1, "david@gmail.com");
2020-06-17 21:42:07 jdbc[3]: 
/**/prep10.setString(2, "David");
2020-06-17 21:42:07 jdbc[3]: 
/**/prep10.setString(3, "Yonge");
2020-06-17 21:42:07 jdbc[3]: 
/**/prep10.executeUpdate();
2020-06-17 21:42:07 jdbc[3]: 
/*SQL l:107 #:1*/insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?) {1: 'david@gmail.com', 2: 'David', 3: 'Yonge'};
2020-06-17 21:42:07 jdbc[3]: 
/**/ResultSet rs15 = prep10.getGeneratedKeys();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs15.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/ResultSetMetaData rsMeta3 = rs15.getMetaData();
2020-06-17 21:42:07 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:42:07 jdbc[3]: 
/**/rsMeta3.getColumnCount();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs15.getLong(1);
2020-06-17 21:42:07 jdbc[3]: 
/**/rs15.close();
2020-06-17 21:42:07 jdbc[3]: 
/**/prep10.getMaxRows();
2020-06-17 21:42:07 jdbc[3]: 
/**/prep10.getQueryTimeout();
2020-06-17 21:42:07 jdbc[3]: 
/**/prep10.close();
2020-06-17 21:42:07 jdbc[3]: 
/**/PreparedStatement prep11 = conn0.prepareStatement("select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=?");
2020-06-17 21:42:07 jdbc[3]: 
/**/prep11.setLong(1, 5L);
2020-06-17 21:42:07 jdbc[3]: 
/**/ResultSet rs16 = prep11.executeQuery();
2020-06-17 21:42:07 jdbc[3]: 
/*SQL l:225*/select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=? {1: 5};
2020-06-17 21:42:07 jdbc[3]: 
/**/rs16.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs16.close();
2020-06-17 21:42:07 jdbc[3]: 
/**/prep11.getMaxRows();
2020-06-17 21:42:07 jdbc[3]: 
/**/prep11.getQueryTimeout();
2020-06-17 21:42:07 jdbc[3]: 
/**/prep11.close();
2020-06-17 21:42:07 jdbc[3]: 
/**/PreparedStatement prep12 = conn0.prepareStatement("insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?)", 1);;
2020-06-17 21:42:07 jdbc[3]: 
/**/prep12.setString(1, "peter@gmail.com");
2020-06-17 21:42:07 jdbc[3]: 
/**/prep12.setString(2, "Peter");
2020-06-17 21:42:07 jdbc[3]: 
/**/prep12.setString(3, "Parker");
2020-06-17 21:42:07 jdbc[3]: 
/**/prep12.executeUpdate();
2020-06-17 21:42:07 jdbc[3]: 
/*SQL l:107 #:1*/insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?) {1: 'peter@gmail.com', 2: 'Peter', 3: 'Parker'};
2020-06-17 21:42:07 jdbc[3]: 
/**/ResultSet rs17 = prep12.getGeneratedKeys();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs17.next();
2020-06-17 21:42:07 jdbc[3]: 
/**/ResultSetMetaData rsMeta4 = rs17.getMetaData();
2020-06-17 21:42:07 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:42:07 jdbc[3]: 
/**/rsMeta4.getColumnCount();
2020-06-17 21:42:07 jdbc[3]: 
/**/rs17.getLong(1);
2020-06-17 21:42:07 jdbc[3]: 
/**/rs17.close();
2020-06-17 21:42:07 jdbc[3]: 
/**/prep12.getMaxRows();
2020-06-17 21:42:07 jdbc[3]: 
/**/prep12.getQueryTimeout();
2020-06-17 21:42:07 jdbc[3]: 
/**/prep12.close();
2020-06-17 21:42:07 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:42:07 lock: 3 shared read lock unlock CUSTOMER_TBL 
2020-06-17 21:42:07 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:42:07 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:42:07 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:42:07 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:42:07 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:42:07 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:42:07 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:43:11 database: connecting session #13 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:43:11 jdbc[13]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:43:11 jdbc[13]: 
/**/Connection conn10 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3;FORBID_CREATION=TRUE", "SA", "");
2020-06-17 21:43:11 jdbc[13]: 
/**/DatabaseMetaData dbMeta3 = conn10.getMetaData();
2020-06-17 21:43:11 jdbc[13]: 
/**/PreparedStatement prep13 = conn10.prepareStatement("SELECT NAME, VALUE FROM INFORMATION_SCHEMA.SETTINGS WHERE NAME IN (?, ?, ?, ?)");
2020-06-17 21:43:11 jdbc[13]: Plan       : calculate cost for plan [SETTINGS:-7:org.h2.table.MetaTable@7c3101a]
2020-06-17 21:43:11 jdbc[13]: Plan       :   for table filter SETTINGS:-7:org.h2.table.MetaTable@7c3101a
2020-06-17 21:43:11 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:43:11 jdbc[13]: Plan       :   best plan item cost 9,900 index meta
2020-06-17 21:43:11 jdbc[13]: Plan       : plan cost 9,901
2020-06-17 21:43:11 jdbc[13]: 
/**/prep13.setString(1, "MODE");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep13.setString(2, "DATABASE_TO_UPPER");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep13.setString(3, "DATABASE_TO_LOWER");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep13.setString(4, "CASE_INSENSITIVE_IDENTIFIERS");
2020-06-17 21:43:11 jdbc[13]: 
/**/ResultSet rs18 = prep13.executeQuery();
2020-06-17 21:43:11 jdbc[13]: 
/*SQL l:78 #:4*/SELECT NAME, VALUE FROM INFORMATION_SCHEMA.SETTINGS WHERE NAME IN (?, ?, ?, ?) {1: 'MODE', 2: 'DATABASE_TO_UPPER', 3: 'DATABASE_TO_LOWER', 4: 'CASE_INSENSITIVE_IDENTIFIERS'};
2020-06-17 21:43:11 jdbc[13]: 
/**/rs18.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs18.getString(2);
2020-06-17 21:43:11 jdbc[13]: 
/**/rs18.getString(1);
2020-06-17 21:43:11 jdbc[13]: 
/**/rs18.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs18.getString(2);
2020-06-17 21:43:11 jdbc[13]: 
/**/rs18.getString(1);
2020-06-17 21:43:11 jdbc[13]: 
/**/rs18.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs18.getString(2);
2020-06-17 21:43:11 jdbc[13]: 
/**/rs18.getString(1);
2020-06-17 21:43:11 jdbc[13]: 
/**/rs18.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs18.getString(2);
2020-06-17 21:43:11 jdbc[13]: 
/**/rs18.getString(1);
2020-06-17 21:43:11 jdbc[13]: 
/**/rs18.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/prep13.close();
2020-06-17 21:43:11 jdbc[13]: 
/**/DatabaseMetaData dbMeta4 = conn10.getMetaData();
2020-06-17 21:43:11 jdbc[13]: 
/**/dbMeta4.getSchemas();
2020-06-17 21:43:11 jdbc[13]: 
/**/PreparedStatement prep14 = conn10.prepareStatement("SELECT SCHEMA_NAME TABLE_SCHEM, CATALOG_NAME TABLE_CATALOG,  IS_DEFAULT FROM INFORMATION_SCHEMA.SCHEMATA ORDER BY SCHEMA_NAME");
2020-06-17 21:43:11 jdbc[13]: Plan       : calculate cost for plan [SCHEMATA:-14:org.h2.table.MetaTable@4554b6b6]
2020-06-17 21:43:11 jdbc[13]: Plan       :   for table filter SCHEMATA:-14:org.h2.table.MetaTable@4554b6b6
2020-06-17 21:43:11 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:43:11 jdbc[13]: Plan       :   best plan item cost 10,000 index meta
2020-06-17 21:43:11 jdbc[13]: Plan       : plan cost 10,001
2020-06-17 21:43:11 jdbc[13]: 
/**/ResultSet rs19 = prep14.executeQuery();
2020-06-17 21:43:11 jdbc[13]: 
/*SQL #:2*/SELECT SCHEMA_NAME TABLE_SCHEM, CATALOG_NAME TABLE_CATALOG,  IS_DEFAULT FROM INFORMATION_SCHEMA.SCHEMATA ORDER BY SCHEMA_NAME;
2020-06-17 21:43:11 jdbc[13]: 
/**/rs19.findColumn("IS_DEFAULT");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs19.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs19.getBoolean(3);
2020-06-17 21:43:11 jdbc[13]: 
/**/rs19.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs19.getBoolean(3);
2020-06-17 21:43:11 jdbc[13]: 
/**/rs19.getString("TABLE_SCHEM");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs19.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/dbMeta4.getSchemas();
2020-06-17 21:43:11 jdbc[13]: 
/**/PreparedStatement prep15 = conn10.prepareStatement("SELECT SCHEMA_NAME TABLE_SCHEM, CATALOG_NAME TABLE_CATALOG,  IS_DEFAULT FROM INFORMATION_SCHEMA.SCHEMATA ORDER BY SCHEMA_NAME");
2020-06-17 21:43:11 jdbc[13]: Plan       : calculate cost for plan [SCHEMATA:-14:org.h2.table.MetaTable@4554b6b6]
2020-06-17 21:43:11 jdbc[13]: Plan       :   for table filter SCHEMATA:-14:org.h2.table.MetaTable@4554b6b6
2020-06-17 21:43:11 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:43:11 jdbc[13]: Plan       :   best plan item cost 10,000 index meta
2020-06-17 21:43:11 jdbc[13]: Plan       : plan cost 10,001
2020-06-17 21:43:11 jdbc[13]: 
/**/ResultSet rs20 = prep15.executeQuery();
2020-06-17 21:43:11 jdbc[13]: 
/*SQL #:2*/SELECT SCHEMA_NAME TABLE_SCHEM, CATALOG_NAME TABLE_CATALOG,  IS_DEFAULT FROM INFORMATION_SCHEMA.SCHEMATA ORDER BY SCHEMA_NAME;
2020-06-17 21:43:11 jdbc[13]: 
/**/rs20.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs20.getString("TABLE_SCHEM");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs20.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs20.getString("TABLE_SCHEM");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs20.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs20.close();
2020-06-17 21:43:11 jdbc[13]: 
/**/prep15.close();
2020-06-17 21:43:11 jdbc[13]: 
/**/dbMeta4.getTables(null, "INFORMATION_SCHEMA", null, new String[]{"TABLE", "SYSTEM TABLE", "VIEW", "SYSTEM VIEW", "TABLE LINK", "SYNONYM", "EXTERNAL"});
2020-06-17 21:43:11 jdbc[13]: 
/**/PreparedStatement prep16 = conn10.prepareStatement("SELECT TABLE_CAT, TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_CAT, TYPE_SCHEM, TYPE_NAME, SELF_REFERENCING_COL_NAME, REF_GENERATION, SQL FROM (SELECT SYNONYM_CATALOG TABLE_CAT, SYNONYM_SCHEMA TABLE_SCHEM, SYNONYM_NAME as TABLE_NAME, TYPE_NAME AS TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME AS TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, NULL AS SQL FROM INFORMATION_SCHEMA.SYNONYMS WHERE SYNONYM_CATALOG LIKE ?1 ESCAPE ?4 AND SYNONYM_SCHEMA LIKE ?2 ESCAPE ?4 AND SYNONYM_NAME LIKE ?3 ESCAPE ?4 UNION SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5, ?6, ?7, ?8, ?9, ?10, ?11)) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME");
2020-06-17 21:43:11 jdbc[13]: Plan       : calculate cost for plan [_0]
2020-06-17 21:43:11 jdbc[13]: Plan       :   for table filter _0
2020-06-17 21:43:11 jdbc[13]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@5274f64d]
2020-06-17 21:43:11 jdbc[13]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@5274f64d
2020-06-17 21:43:11 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:43:11 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:43:11 jdbc[13]: Plan       :   best plan item cost 4,022 index meta
2020-06-17 21:43:11 jdbc[13]: Plan       : plan cost 4,023
2020-06-17 21:43:11 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@26ce996a]
2020-06-17 21:43:11 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@26ce996a
2020-06-17 21:43:11 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:43:11 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:43:11 jdbc[13]: Plan       :   best plan item cost 3,981.78 index meta
2020-06-17 21:43:11 jdbc[13]: Plan       : plan cost 3,982.78
2020-06-17 21:43:11 jdbc[13]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@5274f64d]
2020-06-17 21:43:11 jdbc[13]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@5274f64d
2020-06-17 21:43:11 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:43:11 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:43:11 jdbc[13]: Plan       :   best plan item cost 4,022 index meta
2020-06-17 21:43:11 jdbc[13]: Plan       : plan cost 4,023
2020-06-17 21:43:11 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@26ce996a]
2020-06-17 21:43:11 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@26ce996a
2020-06-17 21:43:11 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:43:11 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:43:11 jdbc[13]: Plan       :   best plan item cost 3,981.78 index meta
2020-06-17 21:43:11 jdbc[13]: Plan       : plan cost 3,982.78
2020-06-17 21:43:11 jdbc[13]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@5274f64d]
2020-06-17 21:43:11 jdbc[13]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@5274f64d
2020-06-17 21:43:11 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:43:11 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:43:11 jdbc[13]: Plan       :   best plan item cost 4,022 index meta
2020-06-17 21:43:11 jdbc[13]: Plan       : plan cost 4,023
2020-06-17 21:43:11 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@26ce996a]
2020-06-17 21:43:11 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@26ce996a
2020-06-17 21:43:11 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:43:11 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:43:11 jdbc[13]: Plan       :   best plan item cost 3,981.78 index meta
2020-06-17 21:43:11 jdbc[13]: Plan       : plan cost 3,982.78
2020-06-17 21:43:11 jdbc[13]: Plan       :   best plan item cost 8,005.78 index (SELECT
    SYNONYM_CATALOG AS TABLE_CAT,
    SYNONYM_SCHEMA AS TABLE_SCHEM,
    SYNONYM_NAME AS TABLE_NAME,
    TYPE_NAME AS TABLE_TYPE,
    REMARKS,
    TYPE_NAME AS TYPE_CAT,
    TYPE_NAME AS TYPE_SCHEM,
    TYPE_NAME AS TYPE_NAME,
    TYPE_NAME AS SELF_REFERENCING_COL_NAME,
    TYPE_NAME AS REF_GENERATION,
    NULL AS SQL
FROM INFORMATION_SCHEMA.SYNONYMS
    /* meta */
WHERE (SYNONYM_NAME LIKE ?3 ESCAPE ?4)
    AND ((SYNONYM_CATALOG LIKE ?1 ESCAPE ?4)
    AND (SYNONYM_SCHEMA LIKE ?2 ESCAPE ?4)))
UNION
(SELECT
    TABLE_CATALOG AS TABLE_CAT,
    TABLE_SCHEMA AS TABLE_SCHEM,
    TABLE_NAME,
    TABLE_TYPE,
    REMARKS,
    TYPE_NAME AS TYPE_CAT,
    TYPE_NAME AS TYPE_SCHEM,
    TYPE_NAME,
    TYPE_NAME AS SELF_REFERENCING_COL_NAME,
    TYPE_NAME AS REF_GENERATION,
    SQL
FROM INFORMATION_SCHEMA.TABLES
    /* meta */
WHERE (TABLE_TYPE IN(?5, ?6, ?7, ?8, ?9, ?10, ?11))
    AND ((TABLE_NAME LIKE ?3 ESCAPE ?4)
    AND ((TABLE_CATALOG LIKE ?1 ESCAPE ?4)
    AND (TABLE_SCHEMA LIKE ?2 ESCAPE ?4))))
2020-06-17 21:43:11 jdbc[13]: Plan       : plan cost 8,006.78
2020-06-17 21:43:11 jdbc[13]: 
/**/prep16.setString(1, "%");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep16.setString(2, "INFORMATION_SCHEMA");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep16.setString(3, "%");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep16.setString(4, "\\");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep16.setString(5, "TABLE");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep16.setString(6, "SYSTEM TABLE");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep16.setString(7, "VIEW");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep16.setString(8, "SYSTEM VIEW");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep16.setString(9, "TABLE LINK");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep16.setString(10, "SYNONYM");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep16.setString(11, "EXTERNAL");
2020-06-17 21:43:11 jdbc[13]: 
/**/ResultSet rs21 = prep16.executeQuery();
2020-06-17 21:43:11 jdbc[13]: Plan       : calculate cost for plan [_1]
2020-06-17 21:43:11 jdbc[13]: Plan       :   for table filter _1
2020-06-17 21:43:11 jdbc[13]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@5274f64d]
2020-06-17 21:43:11 jdbc[13]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@5274f64d
2020-06-17 21:43:11 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:43:11 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:43:11 jdbc[13]: Plan       :   best plan item cost 4,022 index meta
2020-06-17 21:43:11 jdbc[13]: Plan       : plan cost 4,023
2020-06-17 21:43:11 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@26ce996a]
2020-06-17 21:43:11 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@26ce996a
2020-06-17 21:43:11 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:43:11 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:43:11 jdbc[13]: Plan       :   best plan item cost 3,981.78 index meta
2020-06-17 21:43:11 jdbc[13]: Plan       : plan cost 3,982.78
2020-06-17 21:43:11 jdbc[13]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@5274f64d]
2020-06-17 21:43:11 jdbc[13]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@5274f64d
2020-06-17 21:43:11 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:43:11 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:43:11 jdbc[13]: Plan       :   best plan item cost 4,022 index meta
2020-06-17 21:43:11 jdbc[13]: Plan       : plan cost 4,023
2020-06-17 21:43:11 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@26ce996a]
2020-06-17 21:43:11 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@26ce996a
2020-06-17 21:43:11 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:43:11 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:43:11 jdbc[13]: Plan       :   best plan item cost 3,981.78 index meta
2020-06-17 21:43:11 jdbc[13]: Plan       : plan cost 3,982.78
2020-06-17 21:43:11 jdbc[13]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@5274f64d]
2020-06-17 21:43:11 jdbc[13]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@5274f64d
2020-06-17 21:43:11 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:43:11 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:43:11 jdbc[13]: Plan       :   best plan item cost 4,022 index meta
2020-06-17 21:43:11 jdbc[13]: Plan       : plan cost 4,023
2020-06-17 21:43:11 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@26ce996a]
2020-06-17 21:43:11 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@26ce996a
2020-06-17 21:43:11 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:43:11 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:43:11 jdbc[13]: Plan       :   best plan item cost 3,981.78 index meta
2020-06-17 21:43:11 jdbc[13]: Plan       : plan cost 3,982.78
2020-06-17 21:43:11 jdbc[13]: Plan       :   best plan item cost 8,005.78 index (SELECT
    SYNONYM_CATALOG AS TABLE_CAT,
    SYNONYM_SCHEMA AS TABLE_SCHEM,
    SYNONYM_NAME AS TABLE_NAME,
    TYPE_NAME AS TABLE_TYPE,
    REMARKS,
    TYPE_NAME AS TYPE_CAT,
    TYPE_NAME AS TYPE_SCHEM,
    TYPE_NAME AS TYPE_NAME,
    TYPE_NAME AS SELF_REFERENCING_COL_NAME,
    TYPE_NAME AS REF_GENERATION,
    NULL AS SQL
FROM INFORMATION_SCHEMA.SYNONYMS
    /* meta */
WHERE (SYNONYM_NAME LIKE ?3 ESCAPE ?4)
    AND ((SYNONYM_CATALOG LIKE ?1 ESCAPE ?4)
    AND (SYNONYM_SCHEMA LIKE ?2 ESCAPE ?4)))
UNION
(SELECT
    TABLE_CATALOG AS TABLE_CAT,
    TABLE_SCHEMA AS TABLE_SCHEM,
    TABLE_NAME,
    TABLE_TYPE,
    REMARKS,
    TYPE_NAME AS TYPE_CAT,
    TYPE_NAME AS TYPE_SCHEM,
    TYPE_NAME,
    TYPE_NAME AS SELF_REFERENCING_COL_NAME,
    TYPE_NAME AS REF_GENERATION,
    SQL
FROM INFORMATION_SCHEMA.TABLES
    /* meta */
WHERE (TABLE_TYPE IN(?5, ?6, ?7, ?8, ?9, ?10, ?11))
    AND ((TABLE_NAME LIKE ?3 ESCAPE ?4)
    AND ((TABLE_CATALOG LIKE ?1 ESCAPE ?4)
    AND (TABLE_SCHEMA LIKE ?2 ESCAPE ?4))))
2020-06-17 21:43:11 jdbc[13]: Plan       : plan cost 8,006.78
2020-06-17 21:43:11 jdbc[13]: 
/*SQL l:1007 #:33 t:2*/SELECT TABLE_CAT, TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_CAT, TYPE_SCHEM, TYPE_NAME, SELF_REFERENCING_COL_NAME, REF_GENERATION, SQL FROM (SELECT SYNONYM_CATALOG TABLE_CAT, SYNONYM_SCHEMA TABLE_SCHEM, SYNONYM_NAME as TABLE_NAME, TYPE_NAME AS TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME AS TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, NULL AS SQL FROM INFORMATION_SCHEMA.SYNONYMS WHERE SYNONYM_CATALOG LIKE ?1 ESCAPE ?4 AND SYNONYM_SCHEMA LIKE ?2 ESCAPE ?4 AND SYNONYM_NAME LIKE ?3 ESCAPE ?4 UNION SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5, ?6, ?7, ?8, ?9, ?10, ?11)) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME {1: '%', 2: 'INFORMATION_SCHEMA', 3: '%', 4: '\\', 5: 'TABLE', 6: 'SYSTEM TABLE', 7: 'VIEW', 8: 'SYSTEM VIEW', 9: 'TABLE LINK', 10: 'SYNONYM', 11: 'EXTERNAL'};
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.getString("TABLE_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.getString("TABLE_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.getString("TABLE_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.getString("TABLE_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.getString("TABLE_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.getString("TABLE_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.getString("TABLE_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.getString("TABLE_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.getString("TABLE_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.getString("TABLE_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.getString("TABLE_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.getString("TABLE_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.getString("TABLE_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.getString("TABLE_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.getString("TABLE_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.getString("TABLE_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.getString("TABLE_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.getString("TABLE_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.getString("TABLE_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.getString("TABLE_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.getString("TABLE_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.getString("TABLE_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.getString("TABLE_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.getString("TABLE_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.getString("TABLE_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.getString("TABLE_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.getString("TABLE_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.getString("TABLE_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.getString("TABLE_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.getString("TABLE_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.getString("TABLE_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.getString("TABLE_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.getString("TABLE_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.getString("TABLE_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.getString("TABLE_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.getString("TABLE_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.getString("TABLE_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.getString("TABLE_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.getString("TABLE_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.getString("TABLE_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.getString("TABLE_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.getString("TABLE_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.getString("TABLE_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.getString("TABLE_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.getString("TABLE_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.getString("TABLE_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.getString("TABLE_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.getString("TABLE_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.getString("TABLE_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.getString("TABLE_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.getString("TABLE_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.getString("TABLE_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.getString("TABLE_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.getString("TABLE_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.getString("TABLE_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.getString("TABLE_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.getString("TABLE_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.getString("TABLE_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.getString("TABLE_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.getString("TABLE_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.getString("TABLE_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.getString("TABLE_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.getString("TABLE_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.getString("TABLE_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.getString("TABLE_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.getString("TABLE_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs21.close();
2020-06-17 21:43:11 jdbc[13]: 
/**/prep16.close();
2020-06-17 21:43:11 jdbc[13]: 
/**/dbMeta4.getConnection();
2020-06-17 21:43:11 jdbc[13]: 
/**/PreparedStatement prep17 = conn10.prepareStatement("SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ?");
2020-06-17 21:43:11 jdbc[13]: Plan       : calculate cost for plan [COLUMNS:-2:org.h2.table.MetaTable@2c52571d]
2020-06-17 21:43:11 jdbc[13]: Plan       :   for table filter COLUMNS:-2:org.h2.table.MetaTable@2c52571d
2020-06-17 21:43:11 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:43:11 jdbc[13]: Table      :     potential plan item cost 28 index meta
2020-06-17 21:43:11 jdbc[13]: Plan       :   best plan item cost 27.44 index meta
2020-06-17 21:43:11 jdbc[13]: Plan       : plan cost 28.44
2020-06-17 21:43:11 jdbc[13]: 
/**/prep17.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep17.setString(2, "CATALOGS");
2020-06-17 21:43:11 jdbc[13]: 
/**/ResultSet rs22 = prep17.executeQuery();
2020-06-17 21:43:11 jdbc[13]: 
/*SQL l:123 #:1*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'CATALOGS'};
2020-06-17 21:43:11 jdbc[13]: 
/**/rs22.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs22.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs22.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs22.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs22.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs22.close();
2020-06-17 21:43:11 jdbc[13]: 
/**/prep17.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep17.setString(2, "COLLATIONS");
2020-06-17 21:43:11 jdbc[13]: 
/**/ResultSet rs23 = prep17.executeQuery();
2020-06-17 21:43:11 jdbc[13]: 
/*SQL l:123 #:2*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'COLLATIONS'};
2020-06-17 21:43:11 jdbc[13]: 
/**/rs23.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs23.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs23.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs23.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs23.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs23.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs23.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs23.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs23.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs23.close();
2020-06-17 21:43:11 jdbc[13]: 
/**/prep17.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep17.setString(2, "COLUMNS");
2020-06-17 21:43:11 jdbc[13]: 
/**/ResultSet rs24 = prep17.executeQuery();
2020-06-17 21:43:11 jdbc[13]: 
/*SQL l:123 #:32*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'COLUMNS'};
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs24.close();
2020-06-17 21:43:11 jdbc[13]: 
/**/prep17.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep17.setString(2, "COLUMN_PRIVILEGES");
2020-06-17 21:43:11 jdbc[13]: 
/**/ResultSet rs25 = prep17.executeQuery();
2020-06-17 21:43:11 jdbc[13]: 
/*SQL l:123 #:8*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'COLUMN_PRIVILEGES'};
2020-06-17 21:43:11 jdbc[13]: 
/**/rs25.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs25.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs25.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs25.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs25.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs25.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs25.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs25.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs25.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs25.close();
2020-06-17 21:43:11 jdbc[13]: 
/**/prep17.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep17.setString(2, "CONSTANTS");
2020-06-17 21:43:11 jdbc[13]: 
/**/ResultSet rs26 = prep17.executeQuery();
2020-06-17 21:43:11 jdbc[13]: 
/*SQL l:123 #:7*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'CONSTANTS'};
2020-06-17 21:43:11 jdbc[13]: 
/**/rs26.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs26.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs26.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs26.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs26.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs26.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs26.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs26.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs26.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs26.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs26.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs26.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs26.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs26.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs26.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs26.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs26.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs26.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs26.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs26.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs26.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs26.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs26.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs26.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs26.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs26.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs26.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs26.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs26.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs26.close();
2020-06-17 21:43:11 jdbc[13]: 
/**/prep17.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep17.setString(2, "CONSTRAINTS");
2020-06-17 21:43:11 jdbc[13]: 
/**/ResultSet rs27 = prep17.executeQuery();
2020-06-17 21:43:11 jdbc[13]: 
/*SQL l:123 #:13*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'CONSTRAINTS'};
2020-06-17 21:43:11 jdbc[13]: 
/**/rs27.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs27.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs27.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs27.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs27.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs27.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs27.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs27.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs27.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs27.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs27.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs27.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs27.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs27.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs27.close();
2020-06-17 21:43:11 jdbc[13]: 
/**/prep17.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep17.setString(2, "CROSS_REFERENCES");
2020-06-17 21:43:11 jdbc[13]: 
/**/ResultSet rs28 = prep17.executeQuery();
2020-06-17 21:43:11 jdbc[13]: 
/*SQL l:123 #:14*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'CROSS_REFERENCES'};
2020-06-17 21:43:11 jdbc[13]: 
/**/rs28.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs28.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs28.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs28.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs28.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs28.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs28.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs28.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs28.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs28.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs28.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs28.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs28.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs28.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs28.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs28.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs28.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs28.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs28.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs28.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs28.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs28.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs28.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs28.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs28.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs28.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs28.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs28.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs28.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs28.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs28.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs28.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs28.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs28.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs28.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs28.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs28.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs28.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs28.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs28.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs28.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs28.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs28.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs28.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs28.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs28.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs28.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs28.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs28.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs28.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs28.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs28.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs28.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs28.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs28.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs28.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs28.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs28.close();
2020-06-17 21:43:11 jdbc[13]: 
/**/prep17.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep17.setString(2, "DOMAINS");
2020-06-17 21:43:11 jdbc[13]: 
/**/ResultSet rs29 = prep17.executeQuery();
2020-06-17 21:43:11 jdbc[13]: 
/*SQL l:123 #:14*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'DOMAINS'};
2020-06-17 21:43:11 jdbc[13]: 
/**/rs29.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs29.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs29.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs29.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs29.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs29.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs29.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs29.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs29.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs29.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs29.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs29.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs29.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs29.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs29.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs29.close();
2020-06-17 21:43:11 jdbc[13]: 
/**/prep17.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep17.setString(2, "FUNCTION_ALIASES");
2020-06-17 21:43:11 jdbc[13]: 
/**/ResultSet rs30 = prep17.executeQuery();
2020-06-17 21:43:11 jdbc[13]: 
/*SQL l:123 #:12*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'FUNCTION_ALIASES'};
2020-06-17 21:43:11 jdbc[13]: 
/**/rs30.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs30.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs30.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs30.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs30.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs30.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs30.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs30.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs30.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs30.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs30.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs30.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs30.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs30.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs30.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs30.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs30.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs30.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs30.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs30.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs30.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs30.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs30.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs30.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs30.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs30.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs30.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs30.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs30.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs30.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs30.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs30.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs30.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs30.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs30.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs30.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs30.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs30.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs30.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs30.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs30.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs30.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs30.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs30.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs30.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs30.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs30.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs30.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs30.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs30.close();
2020-06-17 21:43:11 jdbc[13]: 
/**/prep17.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep17.setString(2, "FUNCTION_COLUMNS");
2020-06-17 21:43:11 jdbc[13]: 
/**/ResultSet rs31 = prep17.executeQuery();
2020-06-17 21:43:11 jdbc[13]: 
/*SQL l:123 #:17 t:7*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'FUNCTION_COLUMNS'};
2020-06-17 21:43:11 jdbc[13]: 
/**/rs31.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs31.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs31.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs31.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs31.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs31.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs31.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs31.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs31.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs31.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs31.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs31.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs31.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs31.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs31.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs31.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs31.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs31.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs31.close();
2020-06-17 21:43:11 jdbc[13]: 
/**/prep17.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep17.setString(2, "HELP");
2020-06-17 21:43:11 jdbc[13]: 
/**/ResultSet rs32 = prep17.executeQuery();
2020-06-17 21:43:11 jdbc[13]: 
/*SQL l:123 #:5*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'HELP'};
2020-06-17 21:43:11 jdbc[13]: 
/**/rs32.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs32.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs32.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs32.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs32.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs32.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs32.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs32.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs32.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs32.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs32.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs32.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs32.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs32.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs32.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs32.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs32.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs32.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs32.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs32.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs32.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs32.close();
2020-06-17 21:43:11 jdbc[13]: 
/**/prep17.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep17.setString(2, "INDEXES");
2020-06-17 21:43:11 jdbc[13]: 
/**/ResultSet rs33 = prep17.executeQuery();
2020-06-17 21:43:11 jdbc[13]: 
/*SQL l:123 #:22*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'INDEXES'};
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs33.close();
2020-06-17 21:43:11 jdbc[13]: 
/**/prep17.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep17.setString(2, "IN_DOUBT");
2020-06-17 21:43:11 jdbc[13]: 
/**/ResultSet rs34 = prep17.executeQuery();
2020-06-17 21:43:11 jdbc[13]: 
/*SQL l:123 #:2*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'IN_DOUBT'};
2020-06-17 21:43:11 jdbc[13]: 
/**/rs34.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs34.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs34.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs34.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs34.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs34.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs34.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs34.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs34.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs34.close();
2020-06-17 21:43:11 jdbc[13]: 
/**/prep17.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep17.setString(2, "KEY_COLUMN_USAGE");
2020-06-17 21:43:11 jdbc[13]: 
/**/ResultSet rs35 = prep17.executeQuery();
2020-06-17 21:43:11 jdbc[13]: 
/*SQL l:123 #:9*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'KEY_COLUMN_USAGE'};
2020-06-17 21:43:11 jdbc[13]: 
/**/rs35.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs35.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs35.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs35.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs35.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs35.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs35.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs35.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs35.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs35.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs35.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs35.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs35.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs35.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs35.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs35.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs35.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs35.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs35.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs35.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs35.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs35.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs35.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs35.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs35.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs35.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs35.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs35.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs35.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs35.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs35.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs35.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs35.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs35.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs35.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs35.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs35.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs35.close();
2020-06-17 21:43:11 jdbc[13]: 
/**/prep17.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep17.setString(2, "LOCKS");
2020-06-17 21:43:11 jdbc[13]: 
/**/ResultSet rs36 = prep17.executeQuery();
2020-06-17 21:43:11 jdbc[13]: 
/*SQL l:123 #:4*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'LOCKS'};
2020-06-17 21:43:11 jdbc[13]: 
/**/rs36.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs36.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs36.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs36.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs36.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs36.close();
2020-06-17 21:43:11 jdbc[13]: 
/**/prep17.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep17.setString(2, "QUERY_STATISTICS");
2020-06-17 21:43:11 jdbc[13]: 
/**/ResultSet rs37 = prep17.executeQuery();
2020-06-17 21:43:11 jdbc[13]: 
/*SQL l:123 #:12*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'QUERY_STATISTICS'};
2020-06-17 21:43:11 jdbc[13]: 
/**/rs37.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs37.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs37.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs37.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs37.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs37.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs37.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs37.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs37.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs37.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs37.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs37.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs37.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs37.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs37.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs37.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs37.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs37.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs37.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs37.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs37.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs37.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs37.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs37.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs37.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs37.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs37.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs37.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs37.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs37.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs37.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs37.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs37.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs37.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs37.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs37.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs37.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs37.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs37.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs37.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs37.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs37.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs37.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs37.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs37.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs37.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs37.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs37.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs37.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs37.close();
2020-06-17 21:43:11 jdbc[13]: 
/**/prep17.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep17.setString(2, "REFERENTIAL_CONSTRAINTS");
2020-06-17 21:43:11 jdbc[13]: 
/**/ResultSet rs38 = prep17.executeQuery();
2020-06-17 21:43:11 jdbc[13]: 
/*SQL l:123 #:9*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'REFERENTIAL_CONSTRAINTS'};
2020-06-17 21:43:11 jdbc[13]: 
/**/rs38.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs38.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs38.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs38.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs38.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs38.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs38.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs38.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs38.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs38.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs38.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs38.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs38.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs38.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs38.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs38.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs38.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs38.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs38.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs38.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs38.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs38.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs38.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs38.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs38.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs38.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs38.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs38.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs38.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs38.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs38.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs38.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs38.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs38.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs38.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs38.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs38.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs38.close();
2020-06-17 21:43:11 jdbc[13]: 
/**/prep17.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep17.setString(2, "RIGHTS");
2020-06-17 21:43:11 jdbc[13]: 
/**/ResultSet rs39 = prep17.executeQuery();
2020-06-17 21:43:11 jdbc[13]: 
/*SQL l:123 #:7*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'RIGHTS'};
2020-06-17 21:43:11 jdbc[13]: 
/**/rs39.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs39.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs39.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs39.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs39.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs39.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs39.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs39.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs39.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs39.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs39.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs39.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs39.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs39.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs39.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs39.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs39.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs39.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs39.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs39.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs39.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs39.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs39.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs39.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs39.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs39.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs39.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs39.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs39.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs39.close();
2020-06-17 21:43:11 jdbc[13]: 
/**/prep17.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep17.setString(2, "ROLES");
2020-06-17 21:43:11 jdbc[13]: 
/**/ResultSet rs40 = prep17.executeQuery();
2020-06-17 21:43:11 jdbc[13]: 
/*SQL l:123 #:3*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'ROLES'};
2020-06-17 21:43:11 jdbc[13]: 
/**/rs40.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs40.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs40.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs40.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs40.close();
2020-06-17 21:43:11 jdbc[13]: 
/**/prep17.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep17.setString(2, "SCHEMATA");
2020-06-17 21:43:11 jdbc[13]: 
/**/ResultSet rs41 = prep17.executeQuery();
2020-06-17 21:43:11 jdbc[13]: 
/*SQL l:123 #:8*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'SCHEMATA'};
2020-06-17 21:43:11 jdbc[13]: 
/**/rs41.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs41.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs41.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs41.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs41.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs41.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs41.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs41.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs41.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs41.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs41.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs41.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs41.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs41.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs41.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs41.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs41.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs41.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs41.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs41.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs41.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs41.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs41.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs41.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs41.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs41.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs41.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs41.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs41.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs41.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs41.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs41.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs41.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs41.close();
2020-06-17 21:43:11 jdbc[13]: 
/**/prep17.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep17.setString(2, "SEQUENCES");
2020-06-17 21:43:11 jdbc[13]: 
/**/ResultSet rs42 = prep17.executeQuery();
2020-06-17 21:43:11 jdbc[13]: 
/*SQL l:123 #:12*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'SEQUENCES'};
2020-06-17 21:43:11 jdbc[13]: 
/**/rs42.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs42.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs42.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs42.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs42.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs42.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs42.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs42.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs42.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs42.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs42.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs42.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs42.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs42.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs42.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs42.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs42.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs42.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs42.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs42.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs42.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs42.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs42.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs42.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs42.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs42.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs42.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs42.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs42.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs42.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs42.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs42.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs42.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs42.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs42.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs42.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs42.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs42.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs42.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs42.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs42.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs42.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs42.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs42.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs42.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs42.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs42.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs42.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs42.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs42.close();
2020-06-17 21:43:11 jdbc[13]: 
/**/prep17.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep17.setString(2, "SESSIONS");
2020-06-17 21:43:11 jdbc[13]: 
/**/ResultSet rs43 = prep17.executeQuery();
2020-06-17 21:43:11 jdbc[13]: 
/*SQL l:123 #:12*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'SESSIONS'};
2020-06-17 21:43:11 jdbc[13]: 
/**/rs43.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs43.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs43.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs43.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs43.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs43.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs43.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs43.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs43.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs43.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs43.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs43.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs43.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs43.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs43.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs43.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs43.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs43.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs43.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs43.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs43.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs43.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs43.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs43.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs43.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs43.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs43.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs43.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs43.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs43.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs43.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs43.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs43.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs43.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs43.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs43.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs43.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs43.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs43.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs43.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs43.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs43.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs43.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs43.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs43.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs43.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs43.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs43.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs43.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs43.close();
2020-06-17 21:43:11 jdbc[13]: 
/**/prep17.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep17.setString(2, "SESSION_STATE");
2020-06-17 21:43:11 jdbc[13]: 
/**/ResultSet rs44 = prep17.executeQuery();
2020-06-17 21:43:11 jdbc[13]: 
/*SQL l:123 #:2*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'SESSION_STATE'};
2020-06-17 21:43:11 jdbc[13]: 
/**/rs44.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs44.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs44.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs44.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs44.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs44.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs44.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs44.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs44.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs44.close();
2020-06-17 21:43:11 jdbc[13]: 
/**/prep17.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep17.setString(2, "SETTINGS");
2020-06-17 21:43:11 jdbc[13]: 
/**/ResultSet rs45 = prep17.executeQuery();
2020-06-17 21:43:11 jdbc[13]: 
/*SQL l:123 #:2*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'SETTINGS'};
2020-06-17 21:43:11 jdbc[13]: 
/**/rs45.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs45.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs45.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs45.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs45.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs45.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs45.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs45.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs45.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs45.close();
2020-06-17 21:43:11 jdbc[13]: 
/**/prep17.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep17.setString(2, "SYNONYMS");
2020-06-17 21:43:11 jdbc[13]: 
/**/ResultSet rs46 = prep17.executeQuery();
2020-06-17 21:43:11 jdbc[13]: 
/*SQL l:123 #:9*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'SYNONYMS'};
2020-06-17 21:43:11 jdbc[13]: 
/**/rs46.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs46.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs46.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs46.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs46.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs46.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs46.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs46.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs46.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs46.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs46.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs46.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs46.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs46.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs46.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs46.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs46.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs46.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs46.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs46.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs46.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs46.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs46.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs46.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs46.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs46.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs46.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs46.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs46.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs46.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs46.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs46.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs46.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs46.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs46.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs46.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs46.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs46.close();
2020-06-17 21:43:11 jdbc[13]: 
/**/prep17.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep17.setString(2, "TABLES");
2020-06-17 21:43:11 jdbc[13]: 
/**/ResultSet rs47 = prep17.executeQuery();
2020-06-17 21:43:11 jdbc[13]: 
/*SQL l:123 #:12*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'TABLES'};
2020-06-17 21:43:11 jdbc[13]: 
/**/rs47.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs47.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs47.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs47.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs47.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs47.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs47.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs47.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs47.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs47.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs47.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs47.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs47.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs47.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs47.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs47.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs47.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs47.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs47.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs47.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs47.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs47.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs47.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs47.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs47.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs47.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs47.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs47.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs47.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs47.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs47.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs47.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs47.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs47.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs47.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs47.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs47.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs47.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs47.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs47.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs47.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs47.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs47.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs47.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs47.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs47.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs47.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs47.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs47.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs47.close();
2020-06-17 21:43:11 jdbc[13]: 
/**/prep17.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep17.setString(2, "TABLE_CONSTRAINTS");
2020-06-17 21:43:11 jdbc[13]: 
/**/ResultSet rs48 = prep17.executeQuery();
2020-06-17 21:43:11 jdbc[13]: 
/*SQL l:123 #:9*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'TABLE_CONSTRAINTS'};
2020-06-17 21:43:11 jdbc[13]: 
/**/rs48.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs48.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs48.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs48.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs48.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs48.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs48.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs48.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs48.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs48.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs48.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs48.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs48.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs48.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs48.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs48.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs48.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs48.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs48.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs48.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs48.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs48.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs48.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs48.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs48.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs48.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs48.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs48.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs48.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs48.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs48.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs48.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs48.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs48.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs48.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs48.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs48.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs48.close();
2020-06-17 21:43:11 jdbc[13]: 
/**/prep17.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep17.setString(2, "TABLE_PRIVILEGES");
2020-06-17 21:43:11 jdbc[13]: 
/**/ResultSet rs49 = prep17.executeQuery();
2020-06-17 21:43:11 jdbc[13]: 
/*SQL l:123 #:7*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'TABLE_PRIVILEGES'};
2020-06-17 21:43:11 jdbc[13]: 
/**/rs49.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs49.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs49.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs49.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs49.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs49.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs49.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs49.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs49.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs49.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs49.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs49.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs49.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs49.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs49.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs49.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs49.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs49.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs49.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs49.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs49.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs49.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs49.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs49.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs49.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs49.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs49.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs49.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs49.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs49.close();
2020-06-17 21:43:11 jdbc[13]: 
/**/prep17.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep17.setString(2, "TABLE_TYPES");
2020-06-17 21:43:11 jdbc[13]: 
/**/ResultSet rs50 = prep17.executeQuery();
2020-06-17 21:43:11 jdbc[13]: 
/*SQL l:123 #:1*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'TABLE_TYPES'};
2020-06-17 21:43:11 jdbc[13]: 
/**/rs50.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs50.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs50.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs50.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs50.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs50.close();
2020-06-17 21:43:11 jdbc[13]: 
/**/prep17.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep17.setString(2, "TRIGGERS");
2020-06-17 21:43:11 jdbc[13]: 
/**/ResultSet rs51 = prep17.executeQuery();
2020-06-17 21:43:11 jdbc[13]: 
/*SQL l:123 #:14*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'TRIGGERS'};
2020-06-17 21:43:11 jdbc[13]: 
/**/rs51.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs51.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs51.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs51.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs51.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs51.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs51.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs51.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs51.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs51.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs51.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs51.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs51.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs51.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs51.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs51.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs51.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs51.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs51.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs51.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs51.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs51.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs51.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs51.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs51.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs51.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs51.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs51.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs51.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs51.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs51.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs51.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs51.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs51.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs51.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs51.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs51.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs51.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs51.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs51.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs51.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs51.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs51.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs51.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs51.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs51.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs51.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs51.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs51.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs51.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs51.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs51.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs51.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs51.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs51.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs51.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs51.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs51.close();
2020-06-17 21:43:11 jdbc[13]: 
/**/prep17.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep17.setString(2, "TYPE_INFO");
2020-06-17 21:43:11 jdbc[13]: 
/**/ResultSet rs52 = prep17.executeQuery();
2020-06-17 21:43:11 jdbc[13]: 
/*SQL l:123 #:14*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'TYPE_INFO'};
2020-06-17 21:43:11 jdbc[13]: 
/**/rs52.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs52.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs52.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs52.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs52.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs52.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs52.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs52.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs52.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs52.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs52.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs52.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs52.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs52.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs52.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs52.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs52.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs52.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs52.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs52.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs52.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs52.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs52.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs52.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs52.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs52.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs52.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs52.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs52.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs52.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs52.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs52.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs52.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs52.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs52.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs52.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs52.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs52.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs52.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs52.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs52.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs52.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs52.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs52.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs52.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs52.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs52.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs52.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs52.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs52.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs52.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs52.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs52.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs52.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs52.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs52.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs52.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs52.close();
2020-06-17 21:43:11 jdbc[13]: 
/**/prep17.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep17.setString(2, "USERS");
2020-06-17 21:43:11 jdbc[13]: 
/**/ResultSet rs53 = prep17.executeQuery();
2020-06-17 21:43:11 jdbc[13]: 
/*SQL l:123 #:4*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'USERS'};
2020-06-17 21:43:11 jdbc[13]: 
/**/rs53.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs53.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs53.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs53.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs53.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs53.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs53.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs53.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs53.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs53.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs53.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs53.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs53.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs53.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs53.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs53.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs53.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs53.close();
2020-06-17 21:43:11 jdbc[13]: 
/**/prep17.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep17.setString(2, "VIEWS");
2020-06-17 21:43:11 jdbc[13]: 
/**/ResultSet rs54 = prep17.executeQuery();
2020-06-17 21:43:11 jdbc[13]: 
/*SQL l:123 #:9*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'VIEWS'};
2020-06-17 21:43:11 jdbc[13]: 
/**/rs54.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs54.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs54.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs54.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs54.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs54.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs54.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs54.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs54.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs54.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs54.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs54.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs54.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs54.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs54.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs54.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs54.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs54.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs54.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs54.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs54.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs54.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs54.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs54.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs54.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs54.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs54.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs54.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs54.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs54.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs54.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs54.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs54.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs54.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs54.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs54.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs54.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs54.close();
2020-06-17 21:43:11 jdbc[13]: 
/**/prep17.close();
2020-06-17 21:43:11 jdbc[13]: 
/**/dbMeta4.getProcedures(null, "INFORMATION_SCHEMA", null);
2020-06-17 21:43:11 jdbc[13]: 
/**/PreparedStatement prep18 = conn10.prepareStatement("SELECT ALIAS_CATALOG PROCEDURE_CAT, ALIAS_SCHEMA PROCEDURE_SCHEM, ALIAS_NAME PROCEDURE_NAME, COLUMN_COUNT NUM_INPUT_PARAMS, ZERO() NUM_OUTPUT_PARAMS, ZERO() NUM_RESULT_SETS, REMARKS, RETURNS_RESULT PROCEDURE_TYPE, ALIAS_NAME SPECIFIC_NAME FROM INFORMATION_SCHEMA.FUNCTION_ALIASES WHERE ALIAS_CATALOG LIKE ? ESCAPE ? AND ALIAS_SCHEMA LIKE ? ESCAPE ? AND ALIAS_NAME LIKE ? ESCAPE ? ORDER BY PROCEDURE_SCHEM, PROCEDURE_NAME, NUM_INPUT_PARAMS");
2020-06-17 21:43:11 jdbc[13]: Plan       : calculate cost for plan [FUNCTION_ALIASES:-13:org.h2.table.MetaTable@7c78ded7]
2020-06-17 21:43:11 jdbc[13]: Plan       :   for table filter FUNCTION_ALIASES:-13:org.h2.table.MetaTable@7c78ded7
2020-06-17 21:43:11 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:43:11 jdbc[13]: Plan       :   best plan item cost 10,000 index meta
2020-06-17 21:43:11 jdbc[13]: Plan       : plan cost 10,001
2020-06-17 21:43:11 jdbc[13]: 
/**/prep18.setString(1, "%");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep18.setString(2, "\\");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep18.setString(3, "INFORMATION_SCHEMA");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep18.setString(4, "\\");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep18.setString(5, "%");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep18.setString(6, "\\");
2020-06-17 21:43:11 jdbc[13]: 
/**/ResultSet rs55 = prep18.executeQuery();
2020-06-17 21:43:11 jdbc[13]: Plan       : calculate cost for plan [FUNCTION_ALIASES:-13:org.h2.table.MetaTable@7c78ded7]
2020-06-17 21:43:11 jdbc[13]: Plan       :   for table filter FUNCTION_ALIASES:-13:org.h2.table.MetaTable@7c78ded7
2020-06-17 21:43:11 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:43:11 jdbc[13]: Plan       :   best plan item cost 9,800 index meta
2020-06-17 21:43:11 jdbc[13]: Plan       : plan cost 9,801
2020-06-17 21:43:11 jdbc[13]: 
/*SQL l:438*/SELECT ALIAS_CATALOG PROCEDURE_CAT, ALIAS_SCHEMA PROCEDURE_SCHEM, ALIAS_NAME PROCEDURE_NAME, COLUMN_COUNT NUM_INPUT_PARAMS, ZERO() NUM_OUTPUT_PARAMS, ZERO() NUM_RESULT_SETS, REMARKS, RETURNS_RESULT PROCEDURE_TYPE, ALIAS_NAME SPECIFIC_NAME FROM INFORMATION_SCHEMA.FUNCTION_ALIASES WHERE ALIAS_CATALOG LIKE ? ESCAPE ? AND ALIAS_SCHEMA LIKE ? ESCAPE ? AND ALIAS_NAME LIKE ? ESCAPE ? ORDER BY PROCEDURE_SCHEM, PROCEDURE_NAME, NUM_INPUT_PARAMS {1: '%', 2: '\\', 3: 'INFORMATION_SCHEMA', 4: '\\', 5: '%', 6: '\\'};
2020-06-17 21:43:11 jdbc[13]: 
/**/rs55.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs55.close();
2020-06-17 21:43:11 jdbc[13]: 
/**/prep18.close();
2020-06-17 21:43:11 jdbc[13]: 
/**/dbMeta4.getTables(null, "PUBLIC", null, new String[]{"TABLE", "SYSTEM TABLE", "VIEW", "SYSTEM VIEW", "TABLE LINK", "SYNONYM", "EXTERNAL"});
2020-06-17 21:43:11 jdbc[13]: 
/**/PreparedStatement prep19 = conn10.prepareStatement("SELECT TABLE_CAT, TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_CAT, TYPE_SCHEM, TYPE_NAME, SELF_REFERENCING_COL_NAME, REF_GENERATION, SQL FROM (SELECT SYNONYM_CATALOG TABLE_CAT, SYNONYM_SCHEMA TABLE_SCHEM, SYNONYM_NAME as TABLE_NAME, TYPE_NAME AS TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME AS TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, NULL AS SQL FROM INFORMATION_SCHEMA.SYNONYMS WHERE SYNONYM_CATALOG LIKE ?1 ESCAPE ?4 AND SYNONYM_SCHEMA LIKE ?2 ESCAPE ?4 AND SYNONYM_NAME LIKE ?3 ESCAPE ?4 UNION SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5, ?6, ?7, ?8, ?9, ?10, ?11)) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep19.setString(1, "%");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep19.setString(2, "PUBLIC");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep19.setString(3, "%");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep19.setString(4, "\\");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep19.setString(5, "TABLE");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep19.setString(6, "SYSTEM TABLE");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep19.setString(7, "VIEW");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep19.setString(8, "SYSTEM VIEW");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep19.setString(9, "TABLE LINK");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep19.setString(10, "SYNONYM");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep19.setString(11, "EXTERNAL");
2020-06-17 21:43:11 jdbc[13]: 
/**/ResultSet rs56 = prep19.executeQuery();
2020-06-17 21:43:11 jdbc[13]: Plan       : calculate cost for plan [_2]
2020-06-17 21:43:11 jdbc[13]: Plan       :   for table filter _2
2020-06-17 21:43:11 jdbc[13]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@5274f64d]
2020-06-17 21:43:11 jdbc[13]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@5274f64d
2020-06-17 21:43:11 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:43:11 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:43:11 jdbc[13]: Plan       :   best plan item cost 4,022 index meta
2020-06-17 21:43:11 jdbc[13]: Plan       : plan cost 4,023
2020-06-17 21:43:11 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@26ce996a]
2020-06-17 21:43:11 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@26ce996a
2020-06-17 21:43:11 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:43:11 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:43:11 jdbc[13]: Plan       :   best plan item cost 3,981.78 index meta
2020-06-17 21:43:11 jdbc[13]: Plan       : plan cost 3,982.78
2020-06-17 21:43:11 jdbc[13]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@5274f64d]
2020-06-17 21:43:11 jdbc[13]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@5274f64d
2020-06-17 21:43:11 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:43:11 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:43:11 jdbc[13]: Plan       :   best plan item cost 4,022 index meta
2020-06-17 21:43:11 jdbc[13]: Plan       : plan cost 4,023
2020-06-17 21:43:11 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@26ce996a]
2020-06-17 21:43:11 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@26ce996a
2020-06-17 21:43:11 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:43:11 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:43:11 jdbc[13]: Plan       :   best plan item cost 3,981.78 index meta
2020-06-17 21:43:11 jdbc[13]: Plan       : plan cost 3,982.78
2020-06-17 21:43:11 jdbc[13]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@5274f64d]
2020-06-17 21:43:11 jdbc[13]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@5274f64d
2020-06-17 21:43:11 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:43:11 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:43:11 jdbc[13]: Plan       :   best plan item cost 4,022 index meta
2020-06-17 21:43:11 jdbc[13]: Plan       : plan cost 4,023
2020-06-17 21:43:11 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@26ce996a]
2020-06-17 21:43:11 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@26ce996a
2020-06-17 21:43:11 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:43:11 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:43:11 jdbc[13]: Plan       :   best plan item cost 3,981.78 index meta
2020-06-17 21:43:11 jdbc[13]: Plan       : plan cost 3,982.78
2020-06-17 21:43:11 jdbc[13]: Plan       :   best plan item cost 8,005.78 index (SELECT
    SYNONYM_CATALOG AS TABLE_CAT,
    SYNONYM_SCHEMA AS TABLE_SCHEM,
    SYNONYM_NAME AS TABLE_NAME,
    TYPE_NAME AS TABLE_TYPE,
    REMARKS,
    TYPE_NAME AS TYPE_CAT,
    TYPE_NAME AS TYPE_SCHEM,
    TYPE_NAME AS TYPE_NAME,
    TYPE_NAME AS SELF_REFERENCING_COL_NAME,
    TYPE_NAME AS REF_GENERATION,
    NULL AS SQL
FROM INFORMATION_SCHEMA.SYNONYMS
    /* meta */
WHERE (SYNONYM_NAME LIKE ?3 ESCAPE ?4)
    AND ((SYNONYM_CATALOG LIKE ?1 ESCAPE ?4)
    AND (SYNONYM_SCHEMA LIKE ?2 ESCAPE ?4)))
UNION
(SELECT
    TABLE_CATALOG AS TABLE_CAT,
    TABLE_SCHEMA AS TABLE_SCHEM,
    TABLE_NAME,
    TABLE_TYPE,
    REMARKS,
    TYPE_NAME AS TYPE_CAT,
    TYPE_NAME AS TYPE_SCHEM,
    TYPE_NAME,
    TYPE_NAME AS SELF_REFERENCING_COL_NAME,
    TYPE_NAME AS REF_GENERATION,
    SQL
FROM INFORMATION_SCHEMA.TABLES
    /* meta */
WHERE (TABLE_TYPE IN(?5, ?6, ?7, ?8, ?9, ?10, ?11))
    AND ((TABLE_NAME LIKE ?3 ESCAPE ?4)
    AND ((TABLE_CATALOG LIKE ?1 ESCAPE ?4)
    AND (TABLE_SCHEMA LIKE ?2 ESCAPE ?4))))
2020-06-17 21:43:11 jdbc[13]: Plan       : plan cost 8,006.78
2020-06-17 21:43:11 jdbc[13]: 
/*SQL l:1007 #:2*/SELECT TABLE_CAT, TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_CAT, TYPE_SCHEM, TYPE_NAME, SELF_REFERENCING_COL_NAME, REF_GENERATION, SQL FROM (SELECT SYNONYM_CATALOG TABLE_CAT, SYNONYM_SCHEMA TABLE_SCHEM, SYNONYM_NAME as TABLE_NAME, TYPE_NAME AS TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME AS TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, NULL AS SQL FROM INFORMATION_SCHEMA.SYNONYMS WHERE SYNONYM_CATALOG LIKE ?1 ESCAPE ?4 AND SYNONYM_SCHEMA LIKE ?2 ESCAPE ?4 AND SYNONYM_NAME LIKE ?3 ESCAPE ?4 UNION SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5, ?6, ?7, ?8, ?9, ?10, ?11)) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME {1: '%', 2: 'PUBLIC', 3: '%', 4: '\\', 5: 'TABLE', 6: 'SYSTEM TABLE', 7: 'VIEW', 8: 'SYSTEM VIEW', 9: 'TABLE LINK', 10: 'SYNONYM', 11: 'EXTERNAL'};
2020-06-17 21:43:11 jdbc[13]: 
/**/rs56.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs56.getString("TABLE_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs56.getString("TABLE_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs56.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs56.getString("TABLE_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs56.getString("TABLE_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs56.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs56.close();
2020-06-17 21:43:11 jdbc[13]: 
/**/prep19.close();
2020-06-17 21:43:11 jdbc[13]: 
/**/dbMeta4.getConnection();
2020-06-17 21:43:11 jdbc[13]: 
/**/PreparedStatement prep20 = conn10.prepareStatement("SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ?");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep20.setString(1, "PUBLIC");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep20.setString(2, "CUSTOMER_TBL");
2020-06-17 21:43:11 jdbc[13]: 
/**/ResultSet rs57 = prep20.executeQuery();
2020-06-17 21:43:11 jdbc[13]: 
/*SQL l:123 #:4*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'PUBLIC', 2: 'CUSTOMER_TBL'};
2020-06-17 21:43:11 jdbc[13]: 
/**/rs57.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs57.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs57.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs57.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs57.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs57.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs57.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs57.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs57.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs57.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs57.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs57.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs57.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs57.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs57.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs57.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs57.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs57.close();
2020-06-17 21:43:11 jdbc[13]: 
/**/prep20.setString(1, "PUBLIC");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep20.setString(2, "LOG_TBL");
2020-06-17 21:43:11 jdbc[13]: 
/**/ResultSet rs58 = prep20.executeQuery();
2020-06-17 21:43:11 jdbc[13]: 
/*SQL l:123 #:9*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'PUBLIC', 2: 'LOG_TBL'};
2020-06-17 21:43:11 jdbc[13]: 
/**/rs58.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs58.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs58.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs58.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs58.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs58.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs58.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs58.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs58.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs58.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs58.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs58.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs58.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs58.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs58.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs58.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs58.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs58.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs58.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs58.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs58.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs58.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs58.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs58.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs58.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs58.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs58.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs58.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs58.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs58.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs58.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs58.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs58.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs58.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs58.getInt("ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs58.getString("COLUMN_TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs58.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs58.close();
2020-06-17 21:43:11 jdbc[13]: 
/**/prep20.close();
2020-06-17 21:43:11 jdbc[13]: 
/**/dbMeta4.getProcedures(null, "PUBLIC", null);
2020-06-17 21:43:11 jdbc[13]: 
/**/PreparedStatement prep21 = conn10.prepareStatement("SELECT ALIAS_CATALOG PROCEDURE_CAT, ALIAS_SCHEMA PROCEDURE_SCHEM, ALIAS_NAME PROCEDURE_NAME, COLUMN_COUNT NUM_INPUT_PARAMS, ZERO() NUM_OUTPUT_PARAMS, ZERO() NUM_RESULT_SETS, REMARKS, RETURNS_RESULT PROCEDURE_TYPE, ALIAS_NAME SPECIFIC_NAME FROM INFORMATION_SCHEMA.FUNCTION_ALIASES WHERE ALIAS_CATALOG LIKE ? ESCAPE ? AND ALIAS_SCHEMA LIKE ? ESCAPE ? AND ALIAS_NAME LIKE ? ESCAPE ? ORDER BY PROCEDURE_SCHEM, PROCEDURE_NAME, NUM_INPUT_PARAMS");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep21.setString(1, "%");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep21.setString(2, "\\");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep21.setString(3, "PUBLIC");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep21.setString(4, "\\");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep21.setString(5, "%");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep21.setString(6, "\\");
2020-06-17 21:43:11 jdbc[13]: 
/**/ResultSet rs59 = prep21.executeQuery();
2020-06-17 21:43:11 jdbc[13]: Plan       : calculate cost for plan [FUNCTION_ALIASES:-13:org.h2.table.MetaTable@7c78ded7]
2020-06-17 21:43:11 jdbc[13]: Plan       :   for table filter FUNCTION_ALIASES:-13:org.h2.table.MetaTable@7c78ded7
2020-06-17 21:43:11 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:43:11 jdbc[13]: Plan       :   best plan item cost 9,900 index meta
2020-06-17 21:43:11 jdbc[13]: Plan       : plan cost 9,901
2020-06-17 21:43:11 jdbc[13]: 
/*SQL l:438*/SELECT ALIAS_CATALOG PROCEDURE_CAT, ALIAS_SCHEMA PROCEDURE_SCHEM, ALIAS_NAME PROCEDURE_NAME, COLUMN_COUNT NUM_INPUT_PARAMS, ZERO() NUM_OUTPUT_PARAMS, ZERO() NUM_RESULT_SETS, REMARKS, RETURNS_RESULT PROCEDURE_TYPE, ALIAS_NAME SPECIFIC_NAME FROM INFORMATION_SCHEMA.FUNCTION_ALIASES WHERE ALIAS_CATALOG LIKE ? ESCAPE ? AND ALIAS_SCHEMA LIKE ? ESCAPE ? AND ALIAS_NAME LIKE ? ESCAPE ? ORDER BY PROCEDURE_SCHEM, PROCEDURE_NAME, NUM_INPUT_PARAMS {1: '%', 2: '\\', 3: 'PUBLIC', 4: '\\', 5: '%', 6: '\\'};
2020-06-17 21:43:11 jdbc[13]: 
/**/rs59.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs59.close();
2020-06-17 21:43:11 jdbc[13]: 
/**/prep21.close();
2020-06-17 21:43:11 jdbc[13]: 
/**/dbMeta3.getIndexInfo(null, "PUBLIC", "CUSTOMER_TBL", false, true);
2020-06-17 21:43:11 jdbc[13]: 
/**/PreparedStatement prep22 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, NON_UNIQUE, TABLE_CATALOG INDEX_QUALIFIER, INDEX_NAME, INDEX_TYPE TYPE, ORDINAL_POSITION, COLUMN_NAME, ASC_OR_DESC, CARDINALITY, PAGES, FILTER_CONDITION, SORT_TYPE FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND (TRUE) AND TABLE_NAME = ? ORDER BY NON_UNIQUE, TYPE, TABLE_SCHEM, INDEX_NAME, ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@7495e067]
2020-06-17 21:43:11 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@7495e067
2020-06-17 21:43:11 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:43:11 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-17 21:43:11 jdbc[13]: Plan       :   best plan item cost 324.72 index meta
2020-06-17 21:43:11 jdbc[13]: Plan       : plan cost 325.72
2020-06-17 21:43:11 jdbc[13]: 
/**/prep22.setString(1, "%");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep22.setString(2, "\\");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep22.setString(3, "PUBLIC");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep22.setString(4, "\\");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep22.setString(5, "CUSTOMER_TBL");
2020-06-17 21:43:11 jdbc[13]: 
/**/ResultSet rs60 = prep22.executeQuery();
2020-06-17 21:43:11 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@7495e067]
2020-06-17 21:43:11 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@7495e067
2020-06-17 21:43:11 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:43:11 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-17 21:43:11 jdbc[13]: Plan       :   best plan item cost 321.44 index meta
2020-06-17 21:43:11 jdbc[13]: Plan       : plan cost 322.44
2020-06-17 21:43:11 jdbc[13]: 
/*SQL l:433 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, NON_UNIQUE, TABLE_CATALOG INDEX_QUALIFIER, INDEX_NAME, INDEX_TYPE TYPE, ORDINAL_POSITION, COLUMN_NAME, ASC_OR_DESC, CARDINALITY, PAGES, FILTER_CONDITION, SORT_TYPE FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND (TRUE) AND TABLE_NAME = ? ORDER BY NON_UNIQUE, TYPE, TABLE_SCHEM, INDEX_NAME, ORDINAL_POSITION {1: '%', 2: '\\', 3: 'PUBLIC', 4: '\\', 5: 'CUSTOMER_TBL'};
2020-06-17 21:43:11 jdbc[13]: 
/**/rs60.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs60.getString("INDEX_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs60.getInt("TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs60.getBoolean("NON_UNIQUE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs60.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs60.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs60.close();
2020-06-17 21:43:11 jdbc[13]: 
/**/prep22.close();
2020-06-17 21:43:11 jdbc[13]: 
/**/dbMeta3.getIndexInfo(null, "PUBLIC", "LOG_TBL", false, true);
2020-06-17 21:43:11 jdbc[13]: 
/**/PreparedStatement prep23 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, NON_UNIQUE, TABLE_CATALOG INDEX_QUALIFIER, INDEX_NAME, INDEX_TYPE TYPE, ORDINAL_POSITION, COLUMN_NAME, ASC_OR_DESC, CARDINALITY, PAGES, FILTER_CONDITION, SORT_TYPE FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND (TRUE) AND TABLE_NAME = ? ORDER BY NON_UNIQUE, TYPE, TABLE_SCHEM, INDEX_NAME, ORDINAL_POSITION");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep23.setString(1, "%");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep23.setString(2, "\\");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep23.setString(3, "PUBLIC");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep23.setString(4, "\\");
2020-06-17 21:43:11 jdbc[13]: 
/**/prep23.setString(5, "LOG_TBL");
2020-06-17 21:43:11 jdbc[13]: 
/**/ResultSet rs61 = prep23.executeQuery();
2020-06-17 21:43:11 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@7495e067]
2020-06-17 21:43:11 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@7495e067
2020-06-17 21:43:11 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:43:11 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-17 21:43:11 jdbc[13]: Plan       :   best plan item cost 321.44 index meta
2020-06-17 21:43:11 jdbc[13]: Plan       : plan cost 322.44
2020-06-17 21:43:11 jdbc[13]: 
/*SQL l:433 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, NON_UNIQUE, TABLE_CATALOG INDEX_QUALIFIER, INDEX_NAME, INDEX_TYPE TYPE, ORDINAL_POSITION, COLUMN_NAME, ASC_OR_DESC, CARDINALITY, PAGES, FILTER_CONDITION, SORT_TYPE FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND (TRUE) AND TABLE_NAME = ? ORDER BY NON_UNIQUE, TYPE, TABLE_SCHEM, INDEX_NAME, ORDINAL_POSITION {1: '%', 2: '\\', 3: 'PUBLIC', 4: '\\', 5: 'LOG_TBL'};
2020-06-17 21:43:11 jdbc[13]: 
/**/rs61.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs61.getString("INDEX_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs61.getInt("TYPE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs61.getBoolean("NON_UNIQUE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs61.getString("COLUMN_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs61.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs61.close();
2020-06-17 21:43:11 jdbc[13]: 
/**/prep23.close();
2020-06-17 21:43:11 jdbc[13]: 
/**/Statement stat3 = conn10.createStatement();
2020-06-17 21:43:11 jdbc[13]: 
/**/ResultSet rs62 = stat3.executeQuery("SELECT * FROM INFORMATION_SCHEMA.SEQUENCES ORDER BY SEQUENCE_NAME");
2020-06-17 21:43:11 jdbc[13]: Plan       : calculate cost for plan [SEQUENCES:-9:org.h2.table.MetaTable@e4e722f]
2020-06-17 21:43:11 jdbc[13]: Plan       :   for table filter SEQUENCES:-9:org.h2.table.MetaTable@e4e722f
2020-06-17 21:43:11 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:43:11 jdbc[13]: Plan       :   best plan item cost 10,000 index meta
2020-06-17 21:43:11 jdbc[13]: Plan       : plan cost 10,001
2020-06-17 21:43:11 jdbc[13]: 
/*SQL #:2*/SELECT * FROM INFORMATION_SCHEMA.SEQUENCES ORDER BY SEQUENCE_NAME;
2020-06-17 21:43:11 jdbc[13]: 
/**/rs62.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs62.getString("SEQUENCE_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs62.getString("CURRENT_VALUE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs62.getString("INCREMENT");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs62.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs62.getString("SEQUENCE_NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs62.getString("CURRENT_VALUE");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs62.getString("INCREMENT");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs62.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs62.close();
2020-06-17 21:43:11 jdbc[13]: 
/**/ResultSet rs63 = stat3.executeQuery("SELECT * FROM INFORMATION_SCHEMA.USERS ORDER BY NAME");
2020-06-17 21:43:11 jdbc[13]: Plan       : calculate cost for plan [USERS:-10:org.h2.table.MetaTable@29338f67]
2020-06-17 21:43:11 jdbc[13]: Plan       :   for table filter USERS:-10:org.h2.table.MetaTable@29338f67
2020-06-17 21:43:11 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:43:11 jdbc[13]: Plan       :   best plan item cost 10,000 index meta
2020-06-17 21:43:11 jdbc[13]: Plan       : plan cost 10,001
2020-06-17 21:43:11 jdbc[13]: 
/*SQL #:1*/SELECT * FROM INFORMATION_SCHEMA.USERS ORDER BY NAME;
2020-06-17 21:43:11 jdbc[13]: 
/**/rs63.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs63.getString("NAME");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs63.getString("ADMIN");
2020-06-17 21:43:11 jdbc[13]: 
/**/rs63.next();
2020-06-17 21:43:11 jdbc[13]: 
/**/rs63.close();
2020-06-17 21:43:11 jdbc[13]: 
/**/stat3.close();
2020-06-17 21:43:11 jdbc[13]: 
/**/dbMeta3.getDatabaseProductName();
2020-06-17 21:43:11 jdbc[13]: 
/**/dbMeta3.getDatabaseProductVersion();
2020-06-17 21:43:15 jdbc[13]: 
/**/Statement stat4 = conn10.createStatement(1004, 1008);
2020-06-17 21:43:15 jdbc[13]: 
/**/stat4.setMaxRows(1000);
2020-06-17 21:43:15 jdbc[13]: 
/**/stat4.execute("SELECT * FROM LOG_TBL");
2020-06-17 21:43:15 jdbc[13]: Plan       : calculate cost for plan [PUBLIC.LOG_TBL]
2020-06-17 21:43:15 jdbc[13]: Plan       :   for table filter PUBLIC.LOG_TBL
2020-06-17 21:43:15 jdbc[13]: Table      :     potential plan item cost 10,200 index PUBLIC.LOG_TBL.tableScan
2020-06-17 21:43:15 jdbc[13]: Table      :     potential plan item cost 10,210 index PUBLIC.PRIMARY_KEY_3
2020-06-17 21:43:15 jdbc[13]: Plan       :   best plan item cost 10,200 index PUBLIC.LOG_TBL.tableScan
2020-06-17 21:43:15 jdbc[13]: Plan       : plan cost 10,201
2020-06-17 21:43:15 jdbc[13]: 
/*SQL */SELECT * FROM LOG_TBL;
2020-06-17 21:43:15 jdbc[13]: 
/**/ResultSet rs64 = stat4.getResultSet();
2020-06-17 21:43:15 jdbc[13]: 
/**/ResultSetMetaData rsMeta5 = rs64.getMetaData();
2020-06-17 21:43:15 jdbc[13]: 
/**/conn10.getCatalog();
2020-06-17 21:43:15 jdbc[13]: 
/*SQL #:1*/CALL DATABASE();
2020-06-17 21:43:15 jdbc[13]: 
/**/rsMeta5.getColumnCount();
2020-06-17 21:43:15 jdbc[13]: 
/**/rsMeta5.getColumnLabel(1);
2020-06-17 21:43:15 jdbc[13]: 
/**/rsMeta5.getColumnLabel(2);
2020-06-17 21:43:15 jdbc[13]: 
/**/rsMeta5.getColumnLabel(3);
2020-06-17 21:43:15 jdbc[13]: 
/**/rsMeta5.getColumnLabel(4);
2020-06-17 21:43:15 jdbc[13]: 
/**/rsMeta5.getColumnLabel(5);
2020-06-17 21:43:15 jdbc[13]: 
/**/rsMeta5.getColumnLabel(6);
2020-06-17 21:43:15 jdbc[13]: 
/**/rsMeta5.getColumnLabel(7);
2020-06-17 21:43:15 jdbc[13]: 
/**/rsMeta5.getColumnLabel(8);
2020-06-17 21:43:15 jdbc[13]: 
/**/rsMeta5.getColumnLabel(9);
2020-06-17 21:43:15 jdbc[13]: 
/**/rs64.next();
2020-06-17 21:43:15 jdbc[13]: 
/**/rs64.getConcurrency();
2020-06-17 21:43:15 jdbc[13]: 
/**/DatabaseMetaData dbMeta5 = conn10.getMetaData();
2020-06-17 21:43:15 jdbc[13]: 
/**/dbMeta5.getTables(null, "PUBLIC", "LOG_TBL", new String[]{"TABLE"});
2020-06-17 21:43:15 jdbc[13]: 
/**/PreparedStatement prep24 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME");
2020-06-17 21:43:15 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@26ce996a]
2020-06-17 21:43:15 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@26ce996a
2020-06-17 21:43:15 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:43:15 jdbc[13]: Table      :     potential plan item cost 4,322 index meta
2020-06-17 21:43:15 jdbc[13]: Plan       :   best plan item cost 4,278.78 index meta
2020-06-17 21:43:15 jdbc[13]: Plan       : plan cost 4,279.78
2020-06-17 21:43:15 jdbc[13]: 
/**/prep24.setString(1, "%");
2020-06-17 21:43:15 jdbc[13]: 
/**/prep24.setString(2, "PUBLIC");
2020-06-17 21:43:15 jdbc[13]: 
/**/prep24.setString(3, "LOG_TBL");
2020-06-17 21:43:15 jdbc[13]: 
/**/prep24.setString(4, "\\");
2020-06-17 21:43:15 jdbc[13]: 
/**/prep24.setString(5, "TABLE");
2020-06-17 21:43:15 jdbc[13]: 
/**/ResultSet rs65 = prep24.executeQuery();
2020-06-17 21:43:15 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@26ce996a]
2020-06-17 21:43:15 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@26ce996a
2020-06-17 21:43:15 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:43:15 jdbc[13]: Table      :     potential plan item cost 1,324 index meta
2020-06-17 21:43:15 jdbc[13]: Plan       :   best plan item cost 1,271.04 index meta
2020-06-17 21:43:15 jdbc[13]: Plan       : plan cost 1,272.04
2020-06-17 21:43:15 jdbc[13]: 
/*SQL l:414 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME {1: '%', 2: 'PUBLIC', 3: 'LOG_TBL', 4: '\\', 5: 'TABLE'};
2020-06-17 21:43:15 jdbc[13]: 
/**/rs65.next();
2020-06-17 21:43:15 jdbc[13]: 
/**/rs65.getString("SQL");
2020-06-17 21:43:15 jdbc[13]: 
/**/rs65.getString("TABLE_NAME");
2020-06-17 21:43:15 jdbc[13]: 
/**/dbMeta5.getPrimaryKeys(null, "PUBLIC", "LOG_TBL");
2020-06-17 21:43:15 jdbc[13]: 
/**/PreparedStatement prep25 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME");
2020-06-17 21:43:15 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@7495e067]
2020-06-17 21:43:15 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@7495e067
2020-06-17 21:43:15 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:43:15 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-17 21:43:15 jdbc[13]: Plan       :   best plan item cost 321.44 index meta
2020-06-17 21:43:15 jdbc[13]: Plan       : plan cost 322.44
2020-06-17 21:43:15 jdbc[13]: 
/**/prep25.setString(1, "%");
2020-06-17 21:43:15 jdbc[13]: 
/**/prep25.setString(2, "\\");
2020-06-17 21:43:15 jdbc[13]: 
/**/prep25.setString(3, "PUBLIC");
2020-06-17 21:43:15 jdbc[13]: 
/**/prep25.setString(4, "\\");
2020-06-17 21:43:15 jdbc[13]: 
/**/prep25.setString(5, "LOG_TBL");
2020-06-17 21:43:15 jdbc[13]: 
/**/ResultSet rs66 = prep25.executeQuery();
2020-06-17 21:43:15 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@7495e067]
2020-06-17 21:43:15 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@7495e067
2020-06-17 21:43:15 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:43:15 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-17 21:43:15 jdbc[13]: Plan       :   best plan item cost 318.16 index meta
2020-06-17 21:43:15 jdbc[13]: Plan       : plan cost 319.16
2020-06-17 21:43:15 jdbc[13]: 
/*SQL l:316 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME {1: '%', 2: '\\', 3: 'PUBLIC', 4: '\\', 5: 'LOG_TBL'};
2020-06-17 21:43:15 jdbc[13]: 
/**/rs66.next();
2020-06-17 21:43:15 jdbc[13]: 
/**/rs66.getString("COLUMN_NAME");
2020-06-17 21:43:15 jdbc[13]: 
/**/rs66.next();
2020-06-17 21:43:15 jdbc[13]: 
/**/rs64.getType();
2020-06-17 21:43:15 jdbc[13]: 
/**/rs64.close();
2020-06-17 21:43:15 jdbc[13]: 
/**/stat4.close();
2020-06-17 21:43:25 jdbc[13]: 
/**/Statement stat5 = conn10.createStatement(1004, 1008);
2020-06-17 21:43:25 jdbc[13]: 
/**/stat5.setMaxRows(1000);
2020-06-17 21:43:25 jdbc[13]: 
/**/stat5.execute("SELECT * FROM CUSTOMER_TBL");
2020-06-17 21:43:25 jdbc[13]: Plan       : calculate cost for plan [PUBLIC.CUSTOMER_TBL]
2020-06-17 21:43:25 jdbc[13]: Plan       :   for table filter PUBLIC.CUSTOMER_TBL
2020-06-17 21:43:25 jdbc[13]: Table      :     potential plan item cost 10,250 index PUBLIC.CUSTOMER_TBL.tableScan
2020-06-17 21:43:25 jdbc[13]: Table      :     potential plan item cost 10,260 index PUBLIC.PRIMARY_KEY_B
2020-06-17 21:43:25 jdbc[13]: Plan       :   best plan item cost 10,250 index PUBLIC.CUSTOMER_TBL.tableScan
2020-06-17 21:43:25 jdbc[13]: Plan       : plan cost 10,251
2020-06-17 21:43:25 jdbc[13]: 
/*SQL #:5*/SELECT * FROM CUSTOMER_TBL;
2020-06-17 21:43:25 jdbc[13]: 
/**/ResultSet rs67 = stat5.getResultSet();
2020-06-17 21:43:25 jdbc[13]: 
/**/ResultSetMetaData rsMeta6 = rs67.getMetaData();
2020-06-17 21:43:25 jdbc[13]: 
/**/conn10.getCatalog();
2020-06-17 21:43:25 jdbc[13]: 
/**/rsMeta6.getColumnCount();
2020-06-17 21:43:25 jdbc[13]: 
/**/rsMeta6.getColumnLabel(1);
2020-06-17 21:43:25 jdbc[13]: 
/**/rsMeta6.getColumnLabel(2);
2020-06-17 21:43:25 jdbc[13]: 
/**/rsMeta6.getColumnLabel(3);
2020-06-17 21:43:25 jdbc[13]: 
/**/rsMeta6.getColumnLabel(4);
2020-06-17 21:43:25 jdbc[13]: 
/**/rs67.next();
2020-06-17 21:43:25 jdbc[13]: 
/**/rs67.getString(1);
2020-06-17 21:43:25 jdbc[13]: 
/**/rs67.getString(2);
2020-06-17 21:43:25 jdbc[13]: 
/**/rs67.getString(3);
2020-06-17 21:43:25 jdbc[13]: 
/**/rs67.getString(4);
2020-06-17 21:43:25 jdbc[13]: 
/**/rs67.next();
2020-06-17 21:43:25 jdbc[13]: 
/**/rs67.getString(1);
2020-06-17 21:43:25 jdbc[13]: 
/**/rs67.getString(2);
2020-06-17 21:43:25 jdbc[13]: 
/**/rs67.getString(3);
2020-06-17 21:43:25 jdbc[13]: 
/**/rs67.getString(4);
2020-06-17 21:43:25 jdbc[13]: 
/**/rs67.next();
2020-06-17 21:43:25 jdbc[13]: 
/**/rs67.getString(1);
2020-06-17 21:43:25 jdbc[13]: 
/**/rs67.getString(2);
2020-06-17 21:43:25 jdbc[13]: 
/**/rs67.getString(3);
2020-06-17 21:43:25 jdbc[13]: 
/**/rs67.getString(4);
2020-06-17 21:43:25 jdbc[13]: 
/**/rs67.next();
2020-06-17 21:43:25 jdbc[13]: 
/**/rs67.getString(1);
2020-06-17 21:43:25 jdbc[13]: 
/**/rs67.getString(2);
2020-06-17 21:43:25 jdbc[13]: 
/**/rs67.getString(3);
2020-06-17 21:43:25 jdbc[13]: 
/**/rs67.getString(4);
2020-06-17 21:43:25 jdbc[13]: 
/**/rs67.next();
2020-06-17 21:43:25 jdbc[13]: 
/**/rs67.getString(1);
2020-06-17 21:43:25 jdbc[13]: 
/**/rs67.getString(2);
2020-06-17 21:43:25 jdbc[13]: 
/**/rs67.getString(3);
2020-06-17 21:43:25 jdbc[13]: 
/**/rs67.getString(4);
2020-06-17 21:43:25 jdbc[13]: 
/**/rs67.next();
2020-06-17 21:43:25 jdbc[13]: 
/**/rs67.getConcurrency();
2020-06-17 21:43:25 jdbc[13]: 
/**/DatabaseMetaData dbMeta6 = conn10.getMetaData();
2020-06-17 21:43:25 jdbc[13]: 
/**/dbMeta6.getTables(null, "PUBLIC", "CUSTOMER_TBL", new String[]{"TABLE"});
2020-06-17 21:43:25 jdbc[13]: 
/**/PreparedStatement prep26 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME");
2020-06-17 21:43:25 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@26ce996a]
2020-06-17 21:43:25 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@26ce996a
2020-06-17 21:43:25 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:43:25 jdbc[13]: Table      :     potential plan item cost 4,322 index meta
2020-06-17 21:43:25 jdbc[13]: Plan       :   best plan item cost 4,278.78 index meta
2020-06-17 21:43:25 jdbc[13]: Plan       : plan cost 4,279.78
2020-06-17 21:43:25 jdbc[13]: 
/**/prep26.setString(1, "%");
2020-06-17 21:43:25 jdbc[13]: 
/**/prep26.setString(2, "PUBLIC");
2020-06-17 21:43:25 jdbc[13]: 
/**/prep26.setString(3, "CUSTOMER_TBL");
2020-06-17 21:43:25 jdbc[13]: 
/**/prep26.setString(4, "\\");
2020-06-17 21:43:25 jdbc[13]: 
/**/prep26.setString(5, "TABLE");
2020-06-17 21:43:25 jdbc[13]: 
/**/ResultSet rs68 = prep26.executeQuery();
2020-06-17 21:43:25 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@26ce996a]
2020-06-17 21:43:25 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@26ce996a
2020-06-17 21:43:25 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:43:25 jdbc[13]: Table      :     potential plan item cost 1,324 index meta
2020-06-17 21:43:25 jdbc[13]: Plan       :   best plan item cost 1,271.04 index meta
2020-06-17 21:43:25 jdbc[13]: Plan       : plan cost 1,272.04
2020-06-17 21:43:25 jdbc[13]: 
/*SQL l:414 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME {1: '%', 2: 'PUBLIC', 3: 'CUSTOMER_TBL', 4: '\\', 5: 'TABLE'};
2020-06-17 21:43:25 jdbc[13]: 
/**/rs68.next();
2020-06-17 21:43:25 jdbc[13]: 
/**/rs68.getString("SQL");
2020-06-17 21:43:25 jdbc[13]: 
/**/rs68.getString("TABLE_NAME");
2020-06-17 21:43:25 jdbc[13]: 
/**/dbMeta6.getPrimaryKeys(null, "PUBLIC", "CUSTOMER_TBL");
2020-06-17 21:43:25 jdbc[13]: 
/**/PreparedStatement prep27 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME");
2020-06-17 21:43:25 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@7495e067]
2020-06-17 21:43:25 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@7495e067
2020-06-17 21:43:25 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:43:25 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-17 21:43:25 jdbc[13]: Plan       :   best plan item cost 321.44 index meta
2020-06-17 21:43:25 jdbc[13]: Plan       : plan cost 322.44
2020-06-17 21:43:25 jdbc[13]: 
/**/prep27.setString(1, "%");
2020-06-17 21:43:25 jdbc[13]: 
/**/prep27.setString(2, "\\");
2020-06-17 21:43:25 jdbc[13]: 
/**/prep27.setString(3, "PUBLIC");
2020-06-17 21:43:25 jdbc[13]: 
/**/prep27.setString(4, "\\");
2020-06-17 21:43:25 jdbc[13]: 
/**/prep27.setString(5, "CUSTOMER_TBL");
2020-06-17 21:43:25 jdbc[13]: 
/**/ResultSet rs69 = prep27.executeQuery();
2020-06-17 21:43:25 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@7495e067]
2020-06-17 21:43:25 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@7495e067
2020-06-17 21:43:25 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:43:25 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-17 21:43:25 jdbc[13]: Plan       :   best plan item cost 318.16 index meta
2020-06-17 21:43:25 jdbc[13]: Plan       : plan cost 319.16
2020-06-17 21:43:25 jdbc[13]: 
/*SQL l:316 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME {1: '%', 2: '\\', 3: 'PUBLIC', 4: '\\', 5: 'CUSTOMER_TBL'};
2020-06-17 21:43:25 jdbc[13]: 
/**/rs69.next();
2020-06-17 21:43:25 jdbc[13]: 
/**/rs69.getString("COLUMN_NAME");
2020-06-17 21:43:25 jdbc[13]: 
/**/rs69.next();
2020-06-17 21:43:25 jdbc[13]: 
/**/rs67.getType();
2020-06-17 21:43:25 jdbc[13]: 
/**/rs67.close();
2020-06-17 21:43:25 jdbc[13]: 
/**/stat5.close();
2020-06-17 21:44:09 jdbc[13]: 
/**/conn10.close();
2020-06-17 21:44:09 lock: 13 shared read lock unlock SYS 
2020-06-17 21:44:09 database: disconnecting session #13
2020-06-17 21:44:09 database: disconnected session #13
2020-06-17 21:44:09 database: closing /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb from shutdown hook
2020-06-17 21:44:09 lock: 3 shared read lock unlock SYS 
2020-06-17 21:44:09 database: disconnecting session #3
2020-06-17 21:44:09 database: disconnected session #3
2020-06-17 21:44:09 lock: 4 shared read lock unlock SYS 
2020-06-17 21:44:09 database: disconnecting session #4
2020-06-17 21:44:09 database: disconnected session #4
2020-06-17 21:44:09 lock: 5 shared read lock unlock SYS 
2020-06-17 21:44:09 database: disconnecting session #5
2020-06-17 21:44:09 database: disconnected session #5
2020-06-17 21:44:09 lock: 6 shared read lock unlock SYS 
2020-06-17 21:44:09 database: disconnecting session #6
2020-06-17 21:44:09 database: disconnected session #6
2020-06-17 21:44:09 lock: 7 shared read lock unlock SYS 
2020-06-17 21:44:09 database: disconnecting session #7
2020-06-17 21:44:09 database: disconnected session #7
2020-06-17 21:44:09 lock: 8 shared read lock unlock SYS 
2020-06-17 21:44:09 database: disconnecting session #8
2020-06-17 21:44:09 database: disconnected session #8
2020-06-17 21:44:09 lock: 9 shared read lock unlock SYS 
2020-06-17 21:44:09 database: disconnecting session #9
2020-06-17 21:44:09 database: disconnected session #9
2020-06-17 21:44:09 lock: 10 shared read lock unlock SYS 
2020-06-17 21:44:09 database: disconnecting session #10
2020-06-17 21:44:09 database: disconnected session #10
2020-06-17 21:44:09 lock: 11 shared read lock unlock SYS 
2020-06-17 21:44:09 database: disconnecting session #11
2020-06-17 21:44:09 database: disconnected session #11
2020-06-17 21:44:09 lock: 12 shared read lock unlock SYS 
2020-06-17 21:44:09 database: disconnecting session #12
2020-06-17 21:44:09 database: disconnected session #12
2020-06-17 21:44:09 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-17 21:44:09 jdbc[4]: 
/**/conn1.isValid(5);
2020-06-17 21:44:09 jdbc[3]: 
/**/conn0.close();
2020-06-17 21:44:09 jdbc[5]: 
/**/conn2.isValid(5);
2020-06-17 21:44:09 jdbc[4]: 
/**/conn1.close();
2020-06-17 21:44:09 jdbc[6]: 
/**/conn3.isValid(5);
2020-06-17 21:44:09 jdbc[5]: 
/**/conn2.close();
2020-06-17 21:44:09 jdbc[7]: 
/**/conn4.isValid(5);
2020-06-17 21:44:09 jdbc[6]: 
/**/conn3.close();
2020-06-17 21:44:09 jdbc[7]: 
/**/conn4.close();
2020-06-17 21:44:09 jdbc[8]: 
/**/conn5.isValid(5);
2020-06-17 21:44:09 jdbc[9]: 
/**/conn6.isValid(5);
2020-06-17 21:44:09 jdbc[8]: 
/**/conn5.close();
2020-06-17 21:44:09 jdbc[10]: 
/**/conn7.isValid(5);
2020-06-17 21:44:09 jdbc[9]: 
/**/conn6.close();
2020-06-17 21:44:09 jdbc[11]: 
/**/conn8.isValid(5);
2020-06-17 21:44:09 jdbc[10]: 
/**/conn7.close();
2020-06-17 21:44:09 jdbc[12]: 
/**/conn9.isValid(5);
2020-06-17 21:44:09 jdbc[11]: 
/**/conn8.close();
2020-06-17 21:44:09 jdbc[12]: 
/**/conn9.close();
2020-06-17 21:44:09 database: opening /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb (build 200)
2020-06-17 21:44:09 database: flush
org.h2.message.DbException: General error: "java.lang.IllegalStateException: The file is locked: nio:/Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb.mv.db [1.4.200/7]" [50000-200]
	at org.h2.message.DbException.get(DbException.java:194)
	at org.h2.message.DbException.convert(DbException.java:347)
	at org.h2.mvstore.db.MVTableEngine$1.uncaughtException(MVTableEngine.java:93)
	at org.h2.mvstore.MVStore.handleException(MVStore.java:2877)
	at org.h2.mvstore.MVStore.panic(MVStore.java:481)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:402)
	at org.h2.mvstore.MVStore$Builder.open(MVStore.java:3579)
	at org.h2.mvstore.db.MVTableEngine$Store.open(MVTableEngine.java:170)
	at org.h2.mvstore.db.MVTableEngine.init(MVTableEngine.java:103)
	at org.h2.engine.Database.getPageStore(Database.java:2659)
	at org.h2.engine.Database.open(Database.java:675)
	at org.h2.engine.Database.openDatabase(Database.java:307)
	at org.h2.engine.Database.<init>(Database.java:301)
	at org.h2.engine.Engine.openSession(Engine.java:74)
	at org.h2.engine.Engine.openSession(Engine.java:192)
	at org.h2.engine.Engine.createSessionAndValidate(Engine.java:171)
	at org.h2.engine.Engine.createSession(Engine.java:166)
	at org.h2.engine.Engine.createSession(Engine.java:29)
	at org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:340)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:173)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:152)
	at org.h2.Driver.connect(Driver.java:69)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:138)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:358)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:206)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:477)
	at com.zaxxer.hikari.pool.HikariPool.access$100(HikariPool.java:71)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:725)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:711)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:832)
Caused by: org.h2.jdbc.JdbcSQLNonTransientException: General error: "java.lang.IllegalStateException: The file is locked: nio:/Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb.mv.db [1.4.200/7]" [50000-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:505)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	... 33 more
Caused by: java.lang.IllegalStateException: The file is locked: nio:/Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb.mv.db [1.4.200/7]
	at org.h2.mvstore.DataUtils.newIllegalStateException(DataUtils.java:950)
	at org.h2.mvstore.FileStore.open(FileStore.java:166)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:381)
	... 27 more
Caused by: java.nio.channels.OverlappingFileLockException
	at java.base/sun.nio.ch.FileLockTable.checkList(FileLockTable.java:229)
	at java.base/sun.nio.ch.FileLockTable.add(FileLockTable.java:123)
	at java.base/sun.nio.ch.FileChannelImpl.tryLock(FileChannelImpl.java:1286)
	at org.h2.store.fs.FileNio.tryLock(FilePathNio.java:121)
	at java.base/java.nio.channels.FileChannel.tryLock(FileChannel.java:1178)
	at org.h2.mvstore.FileStore.open(FileStore.java:163)
	... 28 more
2020-06-17 21:44:09 database: closing /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:44:09 lock: 1 exclusive write lock requesting for SYS 
2020-06-17 21:44:09 lock: 1 exclusive write lock added for SYS 
2020-06-17 21:44:09 lock: 1 exclusive write lock unlock SYS 
2020-06-17 21:44:09 lock: 1 shared read lock unlock SYS 
2020-06-17 21:44:09 lock: 2 shared read lock unlock SYS 
2020-06-17 21:44:09 database: closed
2020-06-17 21:44:09 database: opening /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb (build 200)
2020-06-17 21:44:09 lock: 1 exclusive write lock requesting for SYS 
2020-06-17 21:44:09 lock: 1 exclusive write lock added for SYS 
2020-06-17 21:44:09 lock: 1 exclusive write lock unlock SYS 
2020-06-17 21:44:09 lock: 1 exclusive write lock requesting for SYS 
2020-06-17 21:44:09 lock: 1 exclusive write lock added for SYS 
2020-06-17 21:44:09 lock: 1 exclusive write lock unlock SYS 
2020-06-17 21:44:09 lock: 1 exclusive write lock requesting for SYS 
2020-06-17 21:44:09 lock: 1 exclusive write lock added for SYS 
2020-06-17 21:44:09 lock: 1 exclusive write lock unlock SYS 
2020-06-17 21:44:09 lock: 1 exclusive write lock requesting for SYS 
2020-06-17 21:44:09 lock: 1 exclusive write lock added for SYS 
2020-06-17 21:44:09 lock: 1 exclusive write lock unlock SYS 
2020-06-17 21:44:09 lock: 1 exclusive write lock requesting for SYS 
2020-06-17 21:44:09 lock: 1 exclusive write lock added for SYS 
2020-06-17 21:44:09 lock: 1 exclusive write lock unlock SYS 
2020-06-17 21:44:09 lock: 1 exclusive write lock requesting for SYS 
2020-06-17 21:44:09 lock: 1 exclusive write lock added for SYS 
2020-06-17 21:44:09 lock: 1 exclusive write lock unlock SYS 
2020-06-17 21:44:09 lock: 1 exclusive write lock requesting for SYS 
2020-06-17 21:44:09 lock: 1 exclusive write lock added for SYS 
2020-06-17 21:44:09 lock: 1 exclusive write lock unlock SYS 
2020-06-17 21:44:09 lock: 1 exclusive write lock requesting for CUSTOMER_TBL 
2020-06-17 21:44:09 lock: 1 exclusive write lock added for CUSTOMER_TBL 
2020-06-17 21:44:09 lock: 1 exclusive write lock requesting for SYS 
2020-06-17 21:44:09 lock: 1 exclusive write lock added for SYS 
2020-06-17 21:44:09 lock: 1 exclusive write lock unlock CUSTOMER_TBL 
2020-06-17 21:44:09 lock: 1 exclusive write lock unlock SYS 
2020-06-17 21:44:09 lock: 1 exclusive write lock requesting for LOG_TBL 
2020-06-17 21:44:09 lock: 1 exclusive write lock added for LOG_TBL 
2020-06-17 21:44:09 lock: 1 exclusive write lock requesting for SYS 
2020-06-17 21:44:09 lock: 1 exclusive write lock added for SYS 
2020-06-17 21:44:09 lock: 1 exclusive write lock unlock LOG_TBL 
2020-06-17 21:44:09 lock: 1 exclusive write lock unlock SYS 
2020-06-17 21:44:09 lock: 1 exclusive write lock requesting for SYS 
2020-06-17 21:44:09 lock: 1 exclusive write lock added for SYS 
2020-06-17 21:44:09 lock: 1 exclusive write lock requesting for CUSTOMER_TBL 
2020-06-17 21:44:09 lock: 1 exclusive write lock added for CUSTOMER_TBL 
2020-06-17 21:44:09 lock: 1 exclusive write lock unlock SYS 
2020-06-17 21:44:09 lock: 1 exclusive write lock unlock CUSTOMER_TBL 
2020-06-17 21:44:09 lock: 1 exclusive write lock requesting for SYS 
2020-06-17 21:44:09 lock: 1 exclusive write lock added for SYS 
2020-06-17 21:44:09 lock: 1 exclusive write lock requesting for LOG_TBL 
2020-06-17 21:44:09 lock: 1 exclusive write lock added for LOG_TBL 
2020-06-17 21:44:09 lock: 1 exclusive write lock unlock SYS 
2020-06-17 21:44:09 lock: 1 exclusive write lock unlock LOG_TBL 
2020-06-17 21:44:09 database: opened /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:44:09 database: connecting session #3 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:44:09 jdbc[3]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:44:09 jdbc[3]: 
/**/Connection conn11 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 21:44:09 jdbc[3]: 
/**/conn11.isReadOnly();
2020-06-17 21:44:09 jdbc[3]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 21:44:09 jdbc[3]: 
/**/conn11.getAutoCommit();
2020-06-17 21:44:09 jdbc[3]: 
/**/conn11.getAutoCommit();
2020-06-17 21:44:09 jdbc[3]: 
/**/Statement stat6 = conn11.createStatement();
2020-06-17 21:44:09 jdbc[3]: 
/**/stat6.execute("drop table if exists customer_tbl CASCADE ");
2020-06-17 21:44:09 database: connecting session #4 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:44:09 jdbc[4]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:44:09 lock: 3 exclusive write lock requesting for CUSTOMER_TBL 
2020-06-17 21:44:09 jdbc[4]: 
/**/Connection conn12 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 21:44:09 lock: 3 exclusive write lock added for CUSTOMER_TBL 
2020-06-17 21:44:09 jdbc[4]: 
/**/conn12.isReadOnly();
2020-06-17 21:44:09 lock: 3 exclusive write lock requesting for SYS 
2020-06-17 21:44:09 lock: 3 exclusive write lock added for SYS 
2020-06-17 21:44:09 jdbc[4]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 21:44:09 jdbc[4]: 
/**/conn12.getAutoCommit();
2020-06-17 21:44:09 jdbc[3]: 
/*SQL t:2*/drop table if exists customer_tbl CASCADE;
2020-06-17 21:44:09 database: connecting session #5 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:44:09 jdbc[5]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:44:09 lock: 3 exclusive write lock unlock SYS 
2020-06-17 21:44:09 jdbc[5]: 
/**/Connection conn13 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 21:44:09 jdbc[3]: 
/**/stat6.getWarnings();
2020-06-17 21:44:09 jdbc[5]: 
/**/conn13.isReadOnly();
2020-06-17 21:44:09 jdbc[5]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 21:44:09 jdbc[3]: 
/**/stat6.execute("drop table if exists log_tbl CASCADE ");
2020-06-17 21:44:09 jdbc[5]: 
/**/conn13.getAutoCommit();
2020-06-17 21:44:09 lock: 3 exclusive write lock requesting for LOG_TBL 
2020-06-17 21:44:09 lock: 3 exclusive write lock added for LOG_TBL 
2020-06-17 21:44:09 lock: 3 exclusive write lock requesting for SYS 
2020-06-17 21:44:09 lock: 3 exclusive write lock added for SYS 
2020-06-17 21:44:09 database: connecting session #6 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:44:09 jdbc[6]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:44:09 jdbc[6]: 
/**/Connection conn14 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 21:44:09 jdbc[6]: 
/**/conn14.isReadOnly();
2020-06-17 21:44:09 jdbc[6]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 21:44:09 jdbc[6]: 
/**/conn14.getAutoCommit();
2020-06-17 21:44:09 jdbc[3]: 
/*SQL */drop table if exists log_tbl CASCADE;
2020-06-17 21:44:09 database: connecting session #7 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:44:09 lock: 3 exclusive write lock unlock SYS 
2020-06-17 21:44:09 jdbc[3]: 
/**/stat6.getWarnings();
2020-06-17 21:44:09 jdbc[3]: 
/**/stat6.close();
2020-06-17 21:44:09 jdbc[7]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:44:09 jdbc[3]: 
/**/conn11.clearWarnings();
2020-06-17 21:44:09 jdbc[7]: 
/**/Connection conn15 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 21:44:09 jdbc[7]: 
/**/conn15.isReadOnly();
2020-06-17 21:44:09 jdbc[7]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 21:44:09 jdbc[7]: 
/**/conn15.getAutoCommit();
2020-06-17 21:44:09 database: connecting session #8 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:44:09 jdbc[8]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:44:09 jdbc[8]: 
/**/Connection conn16 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 21:44:09 jdbc[8]: 
/**/conn16.isReadOnly();
2020-06-17 21:44:09 jdbc[8]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 21:44:09 jdbc[8]: 
/**/conn16.getAutoCommit();
2020-06-17 21:44:09 database: connecting session #9 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:44:09 jdbc[9]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:44:09 jdbc[9]: 
/**/Connection conn17 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 21:44:09 jdbc[9]: 
/**/conn17.isReadOnly();
2020-06-17 21:44:09 jdbc[9]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 21:44:09 jdbc[9]: 
/**/conn17.getAutoCommit();
2020-06-17 21:44:09 database: connecting session #10 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:44:09 jdbc[10]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:44:09 jdbc[10]: 
/**/Connection conn18 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 21:44:09 jdbc[10]: 
/**/conn18.isReadOnly();
2020-06-17 21:44:09 jdbc[10]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 21:44:09 jdbc[10]: 
/**/conn18.getAutoCommit();
2020-06-17 21:44:09 database: connecting session #11 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:44:09 jdbc[11]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:44:09 jdbc[11]: 
/**/Connection conn19 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 21:44:09 jdbc[11]: 
/**/conn19.isReadOnly();
2020-06-17 21:44:09 jdbc[11]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 21:44:09 jdbc[11]: 
/**/conn19.getAutoCommit();
2020-06-17 21:44:09 jdbc[3]: 
/**/conn11.close();
2020-06-17 21:44:09 lock: 3 shared read lock unlock SYS 
2020-06-17 21:44:09 database: disconnecting session #3
2020-06-17 21:44:09 database: disconnected session #3
2020-06-17 21:44:09 jdbc[4]: 
/**/conn12.close();
2020-06-17 21:44:09 lock: 4 shared read lock unlock SYS 
2020-06-17 21:44:09 database: disconnecting session #4
2020-06-17 21:44:09 database: disconnected session #4
2020-06-17 21:44:09 jdbc[5]: 
/**/conn13.close();
2020-06-17 21:44:09 lock: 5 shared read lock unlock SYS 
2020-06-17 21:44:09 database: disconnecting session #5
2020-06-17 21:44:09 database: disconnected session #5
2020-06-17 21:44:09 jdbc[6]: 
/**/conn14.close();
2020-06-17 21:44:09 lock: 6 shared read lock unlock SYS 
2020-06-17 21:44:09 database: disconnecting session #6
2020-06-17 21:44:09 database: disconnected session #6
2020-06-17 21:44:09 jdbc[7]: 
/**/conn15.close();
2020-06-17 21:44:09 lock: 7 shared read lock unlock SYS 
2020-06-17 21:44:09 database: disconnecting session #7
2020-06-17 21:44:09 database: disconnected session #7
2020-06-17 21:44:09 jdbc[8]: 
/**/conn16.close();
2020-06-17 21:44:09 lock: 8 shared read lock unlock SYS 
2020-06-17 21:44:09 database: disconnecting session #8
2020-06-17 21:44:09 database: disconnected session #8
2020-06-17 21:44:09 jdbc[9]: 
/**/conn17.close();
2020-06-17 21:44:09 lock: 9 shared read lock unlock SYS 
2020-06-17 21:44:09 database: disconnecting session #9
2020-06-17 21:44:09 database: disconnected session #9
2020-06-17 21:44:09 jdbc[10]: 
/**/conn18.close();
2020-06-17 21:44:09 lock: 10 shared read lock unlock SYS 
2020-06-17 21:44:09 database: disconnecting session #10
2020-06-17 21:44:09 database: disconnected session #10
2020-06-17 21:44:09 jdbc[11]: 
/**/conn19.close();
2020-06-17 21:44:09 lock: 11 shared read lock unlock SYS 
2020-06-17 21:44:09 database: disconnecting session #11
2020-06-17 21:44:09 database: closing /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:44:09 lock: 1 shared read lock unlock SYS 
2020-06-17 21:44:09 lock: 2 shared read lock unlock SYS 
2020-06-17 21:44:09 database: closed
2020-06-17 21:44:09 database: disconnected session #11
2020-06-17 21:44:19 database: opening /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb (build 200)
2020-06-17 21:44:19 lock: 1 exclusive write lock requesting for SYS 
2020-06-17 21:44:19 lock: 1 exclusive write lock added for SYS 
2020-06-17 21:44:19 lock: 1 exclusive write lock unlock SYS 
2020-06-17 21:44:19 lock: 1 exclusive write lock requesting for SYS 
2020-06-17 21:44:19 lock: 1 exclusive write lock added for SYS 
2020-06-17 21:44:19 lock: 1 exclusive write lock unlock SYS 
2020-06-17 21:44:19 lock: 1 exclusive write lock requesting for SYS 
2020-06-17 21:44:19 lock: 1 exclusive write lock added for SYS 
2020-06-17 21:44:19 lock: 1 exclusive write lock unlock SYS 
2020-06-17 21:44:19 database: opened /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:44:19 database: connecting session #3 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:44:19 jdbc[3]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:44:19 jdbc[3]: 
/**/Connection conn0 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 21:44:19 jdbc[3]: 
/**/conn0.isReadOnly();
2020-06-17 21:44:19 jdbc[3]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 21:44:19 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:44:19 jdbc[3]: 
/**/conn0.isValid(1);
2020-06-17 21:44:19 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 21:44:19 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 21:44:19 jdbc[3]: 
/**/DatabaseMetaData dbMeta0 = conn0.getMetaData();
2020-06-17 21:44:19 jdbc[3]: 
/**/dbMeta0.getURL();
2020-06-17 21:44:19 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:44:19 database: connecting session #4 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:44:19 jdbc[4]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:44:19 jdbc[4]: 
/**/Connection conn1 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 21:44:19 jdbc[4]: 
/**/conn1.isReadOnly();
2020-06-17 21:44:19 jdbc[4]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 21:44:19 jdbc[4]: 
/**/conn1.getAutoCommit();
2020-06-17 21:44:19 database: connecting session #5 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:44:19 jdbc[5]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:44:19 jdbc[5]: 
/**/Connection conn2 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 21:44:19 jdbc[5]: 
/**/conn2.isReadOnly();
2020-06-17 21:44:19 jdbc[5]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 21:44:19 jdbc[5]: 
/**/conn2.getAutoCommit();
2020-06-17 21:44:19 database: connecting session #6 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:44:19 jdbc[6]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:44:19 jdbc[6]: 
/**/Connection conn3 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 21:44:19 jdbc[6]: 
/**/conn3.isReadOnly();
2020-06-17 21:44:19 jdbc[6]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 21:44:19 jdbc[6]: 
/**/conn3.getAutoCommit();
2020-06-17 21:44:19 database: connecting session #7 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:44:19 jdbc[7]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:44:19 jdbc[7]: 
/**/Connection conn4 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 21:44:19 jdbc[7]: 
/**/conn4.isReadOnly();
2020-06-17 21:44:19 jdbc[7]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 21:44:19 jdbc[7]: 
/**/conn4.getAutoCommit();
2020-06-17 21:44:19 database: connecting session #8 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:44:19 jdbc[8]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:44:19 jdbc[8]: 
/**/Connection conn5 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 21:44:19 jdbc[8]: 
/**/conn5.isReadOnly();
2020-06-17 21:44:19 jdbc[8]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 21:44:19 jdbc[8]: 
/**/conn5.getAutoCommit();
2020-06-17 21:44:19 database: connecting session #9 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:44:19 jdbc[9]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:44:19 jdbc[9]: 
/**/Connection conn6 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 21:44:19 jdbc[9]: 
/**/conn6.isReadOnly();
2020-06-17 21:44:19 jdbc[9]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 21:44:19 jdbc[9]: 
/**/conn6.getAutoCommit();
2020-06-17 21:44:19 database: connecting session #10 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:44:19 jdbc[10]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:44:19 jdbc[10]: 
/**/Connection conn7 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 21:44:19 jdbc[10]: 
/**/conn7.isReadOnly();
2020-06-17 21:44:19 jdbc[10]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 21:44:19 jdbc[10]: 
/**/conn7.getAutoCommit();
2020-06-17 21:44:19 database: connecting session #11 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:44:19 jdbc[11]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:44:19 jdbc[11]: 
/**/Connection conn8 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 21:44:19 jdbc[11]: 
/**/conn8.isReadOnly();
2020-06-17 21:44:19 jdbc[11]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 21:44:19 jdbc[11]: 
/**/conn8.getAutoCommit();
2020-06-17 21:44:19 database: connecting session #12 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:44:19 jdbc[12]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:44:19 jdbc[12]: 
/**/Connection conn9 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 21:44:19 jdbc[12]: 
/**/conn9.isReadOnly();
2020-06-17 21:44:19 jdbc[12]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 21:44:19 jdbc[12]: 
/**/conn9.getAutoCommit();
2020-06-17 21:44:20 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-17 21:44:20 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 21:44:20 jdbc[3]: 
/**/DatabaseMetaData dbMeta1 = conn0.getMetaData();
2020-06-17 21:44:20 jdbc[3]: 
/**/dbMeta1.supportsCatalogsInTableDefinitions();
2020-06-17 21:44:20 jdbc[3]: 
/**/dbMeta1.supportsSchemasInTableDefinitions();
2020-06-17 21:44:20 jdbc[3]: 
/**/dbMeta1.storesLowerCaseIdentifiers();
2020-06-17 21:44:20 jdbc[3]: 
/**/PreparedStatement prep0 = conn0.prepareStatement("SELECT NAME, VALUE FROM INFORMATION_SCHEMA.SETTINGS WHERE NAME IN (?, ?, ?, ?)");
2020-06-17 21:44:20 jdbc[3]: Plan       : calculate cost for plan [SETTINGS:-7:org.h2.table.MetaTable@3b8992b4]
2020-06-17 21:44:20 jdbc[3]: Plan       :   for table filter SETTINGS:-7:org.h2.table.MetaTable@3b8992b4
2020-06-17 21:44:20 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:44:20 jdbc[3]: Plan       :   best plan item cost 9,900 index meta
2020-06-17 21:44:20 jdbc[3]: Plan       : plan cost 9,901
2020-06-17 21:44:20 jdbc[3]: 
/**/prep0.setString(1, "MODE");
2020-06-17 21:44:20 jdbc[3]: 
/**/prep0.setString(2, "DATABASE_TO_UPPER");
2020-06-17 21:44:20 jdbc[3]: 
/**/prep0.setString(3, "DATABASE_TO_LOWER");
2020-06-17 21:44:20 jdbc[3]: 
/**/prep0.setString(4, "CASE_INSENSITIVE_IDENTIFIERS");
2020-06-17 21:44:20 jdbc[3]: 
/**/ResultSet rs0 = prep0.executeQuery();
2020-06-17 21:44:20 jdbc[3]: 
/*SQL l:78 #:4 t:3*/SELECT NAME, VALUE FROM INFORMATION_SCHEMA.SETTINGS WHERE NAME IN (?, ?, ?, ?) {1: 'MODE', 2: 'DATABASE_TO_UPPER', 3: 'DATABASE_TO_LOWER', 4: 'CASE_INSENSITIVE_IDENTIFIERS'};
2020-06-17 21:44:20 jdbc[3]: 
/**/rs0.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs0.getString(2);
2020-06-17 21:44:20 jdbc[3]: 
/**/rs0.getString(1);
2020-06-17 21:44:20 jdbc[3]: 
/**/rs0.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs0.getString(2);
2020-06-17 21:44:20 jdbc[3]: 
/**/rs0.getString(1);
2020-06-17 21:44:20 jdbc[3]: 
/**/rs0.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs0.getString(2);
2020-06-17 21:44:20 jdbc[3]: 
/**/rs0.getString(1);
2020-06-17 21:44:20 jdbc[3]: 
/**/rs0.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs0.getString(2);
2020-06-17 21:44:20 jdbc[3]: 
/**/rs0.getString(1);
2020-06-17 21:44:20 jdbc[3]: 
/**/rs0.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/prep0.close();
2020-06-17 21:44:20 jdbc[3]: 
/**/dbMeta1.storesUpperCaseIdentifiers();
2020-06-17 21:44:20 jdbc[3]: 
/**/dbMeta1.storesMixedCaseIdentifiers();
2020-06-17 21:44:20 jdbc[3]: 
/**/dbMeta1.storesUpperCaseIdentifiers();
2020-06-17 21:44:20 jdbc[3]: 
/**/dbMeta1.storesLowerCaseQuotedIdentifiers();
2020-06-17 21:44:20 jdbc[3]: 
/**/dbMeta1.storesUpperCaseQuotedIdentifiers();
2020-06-17 21:44:20 jdbc[3]: 
/**/dbMeta1.storesMixedCaseQuotedIdentifiers();
2020-06-17 21:44:20 jdbc[3]: 
/**/dbMeta1.getSQLKeywords();
2020-06-17 21:44:20 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:44:20 jdbc[3]: 
/*SQL #:1*/CALL DATABASE();
2020-06-17 21:44:20 jdbc[3]: 
/**/dbMeta1.supportsNamedParameters();
2020-06-17 21:44:20 jdbc[3]: 
/**/dbMeta1.supportsResultSetType(1004);
2020-06-17 21:44:20 jdbc[3]: 
/**/dbMeta1.supportsGetGeneratedKeys();
2020-06-17 21:44:20 jdbc[3]: 
/**/dbMeta1.supportsBatchUpdates();
2020-06-17 21:44:20 jdbc[3]: 
/**/dbMeta1.dataDefinitionIgnoredInTransactions();
2020-06-17 21:44:20 jdbc[3]: 
/**/dbMeta1.dataDefinitionCausesTransactionCommit();
2020-06-17 21:44:20 jdbc[3]: 
/**/dbMeta1.getSQLKeywords();
2020-06-17 21:44:20 jdbc[3]: 
/**/dbMeta1.getSQLStateType();
2020-06-17 21:44:20 jdbc[3]: 
/**/dbMeta1.locatorsUpdateCopy();
2020-06-17 21:44:20 jdbc[3]: 
/**/dbMeta1.getTypeInfo();
2020-06-17 21:44:20 jdbc[3]: 
/**/PreparedStatement prep1 = conn0.prepareStatement("SELECT TYPE_NAME, DATA_TYPE, PRECISION, PREFIX LITERAL_PREFIX, SUFFIX LITERAL_SUFFIX, PARAMS CREATE_PARAMS, NULLABLE, CASE_SENSITIVE, SEARCHABLE, FALSE UNSIGNED_ATTRIBUTE, FALSE FIXED_PREC_SCALE, AUTO_INCREMENT, TYPE_NAME LOCAL_TYPE_NAME, MINIMUM_SCALE, MAXIMUM_SCALE, DATA_TYPE SQL_DATA_TYPE, ZERO() SQL_DATETIME_SUB, RADIX NUM_PREC_RADIX FROM INFORMATION_SCHEMA.TYPE_INFO ORDER BY DATA_TYPE, POS");
2020-06-17 21:44:20 jdbc[3]: Plan       : calculate cost for plan [TYPE_INFO:-5:org.h2.table.MetaTable@53f10fc2]
2020-06-17 21:44:20 jdbc[3]: Plan       :   for table filter TYPE_INFO:-5:org.h2.table.MetaTable@53f10fc2
2020-06-17 21:44:20 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:44:20 jdbc[3]: Plan       :   best plan item cost 10,000 index meta
2020-06-17 21:44:20 jdbc[3]: Plan       : plan cost 10,001
2020-06-17 21:44:20 jdbc[3]: 
/**/ResultSet rs1 = prep1.executeQuery();
2020-06-17 21:44:20 jdbc[3]: 
/*SQL #:46 t:1*/SELECT TYPE_NAME, DATA_TYPE, PRECISION, PREFIX LITERAL_PREFIX, SUFFIX LITERAL_SUFFIX, PARAMS CREATE_PARAMS, NULLABLE, CASE_SENSITIVE, SEARCHABLE, FALSE UNSIGNED_ATTRIBUTE, FALSE FIXED_PREC_SCALE, AUTO_INCREMENT, TYPE_NAME LOCAL_TYPE_NAME, MINIMUM_SCALE, MAXIMUM_SCALE, DATA_TYPE SQL_DATA_TYPE, ZERO() SQL_DATETIME_SUB, RADIX NUM_PREC_RADIX FROM INFORMATION_SCHEMA.TYPE_INFO ORDER BY DATA_TYPE, POS;
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getStatement();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs1.close();
2020-06-17 21:44:20 jdbc[3]: 
/**/prep1.close();
2020-06-17 21:44:20 jdbc[3]: 
/**/conn0.getSchema();
2020-06-17 21:44:20 jdbc[3]: 
/**/conn0.getSchema();
2020-06-17 21:44:20 jdbc[3]: 
/**/dbMeta1.supportsNamedParameters();
2020-06-17 21:44:20 jdbc[3]: 
/**/Statement stat0 = conn0.createStatement();
2020-06-17 21:44:20 jdbc[3]: 
/**/ResultSet rs2 = stat0.executeQuery("select * from INFORMATION_SCHEMA.SEQUENCES");
2020-06-17 21:44:20 jdbc[3]: Plan       : calculate cost for plan [SEQUENCES:-9:org.h2.table.MetaTable@70bcfbc3]
2020-06-17 21:44:20 jdbc[3]: Plan       :   for table filter SEQUENCES:-9:org.h2.table.MetaTable@70bcfbc3
2020-06-17 21:44:20 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:44:20 jdbc[3]: Plan       :   best plan item cost 10,000 index meta
2020-06-17 21:44:20 jdbc[3]: Plan       : plan cost 10,001
2020-06-17 21:44:20 jdbc[3]: 
/*SQL */select * from INFORMATION_SCHEMA.SEQUENCES;
2020-06-17 21:44:20 jdbc[3]: 
/**/rs2.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs2.close();
2020-06-17 21:44:20 jdbc[3]: 
/**/stat0.close();
2020-06-17 21:44:20 jdbc[3]: 
/**/dbMeta1.getCatalogSeparator();
2020-06-17 21:44:20 jdbc[3]: 
/**/dbMeta1.isCatalogAtStart();
2020-06-17 21:44:20 jdbc[3]: 
/**/dbMeta1.getTypeInfo();
2020-06-17 21:44:20 jdbc[3]: 
/**/PreparedStatement prep2 = conn0.prepareStatement("SELECT TYPE_NAME, DATA_TYPE, PRECISION, PREFIX LITERAL_PREFIX, SUFFIX LITERAL_SUFFIX, PARAMS CREATE_PARAMS, NULLABLE, CASE_SENSITIVE, SEARCHABLE, FALSE UNSIGNED_ATTRIBUTE, FALSE FIXED_PREC_SCALE, AUTO_INCREMENT, TYPE_NAME LOCAL_TYPE_NAME, MINIMUM_SCALE, MAXIMUM_SCALE, DATA_TYPE SQL_DATA_TYPE, ZERO() SQL_DATETIME_SUB, RADIX NUM_PREC_RADIX FROM INFORMATION_SCHEMA.TYPE_INFO ORDER BY DATA_TYPE, POS");
2020-06-17 21:44:20 jdbc[3]: 
/**/ResultSet rs3 = prep2.executeQuery();
2020-06-17 21:44:20 jdbc[3]: 
/*SQL #:46*/SELECT TYPE_NAME, DATA_TYPE, PRECISION, PREFIX LITERAL_PREFIX, SUFFIX LITERAL_SUFFIX, PARAMS CREATE_PARAMS, NULLABLE, CASE_SENSITIVE, SEARCHABLE, FALSE UNSIGNED_ATTRIBUTE, FALSE FIXED_PREC_SCALE, AUTO_INCREMENT, TYPE_NAME LOCAL_TYPE_NAME, MINIMUM_SCALE, MAXIMUM_SCALE, DATA_TYPE SQL_DATA_TYPE, ZERO() SQL_DATETIME_SUB, RADIX NUM_PREC_RADIX FROM INFORMATION_SCHEMA.TYPE_INFO ORDER BY DATA_TYPE, POS;
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getStatement();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs3.close();
2020-06-17 21:44:20 jdbc[3]: 
/**/prep2.close();
2020-06-17 21:44:20 jdbc[3]: 
/**/DatabaseMetaData dbMeta2 = conn0.getMetaData();
2020-06-17 21:44:20 jdbc[3]: 
/**/dbMeta2.getJDBCMajorVersion();
2020-06-17 21:44:20 jdbc[3]: 
/**/Clob clob0 = conn0.createClob();
2020-06-17 21:44:20 jdbc[3]: 
/**/clob0.free();
2020-06-17 21:44:20 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:44:20 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:44:20 jdbc[3]: 
/**/Statement stat1 = conn0.createStatement();
2020-06-17 21:44:20 jdbc[3]: 
/**/stat1.execute("drop table if exists customer_tbl CASCADE ");
2020-06-17 21:44:20 jdbc[3]: 
/*SQL */drop table if exists customer_tbl CASCADE;
2020-06-17 21:44:20 jdbc[3]: 
/**/stat1.getWarnings();
2020-06-17 21:44:20 jdbc[3]: 
/**/stat1.execute("drop table if exists log_tbl CASCADE ");
2020-06-17 21:44:20 jdbc[3]: 
/*SQL */drop table if exists log_tbl CASCADE;
2020-06-17 21:44:20 jdbc[3]: 
/**/stat1.getWarnings();
2020-06-17 21:44:20 jdbc[3]: 
/**/stat1.close();
2020-06-17 21:44:20 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:44:20 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:44:20 jdbc[3]: 
/**/Statement stat2 = conn0.createStatement();
2020-06-17 21:44:20 jdbc[3]: 
/**/stat2.execute("create table customer_tbl (id bigint generated by default as identity, customer_email varchar(255), customer_firstname varchar(255), customer_lastname varchar(255), primary key (id))");
2020-06-17 21:44:20 lock: 3 exclusive write lock requesting for SYS 
2020-06-17 21:44:20 lock: 3 exclusive write lock added for SYS 
2020-06-17 21:44:20 lock: 3 exclusive write lock unlock SYS 
2020-06-17 21:44:20 lock: 3 exclusive write lock requesting for SYS 
2020-06-17 21:44:20 lock: 3 exclusive write lock added for SYS 
2020-06-17 21:44:20 lock: 3 exclusive write lock requesting for CUSTOMER_TBL 
2020-06-17 21:44:20 lock: 3 exclusive write lock added for CUSTOMER_TBL 
2020-06-17 21:44:20 jdbc[3]: 
/*SQL t:6*/create table customer_tbl (id bigint generated by default as identity, customer_email varchar(255), customer_firstname varchar(255), customer_lastname varchar(255), primary key (id));
2020-06-17 21:44:20 lock: 3 exclusive write lock unlock SYS 
2020-06-17 21:44:20 lock: 3 exclusive write lock unlock CUSTOMER_TBL 
2020-06-17 21:44:20 jdbc[3]: 
/**/stat2.getWarnings();
2020-06-17 21:44:20 jdbc[3]: 
/**/stat2.execute("create table log_tbl (id bigint generated by default as identity, application_name varchar(255), level varchar(255), parent_span_id varchar(255), request varchar(255), response varchar(255), span_id varchar(255), time varchar(255), trace_id varchar(255), primary key (id))");
2020-06-17 21:44:20 lock: 3 exclusive write lock requesting for SYS 
2020-06-17 21:44:20 lock: 3 exclusive write lock added for SYS 
2020-06-17 21:44:20 lock: 3 exclusive write lock unlock SYS 
2020-06-17 21:44:20 lock: 3 exclusive write lock requesting for SYS 
2020-06-17 21:44:20 lock: 3 exclusive write lock added for SYS 
2020-06-17 21:44:20 lock: 3 exclusive write lock requesting for LOG_TBL 
2020-06-17 21:44:20 lock: 3 exclusive write lock added for LOG_TBL 
2020-06-17 21:44:20 jdbc[3]: 
/*SQL t:1*/create table log_tbl (id bigint generated by default as identity, application_name varchar(255), level varchar(255), parent_span_id varchar(255), request varchar(255), response varchar(255), span_id varchar(255), time varchar(255), trace_id varchar(255), primary key (id));
2020-06-17 21:44:20 lock: 3 exclusive write lock unlock SYS 
2020-06-17 21:44:20 lock: 3 exclusive write lock unlock LOG_TBL 
2020-06-17 21:44:20 jdbc[3]: 
/**/stat2.getWarnings();
2020-06-17 21:44:20 jdbc[3]: 
/**/stat2.close();
2020-06-17 21:44:20 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:44:20 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:44:20 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:44:20 jdbc[3]: 
/**/PreparedStatement prep3 = conn0.prepareStatement("select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=?");
2020-06-17 21:44:20 jdbc[3]: Plan       : calculate cost for plan [CUSTOMER0_]
2020-06-17 21:44:20 jdbc[3]: Plan       :   for table filter CUSTOMER0_
2020-06-17 21:44:20 jdbc[3]: Table      :     potential plan item cost 10,200 index PUBLIC.CUSTOMER_TBL.tableScan
2020-06-17 21:44:20 jdbc[3]: Table      :     potential plan item cost 230 index PUBLIC.PRIMARY_KEY_B
2020-06-17 21:44:20 jdbc[3]: Plan       :   best plan item cost 227.7 index PUBLIC.PRIMARY_KEY_B
2020-06-17 21:44:20 jdbc[3]: Plan       : plan cost 228.7
2020-06-17 21:44:20 jdbc[3]: 
/**/prep3.setLong(1, 1L);
2020-06-17 21:44:20 jdbc[3]: 
/**/ResultSet rs8 = prep3.executeQuery();
2020-06-17 21:44:20 jdbc[3]: 
/*SQL l:225*/select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=? {1: 1};
2020-06-17 21:44:20 jdbc[3]: 
/**/rs8.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs8.close();
2020-06-17 21:44:20 jdbc[3]: 
/**/prep3.getMaxRows();
2020-06-17 21:44:20 jdbc[3]: 
/**/prep3.getQueryTimeout();
2020-06-17 21:44:20 jdbc[3]: Plan       : calculate cost for plan [SETTINGS:-7:org.h2.table.MetaTable@3b8992b4]
2020-06-17 21:44:20 jdbc[3]: Plan       :   for table filter SETTINGS:-7:org.h2.table.MetaTable@3b8992b4
2020-06-17 21:44:20 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:44:20 jdbc[3]: Plan       :   best plan item cost 9,900 index meta
2020-06-17 21:44:20 jdbc[3]: Plan       : plan cost 9,901
2020-06-17 21:44:20 jdbc[3]: 
/*SQL l:58 #:1*/SELECT VALUE FROM INFORMATION_SCHEMA.SETTINGS WHERE NAME=? {1: 'QUERY_TIMEOUT'};
2020-06-17 21:44:20 jdbc[3]: 
/**/prep3.close();
2020-06-17 21:44:20 jdbc[3]: 
/**/PreparedStatement prep4 = conn0.prepareStatement("insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?)", 1);;
2020-06-17 21:44:20 jdbc[3]: 
/**/prep4.setString(1, "ram@gmail.com");
2020-06-17 21:44:20 jdbc[3]: 
/**/prep4.setString(2, "Ram");
2020-06-17 21:44:20 jdbc[3]: 
/**/prep4.setString(3, "Thapa");
2020-06-17 21:44:20 jdbc[3]: 
/**/prep4.executeUpdate();
2020-06-17 21:44:20 lock: 1 exclusive write lock requesting for SYS 
2020-06-17 21:44:20 lock: 1 exclusive write lock added for SYS 
2020-06-17 21:44:20 lock: 1 exclusive write lock unlock SYS 
2020-06-17 21:44:20 lock: 3 shared read lock requesting for CUSTOMER_TBL 
2020-06-17 21:44:20 lock: 3 shared read lock ok CUSTOMER_TBL 
2020-06-17 21:44:20 jdbc[3]: 
/*SQL l:107 #:1 t:1*/insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?) {1: 'ram@gmail.com', 2: 'Ram', 3: 'Thapa'};
2020-06-17 21:44:20 jdbc[3]: 
/**/ResultSet rs9 = prep4.getGeneratedKeys();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs9.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/ResultSetMetaData rsMeta0 = rs9.getMetaData();
2020-06-17 21:44:20 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:44:20 jdbc[3]: 
/**/rsMeta0.getColumnCount();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs9.getLong(1);
2020-06-17 21:44:20 jdbc[3]: 
/**/rs9.close();
2020-06-17 21:44:20 jdbc[3]: 
/**/prep4.getMaxRows();
2020-06-17 21:44:20 jdbc[3]: 
/**/prep4.getQueryTimeout();
2020-06-17 21:44:20 jdbc[3]: 
/**/prep4.close();
2020-06-17 21:44:20 jdbc[3]: 
/**/PreparedStatement prep5 = conn0.prepareStatement("select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=?");
2020-06-17 21:44:20 jdbc[3]: 
/**/prep5.setLong(1, 2L);
2020-06-17 21:44:20 jdbc[3]: 
/**/ResultSet rs10 = prep5.executeQuery();
2020-06-17 21:44:20 jdbc[3]: 
/*SQL l:225*/select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=? {1: 2};
2020-06-17 21:44:20 jdbc[3]: 
/**/rs10.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs10.close();
2020-06-17 21:44:20 jdbc[3]: 
/**/prep5.getMaxRows();
2020-06-17 21:44:20 jdbc[3]: 
/**/prep5.getQueryTimeout();
2020-06-17 21:44:20 jdbc[3]: 
/**/prep5.close();
2020-06-17 21:44:20 jdbc[3]: 
/**/PreparedStatement prep6 = conn0.prepareStatement("insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?)", 1);;
2020-06-17 21:44:20 jdbc[3]: 
/**/prep6.setString(1, "hari@gmail.com");
2020-06-17 21:44:20 jdbc[3]: 
/**/prep6.setString(2, "Hari");
2020-06-17 21:44:20 jdbc[3]: 
/**/prep6.setString(3, "Neupane");
2020-06-17 21:44:20 jdbc[3]: 
/**/prep6.executeUpdate();
2020-06-17 21:44:20 jdbc[3]: 
/*SQL l:107 #:1*/insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?) {1: 'hari@gmail.com', 2: 'Hari', 3: 'Neupane'};
2020-06-17 21:44:20 jdbc[3]: 
/**/ResultSet rs11 = prep6.getGeneratedKeys();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs11.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/ResultSetMetaData rsMeta1 = rs11.getMetaData();
2020-06-17 21:44:20 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:44:20 jdbc[3]: 
/**/rsMeta1.getColumnCount();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs11.getLong(1);
2020-06-17 21:44:20 jdbc[3]: 
/**/rs11.close();
2020-06-17 21:44:20 jdbc[3]: 
/**/prep6.getMaxRows();
2020-06-17 21:44:20 jdbc[3]: 
/**/prep6.getQueryTimeout();
2020-06-17 21:44:20 jdbc[3]: 
/**/prep6.close();
2020-06-17 21:44:20 jdbc[3]: 
/**/PreparedStatement prep7 = conn0.prepareStatement("select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=?");
2020-06-17 21:44:20 jdbc[3]: 
/**/prep7.setLong(1, 3L);
2020-06-17 21:44:20 jdbc[3]: 
/**/ResultSet rs12 = prep7.executeQuery();
2020-06-17 21:44:20 jdbc[3]: 
/*SQL l:225*/select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=? {1: 3};
2020-06-17 21:44:20 jdbc[3]: 
/**/rs12.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs12.close();
2020-06-17 21:44:20 jdbc[3]: 
/**/prep7.getMaxRows();
2020-06-17 21:44:20 jdbc[3]: 
/**/prep7.getQueryTimeout();
2020-06-17 21:44:20 jdbc[3]: 
/**/prep7.close();
2020-06-17 21:44:20 jdbc[3]: 
/**/PreparedStatement prep8 = conn0.prepareStatement("insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?)", 1);;
2020-06-17 21:44:20 jdbc[3]: 
/**/prep8.setString(1, "ramila@gmail.com");
2020-06-17 21:44:20 jdbc[3]: 
/**/prep8.setString(2, "Ramila");
2020-06-17 21:44:20 jdbc[3]: 
/**/prep8.setString(3, "Karki");
2020-06-17 21:44:20 jdbc[3]: 
/**/prep8.executeUpdate();
2020-06-17 21:44:20 jdbc[3]: 
/*SQL l:107 #:1*/insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?) {1: 'ramila@gmail.com', 2: 'Ramila', 3: 'Karki'};
2020-06-17 21:44:20 jdbc[3]: 
/**/ResultSet rs13 = prep8.getGeneratedKeys();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs13.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/ResultSetMetaData rsMeta2 = rs13.getMetaData();
2020-06-17 21:44:20 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:44:20 jdbc[3]: 
/**/rsMeta2.getColumnCount();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs13.getLong(1);
2020-06-17 21:44:20 jdbc[3]: 
/**/rs13.close();
2020-06-17 21:44:20 jdbc[3]: 
/**/prep8.getMaxRows();
2020-06-17 21:44:20 jdbc[3]: 
/**/prep8.getQueryTimeout();
2020-06-17 21:44:20 jdbc[3]: 
/**/prep8.close();
2020-06-17 21:44:20 jdbc[3]: 
/**/PreparedStatement prep9 = conn0.prepareStatement("select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=?");
2020-06-17 21:44:20 jdbc[3]: 
/**/prep9.setLong(1, 4L);
2020-06-17 21:44:20 jdbc[3]: 
/**/ResultSet rs14 = prep9.executeQuery();
2020-06-17 21:44:20 jdbc[3]: 
/*SQL l:225*/select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=? {1: 4};
2020-06-17 21:44:20 jdbc[3]: 
/**/rs14.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs14.close();
2020-06-17 21:44:20 jdbc[3]: 
/**/prep9.getMaxRows();
2020-06-17 21:44:20 jdbc[3]: 
/**/prep9.getQueryTimeout();
2020-06-17 21:44:20 jdbc[3]: 
/**/prep9.close();
2020-06-17 21:44:20 jdbc[3]: 
/**/PreparedStatement prep10 = conn0.prepareStatement("insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?)", 1);;
2020-06-17 21:44:20 jdbc[3]: 
/**/prep10.setString(1, "david@gmail.com");
2020-06-17 21:44:20 jdbc[3]: 
/**/prep10.setString(2, "David");
2020-06-17 21:44:20 jdbc[3]: 
/**/prep10.setString(3, "Yonge");
2020-06-17 21:44:20 jdbc[3]: 
/**/prep10.executeUpdate();
2020-06-17 21:44:20 jdbc[3]: 
/*SQL l:107 #:1*/insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?) {1: 'david@gmail.com', 2: 'David', 3: 'Yonge'};
2020-06-17 21:44:20 jdbc[3]: 
/**/ResultSet rs15 = prep10.getGeneratedKeys();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs15.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/ResultSetMetaData rsMeta3 = rs15.getMetaData();
2020-06-17 21:44:20 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:44:20 jdbc[3]: 
/**/rsMeta3.getColumnCount();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs15.getLong(1);
2020-06-17 21:44:20 jdbc[3]: 
/**/rs15.close();
2020-06-17 21:44:20 jdbc[3]: 
/**/prep10.getMaxRows();
2020-06-17 21:44:20 jdbc[3]: 
/**/prep10.getQueryTimeout();
2020-06-17 21:44:20 jdbc[3]: 
/**/prep10.close();
2020-06-17 21:44:20 jdbc[3]: 
/**/PreparedStatement prep11 = conn0.prepareStatement("select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=?");
2020-06-17 21:44:20 jdbc[3]: 
/**/prep11.setLong(1, 5L);
2020-06-17 21:44:20 jdbc[3]: 
/**/ResultSet rs16 = prep11.executeQuery();
2020-06-17 21:44:20 jdbc[3]: 
/*SQL l:225*/select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=? {1: 5};
2020-06-17 21:44:20 jdbc[3]: 
/**/rs16.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs16.close();
2020-06-17 21:44:20 jdbc[3]: 
/**/prep11.getMaxRows();
2020-06-17 21:44:20 jdbc[3]: 
/**/prep11.getQueryTimeout();
2020-06-17 21:44:20 jdbc[3]: 
/**/prep11.close();
2020-06-17 21:44:20 jdbc[3]: 
/**/PreparedStatement prep12 = conn0.prepareStatement("insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?)", 1);;
2020-06-17 21:44:20 jdbc[3]: 
/**/prep12.setString(1, "peter@gmail.com");
2020-06-17 21:44:20 jdbc[3]: 
/**/prep12.setString(2, "Peter");
2020-06-17 21:44:20 jdbc[3]: 
/**/prep12.setString(3, "Parker");
2020-06-17 21:44:20 jdbc[3]: 
/**/prep12.executeUpdate();
2020-06-17 21:44:20 jdbc[3]: 
/*SQL l:107 #:1*/insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?) {1: 'peter@gmail.com', 2: 'Peter', 3: 'Parker'};
2020-06-17 21:44:20 jdbc[3]: 
/**/ResultSet rs17 = prep12.getGeneratedKeys();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs17.next();
2020-06-17 21:44:20 jdbc[3]: 
/**/ResultSetMetaData rsMeta4 = rs17.getMetaData();
2020-06-17 21:44:20 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:44:20 jdbc[3]: 
/**/rsMeta4.getColumnCount();
2020-06-17 21:44:20 jdbc[3]: 
/**/rs17.getLong(1);
2020-06-17 21:44:20 jdbc[3]: 
/**/rs17.close();
2020-06-17 21:44:20 jdbc[3]: 
/**/prep12.getMaxRows();
2020-06-17 21:44:20 jdbc[3]: 
/**/prep12.getQueryTimeout();
2020-06-17 21:44:20 jdbc[3]: 
/**/prep12.close();
2020-06-17 21:44:20 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:44:20 lock: 3 shared read lock unlock CUSTOMER_TBL 
2020-06-17 21:44:20 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:44:20 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:44:20 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:44:20 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:44:20 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:44:20 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:44:20 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:44:23 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-17 21:44:23 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 21:44:23 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:44:23 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:44:23 jdbc[3]: 
/**/PreparedStatement prep13 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 21:44:23 jdbc[3]: 
/**/prep13.setString(1, "CustomerMS");
2020-06-17 21:44:23 jdbc[3]: 
/**/prep13.setString(2, "INFO");
2020-06-17 21:44:23 jdbc[3]: 
/**/prep13.setNull(3, 12);
2020-06-17 21:44:23 jdbc[3]: 
/**/prep13.setString(4, "/api/customers/2");
2020-06-17 21:44:23 jdbc[3]: 
/**/prep13.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 21:44:23 jdbc[3]: 
/**/prep13.setString(6, "835c44c5407a860f");
2020-06-17 21:44:23 jdbc[3]: 
/**/prep13.setString(7, "2020-06-17T20:43:48.395Z");
2020-06-17 21:44:23 jdbc[3]: 
/**/prep13.setString(8, "835c44c5407a860f");
2020-06-17 21:44:23 jdbc[3]: 
/**/prep13.executeUpdate();
2020-06-17 21:44:23 lock: 1 exclusive write lock requesting for SYS 
2020-06-17 21:44:23 lock: 1 exclusive write lock added for SYS 
2020-06-17 21:44:23 lock: 1 exclusive write lock unlock SYS 
2020-06-17 21:44:23 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 21:44:23 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 21:44:23 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/2', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: '835c44c5407a860f', 7: '2020-06-17T20:43:48.395Z', 8: '835c44c5407a860f'};
2020-06-17 21:44:23 jdbc[3]: 
/**/ResultSet rs18 = prep13.getGeneratedKeys();
2020-06-17 21:44:23 jdbc[3]: 
/**/rs18.next();
2020-06-17 21:44:23 jdbc[3]: 
/**/ResultSetMetaData rsMeta5 = rs18.getMetaData();
2020-06-17 21:44:23 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:44:23 jdbc[3]: 
/**/rsMeta5.getColumnCount();
2020-06-17 21:44:23 jdbc[3]: 
/**/rs18.getLong(1);
2020-06-17 21:44:23 jdbc[3]: 
/**/rs18.close();
2020-06-17 21:44:23 jdbc[3]: 
/**/prep13.getMaxRows();
2020-06-17 21:44:23 jdbc[3]: 
/**/prep13.getQueryTimeout();
2020-06-17 21:44:23 jdbc[3]: 
/**/prep13.close();
2020-06-17 21:44:23 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:44:23 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 21:44:23 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:44:23 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:44:23 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:44:23 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:44:23 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:44:23 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:44:23 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:44:34 database: connecting session #13 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:44:34 jdbc[13]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:44:34 jdbc[13]: 
/**/Connection conn10 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3;FORBID_CREATION=TRUE", "SA", "");
2020-06-17 21:44:34 jdbc[13]: 
/**/DatabaseMetaData dbMeta3 = conn10.getMetaData();
2020-06-17 21:44:34 jdbc[13]: 
/**/PreparedStatement prep14 = conn10.prepareStatement("SELECT NAME, VALUE FROM INFORMATION_SCHEMA.SETTINGS WHERE NAME IN (?, ?, ?, ?)");
2020-06-17 21:44:34 jdbc[13]: Plan       : calculate cost for plan [SETTINGS:-7:org.h2.table.MetaTable@3b8992b4]
2020-06-17 21:44:34 jdbc[13]: Plan       :   for table filter SETTINGS:-7:org.h2.table.MetaTable@3b8992b4
2020-06-17 21:44:34 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:44:34 jdbc[13]: Plan       :   best plan item cost 9,900 index meta
2020-06-17 21:44:34 jdbc[13]: Plan       : plan cost 9,901
2020-06-17 21:44:34 jdbc[13]: 
/**/prep14.setString(1, "MODE");
2020-06-17 21:44:34 jdbc[13]: 
/**/prep14.setString(2, "DATABASE_TO_UPPER");
2020-06-17 21:44:34 jdbc[13]: 
/**/prep14.setString(3, "DATABASE_TO_LOWER");
2020-06-17 21:44:34 jdbc[13]: 
/**/prep14.setString(4, "CASE_INSENSITIVE_IDENTIFIERS");
2020-06-17 21:44:34 jdbc[13]: 
/**/ResultSet rs19 = prep14.executeQuery();
2020-06-17 21:44:34 jdbc[13]: 
/*SQL l:78 #:4*/SELECT NAME, VALUE FROM INFORMATION_SCHEMA.SETTINGS WHERE NAME IN (?, ?, ?, ?) {1: 'MODE', 2: 'DATABASE_TO_UPPER', 3: 'DATABASE_TO_LOWER', 4: 'CASE_INSENSITIVE_IDENTIFIERS'};
2020-06-17 21:44:34 jdbc[13]: 
/**/rs19.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs19.getString(2);
2020-06-17 21:44:34 jdbc[13]: 
/**/rs19.getString(1);
2020-06-17 21:44:34 jdbc[13]: 
/**/rs19.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs19.getString(2);
2020-06-17 21:44:34 jdbc[13]: 
/**/rs19.getString(1);
2020-06-17 21:44:34 jdbc[13]: 
/**/rs19.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs19.getString(2);
2020-06-17 21:44:34 jdbc[13]: 
/**/rs19.getString(1);
2020-06-17 21:44:34 jdbc[13]: 
/**/rs19.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs19.getString(2);
2020-06-17 21:44:34 jdbc[13]: 
/**/rs19.getString(1);
2020-06-17 21:44:34 jdbc[13]: 
/**/rs19.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/prep14.close();
2020-06-17 21:44:34 jdbc[13]: 
/**/DatabaseMetaData dbMeta4 = conn10.getMetaData();
2020-06-17 21:44:34 jdbc[13]: 
/**/dbMeta4.getSchemas();
2020-06-17 21:44:34 jdbc[13]: 
/**/PreparedStatement prep15 = conn10.prepareStatement("SELECT SCHEMA_NAME TABLE_SCHEM, CATALOG_NAME TABLE_CATALOG,  IS_DEFAULT FROM INFORMATION_SCHEMA.SCHEMATA ORDER BY SCHEMA_NAME");
2020-06-17 21:44:34 jdbc[13]: Plan       : calculate cost for plan [SCHEMATA:-14:org.h2.table.MetaTable@603fac27]
2020-06-17 21:44:34 jdbc[13]: Plan       :   for table filter SCHEMATA:-14:org.h2.table.MetaTable@603fac27
2020-06-17 21:44:34 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:44:34 jdbc[13]: Plan       :   best plan item cost 10,000 index meta
2020-06-17 21:44:34 jdbc[13]: Plan       : plan cost 10,001
2020-06-17 21:44:34 jdbc[13]: 
/**/ResultSet rs20 = prep15.executeQuery();
2020-06-17 21:44:34 jdbc[13]: 
/*SQL #:2*/SELECT SCHEMA_NAME TABLE_SCHEM, CATALOG_NAME TABLE_CATALOG,  IS_DEFAULT FROM INFORMATION_SCHEMA.SCHEMATA ORDER BY SCHEMA_NAME;
2020-06-17 21:44:34 jdbc[13]: 
/**/rs20.findColumn("IS_DEFAULT");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs20.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs20.getBoolean(3);
2020-06-17 21:44:34 jdbc[13]: 
/**/rs20.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs20.getBoolean(3);
2020-06-17 21:44:34 jdbc[13]: 
/**/rs20.getString("TABLE_SCHEM");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs20.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/dbMeta4.getSchemas();
2020-06-17 21:44:34 jdbc[13]: 
/**/PreparedStatement prep16 = conn10.prepareStatement("SELECT SCHEMA_NAME TABLE_SCHEM, CATALOG_NAME TABLE_CATALOG,  IS_DEFAULT FROM INFORMATION_SCHEMA.SCHEMATA ORDER BY SCHEMA_NAME");
2020-06-17 21:44:34 jdbc[13]: Plan       : calculate cost for plan [SCHEMATA:-14:org.h2.table.MetaTable@603fac27]
2020-06-17 21:44:34 jdbc[13]: Plan       :   for table filter SCHEMATA:-14:org.h2.table.MetaTable@603fac27
2020-06-17 21:44:34 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:44:34 jdbc[13]: Plan       :   best plan item cost 10,000 index meta
2020-06-17 21:44:34 jdbc[13]: Plan       : plan cost 10,001
2020-06-17 21:44:34 jdbc[13]: 
/**/ResultSet rs21 = prep16.executeQuery();
2020-06-17 21:44:34 jdbc[13]: 
/*SQL #:2*/SELECT SCHEMA_NAME TABLE_SCHEM, CATALOG_NAME TABLE_CATALOG,  IS_DEFAULT FROM INFORMATION_SCHEMA.SCHEMATA ORDER BY SCHEMA_NAME;
2020-06-17 21:44:34 jdbc[13]: 
/**/rs21.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs21.getString("TABLE_SCHEM");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs21.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs21.getString("TABLE_SCHEM");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs21.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs21.close();
2020-06-17 21:44:34 jdbc[13]: 
/**/prep16.close();
2020-06-17 21:44:34 jdbc[13]: 
/**/dbMeta4.getTables(null, "INFORMATION_SCHEMA", null, new String[]{"TABLE", "SYSTEM TABLE", "VIEW", "SYSTEM VIEW", "TABLE LINK", "SYNONYM", "EXTERNAL"});
2020-06-17 21:44:34 jdbc[13]: 
/**/PreparedStatement prep17 = conn10.prepareStatement("SELECT TABLE_CAT, TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_CAT, TYPE_SCHEM, TYPE_NAME, SELF_REFERENCING_COL_NAME, REF_GENERATION, SQL FROM (SELECT SYNONYM_CATALOG TABLE_CAT, SYNONYM_SCHEMA TABLE_SCHEM, SYNONYM_NAME as TABLE_NAME, TYPE_NAME AS TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME AS TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, NULL AS SQL FROM INFORMATION_SCHEMA.SYNONYMS WHERE SYNONYM_CATALOG LIKE ?1 ESCAPE ?4 AND SYNONYM_SCHEMA LIKE ?2 ESCAPE ?4 AND SYNONYM_NAME LIKE ?3 ESCAPE ?4 UNION SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5, ?6, ?7, ?8, ?9, ?10, ?11)) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME");
2020-06-17 21:44:34 jdbc[13]: Plan       : calculate cost for plan [_0]
2020-06-17 21:44:34 jdbc[13]: Plan       :   for table filter _0
2020-06-17 21:44:34 jdbc[13]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@75e38c7]
2020-06-17 21:44:34 jdbc[13]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@75e38c7
2020-06-17 21:44:34 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:44:34 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:44:34 jdbc[13]: Plan       :   best plan item cost 4,022 index meta
2020-06-17 21:44:34 jdbc[13]: Plan       : plan cost 4,023
2020-06-17 21:44:34 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@3c7ffe1c]
2020-06-17 21:44:34 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@3c7ffe1c
2020-06-17 21:44:34 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:44:34 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:44:34 jdbc[13]: Plan       :   best plan item cost 3,981.78 index meta
2020-06-17 21:44:34 jdbc[13]: Plan       : plan cost 3,982.78
2020-06-17 21:44:34 jdbc[13]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@75e38c7]
2020-06-17 21:44:34 jdbc[13]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@75e38c7
2020-06-17 21:44:34 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:44:34 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:44:34 jdbc[13]: Plan       :   best plan item cost 4,022 index meta
2020-06-17 21:44:34 jdbc[13]: Plan       : plan cost 4,023
2020-06-17 21:44:34 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@3c7ffe1c]
2020-06-17 21:44:34 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@3c7ffe1c
2020-06-17 21:44:34 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:44:34 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:44:34 jdbc[13]: Plan       :   best plan item cost 3,981.78 index meta
2020-06-17 21:44:34 jdbc[13]: Plan       : plan cost 3,982.78
2020-06-17 21:44:34 jdbc[13]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@75e38c7]
2020-06-17 21:44:34 jdbc[13]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@75e38c7
2020-06-17 21:44:34 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:44:34 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:44:34 jdbc[13]: Plan       :   best plan item cost 4,022 index meta
2020-06-17 21:44:34 jdbc[13]: Plan       : plan cost 4,023
2020-06-17 21:44:34 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@3c7ffe1c]
2020-06-17 21:44:34 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@3c7ffe1c
2020-06-17 21:44:34 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:44:34 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:44:34 jdbc[13]: Plan       :   best plan item cost 3,981.78 index meta
2020-06-17 21:44:34 jdbc[13]: Plan       : plan cost 3,982.78
2020-06-17 21:44:34 jdbc[13]: Plan       :   best plan item cost 8,005.78 index (SELECT
    SYNONYM_CATALOG AS TABLE_CAT,
    SYNONYM_SCHEMA AS TABLE_SCHEM,
    SYNONYM_NAME AS TABLE_NAME,
    TYPE_NAME AS TABLE_TYPE,
    REMARKS,
    TYPE_NAME AS TYPE_CAT,
    TYPE_NAME AS TYPE_SCHEM,
    TYPE_NAME AS TYPE_NAME,
    TYPE_NAME AS SELF_REFERENCING_COL_NAME,
    TYPE_NAME AS REF_GENERATION,
    NULL AS SQL
FROM INFORMATION_SCHEMA.SYNONYMS
    /* meta */
WHERE (SYNONYM_NAME LIKE ?3 ESCAPE ?4)
    AND ((SYNONYM_CATALOG LIKE ?1 ESCAPE ?4)
    AND (SYNONYM_SCHEMA LIKE ?2 ESCAPE ?4)))
UNION
(SELECT
    TABLE_CATALOG AS TABLE_CAT,
    TABLE_SCHEMA AS TABLE_SCHEM,
    TABLE_NAME,
    TABLE_TYPE,
    REMARKS,
    TYPE_NAME AS TYPE_CAT,
    TYPE_NAME AS TYPE_SCHEM,
    TYPE_NAME,
    TYPE_NAME AS SELF_REFERENCING_COL_NAME,
    TYPE_NAME AS REF_GENERATION,
    SQL
FROM INFORMATION_SCHEMA.TABLES
    /* meta */
WHERE (TABLE_TYPE IN(?5, ?6, ?7, ?8, ?9, ?10, ?11))
    AND ((TABLE_NAME LIKE ?3 ESCAPE ?4)
    AND ((TABLE_CATALOG LIKE ?1 ESCAPE ?4)
    AND (TABLE_SCHEMA LIKE ?2 ESCAPE ?4))))
2020-06-17 21:44:34 jdbc[13]: Plan       : plan cost 8,006.78
2020-06-17 21:44:34 jdbc[13]: 
/**/prep17.setString(1, "%");
2020-06-17 21:44:34 jdbc[13]: 
/**/prep17.setString(2, "INFORMATION_SCHEMA");
2020-06-17 21:44:34 jdbc[13]: 
/**/prep17.setString(3, "%");
2020-06-17 21:44:34 jdbc[13]: 
/**/prep17.setString(4, "\\");
2020-06-17 21:44:34 jdbc[13]: 
/**/prep17.setString(5, "TABLE");
2020-06-17 21:44:34 jdbc[13]: 
/**/prep17.setString(6, "SYSTEM TABLE");
2020-06-17 21:44:34 jdbc[13]: 
/**/prep17.setString(7, "VIEW");
2020-06-17 21:44:34 jdbc[13]: 
/**/prep17.setString(8, "SYSTEM VIEW");
2020-06-17 21:44:34 jdbc[13]: 
/**/prep17.setString(9, "TABLE LINK");
2020-06-17 21:44:34 jdbc[13]: 
/**/prep17.setString(10, "SYNONYM");
2020-06-17 21:44:34 jdbc[13]: 
/**/prep17.setString(11, "EXTERNAL");
2020-06-17 21:44:34 jdbc[13]: 
/**/ResultSet rs22 = prep17.executeQuery();
2020-06-17 21:44:34 jdbc[13]: Plan       : calculate cost for plan [_1]
2020-06-17 21:44:34 jdbc[13]: Plan       :   for table filter _1
2020-06-17 21:44:34 jdbc[13]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@75e38c7]
2020-06-17 21:44:34 jdbc[13]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@75e38c7
2020-06-17 21:44:34 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:44:34 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:44:34 jdbc[13]: Plan       :   best plan item cost 4,022 index meta
2020-06-17 21:44:34 jdbc[13]: Plan       : plan cost 4,023
2020-06-17 21:44:34 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@3c7ffe1c]
2020-06-17 21:44:34 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@3c7ffe1c
2020-06-17 21:44:34 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:44:34 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:44:34 jdbc[13]: Plan       :   best plan item cost 3,981.78 index meta
2020-06-17 21:44:34 jdbc[13]: Plan       : plan cost 3,982.78
2020-06-17 21:44:34 jdbc[13]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@75e38c7]
2020-06-17 21:44:34 jdbc[13]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@75e38c7
2020-06-17 21:44:34 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:44:34 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:44:34 jdbc[13]: Plan       :   best plan item cost 4,022 index meta
2020-06-17 21:44:34 jdbc[13]: Plan       : plan cost 4,023
2020-06-17 21:44:34 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@3c7ffe1c]
2020-06-17 21:44:34 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@3c7ffe1c
2020-06-17 21:44:34 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:44:34 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:44:34 jdbc[13]: Plan       :   best plan item cost 3,981.78 index meta
2020-06-17 21:44:34 jdbc[13]: Plan       : plan cost 3,982.78
2020-06-17 21:44:34 jdbc[13]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@75e38c7]
2020-06-17 21:44:34 jdbc[13]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@75e38c7
2020-06-17 21:44:34 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:44:34 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:44:34 jdbc[13]: Plan       :   best plan item cost 4,022 index meta
2020-06-17 21:44:34 jdbc[13]: Plan       : plan cost 4,023
2020-06-17 21:44:34 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@3c7ffe1c]
2020-06-17 21:44:34 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@3c7ffe1c
2020-06-17 21:44:34 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:44:34 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:44:34 jdbc[13]: Plan       :   best plan item cost 3,981.78 index meta
2020-06-17 21:44:34 jdbc[13]: Plan       : plan cost 3,982.78
2020-06-17 21:44:34 jdbc[13]: Plan       :   best plan item cost 8,005.78 index (SELECT
    SYNONYM_CATALOG AS TABLE_CAT,
    SYNONYM_SCHEMA AS TABLE_SCHEM,
    SYNONYM_NAME AS TABLE_NAME,
    TYPE_NAME AS TABLE_TYPE,
    REMARKS,
    TYPE_NAME AS TYPE_CAT,
    TYPE_NAME AS TYPE_SCHEM,
    TYPE_NAME AS TYPE_NAME,
    TYPE_NAME AS SELF_REFERENCING_COL_NAME,
    TYPE_NAME AS REF_GENERATION,
    NULL AS SQL
FROM INFORMATION_SCHEMA.SYNONYMS
    /* meta */
WHERE (SYNONYM_NAME LIKE ?3 ESCAPE ?4)
    AND ((SYNONYM_CATALOG LIKE ?1 ESCAPE ?4)
    AND (SYNONYM_SCHEMA LIKE ?2 ESCAPE ?4)))
UNION
(SELECT
    TABLE_CATALOG AS TABLE_CAT,
    TABLE_SCHEMA AS TABLE_SCHEM,
    TABLE_NAME,
    TABLE_TYPE,
    REMARKS,
    TYPE_NAME AS TYPE_CAT,
    TYPE_NAME AS TYPE_SCHEM,
    TYPE_NAME,
    TYPE_NAME AS SELF_REFERENCING_COL_NAME,
    TYPE_NAME AS REF_GENERATION,
    SQL
FROM INFORMATION_SCHEMA.TABLES
    /* meta */
WHERE (TABLE_TYPE IN(?5, ?6, ?7, ?8, ?9, ?10, ?11))
    AND ((TABLE_NAME LIKE ?3 ESCAPE ?4)
    AND ((TABLE_CATALOG LIKE ?1 ESCAPE ?4)
    AND (TABLE_SCHEMA LIKE ?2 ESCAPE ?4))))
2020-06-17 21:44:34 jdbc[13]: Plan       : plan cost 8,006.78
2020-06-17 21:44:34 jdbc[13]: 
/*SQL l:1007 #:33 t:2*/SELECT TABLE_CAT, TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_CAT, TYPE_SCHEM, TYPE_NAME, SELF_REFERENCING_COL_NAME, REF_GENERATION, SQL FROM (SELECT SYNONYM_CATALOG TABLE_CAT, SYNONYM_SCHEMA TABLE_SCHEM, SYNONYM_NAME as TABLE_NAME, TYPE_NAME AS TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME AS TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, NULL AS SQL FROM INFORMATION_SCHEMA.SYNONYMS WHERE SYNONYM_CATALOG LIKE ?1 ESCAPE ?4 AND SYNONYM_SCHEMA LIKE ?2 ESCAPE ?4 AND SYNONYM_NAME LIKE ?3 ESCAPE ?4 UNION SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5, ?6, ?7, ?8, ?9, ?10, ?11)) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME {1: '%', 2: 'INFORMATION_SCHEMA', 3: '%', 4: '\\', 5: 'TABLE', 6: 'SYSTEM TABLE', 7: 'VIEW', 8: 'SYSTEM VIEW', 9: 'TABLE LINK', 10: 'SYNONYM', 11: 'EXTERNAL'};
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.getString("TABLE_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.getString("TABLE_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.getString("TABLE_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.getString("TABLE_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.getString("TABLE_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.getString("TABLE_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.getString("TABLE_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.getString("TABLE_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.getString("TABLE_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.getString("TABLE_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.getString("TABLE_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.getString("TABLE_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.getString("TABLE_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.getString("TABLE_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.getString("TABLE_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.getString("TABLE_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.getString("TABLE_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.getString("TABLE_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.getString("TABLE_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.getString("TABLE_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.getString("TABLE_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.getString("TABLE_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.getString("TABLE_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.getString("TABLE_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.getString("TABLE_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.getString("TABLE_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.getString("TABLE_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.getString("TABLE_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.getString("TABLE_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.getString("TABLE_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.getString("TABLE_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.getString("TABLE_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.getString("TABLE_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.getString("TABLE_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.getString("TABLE_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.getString("TABLE_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.getString("TABLE_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.getString("TABLE_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.getString("TABLE_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.getString("TABLE_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.getString("TABLE_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.getString("TABLE_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.getString("TABLE_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.getString("TABLE_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.getString("TABLE_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.getString("TABLE_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.getString("TABLE_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.getString("TABLE_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.getString("TABLE_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.getString("TABLE_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.getString("TABLE_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.getString("TABLE_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.getString("TABLE_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.getString("TABLE_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.getString("TABLE_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.getString("TABLE_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.getString("TABLE_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.getString("TABLE_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.getString("TABLE_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.getString("TABLE_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.getString("TABLE_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.getString("TABLE_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.getString("TABLE_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.getString("TABLE_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.getString("TABLE_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.getString("TABLE_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs22.close();
2020-06-17 21:44:34 jdbc[13]: 
/**/prep17.close();
2020-06-17 21:44:34 jdbc[13]: 
/**/dbMeta4.getConnection();
2020-06-17 21:44:34 jdbc[13]: 
/**/PreparedStatement prep18 = conn10.prepareStatement("SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ?");
2020-06-17 21:44:34 jdbc[13]: Plan       : calculate cost for plan [COLUMNS:-2:org.h2.table.MetaTable@7d8e9e7]
2020-06-17 21:44:34 jdbc[13]: Plan       :   for table filter COLUMNS:-2:org.h2.table.MetaTable@7d8e9e7
2020-06-17 21:44:34 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:44:34 jdbc[13]: Table      :     potential plan item cost 28 index meta
2020-06-17 21:44:34 jdbc[13]: Plan       :   best plan item cost 27.44 index meta
2020-06-17 21:44:34 jdbc[13]: Plan       : plan cost 28.44
2020-06-17 21:44:34 jdbc[13]: 
/**/prep18.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:44:34 jdbc[13]: 
/**/prep18.setString(2, "CATALOGS");
2020-06-17 21:44:34 jdbc[13]: 
/**/ResultSet rs23 = prep18.executeQuery();
2020-06-17 21:44:34 jdbc[13]: 
/*SQL l:123 #:1*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'CATALOGS'};
2020-06-17 21:44:34 jdbc[13]: 
/**/rs23.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs23.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs23.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs23.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs23.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs23.close();
2020-06-17 21:44:34 jdbc[13]: 
/**/prep18.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:44:34 jdbc[13]: 
/**/prep18.setString(2, "COLLATIONS");
2020-06-17 21:44:34 jdbc[13]: 
/**/ResultSet rs24 = prep18.executeQuery();
2020-06-17 21:44:34 jdbc[13]: 
/*SQL l:123 #:2*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'COLLATIONS'};
2020-06-17 21:44:34 jdbc[13]: 
/**/rs24.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs24.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs24.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs24.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs24.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs24.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs24.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs24.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs24.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs24.close();
2020-06-17 21:44:34 jdbc[13]: 
/**/prep18.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:44:34 jdbc[13]: 
/**/prep18.setString(2, "COLUMNS");
2020-06-17 21:44:34 jdbc[13]: 
/**/ResultSet rs25 = prep18.executeQuery();
2020-06-17 21:44:34 jdbc[13]: 
/*SQL l:123 #:32*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'COLUMNS'};
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs25.close();
2020-06-17 21:44:34 jdbc[13]: 
/**/prep18.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:44:34 jdbc[13]: 
/**/prep18.setString(2, "COLUMN_PRIVILEGES");
2020-06-17 21:44:34 jdbc[13]: 
/**/ResultSet rs26 = prep18.executeQuery();
2020-06-17 21:44:34 jdbc[13]: 
/*SQL l:123 #:8*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'COLUMN_PRIVILEGES'};
2020-06-17 21:44:34 jdbc[13]: 
/**/rs26.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs26.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs26.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs26.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs26.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs26.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs26.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs26.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs26.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs26.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs26.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs26.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs26.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs26.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs26.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs26.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs26.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs26.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs26.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs26.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs26.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs26.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs26.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs26.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs26.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs26.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs26.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs26.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs26.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs26.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs26.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs26.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs26.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs26.close();
2020-06-17 21:44:34 jdbc[13]: 
/**/prep18.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:44:34 jdbc[13]: 
/**/prep18.setString(2, "CONSTANTS");
2020-06-17 21:44:34 jdbc[13]: 
/**/ResultSet rs27 = prep18.executeQuery();
2020-06-17 21:44:34 jdbc[13]: 
/*SQL l:123 #:7*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'CONSTANTS'};
2020-06-17 21:44:34 jdbc[13]: 
/**/rs27.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs27.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs27.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs27.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs27.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs27.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs27.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs27.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs27.close();
2020-06-17 21:44:34 jdbc[13]: 
/**/prep18.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:44:34 jdbc[13]: 
/**/prep18.setString(2, "CONSTRAINTS");
2020-06-17 21:44:34 jdbc[13]: 
/**/ResultSet rs28 = prep18.executeQuery();
2020-06-17 21:44:34 jdbc[13]: 
/*SQL l:123 #:13*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'CONSTRAINTS'};
2020-06-17 21:44:34 jdbc[13]: 
/**/rs28.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs28.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs28.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs28.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs28.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs28.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs28.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs28.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs28.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs28.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs28.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs28.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs28.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs28.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs28.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs28.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs28.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs28.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs28.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs28.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs28.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs28.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs28.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs28.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs28.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs28.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs28.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs28.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs28.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs28.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs28.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs28.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs28.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs28.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs28.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs28.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs28.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs28.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs28.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs28.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs28.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs28.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs28.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs28.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs28.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs28.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs28.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs28.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs28.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs28.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs28.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs28.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs28.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs28.close();
2020-06-17 21:44:34 jdbc[13]: 
/**/prep18.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:44:34 jdbc[13]: 
/**/prep18.setString(2, "CROSS_REFERENCES");
2020-06-17 21:44:34 jdbc[13]: 
/**/ResultSet rs29 = prep18.executeQuery();
2020-06-17 21:44:34 jdbc[13]: 
/*SQL l:123 #:14*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'CROSS_REFERENCES'};
2020-06-17 21:44:34 jdbc[13]: 
/**/rs29.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs29.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs29.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs29.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs29.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs29.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs29.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs29.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs29.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs29.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs29.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs29.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs29.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs29.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs29.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs29.close();
2020-06-17 21:44:34 jdbc[13]: 
/**/prep18.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:44:34 jdbc[13]: 
/**/prep18.setString(2, "DOMAINS");
2020-06-17 21:44:34 jdbc[13]: 
/**/ResultSet rs30 = prep18.executeQuery();
2020-06-17 21:44:34 jdbc[13]: 
/*SQL l:123 #:14*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'DOMAINS'};
2020-06-17 21:44:34 jdbc[13]: 
/**/rs30.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs30.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs30.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs30.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs30.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs30.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs30.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs30.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs30.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs30.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs30.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs30.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs30.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs30.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs30.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs30.getString("COLUMN_TYPE");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs30.next();
2020-06-17 21:44:34 jdbc[13]: 
/**/rs30.getString("COLUMN_NAME");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs30.getInt("ORDINAL_POSITION");
2020-06-17 21:44:34 jdbc[13]: 
/**/rs30.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs30.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs30.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs30.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs30.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs30.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs30.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs30.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs30.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs30.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs30.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs30.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs30.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs30.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs30.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs30.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs30.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs30.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs30.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs30.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs30.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs30.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs30.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs30.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs30.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs30.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs30.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs30.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs30.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs30.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs30.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs30.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs30.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs30.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs30.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs30.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs30.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs30.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs30.close();
2020-06-17 21:44:35 jdbc[13]: 
/**/prep18.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:44:35 jdbc[13]: 
/**/prep18.setString(2, "FUNCTION_ALIASES");
2020-06-17 21:44:35 jdbc[13]: 
/**/ResultSet rs31 = prep18.executeQuery();
2020-06-17 21:44:35 jdbc[13]: 
/*SQL l:123 #:12*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'FUNCTION_ALIASES'};
2020-06-17 21:44:35 jdbc[13]: 
/**/rs31.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs31.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs31.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs31.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs31.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs31.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs31.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs31.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs31.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs31.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs31.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs31.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs31.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs31.close();
2020-06-17 21:44:35 jdbc[13]: 
/**/prep18.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:44:35 jdbc[13]: 
/**/prep18.setString(2, "FUNCTION_COLUMNS");
2020-06-17 21:44:35 jdbc[13]: 
/**/ResultSet rs32 = prep18.executeQuery();
2020-06-17 21:44:35 jdbc[13]: 
/*SQL l:123 #:17 t:6*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'FUNCTION_COLUMNS'};
2020-06-17 21:44:35 jdbc[13]: 
/**/rs32.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs32.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs32.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs32.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs32.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs32.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs32.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs32.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs32.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs32.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs32.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs32.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs32.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs32.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs32.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs32.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs32.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs32.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs32.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs32.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs32.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs32.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs32.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs32.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs32.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs32.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs32.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs32.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs32.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs32.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs32.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs32.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs32.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs32.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs32.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs32.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs32.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs32.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs32.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs32.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs32.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs32.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs32.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs32.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs32.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs32.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs32.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs32.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs32.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs32.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs32.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs32.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs32.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs32.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs32.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs32.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs32.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs32.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs32.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs32.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs32.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs32.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs32.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs32.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs32.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs32.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs32.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs32.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs32.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs32.close();
2020-06-17 21:44:35 jdbc[13]: 
/**/prep18.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:44:35 jdbc[13]: 
/**/prep18.setString(2, "HELP");
2020-06-17 21:44:35 jdbc[13]: 
/**/ResultSet rs33 = prep18.executeQuery();
2020-06-17 21:44:35 jdbc[13]: 
/*SQL l:123 #:5*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'HELP'};
2020-06-17 21:44:35 jdbc[13]: 
/**/rs33.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs33.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs33.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs33.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs33.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs33.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs33.close();
2020-06-17 21:44:35 jdbc[13]: 
/**/prep18.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:44:35 jdbc[13]: 
/**/prep18.setString(2, "INDEXES");
2020-06-17 21:44:35 jdbc[13]: 
/**/ResultSet rs34 = prep18.executeQuery();
2020-06-17 21:44:35 jdbc[13]: 
/*SQL l:123 #:22*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'INDEXES'};
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs34.close();
2020-06-17 21:44:35 jdbc[13]: 
/**/prep18.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:44:35 jdbc[13]: 
/**/prep18.setString(2, "IN_DOUBT");
2020-06-17 21:44:35 jdbc[13]: 
/**/ResultSet rs35 = prep18.executeQuery();
2020-06-17 21:44:35 jdbc[13]: 
/*SQL l:123 #:2*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'IN_DOUBT'};
2020-06-17 21:44:35 jdbc[13]: 
/**/rs35.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs35.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs35.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs35.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs35.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs35.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs35.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs35.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs35.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs35.close();
2020-06-17 21:44:35 jdbc[13]: 
/**/prep18.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:44:35 jdbc[13]: 
/**/prep18.setString(2, "KEY_COLUMN_USAGE");
2020-06-17 21:44:35 jdbc[13]: 
/**/ResultSet rs36 = prep18.executeQuery();
2020-06-17 21:44:35 jdbc[13]: 
/*SQL l:123 #:9*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'KEY_COLUMN_USAGE'};
2020-06-17 21:44:35 jdbc[13]: 
/**/rs36.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs36.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs36.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs36.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs36.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs36.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs36.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs36.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs36.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs36.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs36.close();
2020-06-17 21:44:35 jdbc[13]: 
/**/prep18.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:44:35 jdbc[13]: 
/**/prep18.setString(2, "LOCKS");
2020-06-17 21:44:35 jdbc[13]: 
/**/ResultSet rs37 = prep18.executeQuery();
2020-06-17 21:44:35 jdbc[13]: 
/*SQL l:123 #:4*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'LOCKS'};
2020-06-17 21:44:35 jdbc[13]: 
/**/rs37.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs37.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs37.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs37.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs37.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs37.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs37.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs37.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs37.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs37.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs37.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs37.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs37.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs37.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs37.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs37.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs37.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs37.close();
2020-06-17 21:44:35 jdbc[13]: 
/**/prep18.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:44:35 jdbc[13]: 
/**/prep18.setString(2, "QUERY_STATISTICS");
2020-06-17 21:44:35 jdbc[13]: 
/**/ResultSet rs38 = prep18.executeQuery();
2020-06-17 21:44:35 jdbc[13]: 
/*SQL l:123 #:12*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'QUERY_STATISTICS'};
2020-06-17 21:44:35 jdbc[13]: 
/**/rs38.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs38.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs38.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs38.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs38.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs38.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs38.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs38.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs38.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs38.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs38.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs38.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs38.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs38.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs38.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs38.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs38.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs38.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs38.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs38.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs38.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs38.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs38.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs38.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs38.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs38.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs38.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs38.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs38.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs38.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs38.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs38.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs38.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs38.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs38.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs38.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs38.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs38.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs38.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs38.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs38.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs38.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs38.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs38.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs38.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs38.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs38.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs38.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs38.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs38.close();
2020-06-17 21:44:35 jdbc[13]: 
/**/prep18.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:44:35 jdbc[13]: 
/**/prep18.setString(2, "REFERENTIAL_CONSTRAINTS");
2020-06-17 21:44:35 jdbc[13]: 
/**/ResultSet rs39 = prep18.executeQuery();
2020-06-17 21:44:35 jdbc[13]: 
/*SQL l:123 #:9*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'REFERENTIAL_CONSTRAINTS'};
2020-06-17 21:44:35 jdbc[13]: 
/**/rs39.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs39.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs39.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs39.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs39.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs39.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs39.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs39.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs39.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs39.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs39.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs39.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs39.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs39.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs39.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs39.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs39.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs39.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs39.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs39.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs39.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs39.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs39.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs39.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs39.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs39.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs39.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs39.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs39.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs39.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs39.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs39.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs39.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs39.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs39.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs39.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs39.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs39.close();
2020-06-17 21:44:35 jdbc[13]: 
/**/prep18.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:44:35 jdbc[13]: 
/**/prep18.setString(2, "RIGHTS");
2020-06-17 21:44:35 jdbc[13]: 
/**/ResultSet rs40 = prep18.executeQuery();
2020-06-17 21:44:35 jdbc[13]: 
/*SQL l:123 #:7*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'RIGHTS'};
2020-06-17 21:44:35 jdbc[13]: 
/**/rs40.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs40.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs40.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs40.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs40.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs40.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs40.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs40.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs40.close();
2020-06-17 21:44:35 jdbc[13]: 
/**/prep18.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:44:35 jdbc[13]: 
/**/prep18.setString(2, "ROLES");
2020-06-17 21:44:35 jdbc[13]: 
/**/ResultSet rs41 = prep18.executeQuery();
2020-06-17 21:44:35 jdbc[13]: 
/*SQL l:123 #:3*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'ROLES'};
2020-06-17 21:44:35 jdbc[13]: 
/**/rs41.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs41.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs41.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs41.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs41.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs41.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs41.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs41.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs41.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs41.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs41.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs41.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs41.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs41.close();
2020-06-17 21:44:35 jdbc[13]: 
/**/prep18.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:44:35 jdbc[13]: 
/**/prep18.setString(2, "SCHEMATA");
2020-06-17 21:44:35 jdbc[13]: 
/**/ResultSet rs42 = prep18.executeQuery();
2020-06-17 21:44:35 jdbc[13]: 
/*SQL l:123 #:8*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'SCHEMATA'};
2020-06-17 21:44:35 jdbc[13]: 
/**/rs42.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs42.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs42.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs42.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs42.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs42.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs42.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs42.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs42.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs42.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs42.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs42.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs42.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs42.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs42.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs42.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs42.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs42.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs42.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs42.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs42.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs42.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs42.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs42.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs42.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs42.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs42.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs42.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs42.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs42.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs42.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs42.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs42.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs42.close();
2020-06-17 21:44:35 jdbc[13]: 
/**/prep18.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:44:35 jdbc[13]: 
/**/prep18.setString(2, "SEQUENCES");
2020-06-17 21:44:35 jdbc[13]: 
/**/ResultSet rs43 = prep18.executeQuery();
2020-06-17 21:44:35 jdbc[13]: 
/*SQL l:123 #:12*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'SEQUENCES'};
2020-06-17 21:44:35 jdbc[13]: 
/**/rs43.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs43.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs43.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs43.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs43.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs43.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs43.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs43.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs43.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs43.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs43.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs43.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs43.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs43.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs43.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs43.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs43.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs43.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs43.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs43.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs43.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs43.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs43.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs43.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs43.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs43.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs43.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs43.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs43.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs43.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs43.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs43.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs43.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs43.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs43.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs43.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs43.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs43.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs43.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs43.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs43.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs43.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs43.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs43.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs43.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs43.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs43.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs43.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs43.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs43.close();
2020-06-17 21:44:35 jdbc[13]: 
/**/prep18.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:44:35 jdbc[13]: 
/**/prep18.setString(2, "SESSIONS");
2020-06-17 21:44:35 jdbc[13]: 
/**/ResultSet rs44 = prep18.executeQuery();
2020-06-17 21:44:35 jdbc[13]: 
/*SQL l:123 #:12*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'SESSIONS'};
2020-06-17 21:44:35 jdbc[13]: 
/**/rs44.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs44.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs44.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs44.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs44.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs44.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs44.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs44.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs44.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs44.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs44.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs44.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs44.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs44.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs44.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs44.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs44.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs44.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs44.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs44.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs44.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs44.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs44.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs44.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs44.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs44.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs44.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs44.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs44.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs44.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs44.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs44.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs44.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs44.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs44.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs44.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs44.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs44.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs44.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs44.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs44.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs44.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs44.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs44.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs44.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs44.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs44.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs44.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs44.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs44.close();
2020-06-17 21:44:35 jdbc[13]: 
/**/prep18.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:44:35 jdbc[13]: 
/**/prep18.setString(2, "SESSION_STATE");
2020-06-17 21:44:35 jdbc[13]: 
/**/ResultSet rs45 = prep18.executeQuery();
2020-06-17 21:44:35 jdbc[13]: 
/*SQL l:123 #:2*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'SESSION_STATE'};
2020-06-17 21:44:35 jdbc[13]: 
/**/rs45.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs45.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs45.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs45.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs45.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs45.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs45.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs45.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs45.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs45.close();
2020-06-17 21:44:35 jdbc[13]: 
/**/prep18.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:44:35 jdbc[13]: 
/**/prep18.setString(2, "SETTINGS");
2020-06-17 21:44:35 jdbc[13]: 
/**/ResultSet rs46 = prep18.executeQuery();
2020-06-17 21:44:35 jdbc[13]: 
/*SQL l:123 #:2*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'SETTINGS'};
2020-06-17 21:44:35 jdbc[13]: 
/**/rs46.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs46.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs46.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs46.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs46.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs46.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs46.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs46.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs46.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs46.close();
2020-06-17 21:44:35 jdbc[13]: 
/**/prep18.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:44:35 jdbc[13]: 
/**/prep18.setString(2, "SYNONYMS");
2020-06-17 21:44:35 jdbc[13]: 
/**/ResultSet rs47 = prep18.executeQuery();
2020-06-17 21:44:35 jdbc[13]: 
/*SQL l:123 #:9*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'SYNONYMS'};
2020-06-17 21:44:35 jdbc[13]: 
/**/rs47.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs47.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs47.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs47.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs47.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs47.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs47.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs47.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs47.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs47.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs47.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs47.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs47.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs47.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs47.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs47.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs47.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs47.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs47.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs47.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs47.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs47.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs47.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs47.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs47.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs47.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs47.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs47.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs47.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs47.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs47.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs47.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs47.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs47.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs47.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs47.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs47.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs47.close();
2020-06-17 21:44:35 jdbc[13]: 
/**/prep18.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:44:35 jdbc[13]: 
/**/prep18.setString(2, "TABLES");
2020-06-17 21:44:35 jdbc[13]: 
/**/ResultSet rs48 = prep18.executeQuery();
2020-06-17 21:44:35 jdbc[13]: 
/*SQL l:123 #:12*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'TABLES'};
2020-06-17 21:44:35 jdbc[13]: 
/**/rs48.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs48.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs48.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs48.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs48.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs48.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs48.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs48.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs48.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs48.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs48.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs48.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs48.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs48.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs48.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs48.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs48.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs48.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs48.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs48.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs48.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs48.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs48.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs48.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs48.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs48.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs48.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs48.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs48.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs48.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs48.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs48.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs48.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs48.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs48.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs48.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs48.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs48.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs48.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs48.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs48.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs48.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs48.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs48.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs48.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs48.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs48.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs48.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs48.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs48.close();
2020-06-17 21:44:35 jdbc[13]: 
/**/prep18.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:44:35 jdbc[13]: 
/**/prep18.setString(2, "TABLE_CONSTRAINTS");
2020-06-17 21:44:35 jdbc[13]: 
/**/ResultSet rs49 = prep18.executeQuery();
2020-06-17 21:44:35 jdbc[13]: 
/*SQL l:123 #:9*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'TABLE_CONSTRAINTS'};
2020-06-17 21:44:35 jdbc[13]: 
/**/rs49.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs49.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs49.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs49.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs49.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs49.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs49.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs49.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs49.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs49.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs49.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs49.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs49.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs49.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs49.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs49.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs49.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs49.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs49.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs49.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs49.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs49.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs49.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs49.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs49.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs49.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs49.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs49.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs49.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs49.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs49.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs49.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs49.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs49.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs49.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs49.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs49.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs49.close();
2020-06-17 21:44:35 jdbc[13]: 
/**/prep18.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:44:35 jdbc[13]: 
/**/prep18.setString(2, "TABLE_PRIVILEGES");
2020-06-17 21:44:35 jdbc[13]: 
/**/ResultSet rs50 = prep18.executeQuery();
2020-06-17 21:44:35 jdbc[13]: 
/*SQL l:123 #:7*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'TABLE_PRIVILEGES'};
2020-06-17 21:44:35 jdbc[13]: 
/**/rs50.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs50.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs50.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs50.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs50.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs50.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs50.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs50.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs50.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs50.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs50.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs50.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs50.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs50.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs50.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs50.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs50.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs50.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs50.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs50.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs50.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs50.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs50.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs50.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs50.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs50.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs50.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs50.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs50.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs50.close();
2020-06-17 21:44:35 jdbc[13]: 
/**/prep18.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:44:35 jdbc[13]: 
/**/prep18.setString(2, "TABLE_TYPES");
2020-06-17 21:44:35 jdbc[13]: 
/**/ResultSet rs51 = prep18.executeQuery();
2020-06-17 21:44:35 jdbc[13]: 
/*SQL l:123 #:1*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'TABLE_TYPES'};
2020-06-17 21:44:35 jdbc[13]: 
/**/rs51.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs51.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs51.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs51.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs51.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs51.close();
2020-06-17 21:44:35 jdbc[13]: 
/**/prep18.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:44:35 jdbc[13]: 
/**/prep18.setString(2, "TRIGGERS");
2020-06-17 21:44:35 jdbc[13]: 
/**/ResultSet rs52 = prep18.executeQuery();
2020-06-17 21:44:35 jdbc[13]: 
/*SQL l:123 #:14*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'TRIGGERS'};
2020-06-17 21:44:35 jdbc[13]: 
/**/rs52.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs52.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs52.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs52.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs52.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs52.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs52.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs52.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs52.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs52.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs52.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs52.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs52.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs52.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs52.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs52.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs52.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs52.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs52.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs52.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs52.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs52.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs52.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs52.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs52.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs52.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs52.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs52.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs52.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs52.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs52.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs52.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs52.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs52.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs52.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs52.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs52.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs52.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs52.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs52.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs52.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs52.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs52.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs52.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs52.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs52.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs52.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs52.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs52.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs52.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs52.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs52.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs52.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs52.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs52.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs52.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs52.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs52.close();
2020-06-17 21:44:35 jdbc[13]: 
/**/prep18.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:44:35 jdbc[13]: 
/**/prep18.setString(2, "TYPE_INFO");
2020-06-17 21:44:35 jdbc[13]: 
/**/ResultSet rs53 = prep18.executeQuery();
2020-06-17 21:44:35 jdbc[13]: 
/*SQL l:123 #:14*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'TYPE_INFO'};
2020-06-17 21:44:35 jdbc[13]: 
/**/rs53.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs53.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs53.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs53.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs53.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs53.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs53.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs53.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs53.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs53.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs53.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs53.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs53.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs53.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs53.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs53.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs53.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs53.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs53.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs53.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs53.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs53.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs53.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs53.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs53.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs53.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs53.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs53.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs53.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs53.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs53.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs53.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs53.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs53.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs53.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs53.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs53.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs53.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs53.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs53.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs53.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs53.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs53.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs53.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs53.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs53.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs53.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs53.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs53.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs53.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs53.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs53.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs53.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs53.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs53.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs53.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs53.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs53.close();
2020-06-17 21:44:35 jdbc[13]: 
/**/prep18.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:44:35 jdbc[13]: 
/**/prep18.setString(2, "USERS");
2020-06-17 21:44:35 jdbc[13]: 
/**/ResultSet rs54 = prep18.executeQuery();
2020-06-17 21:44:35 jdbc[13]: 
/*SQL l:123 #:4*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'USERS'};
2020-06-17 21:44:35 jdbc[13]: 
/**/rs54.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs54.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs54.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs54.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs54.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs54.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs54.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs54.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs54.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs54.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs54.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs54.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs54.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs54.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs54.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs54.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs54.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs54.close();
2020-06-17 21:44:35 jdbc[13]: 
/**/prep18.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:44:35 jdbc[13]: 
/**/prep18.setString(2, "VIEWS");
2020-06-17 21:44:35 jdbc[13]: 
/**/ResultSet rs55 = prep18.executeQuery();
2020-06-17 21:44:35 jdbc[13]: 
/*SQL l:123 #:9*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'VIEWS'};
2020-06-17 21:44:35 jdbc[13]: 
/**/rs55.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs55.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs55.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs55.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs55.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs55.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs55.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs55.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs55.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs55.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs55.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs55.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs55.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs55.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs55.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs55.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs55.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs55.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs55.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs55.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs55.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs55.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs55.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs55.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs55.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs55.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs55.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs55.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs55.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs55.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs55.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs55.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs55.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs55.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs55.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs55.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs55.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs55.close();
2020-06-17 21:44:35 jdbc[13]: 
/**/prep18.close();
2020-06-17 21:44:35 jdbc[13]: 
/**/dbMeta4.getProcedures(null, "INFORMATION_SCHEMA", null);
2020-06-17 21:44:35 jdbc[13]: 
/**/PreparedStatement prep19 = conn10.prepareStatement("SELECT ALIAS_CATALOG PROCEDURE_CAT, ALIAS_SCHEMA PROCEDURE_SCHEM, ALIAS_NAME PROCEDURE_NAME, COLUMN_COUNT NUM_INPUT_PARAMS, ZERO() NUM_OUTPUT_PARAMS, ZERO() NUM_RESULT_SETS, REMARKS, RETURNS_RESULT PROCEDURE_TYPE, ALIAS_NAME SPECIFIC_NAME FROM INFORMATION_SCHEMA.FUNCTION_ALIASES WHERE ALIAS_CATALOG LIKE ? ESCAPE ? AND ALIAS_SCHEMA LIKE ? ESCAPE ? AND ALIAS_NAME LIKE ? ESCAPE ? ORDER BY PROCEDURE_SCHEM, PROCEDURE_NAME, NUM_INPUT_PARAMS");
2020-06-17 21:44:35 jdbc[13]: Plan       : calculate cost for plan [FUNCTION_ALIASES:-13:org.h2.table.MetaTable@777451a3]
2020-06-17 21:44:35 jdbc[13]: Plan       :   for table filter FUNCTION_ALIASES:-13:org.h2.table.MetaTable@777451a3
2020-06-17 21:44:35 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:44:35 jdbc[13]: Plan       :   best plan item cost 10,000 index meta
2020-06-17 21:44:35 jdbc[13]: Plan       : plan cost 10,001
2020-06-17 21:44:35 jdbc[13]: 
/**/prep19.setString(1, "%");
2020-06-17 21:44:35 jdbc[13]: 
/**/prep19.setString(2, "\\");
2020-06-17 21:44:35 jdbc[13]: 
/**/prep19.setString(3, "INFORMATION_SCHEMA");
2020-06-17 21:44:35 jdbc[13]: 
/**/prep19.setString(4, "\\");
2020-06-17 21:44:35 jdbc[13]: 
/**/prep19.setString(5, "%");
2020-06-17 21:44:35 jdbc[13]: 
/**/prep19.setString(6, "\\");
2020-06-17 21:44:35 jdbc[13]: 
/**/ResultSet rs56 = prep19.executeQuery();
2020-06-17 21:44:35 jdbc[13]: Plan       : calculate cost for plan [FUNCTION_ALIASES:-13:org.h2.table.MetaTable@777451a3]
2020-06-17 21:44:35 jdbc[13]: Plan       :   for table filter FUNCTION_ALIASES:-13:org.h2.table.MetaTable@777451a3
2020-06-17 21:44:35 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:44:35 jdbc[13]: Plan       :   best plan item cost 9,800 index meta
2020-06-17 21:44:35 jdbc[13]: Plan       : plan cost 9,801
2020-06-17 21:44:35 jdbc[13]: 
/*SQL l:438*/SELECT ALIAS_CATALOG PROCEDURE_CAT, ALIAS_SCHEMA PROCEDURE_SCHEM, ALIAS_NAME PROCEDURE_NAME, COLUMN_COUNT NUM_INPUT_PARAMS, ZERO() NUM_OUTPUT_PARAMS, ZERO() NUM_RESULT_SETS, REMARKS, RETURNS_RESULT PROCEDURE_TYPE, ALIAS_NAME SPECIFIC_NAME FROM INFORMATION_SCHEMA.FUNCTION_ALIASES WHERE ALIAS_CATALOG LIKE ? ESCAPE ? AND ALIAS_SCHEMA LIKE ? ESCAPE ? AND ALIAS_NAME LIKE ? ESCAPE ? ORDER BY PROCEDURE_SCHEM, PROCEDURE_NAME, NUM_INPUT_PARAMS {1: '%', 2: '\\', 3: 'INFORMATION_SCHEMA', 4: '\\', 5: '%', 6: '\\'};
2020-06-17 21:44:35 jdbc[13]: 
/**/rs56.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs56.close();
2020-06-17 21:44:35 jdbc[13]: 
/**/prep19.close();
2020-06-17 21:44:35 jdbc[13]: 
/**/dbMeta4.getTables(null, "PUBLIC", null, new String[]{"TABLE", "SYSTEM TABLE", "VIEW", "SYSTEM VIEW", "TABLE LINK", "SYNONYM", "EXTERNAL"});
2020-06-17 21:44:35 jdbc[13]: 
/**/PreparedStatement prep20 = conn10.prepareStatement("SELECT TABLE_CAT, TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_CAT, TYPE_SCHEM, TYPE_NAME, SELF_REFERENCING_COL_NAME, REF_GENERATION, SQL FROM (SELECT SYNONYM_CATALOG TABLE_CAT, SYNONYM_SCHEMA TABLE_SCHEM, SYNONYM_NAME as TABLE_NAME, TYPE_NAME AS TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME AS TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, NULL AS SQL FROM INFORMATION_SCHEMA.SYNONYMS WHERE SYNONYM_CATALOG LIKE ?1 ESCAPE ?4 AND SYNONYM_SCHEMA LIKE ?2 ESCAPE ?4 AND SYNONYM_NAME LIKE ?3 ESCAPE ?4 UNION SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5, ?6, ?7, ?8, ?9, ?10, ?11)) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/prep20.setString(1, "%");
2020-06-17 21:44:35 jdbc[13]: 
/**/prep20.setString(2, "PUBLIC");
2020-06-17 21:44:35 jdbc[13]: 
/**/prep20.setString(3, "%");
2020-06-17 21:44:35 jdbc[13]: 
/**/prep20.setString(4, "\\");
2020-06-17 21:44:35 jdbc[13]: 
/**/prep20.setString(5, "TABLE");
2020-06-17 21:44:35 jdbc[13]: 
/**/prep20.setString(6, "SYSTEM TABLE");
2020-06-17 21:44:35 jdbc[13]: 
/**/prep20.setString(7, "VIEW");
2020-06-17 21:44:35 jdbc[13]: 
/**/prep20.setString(8, "SYSTEM VIEW");
2020-06-17 21:44:35 jdbc[13]: 
/**/prep20.setString(9, "TABLE LINK");
2020-06-17 21:44:35 jdbc[13]: 
/**/prep20.setString(10, "SYNONYM");
2020-06-17 21:44:35 jdbc[13]: 
/**/prep20.setString(11, "EXTERNAL");
2020-06-17 21:44:35 jdbc[13]: 
/**/ResultSet rs57 = prep20.executeQuery();
2020-06-17 21:44:35 jdbc[13]: Plan       : calculate cost for plan [_2]
2020-06-17 21:44:35 jdbc[13]: Plan       :   for table filter _2
2020-06-17 21:44:35 jdbc[13]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@75e38c7]
2020-06-17 21:44:35 jdbc[13]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@75e38c7
2020-06-17 21:44:35 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:44:35 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:44:35 jdbc[13]: Plan       :   best plan item cost 4,022 index meta
2020-06-17 21:44:35 jdbc[13]: Plan       : plan cost 4,023
2020-06-17 21:44:35 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@3c7ffe1c]
2020-06-17 21:44:35 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@3c7ffe1c
2020-06-17 21:44:35 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:44:35 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:44:35 jdbc[13]: Plan       :   best plan item cost 3,981.78 index meta
2020-06-17 21:44:35 jdbc[13]: Plan       : plan cost 3,982.78
2020-06-17 21:44:35 jdbc[13]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@75e38c7]
2020-06-17 21:44:35 jdbc[13]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@75e38c7
2020-06-17 21:44:35 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:44:35 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:44:35 jdbc[13]: Plan       :   best plan item cost 4,022 index meta
2020-06-17 21:44:35 jdbc[13]: Plan       : plan cost 4,023
2020-06-17 21:44:35 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@3c7ffe1c]
2020-06-17 21:44:35 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@3c7ffe1c
2020-06-17 21:44:35 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:44:35 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:44:35 jdbc[13]: Plan       :   best plan item cost 3,981.78 index meta
2020-06-17 21:44:35 jdbc[13]: Plan       : plan cost 3,982.78
2020-06-17 21:44:35 jdbc[13]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@75e38c7]
2020-06-17 21:44:35 jdbc[13]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@75e38c7
2020-06-17 21:44:35 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:44:35 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:44:35 jdbc[13]: Plan       :   best plan item cost 4,022 index meta
2020-06-17 21:44:35 jdbc[13]: Plan       : plan cost 4,023
2020-06-17 21:44:35 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@3c7ffe1c]
2020-06-17 21:44:35 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@3c7ffe1c
2020-06-17 21:44:35 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:44:35 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:44:35 jdbc[13]: Plan       :   best plan item cost 3,981.78 index meta
2020-06-17 21:44:35 jdbc[13]: Plan       : plan cost 3,982.78
2020-06-17 21:44:35 jdbc[13]: Plan       :   best plan item cost 8,005.78 index (SELECT
    SYNONYM_CATALOG AS TABLE_CAT,
    SYNONYM_SCHEMA AS TABLE_SCHEM,
    SYNONYM_NAME AS TABLE_NAME,
    TYPE_NAME AS TABLE_TYPE,
    REMARKS,
    TYPE_NAME AS TYPE_CAT,
    TYPE_NAME AS TYPE_SCHEM,
    TYPE_NAME AS TYPE_NAME,
    TYPE_NAME AS SELF_REFERENCING_COL_NAME,
    TYPE_NAME AS REF_GENERATION,
    NULL AS SQL
FROM INFORMATION_SCHEMA.SYNONYMS
    /* meta */
WHERE (SYNONYM_NAME LIKE ?3 ESCAPE ?4)
    AND ((SYNONYM_CATALOG LIKE ?1 ESCAPE ?4)
    AND (SYNONYM_SCHEMA LIKE ?2 ESCAPE ?4)))
UNION
(SELECT
    TABLE_CATALOG AS TABLE_CAT,
    TABLE_SCHEMA AS TABLE_SCHEM,
    TABLE_NAME,
    TABLE_TYPE,
    REMARKS,
    TYPE_NAME AS TYPE_CAT,
    TYPE_NAME AS TYPE_SCHEM,
    TYPE_NAME,
    TYPE_NAME AS SELF_REFERENCING_COL_NAME,
    TYPE_NAME AS REF_GENERATION,
    SQL
FROM INFORMATION_SCHEMA.TABLES
    /* meta */
WHERE (TABLE_TYPE IN(?5, ?6, ?7, ?8, ?9, ?10, ?11))
    AND ((TABLE_NAME LIKE ?3 ESCAPE ?4)
    AND ((TABLE_CATALOG LIKE ?1 ESCAPE ?4)
    AND (TABLE_SCHEMA LIKE ?2 ESCAPE ?4))))
2020-06-17 21:44:35 jdbc[13]: Plan       : plan cost 8,006.78
2020-06-17 21:44:35 jdbc[13]: 
/*SQL l:1007 #:2*/SELECT TABLE_CAT, TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_CAT, TYPE_SCHEM, TYPE_NAME, SELF_REFERENCING_COL_NAME, REF_GENERATION, SQL FROM (SELECT SYNONYM_CATALOG TABLE_CAT, SYNONYM_SCHEMA TABLE_SCHEM, SYNONYM_NAME as TABLE_NAME, TYPE_NAME AS TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME AS TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, NULL AS SQL FROM INFORMATION_SCHEMA.SYNONYMS WHERE SYNONYM_CATALOG LIKE ?1 ESCAPE ?4 AND SYNONYM_SCHEMA LIKE ?2 ESCAPE ?4 AND SYNONYM_NAME LIKE ?3 ESCAPE ?4 UNION SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5, ?6, ?7, ?8, ?9, ?10, ?11)) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME {1: '%', 2: 'PUBLIC', 3: '%', 4: '\\', 5: 'TABLE', 6: 'SYSTEM TABLE', 7: 'VIEW', 8: 'SYSTEM VIEW', 9: 'TABLE LINK', 10: 'SYNONYM', 11: 'EXTERNAL'};
2020-06-17 21:44:35 jdbc[13]: 
/**/rs57.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs57.getString("TABLE_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs57.getString("TABLE_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs57.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs57.getString("TABLE_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs57.getString("TABLE_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs57.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs57.close();
2020-06-17 21:44:35 jdbc[13]: 
/**/prep20.close();
2020-06-17 21:44:35 jdbc[13]: 
/**/dbMeta4.getConnection();
2020-06-17 21:44:35 jdbc[13]: 
/**/PreparedStatement prep21 = conn10.prepareStatement("SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ?");
2020-06-17 21:44:35 jdbc[13]: 
/**/prep21.setString(1, "PUBLIC");
2020-06-17 21:44:35 jdbc[13]: 
/**/prep21.setString(2, "CUSTOMER_TBL");
2020-06-17 21:44:35 jdbc[13]: 
/**/ResultSet rs58 = prep21.executeQuery();
2020-06-17 21:44:35 jdbc[13]: 
/*SQL l:123 #:4*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'PUBLIC', 2: 'CUSTOMER_TBL'};
2020-06-17 21:44:35 jdbc[13]: 
/**/rs58.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs58.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs58.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs58.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs58.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs58.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs58.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs58.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs58.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs58.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs58.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs58.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs58.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs58.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs58.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs58.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs58.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs58.close();
2020-06-17 21:44:35 jdbc[13]: 
/**/prep21.setString(1, "PUBLIC");
2020-06-17 21:44:35 jdbc[13]: 
/**/prep21.setString(2, "LOG_TBL");
2020-06-17 21:44:35 jdbc[13]: 
/**/ResultSet rs59 = prep21.executeQuery();
2020-06-17 21:44:35 jdbc[13]: 
/*SQL l:123 #:9*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'PUBLIC', 2: 'LOG_TBL'};
2020-06-17 21:44:35 jdbc[13]: 
/**/rs59.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs59.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs59.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs59.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs59.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs59.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs59.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs59.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs59.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs59.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs59.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs59.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs59.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs59.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs59.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs59.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs59.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs59.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs59.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs59.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs59.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs59.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs59.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs59.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs59.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs59.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs59.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs59.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs59.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs59.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs59.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs59.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs59.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs59.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs59.getInt("ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs59.getString("COLUMN_TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs59.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs59.close();
2020-06-17 21:44:35 jdbc[13]: 
/**/prep21.close();
2020-06-17 21:44:35 jdbc[13]: 
/**/dbMeta4.getProcedures(null, "PUBLIC", null);
2020-06-17 21:44:35 jdbc[13]: 
/**/PreparedStatement prep22 = conn10.prepareStatement("SELECT ALIAS_CATALOG PROCEDURE_CAT, ALIAS_SCHEMA PROCEDURE_SCHEM, ALIAS_NAME PROCEDURE_NAME, COLUMN_COUNT NUM_INPUT_PARAMS, ZERO() NUM_OUTPUT_PARAMS, ZERO() NUM_RESULT_SETS, REMARKS, RETURNS_RESULT PROCEDURE_TYPE, ALIAS_NAME SPECIFIC_NAME FROM INFORMATION_SCHEMA.FUNCTION_ALIASES WHERE ALIAS_CATALOG LIKE ? ESCAPE ? AND ALIAS_SCHEMA LIKE ? ESCAPE ? AND ALIAS_NAME LIKE ? ESCAPE ? ORDER BY PROCEDURE_SCHEM, PROCEDURE_NAME, NUM_INPUT_PARAMS");
2020-06-17 21:44:35 jdbc[13]: 
/**/prep22.setString(1, "%");
2020-06-17 21:44:35 jdbc[13]: 
/**/prep22.setString(2, "\\");
2020-06-17 21:44:35 jdbc[13]: 
/**/prep22.setString(3, "PUBLIC");
2020-06-17 21:44:35 jdbc[13]: 
/**/prep22.setString(4, "\\");
2020-06-17 21:44:35 jdbc[13]: 
/**/prep22.setString(5, "%");
2020-06-17 21:44:35 jdbc[13]: 
/**/prep22.setString(6, "\\");
2020-06-17 21:44:35 jdbc[13]: 
/**/ResultSet rs60 = prep22.executeQuery();
2020-06-17 21:44:35 jdbc[13]: Plan       : calculate cost for plan [FUNCTION_ALIASES:-13:org.h2.table.MetaTable@777451a3]
2020-06-17 21:44:35 jdbc[13]: Plan       :   for table filter FUNCTION_ALIASES:-13:org.h2.table.MetaTable@777451a3
2020-06-17 21:44:35 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:44:35 jdbc[13]: Plan       :   best plan item cost 9,900 index meta
2020-06-17 21:44:35 jdbc[13]: Plan       : plan cost 9,901
2020-06-17 21:44:35 jdbc[13]: 
/*SQL l:438*/SELECT ALIAS_CATALOG PROCEDURE_CAT, ALIAS_SCHEMA PROCEDURE_SCHEM, ALIAS_NAME PROCEDURE_NAME, COLUMN_COUNT NUM_INPUT_PARAMS, ZERO() NUM_OUTPUT_PARAMS, ZERO() NUM_RESULT_SETS, REMARKS, RETURNS_RESULT PROCEDURE_TYPE, ALIAS_NAME SPECIFIC_NAME FROM INFORMATION_SCHEMA.FUNCTION_ALIASES WHERE ALIAS_CATALOG LIKE ? ESCAPE ? AND ALIAS_SCHEMA LIKE ? ESCAPE ? AND ALIAS_NAME LIKE ? ESCAPE ? ORDER BY PROCEDURE_SCHEM, PROCEDURE_NAME, NUM_INPUT_PARAMS {1: '%', 2: '\\', 3: 'PUBLIC', 4: '\\', 5: '%', 6: '\\'};
2020-06-17 21:44:35 jdbc[13]: 
/**/rs60.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs60.close();
2020-06-17 21:44:35 jdbc[13]: 
/**/prep22.close();
2020-06-17 21:44:35 jdbc[13]: 
/**/dbMeta3.getIndexInfo(null, "PUBLIC", "CUSTOMER_TBL", false, true);
2020-06-17 21:44:35 jdbc[13]: 
/**/PreparedStatement prep23 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, NON_UNIQUE, TABLE_CATALOG INDEX_QUALIFIER, INDEX_NAME, INDEX_TYPE TYPE, ORDINAL_POSITION, COLUMN_NAME, ASC_OR_DESC, CARDINALITY, PAGES, FILTER_CONDITION, SORT_TYPE FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND (TRUE) AND TABLE_NAME = ? ORDER BY NON_UNIQUE, TYPE, TABLE_SCHEM, INDEX_NAME, ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@2041ae5d]
2020-06-17 21:44:35 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@2041ae5d
2020-06-17 21:44:35 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:44:35 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-17 21:44:35 jdbc[13]: Plan       :   best plan item cost 324.72 index meta
2020-06-17 21:44:35 jdbc[13]: Plan       : plan cost 325.72
2020-06-17 21:44:35 jdbc[13]: 
/**/prep23.setString(1, "%");
2020-06-17 21:44:35 jdbc[13]: 
/**/prep23.setString(2, "\\");
2020-06-17 21:44:35 jdbc[13]: 
/**/prep23.setString(3, "PUBLIC");
2020-06-17 21:44:35 jdbc[13]: 
/**/prep23.setString(4, "\\");
2020-06-17 21:44:35 jdbc[13]: 
/**/prep23.setString(5, "CUSTOMER_TBL");
2020-06-17 21:44:35 jdbc[13]: 
/**/ResultSet rs61 = prep23.executeQuery();
2020-06-17 21:44:35 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@2041ae5d]
2020-06-17 21:44:35 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@2041ae5d
2020-06-17 21:44:35 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:44:35 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-17 21:44:35 jdbc[13]: Plan       :   best plan item cost 321.44 index meta
2020-06-17 21:44:35 jdbc[13]: Plan       : plan cost 322.44
2020-06-17 21:44:35 jdbc[13]: 
/*SQL l:433 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, NON_UNIQUE, TABLE_CATALOG INDEX_QUALIFIER, INDEX_NAME, INDEX_TYPE TYPE, ORDINAL_POSITION, COLUMN_NAME, ASC_OR_DESC, CARDINALITY, PAGES, FILTER_CONDITION, SORT_TYPE FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND (TRUE) AND TABLE_NAME = ? ORDER BY NON_UNIQUE, TYPE, TABLE_SCHEM, INDEX_NAME, ORDINAL_POSITION {1: '%', 2: '\\', 3: 'PUBLIC', 4: '\\', 5: 'CUSTOMER_TBL'};
2020-06-17 21:44:35 jdbc[13]: 
/**/rs61.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs61.getString("INDEX_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs61.getInt("TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs61.getBoolean("NON_UNIQUE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs61.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs61.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs61.close();
2020-06-17 21:44:35 jdbc[13]: 
/**/prep23.close();
2020-06-17 21:44:35 jdbc[13]: 
/**/dbMeta3.getIndexInfo(null, "PUBLIC", "LOG_TBL", false, true);
2020-06-17 21:44:35 jdbc[13]: 
/**/PreparedStatement prep24 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, NON_UNIQUE, TABLE_CATALOG INDEX_QUALIFIER, INDEX_NAME, INDEX_TYPE TYPE, ORDINAL_POSITION, COLUMN_NAME, ASC_OR_DESC, CARDINALITY, PAGES, FILTER_CONDITION, SORT_TYPE FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND (TRUE) AND TABLE_NAME = ? ORDER BY NON_UNIQUE, TYPE, TABLE_SCHEM, INDEX_NAME, ORDINAL_POSITION");
2020-06-17 21:44:35 jdbc[13]: 
/**/prep24.setString(1, "%");
2020-06-17 21:44:35 jdbc[13]: 
/**/prep24.setString(2, "\\");
2020-06-17 21:44:35 jdbc[13]: 
/**/prep24.setString(3, "PUBLIC");
2020-06-17 21:44:35 jdbc[13]: 
/**/prep24.setString(4, "\\");
2020-06-17 21:44:35 jdbc[13]: 
/**/prep24.setString(5, "LOG_TBL");
2020-06-17 21:44:35 jdbc[13]: 
/**/ResultSet rs62 = prep24.executeQuery();
2020-06-17 21:44:35 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@2041ae5d]
2020-06-17 21:44:35 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@2041ae5d
2020-06-17 21:44:35 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:44:35 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-17 21:44:35 jdbc[13]: Plan       :   best plan item cost 321.44 index meta
2020-06-17 21:44:35 jdbc[13]: Plan       : plan cost 322.44
2020-06-17 21:44:35 jdbc[13]: 
/*SQL l:433 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, NON_UNIQUE, TABLE_CATALOG INDEX_QUALIFIER, INDEX_NAME, INDEX_TYPE TYPE, ORDINAL_POSITION, COLUMN_NAME, ASC_OR_DESC, CARDINALITY, PAGES, FILTER_CONDITION, SORT_TYPE FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND (TRUE) AND TABLE_NAME = ? ORDER BY NON_UNIQUE, TYPE, TABLE_SCHEM, INDEX_NAME, ORDINAL_POSITION {1: '%', 2: '\\', 3: 'PUBLIC', 4: '\\', 5: 'LOG_TBL'};
2020-06-17 21:44:35 jdbc[13]: 
/**/rs62.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs62.getString("INDEX_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs62.getInt("TYPE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs62.getBoolean("NON_UNIQUE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs62.getString("COLUMN_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs62.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs62.close();
2020-06-17 21:44:35 jdbc[13]: 
/**/prep24.close();
2020-06-17 21:44:35 jdbc[13]: 
/**/Statement stat3 = conn10.createStatement();
2020-06-17 21:44:35 jdbc[13]: 
/**/ResultSet rs63 = stat3.executeQuery("SELECT * FROM INFORMATION_SCHEMA.SEQUENCES ORDER BY SEQUENCE_NAME");
2020-06-17 21:44:35 jdbc[13]: Plan       : calculate cost for plan [SEQUENCES:-9:org.h2.table.MetaTable@70bcfbc3]
2020-06-17 21:44:35 jdbc[13]: Plan       :   for table filter SEQUENCES:-9:org.h2.table.MetaTable@70bcfbc3
2020-06-17 21:44:35 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:44:35 jdbc[13]: Plan       :   best plan item cost 10,000 index meta
2020-06-17 21:44:35 jdbc[13]: Plan       : plan cost 10,001
2020-06-17 21:44:35 jdbc[13]: 
/*SQL #:2*/SELECT * FROM INFORMATION_SCHEMA.SEQUENCES ORDER BY SEQUENCE_NAME;
2020-06-17 21:44:35 jdbc[13]: 
/**/rs63.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs63.getString("SEQUENCE_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs63.getString("CURRENT_VALUE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs63.getString("INCREMENT");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs63.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs63.getString("SEQUENCE_NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs63.getString("CURRENT_VALUE");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs63.getString("INCREMENT");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs63.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs63.close();
2020-06-17 21:44:35 jdbc[13]: 
/**/ResultSet rs64 = stat3.executeQuery("SELECT * FROM INFORMATION_SCHEMA.USERS ORDER BY NAME");
2020-06-17 21:44:35 jdbc[13]: Plan       : calculate cost for plan [USERS:-10:org.h2.table.MetaTable@4355b880]
2020-06-17 21:44:35 jdbc[13]: Plan       :   for table filter USERS:-10:org.h2.table.MetaTable@4355b880
2020-06-17 21:44:35 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:44:35 jdbc[13]: Plan       :   best plan item cost 10,000 index meta
2020-06-17 21:44:35 jdbc[13]: Plan       : plan cost 10,001
2020-06-17 21:44:35 jdbc[13]: 
/*SQL #:1*/SELECT * FROM INFORMATION_SCHEMA.USERS ORDER BY NAME;
2020-06-17 21:44:35 jdbc[13]: 
/**/rs64.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs64.getString("NAME");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs64.getString("ADMIN");
2020-06-17 21:44:35 jdbc[13]: 
/**/rs64.next();
2020-06-17 21:44:35 jdbc[13]: 
/**/rs64.close();
2020-06-17 21:44:35 jdbc[13]: 
/**/stat3.close();
2020-06-17 21:44:35 jdbc[13]: 
/**/dbMeta3.getDatabaseProductName();
2020-06-17 21:44:35 jdbc[13]: 
/**/dbMeta3.getDatabaseProductVersion();
2020-06-17 21:44:38 jdbc[13]: 
/**/Statement stat4 = conn10.createStatement(1004, 1008);
2020-06-17 21:44:38 jdbc[13]: 
/**/stat4.setMaxRows(1000);
2020-06-17 21:44:38 jdbc[13]: 
/**/stat4.execute("SELECT * FROM LOG_TBL");
2020-06-17 21:44:38 jdbc[13]: Plan       : calculate cost for plan [PUBLIC.LOG_TBL]
2020-06-17 21:44:38 jdbc[13]: Plan       :   for table filter PUBLIC.LOG_TBL
2020-06-17 21:44:38 jdbc[13]: Table      :     potential plan item cost 10,210 index PUBLIC.LOG_TBL.tableScan
2020-06-17 21:44:38 jdbc[13]: Table      :     potential plan item cost 10,220 index PUBLIC.PRIMARY_KEY_3
2020-06-17 21:44:38 jdbc[13]: Plan       :   best plan item cost 10,210 index PUBLIC.LOG_TBL.tableScan
2020-06-17 21:44:38 jdbc[13]: Plan       : plan cost 10,211
2020-06-17 21:44:38 jdbc[13]: 
/*SQL #:1*/SELECT * FROM LOG_TBL;
2020-06-17 21:44:38 jdbc[13]: 
/**/ResultSet rs65 = stat4.getResultSet();
2020-06-17 21:44:38 jdbc[13]: 
/**/ResultSetMetaData rsMeta6 = rs65.getMetaData();
2020-06-17 21:44:38 jdbc[13]: 
/**/conn10.getCatalog();
2020-06-17 21:44:38 jdbc[13]: 
/*SQL #:1*/CALL DATABASE();
2020-06-17 21:44:38 jdbc[13]: 
/**/rsMeta6.getColumnCount();
2020-06-17 21:44:38 jdbc[13]: 
/**/rsMeta6.getColumnLabel(1);
2020-06-17 21:44:38 jdbc[13]: 
/**/rsMeta6.getColumnLabel(2);
2020-06-17 21:44:38 jdbc[13]: 
/**/rsMeta6.getColumnLabel(3);
2020-06-17 21:44:38 jdbc[13]: 
/**/rsMeta6.getColumnLabel(4);
2020-06-17 21:44:38 jdbc[13]: 
/**/rsMeta6.getColumnLabel(5);
2020-06-17 21:44:38 jdbc[13]: 
/**/rsMeta6.getColumnLabel(6);
2020-06-17 21:44:38 jdbc[13]: 
/**/rsMeta6.getColumnLabel(7);
2020-06-17 21:44:38 jdbc[13]: 
/**/rsMeta6.getColumnLabel(8);
2020-06-17 21:44:38 jdbc[13]: 
/**/rsMeta6.getColumnLabel(9);
2020-06-17 21:44:38 jdbc[13]: 
/**/rs65.next();
2020-06-17 21:44:38 jdbc[13]: 
/**/rs65.getString(1);
2020-06-17 21:44:38 jdbc[13]: 
/**/rs65.getString(2);
2020-06-17 21:44:38 jdbc[13]: 
/**/rs65.getString(3);
2020-06-17 21:44:38 jdbc[13]: 
/**/rs65.getString(4);
2020-06-17 21:44:38 jdbc[13]: 
/**/rs65.getString(5);
2020-06-17 21:44:38 jdbc[13]: 
/**/rs65.getString(6);
2020-06-17 21:44:38 jdbc[13]: 
/**/rs65.getString(7);
2020-06-17 21:44:38 jdbc[13]: 
/**/rs65.getString(8);
2020-06-17 21:44:38 jdbc[13]: 
/**/rs65.getString(9);
2020-06-17 21:44:38 jdbc[13]: 
/**/rs65.next();
2020-06-17 21:44:38 jdbc[13]: 
/**/rs65.getConcurrency();
2020-06-17 21:44:38 jdbc[13]: 
/**/DatabaseMetaData dbMeta5 = conn10.getMetaData();
2020-06-17 21:44:38 jdbc[13]: 
/**/dbMeta5.getTables(null, "PUBLIC", "LOG_TBL", new String[]{"TABLE"});
2020-06-17 21:44:38 jdbc[13]: 
/**/PreparedStatement prep25 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME");
2020-06-17 21:44:38 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@3c7ffe1c]
2020-06-17 21:44:38 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@3c7ffe1c
2020-06-17 21:44:38 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:44:38 jdbc[13]: Table      :     potential plan item cost 4,322 index meta
2020-06-17 21:44:38 jdbc[13]: Plan       :   best plan item cost 4,278.78 index meta
2020-06-17 21:44:38 jdbc[13]: Plan       : plan cost 4,279.78
2020-06-17 21:44:38 jdbc[13]: 
/**/prep25.setString(1, "%");
2020-06-17 21:44:38 jdbc[13]: 
/**/prep25.setString(2, "PUBLIC");
2020-06-17 21:44:38 jdbc[13]: 
/**/prep25.setString(3, "LOG_TBL");
2020-06-17 21:44:38 jdbc[13]: 
/**/prep25.setString(4, "\\");
2020-06-17 21:44:38 jdbc[13]: 
/**/prep25.setString(5, "TABLE");
2020-06-17 21:44:38 jdbc[13]: 
/**/ResultSet rs66 = prep25.executeQuery();
2020-06-17 21:44:38 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@3c7ffe1c]
2020-06-17 21:44:38 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@3c7ffe1c
2020-06-17 21:44:38 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:44:38 jdbc[13]: Table      :     potential plan item cost 1,324 index meta
2020-06-17 21:44:38 jdbc[13]: Plan       :   best plan item cost 1,271.04 index meta
2020-06-17 21:44:38 jdbc[13]: Plan       : plan cost 1,272.04
2020-06-17 21:44:38 jdbc[13]: 
/*SQL l:414 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME {1: '%', 2: 'PUBLIC', 3: 'LOG_TBL', 4: '\\', 5: 'TABLE'};
2020-06-17 21:44:38 jdbc[13]: 
/**/rs66.next();
2020-06-17 21:44:38 jdbc[13]: 
/**/rs66.getString("SQL");
2020-06-17 21:44:38 jdbc[13]: 
/**/rs66.getString("TABLE_NAME");
2020-06-17 21:44:38 jdbc[13]: 
/**/dbMeta5.getPrimaryKeys(null, "PUBLIC", "LOG_TBL");
2020-06-17 21:44:38 jdbc[13]: 
/**/PreparedStatement prep26 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME");
2020-06-17 21:44:38 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@2041ae5d]
2020-06-17 21:44:38 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@2041ae5d
2020-06-17 21:44:38 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:44:38 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-17 21:44:38 jdbc[13]: Plan       :   best plan item cost 321.44 index meta
2020-06-17 21:44:38 jdbc[13]: Plan       : plan cost 322.44
2020-06-17 21:44:38 jdbc[13]: 
/**/prep26.setString(1, "%");
2020-06-17 21:44:38 jdbc[13]: 
/**/prep26.setString(2, "\\");
2020-06-17 21:44:38 jdbc[13]: 
/**/prep26.setString(3, "PUBLIC");
2020-06-17 21:44:38 jdbc[13]: 
/**/prep26.setString(4, "\\");
2020-06-17 21:44:38 jdbc[13]: 
/**/prep26.setString(5, "LOG_TBL");
2020-06-17 21:44:38 jdbc[13]: 
/**/ResultSet rs67 = prep26.executeQuery();
2020-06-17 21:44:38 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@2041ae5d]
2020-06-17 21:44:38 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@2041ae5d
2020-06-17 21:44:38 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:44:38 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-17 21:44:38 jdbc[13]: Plan       :   best plan item cost 318.16 index meta
2020-06-17 21:44:38 jdbc[13]: Plan       : plan cost 319.16
2020-06-17 21:44:38 jdbc[13]: 
/*SQL l:316 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME {1: '%', 2: '\\', 3: 'PUBLIC', 4: '\\', 5: 'LOG_TBL'};
2020-06-17 21:44:38 jdbc[13]: 
/**/rs67.next();
2020-06-17 21:44:38 jdbc[13]: 
/**/rs67.getString("COLUMN_NAME");
2020-06-17 21:44:38 jdbc[13]: 
/**/rs67.next();
2020-06-17 21:44:38 jdbc[13]: 
/**/rs65.getType();
2020-06-17 21:44:38 jdbc[13]: 
/**/rs65.close();
2020-06-17 21:44:38 jdbc[13]: 
/**/stat4.close();
2020-06-17 21:45:15 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-17 21:45:15 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 21:45:15 jdbc[3]: 
/**/conn0.setReadOnly(true);
2020-06-17 21:45:15 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:45:15 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:45:15 jdbc[3]: 
/**/PreparedStatement prep27 = conn0.prepareStatement("select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=?");
2020-06-17 21:45:15 jdbc[3]: Plan       : calculate cost for plan [CUSTOMER0_]
2020-06-17 21:45:15 jdbc[3]: Plan       :   for table filter CUSTOMER0_
2020-06-17 21:45:15 jdbc[3]: Table      :     potential plan item cost 10,250 index PUBLIC.CUSTOMER_TBL.tableScan
2020-06-17 21:45:15 jdbc[3]: Table      :     potential plan item cost 230 index PUBLIC.PRIMARY_KEY_B
2020-06-17 21:45:15 jdbc[3]: Plan       :   best plan item cost 227.7 index PUBLIC.PRIMARY_KEY_B
2020-06-17 21:45:15 jdbc[3]: Plan       : plan cost 228.7
2020-06-17 21:45:15 jdbc[3]: 
/**/prep27.setLong(1, 3L);
2020-06-17 21:45:15 jdbc[3]: 
/**/ResultSet rs68 = prep27.executeQuery();
2020-06-17 21:45:15 jdbc[3]: 
/*SQL l:225 #:1*/select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=? {1: 3};
2020-06-17 21:45:15 jdbc[3]: 
/**/rs68.next();
2020-06-17 21:45:15 jdbc[3]: 
/**/rs68.getString("customer2_0_0_");
2020-06-17 21:45:15 jdbc[3]: 
/**/rs68.wasNull();
2020-06-17 21:45:15 jdbc[3]: 
/**/rs68.getString("customer3_0_0_");
2020-06-17 21:45:15 jdbc[3]: 
/**/rs68.wasNull();
2020-06-17 21:45:15 jdbc[3]: 
/**/rs68.getString("customer4_0_0_");
2020-06-17 21:45:15 jdbc[3]: 
/**/rs68.wasNull();
2020-06-17 21:45:15 jdbc[3]: 
/**/rs68.next();
2020-06-17 21:45:15 jdbc[3]: 
/**/rs68.close();
2020-06-17 21:45:15 jdbc[3]: 
/**/prep27.getMaxRows();
2020-06-17 21:45:15 jdbc[3]: 
/**/prep27.getQueryTimeout();
2020-06-17 21:45:15 jdbc[3]: 
/**/prep27.close();
2020-06-17 21:45:15 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:45:15 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:45:15 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:45:15 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:45:15 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:45:15 jdbc[3]: 
/**/conn0.setReadOnly(false);
2020-06-17 21:45:15 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:45:15 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:45:15 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:45:19 jdbc[13]: 
/**/Statement stat5 = conn10.createStatement(1004, 1008);
2020-06-17 21:45:19 jdbc[13]: 
/**/stat5.setMaxRows(1000);
2020-06-17 21:45:19 jdbc[13]: 
/**/stat5.execute("SELECT * FROM LOG_TBL");
2020-06-17 21:45:19 jdbc[13]: 
/*SQL #:1*/SELECT * FROM LOG_TBL;
2020-06-17 21:45:19 jdbc[13]: 
/**/ResultSet rs69 = stat5.getResultSet();
2020-06-17 21:45:19 jdbc[13]: 
/**/ResultSetMetaData rsMeta7 = rs69.getMetaData();
2020-06-17 21:45:19 jdbc[13]: 
/**/conn10.getCatalog();
2020-06-17 21:45:19 jdbc[13]: 
/**/rsMeta7.getColumnCount();
2020-06-17 21:45:19 jdbc[13]: 
/**/rsMeta7.getColumnLabel(1);
2020-06-17 21:45:19 jdbc[13]: 
/**/rsMeta7.getColumnLabel(2);
2020-06-17 21:45:19 jdbc[13]: 
/**/rsMeta7.getColumnLabel(3);
2020-06-17 21:45:19 jdbc[13]: 
/**/rsMeta7.getColumnLabel(4);
2020-06-17 21:45:19 jdbc[13]: 
/**/rsMeta7.getColumnLabel(5);
2020-06-17 21:45:19 jdbc[13]: 
/**/rsMeta7.getColumnLabel(6);
2020-06-17 21:45:19 jdbc[13]: 
/**/rsMeta7.getColumnLabel(7);
2020-06-17 21:45:19 jdbc[13]: 
/**/rsMeta7.getColumnLabel(8);
2020-06-17 21:45:19 jdbc[13]: 
/**/rsMeta7.getColumnLabel(9);
2020-06-17 21:45:19 jdbc[13]: 
/**/rs69.next();
2020-06-17 21:45:19 jdbc[13]: 
/**/rs69.getString(1);
2020-06-17 21:45:19 jdbc[13]: 
/**/rs69.getString(2);
2020-06-17 21:45:19 jdbc[13]: 
/**/rs69.getString(3);
2020-06-17 21:45:19 jdbc[13]: 
/**/rs69.getString(4);
2020-06-17 21:45:19 jdbc[13]: 
/**/rs69.getString(5);
2020-06-17 21:45:19 jdbc[13]: 
/**/rs69.getString(6);
2020-06-17 21:45:19 jdbc[13]: 
/**/rs69.getString(7);
2020-06-17 21:45:19 jdbc[13]: 
/**/rs69.getString(8);
2020-06-17 21:45:19 jdbc[13]: 
/**/rs69.getString(9);
2020-06-17 21:45:19 jdbc[13]: 
/**/rs69.next();
2020-06-17 21:45:19 jdbc[13]: 
/**/rs69.getConcurrency();
2020-06-17 21:45:19 jdbc[13]: 
/**/DatabaseMetaData dbMeta6 = conn10.getMetaData();
2020-06-17 21:45:19 jdbc[13]: 
/**/dbMeta6.getTables(null, "PUBLIC", "LOG_TBL", new String[]{"TABLE"});
2020-06-17 21:45:19 jdbc[13]: 
/**/PreparedStatement prep28 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME");
2020-06-17 21:45:19 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@3c7ffe1c]
2020-06-17 21:45:19 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@3c7ffe1c
2020-06-17 21:45:19 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:45:19 jdbc[13]: Table      :     potential plan item cost 4,322 index meta
2020-06-17 21:45:19 jdbc[13]: Plan       :   best plan item cost 4,278.78 index meta
2020-06-17 21:45:19 jdbc[13]: Plan       : plan cost 4,279.78
2020-06-17 21:45:19 jdbc[13]: 
/**/prep28.setString(1, "%");
2020-06-17 21:45:19 jdbc[13]: 
/**/prep28.setString(2, "PUBLIC");
2020-06-17 21:45:19 jdbc[13]: 
/**/prep28.setString(3, "LOG_TBL");
2020-06-17 21:45:19 jdbc[13]: 
/**/prep28.setString(4, "\\");
2020-06-17 21:45:19 jdbc[13]: 
/**/prep28.setString(5, "TABLE");
2020-06-17 21:45:19 jdbc[13]: 
/**/ResultSet rs70 = prep28.executeQuery();
2020-06-17 21:45:19 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@3c7ffe1c]
2020-06-17 21:45:19 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@3c7ffe1c
2020-06-17 21:45:19 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:45:19 jdbc[13]: Table      :     potential plan item cost 1,324 index meta
2020-06-17 21:45:19 jdbc[13]: Plan       :   best plan item cost 1,271.04 index meta
2020-06-17 21:45:19 jdbc[13]: Plan       : plan cost 1,272.04
2020-06-17 21:45:19 jdbc[13]: 
/*SQL l:414 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME {1: '%', 2: 'PUBLIC', 3: 'LOG_TBL', 4: '\\', 5: 'TABLE'};
2020-06-17 21:45:19 jdbc[13]: 
/**/rs70.next();
2020-06-17 21:45:19 jdbc[13]: 
/**/rs70.getString("SQL");
2020-06-17 21:45:19 jdbc[13]: 
/**/rs70.getString("TABLE_NAME");
2020-06-17 21:45:19 jdbc[13]: 
/**/dbMeta6.getPrimaryKeys(null, "PUBLIC", "LOG_TBL");
2020-06-17 21:45:19 jdbc[13]: 
/**/PreparedStatement prep29 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME");
2020-06-17 21:45:19 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@2041ae5d]
2020-06-17 21:45:19 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@2041ae5d
2020-06-17 21:45:19 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:45:19 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-17 21:45:19 jdbc[13]: Plan       :   best plan item cost 321.44 index meta
2020-06-17 21:45:19 jdbc[13]: Plan       : plan cost 322.44
2020-06-17 21:45:19 jdbc[13]: 
/**/prep29.setString(1, "%");
2020-06-17 21:45:19 jdbc[13]: 
/**/prep29.setString(2, "\\");
2020-06-17 21:45:19 jdbc[13]: 
/**/prep29.setString(3, "PUBLIC");
2020-06-17 21:45:19 jdbc[13]: 
/**/prep29.setString(4, "\\");
2020-06-17 21:45:19 jdbc[13]: 
/**/prep29.setString(5, "LOG_TBL");
2020-06-17 21:45:19 jdbc[13]: 
/**/ResultSet rs71 = prep29.executeQuery();
2020-06-17 21:45:19 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@2041ae5d]
2020-06-17 21:45:19 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@2041ae5d
2020-06-17 21:45:19 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:45:19 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-17 21:45:19 jdbc[13]: Plan       :   best plan item cost 318.16 index meta
2020-06-17 21:45:19 jdbc[13]: Plan       : plan cost 319.16
2020-06-17 21:45:19 jdbc[13]: 
/*SQL l:316 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME {1: '%', 2: '\\', 3: 'PUBLIC', 4: '\\', 5: 'LOG_TBL'};
2020-06-17 21:45:19 jdbc[13]: 
/**/rs71.next();
2020-06-17 21:45:19 jdbc[13]: 
/**/rs71.getString("COLUMN_NAME");
2020-06-17 21:45:19 jdbc[13]: 
/**/rs71.next();
2020-06-17 21:45:19 jdbc[13]: 
/**/rs69.getType();
2020-06-17 21:45:19 jdbc[13]: 
/**/rs69.close();
2020-06-17 21:45:19 jdbc[13]: 
/**/stat5.close();
2020-06-17 21:45:23 jdbc[13]: 
/**/Statement stat6 = conn10.createStatement(1004, 1008);
2020-06-17 21:45:23 jdbc[13]: 
/**/stat6.setMaxRows(1000);
2020-06-17 21:45:23 jdbc[13]: 
/**/stat6.execute("SELECT * FROM LOG_TBL");
2020-06-17 21:45:23 jdbc[13]: 
/*SQL #:1*/SELECT * FROM LOG_TBL;
2020-06-17 21:45:23 jdbc[13]: 
/**/ResultSet rs72 = stat6.getResultSet();
2020-06-17 21:45:23 jdbc[13]: 
/**/ResultSetMetaData rsMeta8 = rs72.getMetaData();
2020-06-17 21:45:23 jdbc[13]: 
/**/conn10.getCatalog();
2020-06-17 21:45:23 jdbc[13]: 
/**/rsMeta8.getColumnCount();
2020-06-17 21:45:23 jdbc[13]: 
/**/rsMeta8.getColumnLabel(1);
2020-06-17 21:45:23 jdbc[13]: 
/**/rsMeta8.getColumnLabel(2);
2020-06-17 21:45:23 jdbc[13]: 
/**/rsMeta8.getColumnLabel(3);
2020-06-17 21:45:23 jdbc[13]: 
/**/rsMeta8.getColumnLabel(4);
2020-06-17 21:45:23 jdbc[13]: 
/**/rsMeta8.getColumnLabel(5);
2020-06-17 21:45:23 jdbc[13]: 
/**/rsMeta8.getColumnLabel(6);
2020-06-17 21:45:23 jdbc[13]: 
/**/rsMeta8.getColumnLabel(7);
2020-06-17 21:45:23 jdbc[13]: 
/**/rsMeta8.getColumnLabel(8);
2020-06-17 21:45:23 jdbc[13]: 
/**/rsMeta8.getColumnLabel(9);
2020-06-17 21:45:23 jdbc[13]: 
/**/rs72.next();
2020-06-17 21:45:23 jdbc[13]: 
/**/rs72.getString(1);
2020-06-17 21:45:23 jdbc[13]: 
/**/rs72.getString(2);
2020-06-17 21:45:23 jdbc[13]: 
/**/rs72.getString(3);
2020-06-17 21:45:23 jdbc[13]: 
/**/rs72.getString(4);
2020-06-17 21:45:23 jdbc[13]: 
/**/rs72.getString(5);
2020-06-17 21:45:23 jdbc[13]: 
/**/rs72.getString(6);
2020-06-17 21:45:23 jdbc[13]: 
/**/rs72.getString(7);
2020-06-17 21:45:23 jdbc[13]: 
/**/rs72.getString(8);
2020-06-17 21:45:23 jdbc[13]: 
/**/rs72.getString(9);
2020-06-17 21:45:23 jdbc[13]: 
/**/rs72.next();
2020-06-17 21:45:23 jdbc[13]: 
/**/rs72.getConcurrency();
2020-06-17 21:45:23 jdbc[13]: 
/**/DatabaseMetaData dbMeta7 = conn10.getMetaData();
2020-06-17 21:45:23 jdbc[13]: 
/**/dbMeta7.getTables(null, "PUBLIC", "LOG_TBL", new String[]{"TABLE"});
2020-06-17 21:45:23 jdbc[13]: 
/**/PreparedStatement prep30 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME");
2020-06-17 21:45:23 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@3c7ffe1c]
2020-06-17 21:45:23 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@3c7ffe1c
2020-06-17 21:45:23 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:45:23 jdbc[13]: Table      :     potential plan item cost 4,322 index meta
2020-06-17 21:45:23 jdbc[13]: Plan       :   best plan item cost 4,278.78 index meta
2020-06-17 21:45:23 jdbc[13]: Plan       : plan cost 4,279.78
2020-06-17 21:45:23 jdbc[13]: 
/**/prep30.setString(1, "%");
2020-06-17 21:45:23 jdbc[13]: 
/**/prep30.setString(2, "PUBLIC");
2020-06-17 21:45:23 jdbc[13]: 
/**/prep30.setString(3, "LOG_TBL");
2020-06-17 21:45:23 jdbc[13]: 
/**/prep30.setString(4, "\\");
2020-06-17 21:45:23 jdbc[13]: 
/**/prep30.setString(5, "TABLE");
2020-06-17 21:45:23 jdbc[13]: 
/**/ResultSet rs73 = prep30.executeQuery();
2020-06-17 21:45:23 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@3c7ffe1c]
2020-06-17 21:45:23 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@3c7ffe1c
2020-06-17 21:45:23 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:45:23 jdbc[13]: Table      :     potential plan item cost 1,324 index meta
2020-06-17 21:45:23 jdbc[13]: Plan       :   best plan item cost 1,271.04 index meta
2020-06-17 21:45:23 jdbc[13]: Plan       : plan cost 1,272.04
2020-06-17 21:45:23 jdbc[13]: 
/*SQL l:414 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME {1: '%', 2: 'PUBLIC', 3: 'LOG_TBL', 4: '\\', 5: 'TABLE'};
2020-06-17 21:45:23 jdbc[13]: 
/**/rs73.next();
2020-06-17 21:45:23 jdbc[13]: 
/**/rs73.getString("SQL");
2020-06-17 21:45:23 jdbc[13]: 
/**/rs73.getString("TABLE_NAME");
2020-06-17 21:45:23 jdbc[13]: 
/**/dbMeta7.getPrimaryKeys(null, "PUBLIC", "LOG_TBL");
2020-06-17 21:45:23 jdbc[13]: 
/**/PreparedStatement prep31 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME");
2020-06-17 21:45:23 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@2041ae5d]
2020-06-17 21:45:23 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@2041ae5d
2020-06-17 21:45:23 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:45:23 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-17 21:45:23 jdbc[13]: Plan       :   best plan item cost 321.44 index meta
2020-06-17 21:45:23 jdbc[13]: Plan       : plan cost 322.44
2020-06-17 21:45:23 jdbc[13]: 
/**/prep31.setString(1, "%");
2020-06-17 21:45:23 jdbc[13]: 
/**/prep31.setString(2, "\\");
2020-06-17 21:45:23 jdbc[13]: 
/**/prep31.setString(3, "PUBLIC");
2020-06-17 21:45:23 jdbc[13]: 
/**/prep31.setString(4, "\\");
2020-06-17 21:45:23 jdbc[13]: 
/**/prep31.setString(5, "LOG_TBL");
2020-06-17 21:45:23 jdbc[13]: 
/**/ResultSet rs74 = prep31.executeQuery();
2020-06-17 21:45:23 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@2041ae5d]
2020-06-17 21:45:23 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@2041ae5d
2020-06-17 21:45:23 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:45:23 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-17 21:45:23 jdbc[13]: Plan       :   best plan item cost 318.16 index meta
2020-06-17 21:45:23 jdbc[13]: Plan       : plan cost 319.16
2020-06-17 21:45:23 jdbc[13]: 
/*SQL l:316 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME {1: '%', 2: '\\', 3: 'PUBLIC', 4: '\\', 5: 'LOG_TBL'};
2020-06-17 21:45:23 jdbc[13]: 
/**/rs74.next();
2020-06-17 21:45:23 jdbc[13]: 
/**/rs74.getString("COLUMN_NAME");
2020-06-17 21:45:23 jdbc[13]: 
/**/rs74.next();
2020-06-17 21:45:23 jdbc[13]: 
/**/rs72.getType();
2020-06-17 21:45:23 jdbc[13]: 
/**/rs72.close();
2020-06-17 21:45:23 jdbc[13]: 
/**/stat6.close();
2020-06-17 21:45:24 jdbc[13]: 
/**/Statement stat7 = conn10.createStatement(1004, 1008);
2020-06-17 21:45:24 jdbc[13]: 
/**/stat7.setMaxRows(1000);
2020-06-17 21:45:24 jdbc[13]: 
/**/stat7.execute("SELECT * FROM LOG_TBL");
2020-06-17 21:45:24 jdbc[13]: 
/*SQL #:1*/SELECT * FROM LOG_TBL;
2020-06-17 21:45:24 jdbc[13]: 
/**/ResultSet rs75 = stat7.getResultSet();
2020-06-17 21:45:24 jdbc[13]: 
/**/ResultSetMetaData rsMeta9 = rs75.getMetaData();
2020-06-17 21:45:24 jdbc[13]: 
/**/conn10.getCatalog();
2020-06-17 21:45:24 jdbc[13]: 
/**/rsMeta9.getColumnCount();
2020-06-17 21:45:24 jdbc[13]: 
/**/rsMeta9.getColumnLabel(1);
2020-06-17 21:45:24 jdbc[13]: 
/**/rsMeta9.getColumnLabel(2);
2020-06-17 21:45:24 jdbc[13]: 
/**/rsMeta9.getColumnLabel(3);
2020-06-17 21:45:24 jdbc[13]: 
/**/rsMeta9.getColumnLabel(4);
2020-06-17 21:45:24 jdbc[13]: 
/**/rsMeta9.getColumnLabel(5);
2020-06-17 21:45:24 jdbc[13]: 
/**/rsMeta9.getColumnLabel(6);
2020-06-17 21:45:24 jdbc[13]: 
/**/rsMeta9.getColumnLabel(7);
2020-06-17 21:45:24 jdbc[13]: 
/**/rsMeta9.getColumnLabel(8);
2020-06-17 21:45:24 jdbc[13]: 
/**/rsMeta9.getColumnLabel(9);
2020-06-17 21:45:24 jdbc[13]: 
/**/rs75.next();
2020-06-17 21:45:24 jdbc[13]: 
/**/rs75.getString(1);
2020-06-17 21:45:24 jdbc[13]: 
/**/rs75.getString(2);
2020-06-17 21:45:24 jdbc[13]: 
/**/rs75.getString(3);
2020-06-17 21:45:24 jdbc[13]: 
/**/rs75.getString(4);
2020-06-17 21:45:24 jdbc[13]: 
/**/rs75.getString(5);
2020-06-17 21:45:24 jdbc[13]: 
/**/rs75.getString(6);
2020-06-17 21:45:24 jdbc[13]: 
/**/rs75.getString(7);
2020-06-17 21:45:24 jdbc[13]: 
/**/rs75.getString(8);
2020-06-17 21:45:24 jdbc[13]: 
/**/rs75.getString(9);
2020-06-17 21:45:24 jdbc[13]: 
/**/rs75.next();
2020-06-17 21:45:24 jdbc[13]: 
/**/rs75.getConcurrency();
2020-06-17 21:45:24 jdbc[13]: 
/**/DatabaseMetaData dbMeta8 = conn10.getMetaData();
2020-06-17 21:45:24 jdbc[13]: 
/**/dbMeta8.getTables(null, "PUBLIC", "LOG_TBL", new String[]{"TABLE"});
2020-06-17 21:45:24 jdbc[13]: 
/**/PreparedStatement prep32 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME");
2020-06-17 21:45:24 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@3c7ffe1c]
2020-06-17 21:45:24 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@3c7ffe1c
2020-06-17 21:45:24 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:45:24 jdbc[13]: Table      :     potential plan item cost 4,322 index meta
2020-06-17 21:45:24 jdbc[13]: Plan       :   best plan item cost 4,278.78 index meta
2020-06-17 21:45:24 jdbc[13]: Plan       : plan cost 4,279.78
2020-06-17 21:45:24 jdbc[13]: 
/**/prep32.setString(1, "%");
2020-06-17 21:45:24 jdbc[13]: 
/**/prep32.setString(2, "PUBLIC");
2020-06-17 21:45:24 jdbc[13]: 
/**/prep32.setString(3, "LOG_TBL");
2020-06-17 21:45:24 jdbc[13]: 
/**/prep32.setString(4, "\\");
2020-06-17 21:45:24 jdbc[13]: 
/**/prep32.setString(5, "TABLE");
2020-06-17 21:45:24 jdbc[13]: 
/**/ResultSet rs76 = prep32.executeQuery();
2020-06-17 21:45:24 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@3c7ffe1c]
2020-06-17 21:45:24 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@3c7ffe1c
2020-06-17 21:45:24 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:45:24 jdbc[13]: Table      :     potential plan item cost 1,324 index meta
2020-06-17 21:45:24 jdbc[13]: Plan       :   best plan item cost 1,271.04 index meta
2020-06-17 21:45:24 jdbc[13]: Plan       : plan cost 1,272.04
2020-06-17 21:45:24 jdbc[13]: 
/*SQL l:414 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME {1: '%', 2: 'PUBLIC', 3: 'LOG_TBL', 4: '\\', 5: 'TABLE'};
2020-06-17 21:45:24 jdbc[13]: 
/**/rs76.next();
2020-06-17 21:45:24 jdbc[13]: 
/**/rs76.getString("SQL");
2020-06-17 21:45:24 jdbc[13]: 
/**/rs76.getString("TABLE_NAME");
2020-06-17 21:45:24 jdbc[13]: 
/**/dbMeta8.getPrimaryKeys(null, "PUBLIC", "LOG_TBL");
2020-06-17 21:45:24 jdbc[13]: 
/**/PreparedStatement prep33 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME");
2020-06-17 21:45:24 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@2041ae5d]
2020-06-17 21:45:24 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@2041ae5d
2020-06-17 21:45:24 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:45:24 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-17 21:45:24 jdbc[13]: Plan       :   best plan item cost 321.44 index meta
2020-06-17 21:45:24 jdbc[13]: Plan       : plan cost 322.44
2020-06-17 21:45:24 jdbc[13]: 
/**/prep33.setString(1, "%");
2020-06-17 21:45:24 jdbc[13]: 
/**/prep33.setString(2, "\\");
2020-06-17 21:45:24 jdbc[13]: 
/**/prep33.setString(3, "PUBLIC");
2020-06-17 21:45:24 jdbc[13]: 
/**/prep33.setString(4, "\\");
2020-06-17 21:45:24 jdbc[13]: 
/**/prep33.setString(5, "LOG_TBL");
2020-06-17 21:45:24 jdbc[13]: 
/**/ResultSet rs77 = prep33.executeQuery();
2020-06-17 21:45:24 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@2041ae5d]
2020-06-17 21:45:24 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@2041ae5d
2020-06-17 21:45:24 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:45:24 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-17 21:45:24 jdbc[13]: Plan       :   best plan item cost 318.16 index meta
2020-06-17 21:45:24 jdbc[13]: Plan       : plan cost 319.16
2020-06-17 21:45:24 jdbc[13]: 
/*SQL l:316 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME {1: '%', 2: '\\', 3: 'PUBLIC', 4: '\\', 5: 'LOG_TBL'};
2020-06-17 21:45:24 jdbc[13]: 
/**/rs77.next();
2020-06-17 21:45:24 jdbc[13]: 
/**/rs77.getString("COLUMN_NAME");
2020-06-17 21:45:24 jdbc[13]: 
/**/rs77.next();
2020-06-17 21:45:24 jdbc[13]: 
/**/rs75.getType();
2020-06-17 21:45:24 jdbc[13]: 
/**/rs75.close();
2020-06-17 21:45:24 jdbc[13]: 
/**/stat7.close();
2020-06-17 21:45:29 jdbc[13]: 
/**/Statement stat8 = conn10.createStatement(1004, 1008);
2020-06-17 21:45:29 jdbc[13]: 
/**/stat8.setMaxRows(1000);
2020-06-17 21:45:29 jdbc[13]: 
/**/stat8.execute("SELECT * FROM LOG_TBL");
2020-06-17 21:45:29 jdbc[13]: 
/*SQL #:1*/SELECT * FROM LOG_TBL;
2020-06-17 21:45:29 jdbc[13]: 
/**/ResultSet rs78 = stat8.getResultSet();
2020-06-17 21:45:29 jdbc[13]: 
/**/ResultSetMetaData rsMeta10 = rs78.getMetaData();
2020-06-17 21:45:29 jdbc[13]: 
/**/conn10.getCatalog();
2020-06-17 21:45:29 jdbc[13]: 
/**/rsMeta10.getColumnCount();
2020-06-17 21:45:29 jdbc[13]: 
/**/rsMeta10.getColumnLabel(1);
2020-06-17 21:45:29 jdbc[13]: 
/**/rsMeta10.getColumnLabel(2);
2020-06-17 21:45:29 jdbc[13]: 
/**/rsMeta10.getColumnLabel(3);
2020-06-17 21:45:29 jdbc[13]: 
/**/rsMeta10.getColumnLabel(4);
2020-06-17 21:45:29 jdbc[13]: 
/**/rsMeta10.getColumnLabel(5);
2020-06-17 21:45:29 jdbc[13]: 
/**/rsMeta10.getColumnLabel(6);
2020-06-17 21:45:29 jdbc[13]: 
/**/rsMeta10.getColumnLabel(7);
2020-06-17 21:45:29 jdbc[13]: 
/**/rsMeta10.getColumnLabel(8);
2020-06-17 21:45:29 jdbc[13]: 
/**/rsMeta10.getColumnLabel(9);
2020-06-17 21:45:29 jdbc[13]: 
/**/rs78.next();
2020-06-17 21:45:29 jdbc[13]: 
/**/rs78.getString(1);
2020-06-17 21:45:29 jdbc[13]: 
/**/rs78.getString(2);
2020-06-17 21:45:29 jdbc[13]: 
/**/rs78.getString(3);
2020-06-17 21:45:29 jdbc[13]: 
/**/rs78.getString(4);
2020-06-17 21:45:29 jdbc[13]: 
/**/rs78.getString(5);
2020-06-17 21:45:29 jdbc[13]: 
/**/rs78.getString(6);
2020-06-17 21:45:29 jdbc[13]: 
/**/rs78.getString(7);
2020-06-17 21:45:29 jdbc[13]: 
/**/rs78.getString(8);
2020-06-17 21:45:29 jdbc[13]: 
/**/rs78.getString(9);
2020-06-17 21:45:29 jdbc[13]: 
/**/rs78.next();
2020-06-17 21:45:29 jdbc[13]: 
/**/rs78.getConcurrency();
2020-06-17 21:45:29 jdbc[13]: 
/**/DatabaseMetaData dbMeta9 = conn10.getMetaData();
2020-06-17 21:45:29 jdbc[13]: 
/**/dbMeta9.getTables(null, "PUBLIC", "LOG_TBL", new String[]{"TABLE"});
2020-06-17 21:45:29 jdbc[13]: 
/**/PreparedStatement prep34 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME");
2020-06-17 21:45:29 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@3c7ffe1c]
2020-06-17 21:45:29 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@3c7ffe1c
2020-06-17 21:45:29 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:45:29 jdbc[13]: Table      :     potential plan item cost 4,322 index meta
2020-06-17 21:45:29 jdbc[13]: Plan       :   best plan item cost 4,278.78 index meta
2020-06-17 21:45:29 jdbc[13]: Plan       : plan cost 4,279.78
2020-06-17 21:45:29 jdbc[13]: 
/**/prep34.setString(1, "%");
2020-06-17 21:45:29 jdbc[13]: 
/**/prep34.setString(2, "PUBLIC");
2020-06-17 21:45:29 jdbc[13]: 
/**/prep34.setString(3, "LOG_TBL");
2020-06-17 21:45:29 jdbc[13]: 
/**/prep34.setString(4, "\\");
2020-06-17 21:45:29 jdbc[13]: 
/**/prep34.setString(5, "TABLE");
2020-06-17 21:45:29 jdbc[13]: 
/**/ResultSet rs79 = prep34.executeQuery();
2020-06-17 21:45:29 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@3c7ffe1c]
2020-06-17 21:45:29 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@3c7ffe1c
2020-06-17 21:45:29 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:45:29 jdbc[13]: Table      :     potential plan item cost 1,324 index meta
2020-06-17 21:45:29 jdbc[13]: Plan       :   best plan item cost 1,271.04 index meta
2020-06-17 21:45:29 jdbc[13]: Plan       : plan cost 1,272.04
2020-06-17 21:45:29 jdbc[13]: 
/*SQL l:414 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME {1: '%', 2: 'PUBLIC', 3: 'LOG_TBL', 4: '\\', 5: 'TABLE'};
2020-06-17 21:45:29 jdbc[13]: 
/**/rs79.next();
2020-06-17 21:45:29 jdbc[13]: 
/**/rs79.getString("SQL");
2020-06-17 21:45:29 jdbc[13]: 
/**/rs79.getString("TABLE_NAME");
2020-06-17 21:45:29 jdbc[13]: 
/**/dbMeta9.getPrimaryKeys(null, "PUBLIC", "LOG_TBL");
2020-06-17 21:45:29 jdbc[13]: 
/**/PreparedStatement prep35 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME");
2020-06-17 21:45:29 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@2041ae5d]
2020-06-17 21:45:29 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@2041ae5d
2020-06-17 21:45:29 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:45:29 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-17 21:45:29 jdbc[13]: Plan       :   best plan item cost 321.44 index meta
2020-06-17 21:45:29 jdbc[13]: Plan       : plan cost 322.44
2020-06-17 21:45:29 jdbc[13]: 
/**/prep35.setString(1, "%");
2020-06-17 21:45:29 jdbc[13]: 
/**/prep35.setString(2, "\\");
2020-06-17 21:45:29 jdbc[13]: 
/**/prep35.setString(3, "PUBLIC");
2020-06-17 21:45:29 jdbc[13]: 
/**/prep35.setString(4, "\\");
2020-06-17 21:45:29 jdbc[13]: 
/**/prep35.setString(5, "LOG_TBL");
2020-06-17 21:45:29 jdbc[13]: 
/**/ResultSet rs80 = prep35.executeQuery();
2020-06-17 21:45:29 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@2041ae5d]
2020-06-17 21:45:29 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@2041ae5d
2020-06-17 21:45:29 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:45:29 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-17 21:45:29 jdbc[13]: Plan       :   best plan item cost 318.16 index meta
2020-06-17 21:45:29 jdbc[13]: Plan       : plan cost 319.16
2020-06-17 21:45:29 jdbc[13]: 
/*SQL l:316 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME {1: '%', 2: '\\', 3: 'PUBLIC', 4: '\\', 5: 'LOG_TBL'};
2020-06-17 21:45:29 jdbc[13]: 
/**/rs80.next();
2020-06-17 21:45:29 jdbc[13]: 
/**/rs80.getString("COLUMN_NAME");
2020-06-17 21:45:29 jdbc[13]: 
/**/rs80.next();
2020-06-17 21:45:29 jdbc[13]: 
/**/rs78.getType();
2020-06-17 21:45:29 jdbc[13]: 
/**/rs78.close();
2020-06-17 21:45:29 jdbc[13]: 
/**/stat8.close();
2020-06-17 21:45:30 jdbc[13]: 
/**/Statement stat9 = conn10.createStatement(1004, 1008);
2020-06-17 21:45:30 jdbc[13]: 
/**/stat9.setMaxRows(1000);
2020-06-17 21:45:30 jdbc[13]: 
/**/stat9.execute("SELECT * FROM LOG_TBL");
2020-06-17 21:45:30 jdbc[13]: 
/*SQL #:1*/SELECT * FROM LOG_TBL;
2020-06-17 21:45:30 jdbc[13]: 
/**/ResultSet rs81 = stat9.getResultSet();
2020-06-17 21:45:30 jdbc[13]: 
/**/ResultSetMetaData rsMeta11 = rs81.getMetaData();
2020-06-17 21:45:30 jdbc[13]: 
/**/conn10.getCatalog();
2020-06-17 21:45:30 jdbc[13]: 
/**/rsMeta11.getColumnCount();
2020-06-17 21:45:30 jdbc[13]: 
/**/rsMeta11.getColumnLabel(1);
2020-06-17 21:45:30 jdbc[13]: 
/**/rsMeta11.getColumnLabel(2);
2020-06-17 21:45:30 jdbc[13]: 
/**/rsMeta11.getColumnLabel(3);
2020-06-17 21:45:30 jdbc[13]: 
/**/rsMeta11.getColumnLabel(4);
2020-06-17 21:45:30 jdbc[13]: 
/**/rsMeta11.getColumnLabel(5);
2020-06-17 21:45:30 jdbc[13]: 
/**/rsMeta11.getColumnLabel(6);
2020-06-17 21:45:30 jdbc[13]: 
/**/rsMeta11.getColumnLabel(7);
2020-06-17 21:45:30 jdbc[13]: 
/**/rsMeta11.getColumnLabel(8);
2020-06-17 21:45:30 jdbc[13]: 
/**/rsMeta11.getColumnLabel(9);
2020-06-17 21:45:30 jdbc[13]: 
/**/rs81.next();
2020-06-17 21:45:30 jdbc[13]: 
/**/rs81.getString(1);
2020-06-17 21:45:30 jdbc[13]: 
/**/rs81.getString(2);
2020-06-17 21:45:30 jdbc[13]: 
/**/rs81.getString(3);
2020-06-17 21:45:30 jdbc[13]: 
/**/rs81.getString(4);
2020-06-17 21:45:30 jdbc[13]: 
/**/rs81.getString(5);
2020-06-17 21:45:30 jdbc[13]: 
/**/rs81.getString(6);
2020-06-17 21:45:30 jdbc[13]: 
/**/rs81.getString(7);
2020-06-17 21:45:30 jdbc[13]: 
/**/rs81.getString(8);
2020-06-17 21:45:30 jdbc[13]: 
/**/rs81.getString(9);
2020-06-17 21:45:30 jdbc[13]: 
/**/rs81.next();
2020-06-17 21:45:30 jdbc[13]: 
/**/rs81.getConcurrency();
2020-06-17 21:45:30 jdbc[13]: 
/**/DatabaseMetaData dbMeta10 = conn10.getMetaData();
2020-06-17 21:45:30 jdbc[13]: 
/**/dbMeta10.getTables(null, "PUBLIC", "LOG_TBL", new String[]{"TABLE"});
2020-06-17 21:45:30 jdbc[13]: 
/**/PreparedStatement prep36 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME");
2020-06-17 21:45:30 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@3c7ffe1c]
2020-06-17 21:45:30 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@3c7ffe1c
2020-06-17 21:45:30 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:45:30 jdbc[13]: Table      :     potential plan item cost 4,322 index meta
2020-06-17 21:45:30 jdbc[13]: Plan       :   best plan item cost 4,278.78 index meta
2020-06-17 21:45:30 jdbc[13]: Plan       : plan cost 4,279.78
2020-06-17 21:45:30 jdbc[13]: 
/**/prep36.setString(1, "%");
2020-06-17 21:45:30 jdbc[13]: 
/**/prep36.setString(2, "PUBLIC");
2020-06-17 21:45:30 jdbc[13]: 
/**/prep36.setString(3, "LOG_TBL");
2020-06-17 21:45:30 jdbc[13]: 
/**/prep36.setString(4, "\\");
2020-06-17 21:45:30 jdbc[13]: 
/**/prep36.setString(5, "TABLE");
2020-06-17 21:45:30 jdbc[13]: 
/**/ResultSet rs82 = prep36.executeQuery();
2020-06-17 21:45:30 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@3c7ffe1c]
2020-06-17 21:45:30 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@3c7ffe1c
2020-06-17 21:45:30 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:45:30 jdbc[13]: Table      :     potential plan item cost 1,324 index meta
2020-06-17 21:45:30 jdbc[13]: Plan       :   best plan item cost 1,271.04 index meta
2020-06-17 21:45:30 jdbc[13]: Plan       : plan cost 1,272.04
2020-06-17 21:45:30 jdbc[13]: 
/*SQL l:414 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME {1: '%', 2: 'PUBLIC', 3: 'LOG_TBL', 4: '\\', 5: 'TABLE'};
2020-06-17 21:45:30 jdbc[13]: 
/**/rs82.next();
2020-06-17 21:45:30 jdbc[13]: 
/**/rs82.getString("SQL");
2020-06-17 21:45:30 jdbc[13]: 
/**/rs82.getString("TABLE_NAME");
2020-06-17 21:45:30 jdbc[13]: 
/**/dbMeta10.getPrimaryKeys(null, "PUBLIC", "LOG_TBL");
2020-06-17 21:45:30 jdbc[13]: 
/**/PreparedStatement prep37 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME");
2020-06-17 21:45:30 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@2041ae5d]
2020-06-17 21:45:30 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@2041ae5d
2020-06-17 21:45:30 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:45:30 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-17 21:45:30 jdbc[13]: Plan       :   best plan item cost 321.44 index meta
2020-06-17 21:45:30 jdbc[13]: Plan       : plan cost 322.44
2020-06-17 21:45:30 jdbc[13]: 
/**/prep37.setString(1, "%");
2020-06-17 21:45:30 jdbc[13]: 
/**/prep37.setString(2, "\\");
2020-06-17 21:45:30 jdbc[13]: 
/**/prep37.setString(3, "PUBLIC");
2020-06-17 21:45:30 jdbc[13]: 
/**/prep37.setString(4, "\\");
2020-06-17 21:45:30 jdbc[13]: 
/**/prep37.setString(5, "LOG_TBL");
2020-06-17 21:45:30 jdbc[13]: 
/**/ResultSet rs83 = prep37.executeQuery();
2020-06-17 21:45:30 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@2041ae5d]
2020-06-17 21:45:30 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@2041ae5d
2020-06-17 21:45:30 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:45:30 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-17 21:45:30 jdbc[13]: Plan       :   best plan item cost 318.16 index meta
2020-06-17 21:45:30 jdbc[13]: Plan       : plan cost 319.16
2020-06-17 21:45:30 jdbc[13]: 
/*SQL l:316 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME {1: '%', 2: '\\', 3: 'PUBLIC', 4: '\\', 5: 'LOG_TBL'};
2020-06-17 21:45:30 jdbc[13]: 
/**/rs83.next();
2020-06-17 21:45:30 jdbc[13]: 
/**/rs83.getString("COLUMN_NAME");
2020-06-17 21:45:30 jdbc[13]: 
/**/rs83.next();
2020-06-17 21:45:30 jdbc[13]: 
/**/rs81.getType();
2020-06-17 21:45:30 jdbc[13]: 
/**/rs81.close();
2020-06-17 21:45:30 jdbc[13]: 
/**/stat9.close();
2020-06-17 21:45:53 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-17 21:45:53 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 21:45:53 jdbc[3]: 
/**/conn0.setReadOnly(true);
2020-06-17 21:45:53 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:45:53 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:45:53 jdbc[3]: 
/**/PreparedStatement prep38 = conn0.prepareStatement("select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=?");
2020-06-17 21:45:53 jdbc[3]: 
/**/prep38.setLong(1, 3L);
2020-06-17 21:45:53 jdbc[3]: 
/**/ResultSet rs84 = prep38.executeQuery();
2020-06-17 21:45:53 jdbc[3]: 
/*SQL l:225 #:1*/select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=? {1: 3};
2020-06-17 21:45:53 jdbc[3]: 
/**/rs84.next();
2020-06-17 21:45:53 jdbc[3]: 
/**/rs84.getString("customer2_0_0_");
2020-06-17 21:45:53 jdbc[3]: 
/**/rs84.wasNull();
2020-06-17 21:45:53 jdbc[3]: 
/**/rs84.getString("customer3_0_0_");
2020-06-17 21:45:53 jdbc[3]: 
/**/rs84.wasNull();
2020-06-17 21:45:53 jdbc[3]: 
/**/rs84.getString("customer4_0_0_");
2020-06-17 21:45:53 jdbc[3]: 
/**/rs84.wasNull();
2020-06-17 21:45:53 jdbc[3]: 
/**/rs84.next();
2020-06-17 21:45:53 jdbc[3]: 
/**/rs84.close();
2020-06-17 21:45:53 jdbc[3]: 
/**/prep38.getMaxRows();
2020-06-17 21:45:53 jdbc[3]: 
/**/prep38.getQueryTimeout();
2020-06-17 21:45:53 jdbc[3]: 
/**/prep38.close();
2020-06-17 21:45:53 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:45:53 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:45:53 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:45:53 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:45:53 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:45:53 jdbc[3]: 
/**/conn0.setReadOnly(false);
2020-06-17 21:45:53 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:45:53 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:45:53 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:46:35 jdbc[13]: 
/**/conn10.close();
2020-06-17 21:46:35 lock: 13 shared read lock unlock SYS 
2020-06-17 21:46:35 database: disconnecting session #13
2020-06-17 21:46:35 database: disconnected session #13
2020-06-17 21:46:35 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-17 21:46:35 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 21:46:35 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:46:35 jdbc[3]: 
/**/Statement stat10 = conn0.createStatement();
2020-06-17 21:46:35 jdbc[3]: 
/**/stat10.execute("drop table if exists customer_tbl CASCADE ");
2020-06-17 21:46:35 lock: 3 exclusive write lock requesting for CUSTOMER_TBL 
2020-06-17 21:46:35 lock: 3 exclusive write lock added for CUSTOMER_TBL 
2020-06-17 21:46:35 lock: 3 exclusive write lock requesting for SYS 
2020-06-17 21:46:35 lock: 3 exclusive write lock added for SYS 
2020-06-17 21:46:35 jdbc[3]: 
/*SQL t:2*/drop table if exists customer_tbl CASCADE;
2020-06-17 21:46:35 lock: 3 exclusive write lock unlock SYS 
2020-06-17 21:46:35 jdbc[3]: 
/**/stat10.getWarnings();
2020-06-17 21:46:35 jdbc[3]: 
/**/stat10.execute("drop table if exists log_tbl CASCADE ");
2020-06-17 21:46:35 lock: 3 exclusive write lock requesting for LOG_TBL 
2020-06-17 21:46:35 lock: 3 exclusive write lock added for LOG_TBL 
2020-06-17 21:46:35 lock: 3 exclusive write lock requesting for SYS 
2020-06-17 21:46:35 lock: 3 exclusive write lock added for SYS 
2020-06-17 21:46:35 jdbc[3]: 
/*SQL */drop table if exists log_tbl CASCADE;
2020-06-17 21:46:35 lock: 3 exclusive write lock unlock SYS 
2020-06-17 21:46:35 jdbc[3]: 
/**/stat10.getWarnings();
2020-06-17 21:46:35 jdbc[3]: 
/**/stat10.close();
2020-06-17 21:46:35 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:46:35 database: closing /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb from shutdown hook
2020-06-17 21:46:35 lock: 3 shared read lock unlock SYS 
2020-06-17 21:46:35 database: disconnecting session #3
2020-06-17 21:46:35 database: disconnected session #3
2020-06-17 21:46:35 lock: 4 shared read lock unlock SYS 
2020-06-17 21:46:35 database: disconnecting session #4
2020-06-17 21:46:35 database: disconnected session #4
2020-06-17 21:46:35 lock: 5 shared read lock unlock SYS 
2020-06-17 21:46:35 database: disconnecting session #5
2020-06-17 21:46:35 database: disconnected session #5
2020-06-17 21:46:35 lock: 6 shared read lock unlock SYS 
2020-06-17 21:46:35 database: disconnecting session #6
2020-06-17 21:46:35 database: disconnected session #6
2020-06-17 21:46:35 lock: 7 shared read lock unlock SYS 
2020-06-17 21:46:35 database: disconnecting session #7
2020-06-17 21:46:35 database: disconnected session #7
2020-06-17 21:46:35 lock: 8 shared read lock unlock SYS 
2020-06-17 21:46:35 database: disconnecting session #8
2020-06-17 21:46:35 database: disconnected session #8
2020-06-17 21:46:35 lock: 9 shared read lock unlock SYS 
2020-06-17 21:46:35 database: disconnecting session #9
2020-06-17 21:46:35 database: disconnected session #9
2020-06-17 21:46:35 lock: 10 shared read lock unlock SYS 
2020-06-17 21:46:35 database: disconnecting session #10
2020-06-17 21:46:35 database: disconnected session #10
2020-06-17 21:46:35 lock: 11 shared read lock unlock SYS 
2020-06-17 21:46:35 database: disconnecting session #11
2020-06-17 21:46:35 database: disconnected session #11
2020-06-17 21:46:35 lock: 12 shared read lock unlock SYS 
2020-06-17 21:46:35 database: disconnecting session #12
2020-06-17 21:46:35 database: disconnected session #12
2020-06-17 21:46:35 jdbc[3]: 
/**/conn0.close();
2020-06-17 21:46:35 jdbc[4]: 
/**/conn1.close();
2020-06-17 21:46:35 jdbc[5]: 
/**/conn2.close();
2020-06-17 21:46:35 jdbc[6]: 
/**/conn3.close();
2020-06-17 21:46:35 jdbc[7]: 
/**/conn4.close();
2020-06-17 21:46:35 jdbc[8]: 
/**/conn5.close();
2020-06-17 21:46:35 jdbc[9]: 
/**/conn6.close();
2020-06-17 21:46:35 jdbc[10]: 
/**/conn7.close();
2020-06-17 21:46:35 jdbc[11]: 
/**/conn8.close();
2020-06-17 21:46:35 jdbc[12]: 
/**/conn9.close();
2020-06-17 21:46:35 database: closing /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:46:35 lock: 1 shared read lock unlock SYS 
2020-06-17 21:46:35 lock: 2 shared read lock unlock SYS 
2020-06-17 21:46:35 database: closed
2020-06-17 21:46:46 database: opening /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb (build 200)
2020-06-17 21:46:46 lock: 1 exclusive write lock requesting for SYS 
2020-06-17 21:46:46 lock: 1 exclusive write lock added for SYS 
2020-06-17 21:46:46 lock: 1 exclusive write lock unlock SYS 
2020-06-17 21:46:46 lock: 1 exclusive write lock requesting for SYS 
2020-06-17 21:46:46 lock: 1 exclusive write lock added for SYS 
2020-06-17 21:46:46 lock: 1 exclusive write lock unlock SYS 
2020-06-17 21:46:46 lock: 1 exclusive write lock requesting for SYS 
2020-06-17 21:46:46 lock: 1 exclusive write lock added for SYS 
2020-06-17 21:46:46 lock: 1 exclusive write lock unlock SYS 
2020-06-17 21:46:46 database: opened /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:46:46 database: connecting session #3 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:46:46 jdbc[3]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:46:46 jdbc[3]: 
/**/Connection conn0 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 21:46:46 jdbc[3]: 
/**/conn0.isReadOnly();
2020-06-17 21:46:46 jdbc[3]: 
/*SQL #:1 t:1*/CALL READONLY();
2020-06-17 21:46:46 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:46:46 jdbc[3]: 
/**/conn0.isValid(1);
2020-06-17 21:46:46 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 21:46:46 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 21:46:46 jdbc[3]: 
/**/DatabaseMetaData dbMeta0 = conn0.getMetaData();
2020-06-17 21:46:46 jdbc[3]: 
/**/dbMeta0.getURL();
2020-06-17 21:46:46 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:46:46 database: connecting session #4 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:46:46 jdbc[4]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:46:46 jdbc[4]: 
/**/Connection conn1 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 21:46:46 jdbc[4]: 
/**/conn1.isReadOnly();
2020-06-17 21:46:46 jdbc[4]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 21:46:46 jdbc[4]: 
/**/conn1.getAutoCommit();
2020-06-17 21:46:46 database: connecting session #5 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:46:46 jdbc[5]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:46:46 jdbc[5]: 
/**/Connection conn2 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 21:46:46 jdbc[5]: 
/**/conn2.isReadOnly();
2020-06-17 21:46:46 jdbc[5]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 21:46:46 jdbc[5]: 
/**/conn2.getAutoCommit();
2020-06-17 21:46:46 database: connecting session #6 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:46:46 jdbc[6]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:46:46 jdbc[6]: 
/**/Connection conn3 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 21:46:46 jdbc[6]: 
/**/conn3.isReadOnly();
2020-06-17 21:46:46 jdbc[6]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 21:46:46 jdbc[6]: 
/**/conn3.getAutoCommit();
2020-06-17 21:46:46 database: connecting session #7 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:46:46 jdbc[7]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:46:46 jdbc[7]: 
/**/Connection conn4 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 21:46:46 jdbc[7]: 
/**/conn4.isReadOnly();
2020-06-17 21:46:46 jdbc[7]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 21:46:46 jdbc[7]: 
/**/conn4.getAutoCommit();
2020-06-17 21:46:46 database: connecting session #8 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:46:46 jdbc[8]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:46:46 jdbc[8]: 
/**/Connection conn5 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 21:46:46 jdbc[8]: 
/**/conn5.isReadOnly();
2020-06-17 21:46:46 jdbc[8]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 21:46:46 jdbc[8]: 
/**/conn5.getAutoCommit();
2020-06-17 21:46:46 database: connecting session #9 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:46:46 jdbc[9]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:46:46 jdbc[9]: 
/**/Connection conn6 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 21:46:46 jdbc[9]: 
/**/conn6.isReadOnly();
2020-06-17 21:46:46 jdbc[9]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 21:46:46 jdbc[9]: 
/**/conn6.getAutoCommit();
2020-06-17 21:46:46 database: connecting session #10 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:46:46 jdbc[10]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:46:46 jdbc[10]: 
/**/Connection conn7 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 21:46:46 jdbc[10]: 
/**/conn7.isReadOnly();
2020-06-17 21:46:46 jdbc[10]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 21:46:46 jdbc[10]: 
/**/conn7.getAutoCommit();
2020-06-17 21:46:46 database: connecting session #11 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:46:46 jdbc[11]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:46:46 jdbc[11]: 
/**/Connection conn8 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 21:46:46 jdbc[11]: 
/**/conn8.isReadOnly();
2020-06-17 21:46:46 jdbc[11]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 21:46:46 jdbc[11]: 
/**/conn8.getAutoCommit();
2020-06-17 21:46:46 database: connecting session #12 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:46:46 jdbc[12]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:46:46 jdbc[12]: 
/**/Connection conn9 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 21:46:46 jdbc[12]: 
/**/conn9.isReadOnly();
2020-06-17 21:46:46 jdbc[12]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 21:46:46 jdbc[12]: 
/**/conn9.getAutoCommit();
2020-06-17 21:46:47 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-17 21:46:47 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 21:46:47 jdbc[3]: 
/**/DatabaseMetaData dbMeta1 = conn0.getMetaData();
2020-06-17 21:46:47 jdbc[3]: 
/**/dbMeta1.getDatabaseProductName();
2020-06-17 21:46:47 jdbc[3]: 
/**/dbMeta1.getDatabaseProductVersion();
2020-06-17 21:46:47 jdbc[3]: 
/**/dbMeta1.getDatabaseMajorVersion();
2020-06-17 21:46:47 jdbc[3]: 
/**/dbMeta1.getDatabaseMinorVersion();
2020-06-17 21:46:47 jdbc[3]: 
/**/dbMeta1.getDriverName();
2020-06-17 21:46:47 jdbc[3]: 
/**/dbMeta1.getDriverVersion();
2020-06-17 21:46:47 jdbc[3]: 
/**/dbMeta1.getDriverMajorVersion();
2020-06-17 21:46:47 jdbc[3]: 
/**/dbMeta1.getDriverMinorVersion();
2020-06-17 21:46:47 jdbc[3]: 
/**/dbMeta1.getJDBCMajorVersion();
2020-06-17 21:46:47 jdbc[3]: 
/**/dbMeta1.getJDBCMinorVersion();
2020-06-17 21:46:47 jdbc[3]: 
/**/dbMeta1.supportsCatalogsInTableDefinitions();
2020-06-17 21:46:47 jdbc[3]: 
/**/dbMeta1.supportsSchemasInTableDefinitions();
2020-06-17 21:46:47 jdbc[3]: 
/**/dbMeta1.storesLowerCaseIdentifiers();
2020-06-17 21:46:47 jdbc[3]: 
/**/PreparedStatement prep0 = conn0.prepareStatement("SELECT NAME, VALUE FROM INFORMATION_SCHEMA.SETTINGS WHERE NAME IN (?, ?, ?, ?)");
2020-06-17 21:46:47 jdbc[3]: Plan       : calculate cost for plan [SETTINGS:-7:org.h2.table.MetaTable@4f67c9d9]
2020-06-17 21:46:47 jdbc[3]: Plan       :   for table filter SETTINGS:-7:org.h2.table.MetaTable@4f67c9d9
2020-06-17 21:46:47 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:46:47 jdbc[3]: Plan       :   best plan item cost 9,900 index meta
2020-06-17 21:46:47 jdbc[3]: Plan       : plan cost 9,901
2020-06-17 21:46:47 jdbc[3]: 
/**/prep0.setString(1, "MODE");
2020-06-17 21:46:47 jdbc[3]: 
/**/prep0.setString(2, "DATABASE_TO_UPPER");
2020-06-17 21:46:47 jdbc[3]: 
/**/prep0.setString(3, "DATABASE_TO_LOWER");
2020-06-17 21:46:47 jdbc[3]: 
/**/prep0.setString(4, "CASE_INSENSITIVE_IDENTIFIERS");
2020-06-17 21:46:47 jdbc[3]: 
/**/ResultSet rs0 = prep0.executeQuery();
2020-06-17 21:46:47 jdbc[3]: 
/*SQL l:78 #:4 t:2*/SELECT NAME, VALUE FROM INFORMATION_SCHEMA.SETTINGS WHERE NAME IN (?, ?, ?, ?) {1: 'MODE', 2: 'DATABASE_TO_UPPER', 3: 'DATABASE_TO_LOWER', 4: 'CASE_INSENSITIVE_IDENTIFIERS'};
2020-06-17 21:46:47 jdbc[3]: 
/**/rs0.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs0.getString(2);
2020-06-17 21:46:47 jdbc[3]: 
/**/rs0.getString(1);
2020-06-17 21:46:47 jdbc[3]: 
/**/rs0.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs0.getString(2);
2020-06-17 21:46:47 jdbc[3]: 
/**/rs0.getString(1);
2020-06-17 21:46:47 jdbc[3]: 
/**/rs0.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs0.getString(2);
2020-06-17 21:46:47 jdbc[3]: 
/**/rs0.getString(1);
2020-06-17 21:46:47 jdbc[3]: 
/**/rs0.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs0.getString(2);
2020-06-17 21:46:47 jdbc[3]: 
/**/rs0.getString(1);
2020-06-17 21:46:47 jdbc[3]: 
/**/rs0.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/prep0.close();
2020-06-17 21:46:47 jdbc[3]: 
/**/dbMeta1.storesUpperCaseIdentifiers();
2020-06-17 21:46:47 jdbc[3]: 
/**/dbMeta1.storesMixedCaseIdentifiers();
2020-06-17 21:46:47 jdbc[3]: 
/**/dbMeta1.storesUpperCaseIdentifiers();
2020-06-17 21:46:47 jdbc[3]: 
/**/dbMeta1.storesLowerCaseQuotedIdentifiers();
2020-06-17 21:46:47 jdbc[3]: 
/**/dbMeta1.storesUpperCaseQuotedIdentifiers();
2020-06-17 21:46:47 jdbc[3]: 
/**/dbMeta1.storesMixedCaseQuotedIdentifiers();
2020-06-17 21:46:47 jdbc[3]: 
/**/dbMeta1.getSQLKeywords();
2020-06-17 21:46:47 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:46:47 jdbc[3]: 
/*SQL #:1*/CALL DATABASE();
2020-06-17 21:46:47 jdbc[3]: 
/**/dbMeta1.supportsNamedParameters();
2020-06-17 21:46:47 jdbc[3]: 
/**/dbMeta1.supportsResultSetType(1004);
2020-06-17 21:46:47 jdbc[3]: 
/**/dbMeta1.supportsGetGeneratedKeys();
2020-06-17 21:46:47 jdbc[3]: 
/**/dbMeta1.supportsBatchUpdates();
2020-06-17 21:46:47 jdbc[3]: 
/**/dbMeta1.dataDefinitionIgnoredInTransactions();
2020-06-17 21:46:47 jdbc[3]: 
/**/dbMeta1.dataDefinitionCausesTransactionCommit();
2020-06-17 21:46:47 jdbc[3]: 
/**/dbMeta1.getSQLKeywords();
2020-06-17 21:46:47 jdbc[3]: 
/**/dbMeta1.getSQLStateType();
2020-06-17 21:46:47 jdbc[3]: 
/**/dbMeta1.locatorsUpdateCopy();
2020-06-17 21:46:47 jdbc[3]: 
/**/dbMeta1.getTypeInfo();
2020-06-17 21:46:47 jdbc[3]: 
/**/PreparedStatement prep1 = conn0.prepareStatement("SELECT TYPE_NAME, DATA_TYPE, PRECISION, PREFIX LITERAL_PREFIX, SUFFIX LITERAL_SUFFIX, PARAMS CREATE_PARAMS, NULLABLE, CASE_SENSITIVE, SEARCHABLE, FALSE UNSIGNED_ATTRIBUTE, FALSE FIXED_PREC_SCALE, AUTO_INCREMENT, TYPE_NAME LOCAL_TYPE_NAME, MINIMUM_SCALE, MAXIMUM_SCALE, DATA_TYPE SQL_DATA_TYPE, ZERO() SQL_DATETIME_SUB, RADIX NUM_PREC_RADIX FROM INFORMATION_SCHEMA.TYPE_INFO ORDER BY DATA_TYPE, POS");
2020-06-17 21:46:47 jdbc[3]: Plan       : calculate cost for plan [TYPE_INFO:-5:org.h2.table.MetaTable@21326646]
2020-06-17 21:46:47 jdbc[3]: Plan       :   for table filter TYPE_INFO:-5:org.h2.table.MetaTable@21326646
2020-06-17 21:46:47 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:46:47 jdbc[3]: Plan       :   best plan item cost 10,000 index meta
2020-06-17 21:46:47 jdbc[3]: Plan       : plan cost 10,001
2020-06-17 21:46:47 jdbc[3]: 
/**/ResultSet rs1 = prep1.executeQuery();
2020-06-17 21:46:47 jdbc[3]: 
/*SQL #:46 t:1*/SELECT TYPE_NAME, DATA_TYPE, PRECISION, PREFIX LITERAL_PREFIX, SUFFIX LITERAL_SUFFIX, PARAMS CREATE_PARAMS, NULLABLE, CASE_SENSITIVE, SEARCHABLE, FALSE UNSIGNED_ATTRIBUTE, FALSE FIXED_PREC_SCALE, AUTO_INCREMENT, TYPE_NAME LOCAL_TYPE_NAME, MINIMUM_SCALE, MAXIMUM_SCALE, DATA_TYPE SQL_DATA_TYPE, ZERO() SQL_DATETIME_SUB, RADIX NUM_PREC_RADIX FROM INFORMATION_SCHEMA.TYPE_INFO ORDER BY DATA_TYPE, POS;
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getStatement();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs1.close();
2020-06-17 21:46:47 jdbc[3]: 
/**/prep1.close();
2020-06-17 21:46:47 jdbc[3]: 
/**/conn0.getSchema();
2020-06-17 21:46:47 jdbc[3]: 
/**/conn0.getSchema();
2020-06-17 21:46:47 jdbc[3]: 
/**/dbMeta1.supportsNamedParameters();
2020-06-17 21:46:47 jdbc[3]: 
/**/Statement stat0 = conn0.createStatement();
2020-06-17 21:46:47 jdbc[3]: 
/**/ResultSet rs2 = stat0.executeQuery("select * from INFORMATION_SCHEMA.SEQUENCES");
2020-06-17 21:46:47 jdbc[3]: Plan       : calculate cost for plan [SEQUENCES:-9:org.h2.table.MetaTable@33d62e08]
2020-06-17 21:46:47 jdbc[3]: Plan       :   for table filter SEQUENCES:-9:org.h2.table.MetaTable@33d62e08
2020-06-17 21:46:47 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:46:47 jdbc[3]: Plan       :   best plan item cost 10,000 index meta
2020-06-17 21:46:47 jdbc[3]: Plan       : plan cost 10,001
2020-06-17 21:46:47 jdbc[3]: 
/*SQL */select * from INFORMATION_SCHEMA.SEQUENCES;
2020-06-17 21:46:47 jdbc[3]: 
/**/rs2.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs2.close();
2020-06-17 21:46:47 jdbc[3]: 
/**/stat0.close();
2020-06-17 21:46:47 jdbc[3]: 
/**/dbMeta1.getCatalogSeparator();
2020-06-17 21:46:47 jdbc[3]: 
/**/dbMeta1.isCatalogAtStart();
2020-06-17 21:46:47 jdbc[3]: 
/**/dbMeta1.getTypeInfo();
2020-06-17 21:46:47 jdbc[3]: 
/**/PreparedStatement prep2 = conn0.prepareStatement("SELECT TYPE_NAME, DATA_TYPE, PRECISION, PREFIX LITERAL_PREFIX, SUFFIX LITERAL_SUFFIX, PARAMS CREATE_PARAMS, NULLABLE, CASE_SENSITIVE, SEARCHABLE, FALSE UNSIGNED_ATTRIBUTE, FALSE FIXED_PREC_SCALE, AUTO_INCREMENT, TYPE_NAME LOCAL_TYPE_NAME, MINIMUM_SCALE, MAXIMUM_SCALE, DATA_TYPE SQL_DATA_TYPE, ZERO() SQL_DATETIME_SUB, RADIX NUM_PREC_RADIX FROM INFORMATION_SCHEMA.TYPE_INFO ORDER BY DATA_TYPE, POS");
2020-06-17 21:46:47 jdbc[3]: 
/**/ResultSet rs3 = prep2.executeQuery();
2020-06-17 21:46:47 jdbc[3]: 
/*SQL #:46*/SELECT TYPE_NAME, DATA_TYPE, PRECISION, PREFIX LITERAL_PREFIX, SUFFIX LITERAL_SUFFIX, PARAMS CREATE_PARAMS, NULLABLE, CASE_SENSITIVE, SEARCHABLE, FALSE UNSIGNED_ATTRIBUTE, FALSE FIXED_PREC_SCALE, AUTO_INCREMENT, TYPE_NAME LOCAL_TYPE_NAME, MINIMUM_SCALE, MAXIMUM_SCALE, DATA_TYPE SQL_DATA_TYPE, ZERO() SQL_DATETIME_SUB, RADIX NUM_PREC_RADIX FROM INFORMATION_SCHEMA.TYPE_INFO ORDER BY DATA_TYPE, POS;
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getStatement();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:46:47 jdbc[3]: 
/**/rs3.close();
2020-06-17 21:46:47 jdbc[3]: 
/**/prep2.close();
2020-06-17 21:46:47 jdbc[3]: 
/**/DatabaseMetaData dbMeta2 = conn0.getMetaData();
2020-06-17 21:46:47 jdbc[3]: 
/**/dbMeta2.getJDBCMajorVersion();
2020-06-17 21:46:47 jdbc[3]: 
/**/Clob clob0 = conn0.createClob();
2020-06-17 21:46:47 jdbc[3]: 
/**/clob0.free();
2020-06-17 21:46:47 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:46:47 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:46:47 jdbc[3]: 
/**/Statement stat1 = conn0.createStatement();
2020-06-17 21:46:47 jdbc[3]: 
/**/stat1.execute("drop table if exists customer_tbl CASCADE ");
2020-06-17 21:46:47 jdbc[3]: 
/*SQL */drop table if exists customer_tbl CASCADE;
2020-06-17 21:46:47 jdbc[3]: 
/**/stat1.getWarnings();
2020-06-17 21:46:47 jdbc[3]: 
/**/stat1.execute("drop table if exists log_tbl CASCADE ");
2020-06-17 21:46:47 jdbc[3]: 
/*SQL */drop table if exists log_tbl CASCADE;
2020-06-17 21:46:47 jdbc[3]: 
/**/stat1.getWarnings();
2020-06-17 21:46:47 jdbc[3]: 
/**/stat1.close();
2020-06-17 21:46:47 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:46:47 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:46:47 jdbc[3]: 
/**/Statement stat2 = conn0.createStatement();
2020-06-17 21:46:47 jdbc[3]: 
/**/stat2.execute("create table customer_tbl (id bigint generated by default as identity, customer_email varchar(255), customer_firstname varchar(255), customer_lastname varchar(255), primary key (id))");
2020-06-17 21:46:47 lock: 3 exclusive write lock requesting for SYS 
2020-06-17 21:46:47 lock: 3 exclusive write lock added for SYS 
2020-06-17 21:46:47 lock: 3 exclusive write lock unlock SYS 
2020-06-17 21:46:47 lock: 3 exclusive write lock requesting for SYS 
2020-06-17 21:46:47 lock: 3 exclusive write lock added for SYS 
2020-06-17 21:46:47 lock: 3 exclusive write lock requesting for CUSTOMER_TBL 
2020-06-17 21:46:47 lock: 3 exclusive write lock added for CUSTOMER_TBL 
2020-06-17 21:46:47 jdbc[3]: 
/*SQL t:6*/create table customer_tbl (id bigint generated by default as identity, customer_email varchar(255), customer_firstname varchar(255), customer_lastname varchar(255), primary key (id));
2020-06-17 21:46:47 lock: 3 exclusive write lock unlock SYS 
2020-06-17 21:46:47 lock: 3 exclusive write lock unlock CUSTOMER_TBL 
2020-06-17 21:46:47 jdbc[3]: 
/**/stat2.getWarnings();
2020-06-17 21:46:47 jdbc[3]: 
/**/stat2.execute("create table log_tbl (id bigint generated by default as identity, application_name varchar(255), level varchar(255), parent_span_id varchar(255), request varchar(255), response varchar(255), span_id varchar(255), time varchar(255), trace_id varchar(255), primary key (id))");
2020-06-17 21:46:47 lock: 3 exclusive write lock requesting for SYS 
2020-06-17 21:46:47 lock: 3 exclusive write lock added for SYS 
2020-06-17 21:46:47 lock: 3 exclusive write lock unlock SYS 
2020-06-17 21:46:47 lock: 3 exclusive write lock requesting for SYS 
2020-06-17 21:46:47 lock: 3 exclusive write lock added for SYS 
2020-06-17 21:46:47 lock: 3 exclusive write lock requesting for LOG_TBL 
2020-06-17 21:46:47 lock: 3 exclusive write lock added for LOG_TBL 
2020-06-17 21:46:47 jdbc[3]: 
/*SQL t:1*/create table log_tbl (id bigint generated by default as identity, application_name varchar(255), level varchar(255), parent_span_id varchar(255), request varchar(255), response varchar(255), span_id varchar(255), time varchar(255), trace_id varchar(255), primary key (id));
2020-06-17 21:46:47 lock: 3 exclusive write lock unlock SYS 
2020-06-17 21:46:47 lock: 3 exclusive write lock unlock LOG_TBL 
2020-06-17 21:46:47 jdbc[3]: 
/**/stat2.getWarnings();
2020-06-17 21:46:47 jdbc[3]: 
/**/stat2.close();
2020-06-17 21:46:47 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:46:48 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:46:48 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:46:48 jdbc[3]: 
/**/PreparedStatement prep3 = conn0.prepareStatement("select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=?");
2020-06-17 21:46:48 jdbc[3]: Plan       : calculate cost for plan [CUSTOMER0_]
2020-06-17 21:46:48 jdbc[3]: Plan       :   for table filter CUSTOMER0_
2020-06-17 21:46:48 jdbc[3]: Table      :     potential plan item cost 10,200 index PUBLIC.CUSTOMER_TBL.tableScan
2020-06-17 21:46:48 jdbc[3]: Table      :     potential plan item cost 230 index PUBLIC.PRIMARY_KEY_B
2020-06-17 21:46:48 jdbc[3]: Plan       :   best plan item cost 227.7 index PUBLIC.PRIMARY_KEY_B
2020-06-17 21:46:48 jdbc[3]: Plan       : plan cost 228.7
2020-06-17 21:46:48 jdbc[3]: 
/**/prep3.setLong(1, 1L);
2020-06-17 21:46:48 jdbc[3]: 
/**/ResultSet rs8 = prep3.executeQuery();
2020-06-17 21:46:48 jdbc[3]: 
/*SQL l:225*/select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=? {1: 1};
2020-06-17 21:46:48 jdbc[3]: 
/**/rs8.next();
2020-06-17 21:46:48 jdbc[3]: 
/**/rs8.close();
2020-06-17 21:46:48 jdbc[3]: 
/**/prep3.getMaxRows();
2020-06-17 21:46:48 jdbc[3]: 
/**/prep3.getQueryTimeout();
2020-06-17 21:46:48 jdbc[3]: Plan       : calculate cost for plan [SETTINGS:-7:org.h2.table.MetaTable@4f67c9d9]
2020-06-17 21:46:48 jdbc[3]: Plan       :   for table filter SETTINGS:-7:org.h2.table.MetaTable@4f67c9d9
2020-06-17 21:46:48 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:46:48 jdbc[3]: Plan       :   best plan item cost 9,900 index meta
2020-06-17 21:46:48 jdbc[3]: Plan       : plan cost 9,901
2020-06-17 21:46:48 jdbc[3]: 
/*SQL l:58 #:1*/SELECT VALUE FROM INFORMATION_SCHEMA.SETTINGS WHERE NAME=? {1: 'QUERY_TIMEOUT'};
2020-06-17 21:46:48 jdbc[3]: 
/**/prep3.close();
2020-06-17 21:46:48 jdbc[3]: 
/**/PreparedStatement prep4 = conn0.prepareStatement("insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?)", 1);;
2020-06-17 21:46:48 jdbc[3]: 
/**/prep4.setString(1, "ram@gmail.com");
2020-06-17 21:46:48 jdbc[3]: 
/**/prep4.setString(2, "Ram");
2020-06-17 21:46:48 jdbc[3]: 
/**/prep4.setString(3, "Thapa");
2020-06-17 21:46:48 jdbc[3]: 
/**/prep4.executeUpdate();
2020-06-17 21:46:48 lock: 1 exclusive write lock requesting for SYS 
2020-06-17 21:46:48 lock: 1 exclusive write lock added for SYS 
2020-06-17 21:46:48 lock: 1 exclusive write lock unlock SYS 
2020-06-17 21:46:48 lock: 3 shared read lock requesting for CUSTOMER_TBL 
2020-06-17 21:46:48 lock: 3 shared read lock ok CUSTOMER_TBL 
2020-06-17 21:46:48 jdbc[3]: 
/*SQL l:107 #:1 t:1*/insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?) {1: 'ram@gmail.com', 2: 'Ram', 3: 'Thapa'};
2020-06-17 21:46:48 jdbc[3]: 
/**/ResultSet rs9 = prep4.getGeneratedKeys();
2020-06-17 21:46:48 jdbc[3]: 
/**/rs9.next();
2020-06-17 21:46:48 jdbc[3]: 
/**/ResultSetMetaData rsMeta0 = rs9.getMetaData();
2020-06-17 21:46:48 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:46:48 jdbc[3]: 
/**/rsMeta0.getColumnCount();
2020-06-17 21:46:48 jdbc[3]: 
/**/rs9.getLong(1);
2020-06-17 21:46:48 jdbc[3]: 
/**/rs9.close();
2020-06-17 21:46:48 jdbc[3]: 
/**/prep4.getMaxRows();
2020-06-17 21:46:48 jdbc[3]: 
/**/prep4.getQueryTimeout();
2020-06-17 21:46:48 jdbc[3]: 
/**/prep4.close();
2020-06-17 21:46:48 jdbc[3]: 
/**/PreparedStatement prep5 = conn0.prepareStatement("select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=?");
2020-06-17 21:46:48 jdbc[3]: 
/**/prep5.setLong(1, 2L);
2020-06-17 21:46:48 jdbc[3]: 
/**/ResultSet rs10 = prep5.executeQuery();
2020-06-17 21:46:48 jdbc[3]: 
/*SQL l:225*/select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=? {1: 2};
2020-06-17 21:46:48 jdbc[3]: 
/**/rs10.next();
2020-06-17 21:46:48 jdbc[3]: 
/**/rs10.close();
2020-06-17 21:46:48 jdbc[3]: 
/**/prep5.getMaxRows();
2020-06-17 21:46:48 jdbc[3]: 
/**/prep5.getQueryTimeout();
2020-06-17 21:46:48 jdbc[3]: 
/**/prep5.close();
2020-06-17 21:46:48 jdbc[3]: 
/**/PreparedStatement prep6 = conn0.prepareStatement("insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?)", 1);;
2020-06-17 21:46:48 jdbc[3]: 
/**/prep6.setString(1, "hari@gmail.com");
2020-06-17 21:46:48 jdbc[3]: 
/**/prep6.setString(2, "Hari");
2020-06-17 21:46:48 jdbc[3]: 
/**/prep6.setString(3, "Neupane");
2020-06-17 21:46:48 jdbc[3]: 
/**/prep6.executeUpdate();
2020-06-17 21:46:48 jdbc[3]: 
/*SQL l:107 #:1*/insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?) {1: 'hari@gmail.com', 2: 'Hari', 3: 'Neupane'};
2020-06-17 21:46:48 jdbc[3]: 
/**/ResultSet rs11 = prep6.getGeneratedKeys();
2020-06-17 21:46:48 jdbc[3]: 
/**/rs11.next();
2020-06-17 21:46:48 jdbc[3]: 
/**/ResultSetMetaData rsMeta1 = rs11.getMetaData();
2020-06-17 21:46:48 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:46:48 jdbc[3]: 
/**/rsMeta1.getColumnCount();
2020-06-17 21:46:48 jdbc[3]: 
/**/rs11.getLong(1);
2020-06-17 21:46:48 jdbc[3]: 
/**/rs11.close();
2020-06-17 21:46:48 jdbc[3]: 
/**/prep6.getMaxRows();
2020-06-17 21:46:48 jdbc[3]: 
/**/prep6.getQueryTimeout();
2020-06-17 21:46:48 jdbc[3]: 
/**/prep6.close();
2020-06-17 21:46:48 jdbc[3]: 
/**/PreparedStatement prep7 = conn0.prepareStatement("select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=?");
2020-06-17 21:46:48 jdbc[3]: 
/**/prep7.setLong(1, 3L);
2020-06-17 21:46:48 jdbc[3]: 
/**/ResultSet rs12 = prep7.executeQuery();
2020-06-17 21:46:48 jdbc[3]: 
/*SQL l:225*/select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=? {1: 3};
2020-06-17 21:46:48 jdbc[3]: 
/**/rs12.next();
2020-06-17 21:46:48 jdbc[3]: 
/**/rs12.close();
2020-06-17 21:46:48 jdbc[3]: 
/**/prep7.getMaxRows();
2020-06-17 21:46:48 jdbc[3]: 
/**/prep7.getQueryTimeout();
2020-06-17 21:46:48 jdbc[3]: 
/**/prep7.close();
2020-06-17 21:46:48 jdbc[3]: 
/**/PreparedStatement prep8 = conn0.prepareStatement("insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?)", 1);;
2020-06-17 21:46:48 jdbc[3]: 
/**/prep8.setString(1, "ramila@gmail.com");
2020-06-17 21:46:48 jdbc[3]: 
/**/prep8.setString(2, "Ramila");
2020-06-17 21:46:48 jdbc[3]: 
/**/prep8.setString(3, "Karki");
2020-06-17 21:46:48 jdbc[3]: 
/**/prep8.executeUpdate();
2020-06-17 21:46:48 jdbc[3]: 
/*SQL l:107 #:1*/insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?) {1: 'ramila@gmail.com', 2: 'Ramila', 3: 'Karki'};
2020-06-17 21:46:48 jdbc[3]: 
/**/ResultSet rs13 = prep8.getGeneratedKeys();
2020-06-17 21:46:48 jdbc[3]: 
/**/rs13.next();
2020-06-17 21:46:48 jdbc[3]: 
/**/ResultSetMetaData rsMeta2 = rs13.getMetaData();
2020-06-17 21:46:48 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:46:48 jdbc[3]: 
/**/rsMeta2.getColumnCount();
2020-06-17 21:46:48 jdbc[3]: 
/**/rs13.getLong(1);
2020-06-17 21:46:48 jdbc[3]: 
/**/rs13.close();
2020-06-17 21:46:48 jdbc[3]: 
/**/prep8.getMaxRows();
2020-06-17 21:46:48 jdbc[3]: 
/**/prep8.getQueryTimeout();
2020-06-17 21:46:48 jdbc[3]: 
/**/prep8.close();
2020-06-17 21:46:48 jdbc[3]: 
/**/PreparedStatement prep9 = conn0.prepareStatement("select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=?");
2020-06-17 21:46:48 jdbc[3]: 
/**/prep9.setLong(1, 4L);
2020-06-17 21:46:48 jdbc[3]: 
/**/ResultSet rs14 = prep9.executeQuery();
2020-06-17 21:46:48 jdbc[3]: 
/*SQL l:225*/select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=? {1: 4};
2020-06-17 21:46:48 jdbc[3]: 
/**/rs14.next();
2020-06-17 21:46:48 jdbc[3]: 
/**/rs14.close();
2020-06-17 21:46:48 jdbc[3]: 
/**/prep9.getMaxRows();
2020-06-17 21:46:48 jdbc[3]: 
/**/prep9.getQueryTimeout();
2020-06-17 21:46:48 jdbc[3]: 
/**/prep9.close();
2020-06-17 21:46:48 jdbc[3]: 
/**/PreparedStatement prep10 = conn0.prepareStatement("insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?)", 1);;
2020-06-17 21:46:48 jdbc[3]: 
/**/prep10.setString(1, "david@gmail.com");
2020-06-17 21:46:48 jdbc[3]: 
/**/prep10.setString(2, "David");
2020-06-17 21:46:48 jdbc[3]: 
/**/prep10.setString(3, "Yonge");
2020-06-17 21:46:48 jdbc[3]: 
/**/prep10.executeUpdate();
2020-06-17 21:46:48 jdbc[3]: 
/*SQL l:107 #:1*/insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?) {1: 'david@gmail.com', 2: 'David', 3: 'Yonge'};
2020-06-17 21:46:48 jdbc[3]: 
/**/ResultSet rs15 = prep10.getGeneratedKeys();
2020-06-17 21:46:48 jdbc[3]: 
/**/rs15.next();
2020-06-17 21:46:48 jdbc[3]: 
/**/ResultSetMetaData rsMeta3 = rs15.getMetaData();
2020-06-17 21:46:48 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:46:48 jdbc[3]: 
/**/rsMeta3.getColumnCount();
2020-06-17 21:46:48 jdbc[3]: 
/**/rs15.getLong(1);
2020-06-17 21:46:48 jdbc[3]: 
/**/rs15.close();
2020-06-17 21:46:48 jdbc[3]: 
/**/prep10.getMaxRows();
2020-06-17 21:46:48 jdbc[3]: 
/**/prep10.getQueryTimeout();
2020-06-17 21:46:48 jdbc[3]: 
/**/prep10.close();
2020-06-17 21:46:48 jdbc[3]: 
/**/PreparedStatement prep11 = conn0.prepareStatement("select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=?");
2020-06-17 21:46:48 jdbc[3]: 
/**/prep11.setLong(1, 5L);
2020-06-17 21:46:48 jdbc[3]: 
/**/ResultSet rs16 = prep11.executeQuery();
2020-06-17 21:46:48 jdbc[3]: 
/*SQL l:225*/select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=? {1: 5};
2020-06-17 21:46:48 jdbc[3]: 
/**/rs16.next();
2020-06-17 21:46:48 jdbc[3]: 
/**/rs16.close();
2020-06-17 21:46:48 jdbc[3]: 
/**/prep11.getMaxRows();
2020-06-17 21:46:48 jdbc[3]: 
/**/prep11.getQueryTimeout();
2020-06-17 21:46:48 jdbc[3]: 
/**/prep11.close();
2020-06-17 21:46:48 jdbc[3]: 
/**/PreparedStatement prep12 = conn0.prepareStatement("insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?)", 1);;
2020-06-17 21:46:48 jdbc[3]: 
/**/prep12.setString(1, "peter@gmail.com");
2020-06-17 21:46:48 jdbc[3]: 
/**/prep12.setString(2, "Peter");
2020-06-17 21:46:48 jdbc[3]: 
/**/prep12.setString(3, "Parker");
2020-06-17 21:46:48 jdbc[3]: 
/**/prep12.executeUpdate();
2020-06-17 21:46:48 jdbc[3]: 
/*SQL l:107 #:1*/insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?) {1: 'peter@gmail.com', 2: 'Peter', 3: 'Parker'};
2020-06-17 21:46:48 jdbc[3]: 
/**/ResultSet rs17 = prep12.getGeneratedKeys();
2020-06-17 21:46:48 jdbc[3]: 
/**/rs17.next();
2020-06-17 21:46:48 jdbc[3]: 
/**/ResultSetMetaData rsMeta4 = rs17.getMetaData();
2020-06-17 21:46:48 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:46:48 jdbc[3]: 
/**/rsMeta4.getColumnCount();
2020-06-17 21:46:48 jdbc[3]: 
/**/rs17.getLong(1);
2020-06-17 21:46:48 jdbc[3]: 
/**/rs17.close();
2020-06-17 21:46:48 jdbc[3]: 
/**/prep12.getMaxRows();
2020-06-17 21:46:48 jdbc[3]: 
/**/prep12.getQueryTimeout();
2020-06-17 21:46:48 jdbc[3]: 
/**/prep12.close();
2020-06-17 21:46:48 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:46:48 lock: 3 shared read lock unlock CUSTOMER_TBL 
2020-06-17 21:46:48 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:46:48 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:46:48 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:46:48 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:46:48 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:46:48 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:46:48 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:46:51 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-17 21:46:51 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 21:46:51 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:46:51 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:46:51 jdbc[3]: 
/**/PreparedStatement prep13 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 21:46:51 jdbc[3]: 
/**/prep13.setString(1, "CustomerMS");
2020-06-17 21:46:51 jdbc[3]: 
/**/prep13.setString(2, "INFO");
2020-06-17 21:46:51 jdbc[3]: 
/**/prep13.setNull(3, 12);
2020-06-17 21:46:51 jdbc[3]: 
/**/prep13.setString(4, "/api/customers/2");
2020-06-17 21:46:51 jdbc[3]: 
/**/prep13.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 21:46:51 jdbc[3]: 
/**/prep13.setString(6, "835c44c5407a860f");
2020-06-17 21:46:51 jdbc[3]: 
/**/prep13.setString(7, "2020-06-17T20:43:48.395Z");
2020-06-17 21:46:51 jdbc[3]: 
/**/prep13.setString(8, "835c44c5407a860f");
2020-06-17 21:46:51 jdbc[3]: 
/**/prep13.executeUpdate();
2020-06-17 21:46:51 lock: 1 exclusive write lock requesting for SYS 
2020-06-17 21:46:51 lock: 1 exclusive write lock added for SYS 
2020-06-17 21:46:51 lock: 1 exclusive write lock unlock SYS 
2020-06-17 21:46:51 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 21:46:51 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 21:46:51 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/2', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: '835c44c5407a860f', 7: '2020-06-17T20:43:48.395Z', 8: '835c44c5407a860f'};
2020-06-17 21:46:51 jdbc[3]: 
/**/ResultSet rs18 = prep13.getGeneratedKeys();
2020-06-17 21:46:51 jdbc[3]: 
/**/rs18.next();
2020-06-17 21:46:51 jdbc[3]: 
/**/ResultSetMetaData rsMeta5 = rs18.getMetaData();
2020-06-17 21:46:51 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:46:51 jdbc[3]: 
/**/rsMeta5.getColumnCount();
2020-06-17 21:46:51 jdbc[3]: 
/**/rs18.getLong(1);
2020-06-17 21:46:51 jdbc[3]: 
/**/rs18.close();
2020-06-17 21:46:51 jdbc[3]: 
/**/prep13.getMaxRows();
2020-06-17 21:46:51 jdbc[3]: 
/**/prep13.getQueryTimeout();
2020-06-17 21:46:51 jdbc[3]: 
/**/prep13.close();
2020-06-17 21:46:51 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:46:51 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 21:46:51 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:46:51 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:46:51 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:46:51 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:46:51 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:46:51 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:46:51 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:47:02 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-17 21:47:02 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 21:47:02 jdbc[3]: 
/**/conn0.setReadOnly(true);
2020-06-17 21:47:02 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:47:02 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:47:02 jdbc[3]: 
/**/PreparedStatement prep14 = conn0.prepareStatement("select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=?");
2020-06-17 21:47:02 jdbc[3]: 
/**/prep14.setLong(1, 2L);
2020-06-17 21:47:02 jdbc[3]: 
/**/ResultSet rs19 = prep14.executeQuery();
2020-06-17 21:47:02 jdbc[3]: 
/*SQL l:225 #:1*/select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=? {1: 2};
2020-06-17 21:47:02 jdbc[3]: 
/**/rs19.next();
2020-06-17 21:47:02 jdbc[3]: 
/**/rs19.getString("customer2_0_0_");
2020-06-17 21:47:02 jdbc[3]: 
/**/rs19.wasNull();
2020-06-17 21:47:02 jdbc[3]: 
/**/rs19.getString("customer3_0_0_");
2020-06-17 21:47:02 jdbc[3]: 
/**/rs19.wasNull();
2020-06-17 21:47:02 jdbc[3]: 
/**/rs19.getString("customer4_0_0_");
2020-06-17 21:47:02 jdbc[3]: 
/**/rs19.wasNull();
2020-06-17 21:47:02 jdbc[3]: 
/**/rs19.next();
2020-06-17 21:47:02 jdbc[3]: 
/**/rs19.close();
2020-06-17 21:47:02 jdbc[3]: 
/**/prep14.getMaxRows();
2020-06-17 21:47:02 jdbc[3]: 
/**/prep14.getQueryTimeout();
2020-06-17 21:47:02 jdbc[3]: 
/**/prep14.close();
2020-06-17 21:47:02 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:47:02 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:47:02 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:47:02 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:47:02 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:47:02 jdbc[3]: 
/**/conn0.setReadOnly(false);
2020-06-17 21:47:02 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:47:02 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:47:02 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:47:03 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:47:03 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:47:03 jdbc[3]: 
/**/PreparedStatement prep15 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 21:47:03 jdbc[3]: 
/**/prep15.setString(1, "CustomerMS");
2020-06-17 21:47:03 jdbc[3]: 
/**/prep15.setString(2, "INFO");
2020-06-17 21:47:03 jdbc[3]: 
/**/prep15.setNull(3, 12);
2020-06-17 21:47:03 jdbc[3]: 
/**/prep15.setString(4, "/api/customers/2");
2020-06-17 21:47:03 jdbc[3]: 
/**/prep15.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 21:47:03 jdbc[3]: 
/**/prep15.setString(6, "ac4762af3b603bf9");
2020-06-17 21:47:03 jdbc[3]: 
/**/prep15.setString(7, "2020-06-18T02:47:02.751Z");
2020-06-17 21:47:03 jdbc[3]: 
/**/prep15.setString(8, "ac4762af3b603bf9");
2020-06-17 21:47:03 jdbc[3]: 
/**/prep15.executeUpdate();
2020-06-17 21:47:03 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 21:47:03 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 21:47:03 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/2', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: 'ac4762af3b603bf9', 7: '2020-06-18T02:47:02.751Z', 8: 'ac4762af3b603bf9'};
2020-06-17 21:47:03 jdbc[3]: 
/**/ResultSet rs20 = prep15.getGeneratedKeys();
2020-06-17 21:47:03 jdbc[3]: 
/**/rs20.next();
2020-06-17 21:47:03 jdbc[3]: 
/**/ResultSetMetaData rsMeta6 = rs20.getMetaData();
2020-06-17 21:47:03 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:47:03 jdbc[3]: 
/**/rsMeta6.getColumnCount();
2020-06-17 21:47:03 jdbc[3]: 
/**/rs20.getLong(1);
2020-06-17 21:47:03 jdbc[3]: 
/**/rs20.close();
2020-06-17 21:47:03 jdbc[3]: 
/**/prep15.getMaxRows();
2020-06-17 21:47:03 jdbc[3]: 
/**/prep15.getQueryTimeout();
2020-06-17 21:47:03 jdbc[3]: 
/**/prep15.close();
2020-06-17 21:47:03 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:47:03 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 21:47:03 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:47:03 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:47:03 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:47:03 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:47:03 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:47:03 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:47:03 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:47:08 database: connecting session #13 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:47:08 jdbc[13]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:47:08 jdbc[13]: 
/**/Connection conn10 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3;FORBID_CREATION=TRUE", "SA", "");
2020-06-17 21:47:08 jdbc[13]: 
/**/DatabaseMetaData dbMeta3 = conn10.getMetaData();
2020-06-17 21:47:08 jdbc[13]: 
/**/PreparedStatement prep16 = conn10.prepareStatement("SELECT NAME, VALUE FROM INFORMATION_SCHEMA.SETTINGS WHERE NAME IN (?, ?, ?, ?)");
2020-06-17 21:47:08 jdbc[13]: Plan       : calculate cost for plan [SETTINGS:-7:org.h2.table.MetaTable@4f67c9d9]
2020-06-17 21:47:08 jdbc[13]: Plan       :   for table filter SETTINGS:-7:org.h2.table.MetaTable@4f67c9d9
2020-06-17 21:47:08 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:47:08 jdbc[13]: Plan       :   best plan item cost 9,900 index meta
2020-06-17 21:47:08 jdbc[13]: Plan       : plan cost 9,901
2020-06-17 21:47:08 jdbc[13]: 
/**/prep16.setString(1, "MODE");
2020-06-17 21:47:08 jdbc[13]: 
/**/prep16.setString(2, "DATABASE_TO_UPPER");
2020-06-17 21:47:08 jdbc[13]: 
/**/prep16.setString(3, "DATABASE_TO_LOWER");
2020-06-17 21:47:08 jdbc[13]: 
/**/prep16.setString(4, "CASE_INSENSITIVE_IDENTIFIERS");
2020-06-17 21:47:08 jdbc[13]: 
/**/ResultSet rs21 = prep16.executeQuery();
2020-06-17 21:47:08 jdbc[13]: 
/*SQL l:78 #:4*/SELECT NAME, VALUE FROM INFORMATION_SCHEMA.SETTINGS WHERE NAME IN (?, ?, ?, ?) {1: 'MODE', 2: 'DATABASE_TO_UPPER', 3: 'DATABASE_TO_LOWER', 4: 'CASE_INSENSITIVE_IDENTIFIERS'};
2020-06-17 21:47:08 jdbc[13]: 
/**/rs21.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs21.getString(2);
2020-06-17 21:47:08 jdbc[13]: 
/**/rs21.getString(1);
2020-06-17 21:47:08 jdbc[13]: 
/**/rs21.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs21.getString(2);
2020-06-17 21:47:08 jdbc[13]: 
/**/rs21.getString(1);
2020-06-17 21:47:08 jdbc[13]: 
/**/rs21.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs21.getString(2);
2020-06-17 21:47:08 jdbc[13]: 
/**/rs21.getString(1);
2020-06-17 21:47:08 jdbc[13]: 
/**/rs21.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs21.getString(2);
2020-06-17 21:47:08 jdbc[13]: 
/**/rs21.getString(1);
2020-06-17 21:47:08 jdbc[13]: 
/**/rs21.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/prep16.close();
2020-06-17 21:47:08 jdbc[13]: 
/**/DatabaseMetaData dbMeta4 = conn10.getMetaData();
2020-06-17 21:47:08 jdbc[13]: 
/**/dbMeta4.getSchemas();
2020-06-17 21:47:08 jdbc[13]: 
/**/PreparedStatement prep17 = conn10.prepareStatement("SELECT SCHEMA_NAME TABLE_SCHEM, CATALOG_NAME TABLE_CATALOG,  IS_DEFAULT FROM INFORMATION_SCHEMA.SCHEMATA ORDER BY SCHEMA_NAME");
2020-06-17 21:47:08 jdbc[13]: Plan       : calculate cost for plan [SCHEMATA:-14:org.h2.table.MetaTable@ab698e8]
2020-06-17 21:47:08 jdbc[13]: Plan       :   for table filter SCHEMATA:-14:org.h2.table.MetaTable@ab698e8
2020-06-17 21:47:08 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:47:08 jdbc[13]: Plan       :   best plan item cost 10,000 index meta
2020-06-17 21:47:08 jdbc[13]: Plan       : plan cost 10,001
2020-06-17 21:47:08 jdbc[13]: 
/**/ResultSet rs22 = prep17.executeQuery();
2020-06-17 21:47:08 jdbc[13]: 
/*SQL #:2*/SELECT SCHEMA_NAME TABLE_SCHEM, CATALOG_NAME TABLE_CATALOG,  IS_DEFAULT FROM INFORMATION_SCHEMA.SCHEMATA ORDER BY SCHEMA_NAME;
2020-06-17 21:47:08 jdbc[13]: 
/**/rs22.findColumn("IS_DEFAULT");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs22.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs22.getBoolean(3);
2020-06-17 21:47:08 jdbc[13]: 
/**/rs22.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs22.getBoolean(3);
2020-06-17 21:47:08 jdbc[13]: 
/**/rs22.getString("TABLE_SCHEM");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs22.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/dbMeta4.getSchemas();
2020-06-17 21:47:08 jdbc[13]: 
/**/PreparedStatement prep18 = conn10.prepareStatement("SELECT SCHEMA_NAME TABLE_SCHEM, CATALOG_NAME TABLE_CATALOG,  IS_DEFAULT FROM INFORMATION_SCHEMA.SCHEMATA ORDER BY SCHEMA_NAME");
2020-06-17 21:47:08 jdbc[13]: Plan       : calculate cost for plan [SCHEMATA:-14:org.h2.table.MetaTable@ab698e8]
2020-06-17 21:47:08 jdbc[13]: Plan       :   for table filter SCHEMATA:-14:org.h2.table.MetaTable@ab698e8
2020-06-17 21:47:08 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:47:08 jdbc[13]: Plan       :   best plan item cost 10,000 index meta
2020-06-17 21:47:08 jdbc[13]: Plan       : plan cost 10,001
2020-06-17 21:47:08 jdbc[13]: 
/**/ResultSet rs23 = prep18.executeQuery();
2020-06-17 21:47:08 jdbc[13]: 
/*SQL #:2*/SELECT SCHEMA_NAME TABLE_SCHEM, CATALOG_NAME TABLE_CATALOG,  IS_DEFAULT FROM INFORMATION_SCHEMA.SCHEMATA ORDER BY SCHEMA_NAME;
2020-06-17 21:47:08 jdbc[13]: 
/**/rs23.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs23.getString("TABLE_SCHEM");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs23.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs23.getString("TABLE_SCHEM");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs23.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs23.close();
2020-06-17 21:47:08 jdbc[13]: 
/**/prep18.close();
2020-06-17 21:47:08 jdbc[13]: 
/**/dbMeta4.getTables(null, "INFORMATION_SCHEMA", null, new String[]{"TABLE", "SYSTEM TABLE", "VIEW", "SYSTEM VIEW", "TABLE LINK", "SYNONYM", "EXTERNAL"});
2020-06-17 21:47:08 jdbc[13]: 
/**/PreparedStatement prep19 = conn10.prepareStatement("SELECT TABLE_CAT, TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_CAT, TYPE_SCHEM, TYPE_NAME, SELF_REFERENCING_COL_NAME, REF_GENERATION, SQL FROM (SELECT SYNONYM_CATALOG TABLE_CAT, SYNONYM_SCHEMA TABLE_SCHEM, SYNONYM_NAME as TABLE_NAME, TYPE_NAME AS TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME AS TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, NULL AS SQL FROM INFORMATION_SCHEMA.SYNONYMS WHERE SYNONYM_CATALOG LIKE ?1 ESCAPE ?4 AND SYNONYM_SCHEMA LIKE ?2 ESCAPE ?4 AND SYNONYM_NAME LIKE ?3 ESCAPE ?4 UNION SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5, ?6, ?7, ?8, ?9, ?10, ?11)) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME");
2020-06-17 21:47:08 jdbc[13]: Plan       : calculate cost for plan [_0]
2020-06-17 21:47:08 jdbc[13]: Plan       :   for table filter _0
2020-06-17 21:47:08 jdbc[13]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@66a14c7b]
2020-06-17 21:47:08 jdbc[13]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@66a14c7b
2020-06-17 21:47:08 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:47:08 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:47:08 jdbc[13]: Plan       :   best plan item cost 4,022 index meta
2020-06-17 21:47:08 jdbc[13]: Plan       : plan cost 4,023
2020-06-17 21:47:08 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@16194a3f]
2020-06-17 21:47:08 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@16194a3f
2020-06-17 21:47:08 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:47:08 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:47:08 jdbc[13]: Plan       :   best plan item cost 3,981.78 index meta
2020-06-17 21:47:08 jdbc[13]: Plan       : plan cost 3,982.78
2020-06-17 21:47:08 jdbc[13]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@66a14c7b]
2020-06-17 21:47:08 jdbc[13]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@66a14c7b
2020-06-17 21:47:08 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:47:08 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:47:08 jdbc[13]: Plan       :   best plan item cost 4,022 index meta
2020-06-17 21:47:08 jdbc[13]: Plan       : plan cost 4,023
2020-06-17 21:47:08 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@16194a3f]
2020-06-17 21:47:08 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@16194a3f
2020-06-17 21:47:08 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:47:08 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:47:08 jdbc[13]: Plan       :   best plan item cost 3,981.78 index meta
2020-06-17 21:47:08 jdbc[13]: Plan       : plan cost 3,982.78
2020-06-17 21:47:08 jdbc[13]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@66a14c7b]
2020-06-17 21:47:08 jdbc[13]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@66a14c7b
2020-06-17 21:47:08 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:47:08 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:47:08 jdbc[13]: Plan       :   best plan item cost 4,022 index meta
2020-06-17 21:47:08 jdbc[13]: Plan       : plan cost 4,023
2020-06-17 21:47:08 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@16194a3f]
2020-06-17 21:47:08 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@16194a3f
2020-06-17 21:47:08 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:47:08 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:47:08 jdbc[13]: Plan       :   best plan item cost 3,981.78 index meta
2020-06-17 21:47:08 jdbc[13]: Plan       : plan cost 3,982.78
2020-06-17 21:47:08 jdbc[13]: Plan       :   best plan item cost 8,005.78 index (SELECT
    SYNONYM_CATALOG AS TABLE_CAT,
    SYNONYM_SCHEMA AS TABLE_SCHEM,
    SYNONYM_NAME AS TABLE_NAME,
    TYPE_NAME AS TABLE_TYPE,
    REMARKS,
    TYPE_NAME AS TYPE_CAT,
    TYPE_NAME AS TYPE_SCHEM,
    TYPE_NAME AS TYPE_NAME,
    TYPE_NAME AS SELF_REFERENCING_COL_NAME,
    TYPE_NAME AS REF_GENERATION,
    NULL AS SQL
FROM INFORMATION_SCHEMA.SYNONYMS
    /* meta */
WHERE (SYNONYM_NAME LIKE ?3 ESCAPE ?4)
    AND ((SYNONYM_CATALOG LIKE ?1 ESCAPE ?4)
    AND (SYNONYM_SCHEMA LIKE ?2 ESCAPE ?4)))
UNION
(SELECT
    TABLE_CATALOG AS TABLE_CAT,
    TABLE_SCHEMA AS TABLE_SCHEM,
    TABLE_NAME,
    TABLE_TYPE,
    REMARKS,
    TYPE_NAME AS TYPE_CAT,
    TYPE_NAME AS TYPE_SCHEM,
    TYPE_NAME,
    TYPE_NAME AS SELF_REFERENCING_COL_NAME,
    TYPE_NAME AS REF_GENERATION,
    SQL
FROM INFORMATION_SCHEMA.TABLES
    /* meta */
WHERE (TABLE_TYPE IN(?5, ?6, ?7, ?8, ?9, ?10, ?11))
    AND ((TABLE_NAME LIKE ?3 ESCAPE ?4)
    AND ((TABLE_CATALOG LIKE ?1 ESCAPE ?4)
    AND (TABLE_SCHEMA LIKE ?2 ESCAPE ?4))))
2020-06-17 21:47:08 jdbc[13]: Plan       : plan cost 8,006.78
2020-06-17 21:47:08 jdbc[13]: 
/**/prep19.setString(1, "%");
2020-06-17 21:47:08 jdbc[13]: 
/**/prep19.setString(2, "INFORMATION_SCHEMA");
2020-06-17 21:47:08 jdbc[13]: 
/**/prep19.setString(3, "%");
2020-06-17 21:47:08 jdbc[13]: 
/**/prep19.setString(4, "\\");
2020-06-17 21:47:08 jdbc[13]: 
/**/prep19.setString(5, "TABLE");
2020-06-17 21:47:08 jdbc[13]: 
/**/prep19.setString(6, "SYSTEM TABLE");
2020-06-17 21:47:08 jdbc[13]: 
/**/prep19.setString(7, "VIEW");
2020-06-17 21:47:08 jdbc[13]: 
/**/prep19.setString(8, "SYSTEM VIEW");
2020-06-17 21:47:08 jdbc[13]: 
/**/prep19.setString(9, "TABLE LINK");
2020-06-17 21:47:08 jdbc[13]: 
/**/prep19.setString(10, "SYNONYM");
2020-06-17 21:47:08 jdbc[13]: 
/**/prep19.setString(11, "EXTERNAL");
2020-06-17 21:47:08 jdbc[13]: 
/**/ResultSet rs24 = prep19.executeQuery();
2020-06-17 21:47:08 jdbc[13]: Plan       : calculate cost for plan [_1]
2020-06-17 21:47:08 jdbc[13]: Plan       :   for table filter _1
2020-06-17 21:47:08 jdbc[13]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@66a14c7b]
2020-06-17 21:47:08 jdbc[13]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@66a14c7b
2020-06-17 21:47:08 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:47:08 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:47:08 jdbc[13]: Plan       :   best plan item cost 4,022 index meta
2020-06-17 21:47:08 jdbc[13]: Plan       : plan cost 4,023
2020-06-17 21:47:08 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@16194a3f]
2020-06-17 21:47:08 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@16194a3f
2020-06-17 21:47:08 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:47:08 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:47:08 jdbc[13]: Plan       :   best plan item cost 3,981.78 index meta
2020-06-17 21:47:08 jdbc[13]: Plan       : plan cost 3,982.78
2020-06-17 21:47:08 jdbc[13]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@66a14c7b]
2020-06-17 21:47:08 jdbc[13]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@66a14c7b
2020-06-17 21:47:08 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:47:08 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:47:08 jdbc[13]: Plan       :   best plan item cost 4,022 index meta
2020-06-17 21:47:08 jdbc[13]: Plan       : plan cost 4,023
2020-06-17 21:47:08 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@16194a3f]
2020-06-17 21:47:08 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@16194a3f
2020-06-17 21:47:08 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:47:08 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:47:08 jdbc[13]: Plan       :   best plan item cost 3,981.78 index meta
2020-06-17 21:47:08 jdbc[13]: Plan       : plan cost 3,982.78
2020-06-17 21:47:08 jdbc[13]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@66a14c7b]
2020-06-17 21:47:08 jdbc[13]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@66a14c7b
2020-06-17 21:47:08 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:47:08 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:47:08 jdbc[13]: Plan       :   best plan item cost 4,022 index meta
2020-06-17 21:47:08 jdbc[13]: Plan       : plan cost 4,023
2020-06-17 21:47:08 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@16194a3f]
2020-06-17 21:47:08 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@16194a3f
2020-06-17 21:47:08 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:47:08 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:47:08 jdbc[13]: Plan       :   best plan item cost 3,981.78 index meta
2020-06-17 21:47:08 jdbc[13]: Plan       : plan cost 3,982.78
2020-06-17 21:47:08 jdbc[13]: Plan       :   best plan item cost 8,005.78 index (SELECT
    SYNONYM_CATALOG AS TABLE_CAT,
    SYNONYM_SCHEMA AS TABLE_SCHEM,
    SYNONYM_NAME AS TABLE_NAME,
    TYPE_NAME AS TABLE_TYPE,
    REMARKS,
    TYPE_NAME AS TYPE_CAT,
    TYPE_NAME AS TYPE_SCHEM,
    TYPE_NAME AS TYPE_NAME,
    TYPE_NAME AS SELF_REFERENCING_COL_NAME,
    TYPE_NAME AS REF_GENERATION,
    NULL AS SQL
FROM INFORMATION_SCHEMA.SYNONYMS
    /* meta */
WHERE (SYNONYM_NAME LIKE ?3 ESCAPE ?4)
    AND ((SYNONYM_CATALOG LIKE ?1 ESCAPE ?4)
    AND (SYNONYM_SCHEMA LIKE ?2 ESCAPE ?4)))
UNION
(SELECT
    TABLE_CATALOG AS TABLE_CAT,
    TABLE_SCHEMA AS TABLE_SCHEM,
    TABLE_NAME,
    TABLE_TYPE,
    REMARKS,
    TYPE_NAME AS TYPE_CAT,
    TYPE_NAME AS TYPE_SCHEM,
    TYPE_NAME,
    TYPE_NAME AS SELF_REFERENCING_COL_NAME,
    TYPE_NAME AS REF_GENERATION,
    SQL
FROM INFORMATION_SCHEMA.TABLES
    /* meta */
WHERE (TABLE_TYPE IN(?5, ?6, ?7, ?8, ?9, ?10, ?11))
    AND ((TABLE_NAME LIKE ?3 ESCAPE ?4)
    AND ((TABLE_CATALOG LIKE ?1 ESCAPE ?4)
    AND (TABLE_SCHEMA LIKE ?2 ESCAPE ?4))))
2020-06-17 21:47:08 jdbc[13]: Plan       : plan cost 8,006.78
2020-06-17 21:47:08 jdbc[13]: 
/*SQL l:1007 #:33 t:2*/SELECT TABLE_CAT, TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_CAT, TYPE_SCHEM, TYPE_NAME, SELF_REFERENCING_COL_NAME, REF_GENERATION, SQL FROM (SELECT SYNONYM_CATALOG TABLE_CAT, SYNONYM_SCHEMA TABLE_SCHEM, SYNONYM_NAME as TABLE_NAME, TYPE_NAME AS TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME AS TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, NULL AS SQL FROM INFORMATION_SCHEMA.SYNONYMS WHERE SYNONYM_CATALOG LIKE ?1 ESCAPE ?4 AND SYNONYM_SCHEMA LIKE ?2 ESCAPE ?4 AND SYNONYM_NAME LIKE ?3 ESCAPE ?4 UNION SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5, ?6, ?7, ?8, ?9, ?10, ?11)) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME {1: '%', 2: 'INFORMATION_SCHEMA', 3: '%', 4: '\\', 5: 'TABLE', 6: 'SYSTEM TABLE', 7: 'VIEW', 8: 'SYSTEM VIEW', 9: 'TABLE LINK', 10: 'SYNONYM', 11: 'EXTERNAL'};
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.getString("TABLE_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.getString("TABLE_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.getString("TABLE_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.getString("TABLE_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.getString("TABLE_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.getString("TABLE_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.getString("TABLE_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.getString("TABLE_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.getString("TABLE_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.getString("TABLE_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.getString("TABLE_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.getString("TABLE_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.getString("TABLE_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.getString("TABLE_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.getString("TABLE_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.getString("TABLE_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.getString("TABLE_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.getString("TABLE_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.getString("TABLE_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.getString("TABLE_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.getString("TABLE_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.getString("TABLE_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.getString("TABLE_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.getString("TABLE_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.getString("TABLE_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.getString("TABLE_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.getString("TABLE_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.getString("TABLE_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.getString("TABLE_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.getString("TABLE_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.getString("TABLE_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.getString("TABLE_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.getString("TABLE_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.getString("TABLE_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.getString("TABLE_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.getString("TABLE_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.getString("TABLE_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.getString("TABLE_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.getString("TABLE_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.getString("TABLE_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.getString("TABLE_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.getString("TABLE_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.getString("TABLE_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.getString("TABLE_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.getString("TABLE_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.getString("TABLE_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.getString("TABLE_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.getString("TABLE_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.getString("TABLE_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.getString("TABLE_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.getString("TABLE_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.getString("TABLE_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.getString("TABLE_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.getString("TABLE_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.getString("TABLE_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.getString("TABLE_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.getString("TABLE_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.getString("TABLE_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.getString("TABLE_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.getString("TABLE_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.getString("TABLE_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.getString("TABLE_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.getString("TABLE_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.getString("TABLE_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.getString("TABLE_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.getString("TABLE_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs24.close();
2020-06-17 21:47:08 jdbc[13]: 
/**/prep19.close();
2020-06-17 21:47:08 jdbc[13]: 
/**/dbMeta4.getConnection();
2020-06-17 21:47:08 jdbc[13]: 
/**/PreparedStatement prep20 = conn10.prepareStatement("SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ?");
2020-06-17 21:47:08 jdbc[13]: Plan       : calculate cost for plan [COLUMNS:-2:org.h2.table.MetaTable@50809781]
2020-06-17 21:47:08 jdbc[13]: Plan       :   for table filter COLUMNS:-2:org.h2.table.MetaTable@50809781
2020-06-17 21:47:08 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:47:08 jdbc[13]: Table      :     potential plan item cost 28 index meta
2020-06-17 21:47:08 jdbc[13]: Plan       :   best plan item cost 27.44 index meta
2020-06-17 21:47:08 jdbc[13]: Plan       : plan cost 28.44
2020-06-17 21:47:08 jdbc[13]: 
/**/prep20.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:47:08 jdbc[13]: 
/**/prep20.setString(2, "CATALOGS");
2020-06-17 21:47:08 jdbc[13]: 
/**/ResultSet rs25 = prep20.executeQuery();
2020-06-17 21:47:08 jdbc[13]: 
/*SQL l:123 #:1*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'CATALOGS'};
2020-06-17 21:47:08 jdbc[13]: 
/**/rs25.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs25.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs25.close();
2020-06-17 21:47:08 jdbc[13]: 
/**/prep20.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:47:08 jdbc[13]: 
/**/prep20.setString(2, "COLLATIONS");
2020-06-17 21:47:08 jdbc[13]: 
/**/ResultSet rs26 = prep20.executeQuery();
2020-06-17 21:47:08 jdbc[13]: 
/*SQL l:123 #:2*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'COLLATIONS'};
2020-06-17 21:47:08 jdbc[13]: 
/**/rs26.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs26.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs26.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs26.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs26.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs26.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs26.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs26.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs26.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs26.close();
2020-06-17 21:47:08 jdbc[13]: 
/**/prep20.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:47:08 jdbc[13]: 
/**/prep20.setString(2, "COLUMNS");
2020-06-17 21:47:08 jdbc[13]: 
/**/ResultSet rs27 = prep20.executeQuery();
2020-06-17 21:47:08 jdbc[13]: 
/*SQL l:123 #:32*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'COLUMNS'};
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs27.close();
2020-06-17 21:47:08 jdbc[13]: 
/**/prep20.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:47:08 jdbc[13]: 
/**/prep20.setString(2, "COLUMN_PRIVILEGES");
2020-06-17 21:47:08 jdbc[13]: 
/**/ResultSet rs28 = prep20.executeQuery();
2020-06-17 21:47:08 jdbc[13]: 
/*SQL l:123 #:8*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'COLUMN_PRIVILEGES'};
2020-06-17 21:47:08 jdbc[13]: 
/**/rs28.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs28.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs28.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs28.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs28.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs28.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs28.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs28.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs28.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs28.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs28.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs28.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs28.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs28.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs28.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs28.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs28.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs28.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs28.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs28.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs28.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs28.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs28.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs28.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs28.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs28.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs28.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs28.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs28.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs28.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs28.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs28.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs28.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs28.close();
2020-06-17 21:47:08 jdbc[13]: 
/**/prep20.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:47:08 jdbc[13]: 
/**/prep20.setString(2, "CONSTANTS");
2020-06-17 21:47:08 jdbc[13]: 
/**/ResultSet rs29 = prep20.executeQuery();
2020-06-17 21:47:08 jdbc[13]: 
/*SQL l:123 #:7*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'CONSTANTS'};
2020-06-17 21:47:08 jdbc[13]: 
/**/rs29.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs29.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs29.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs29.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs29.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs29.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs29.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs29.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs29.close();
2020-06-17 21:47:08 jdbc[13]: 
/**/prep20.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:47:08 jdbc[13]: 
/**/prep20.setString(2, "CONSTRAINTS");
2020-06-17 21:47:08 jdbc[13]: 
/**/ResultSet rs30 = prep20.executeQuery();
2020-06-17 21:47:08 jdbc[13]: 
/*SQL l:123 #:13*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'CONSTRAINTS'};
2020-06-17 21:47:08 jdbc[13]: 
/**/rs30.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs30.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs30.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs30.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs30.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs30.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs30.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs30.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs30.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs30.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs30.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs30.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs30.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs30.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs30.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs30.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs30.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs30.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs30.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs30.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs30.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs30.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs30.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs30.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs30.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs30.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs30.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs30.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs30.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs30.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs30.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs30.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs30.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs30.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs30.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs30.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs30.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs30.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs30.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs30.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs30.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs30.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs30.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs30.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs30.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs30.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs30.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs30.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs30.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs30.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs30.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs30.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs30.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs30.close();
2020-06-17 21:47:08 jdbc[13]: 
/**/prep20.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:47:08 jdbc[13]: 
/**/prep20.setString(2, "CROSS_REFERENCES");
2020-06-17 21:47:08 jdbc[13]: 
/**/ResultSet rs31 = prep20.executeQuery();
2020-06-17 21:47:08 jdbc[13]: 
/*SQL l:123 #:14*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'CROSS_REFERENCES'};
2020-06-17 21:47:08 jdbc[13]: 
/**/rs31.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs31.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs31.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs31.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs31.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs31.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs31.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs31.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs31.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs31.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs31.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs31.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs31.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs31.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs31.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs31.close();
2020-06-17 21:47:08 jdbc[13]: 
/**/prep20.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:47:08 jdbc[13]: 
/**/prep20.setString(2, "DOMAINS");
2020-06-17 21:47:08 jdbc[13]: 
/**/ResultSet rs32 = prep20.executeQuery();
2020-06-17 21:47:08 jdbc[13]: 
/*SQL l:123 #:14*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'DOMAINS'};
2020-06-17 21:47:08 jdbc[13]: 
/**/rs32.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs32.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs32.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs32.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs32.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs32.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs32.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs32.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs32.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs32.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs32.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs32.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs32.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs32.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs32.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs32.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs32.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs32.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs32.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs32.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs32.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs32.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs32.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs32.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs32.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs32.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs32.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs32.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs32.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs32.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs32.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs32.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs32.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs32.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs32.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs32.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs32.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs32.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs32.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs32.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs32.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs32.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs32.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs32.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs32.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs32.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs32.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs32.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs32.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs32.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs32.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs32.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs32.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs32.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs32.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs32.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs32.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs32.close();
2020-06-17 21:47:08 jdbc[13]: 
/**/prep20.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:47:08 jdbc[13]: 
/**/prep20.setString(2, "FUNCTION_ALIASES");
2020-06-17 21:47:08 jdbc[13]: 
/**/ResultSet rs33 = prep20.executeQuery();
2020-06-17 21:47:08 jdbc[13]: 
/*SQL l:123 #:12*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'FUNCTION_ALIASES'};
2020-06-17 21:47:08 jdbc[13]: 
/**/rs33.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs33.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs33.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs33.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs33.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs33.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs33.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs33.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs33.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs33.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs33.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs33.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs33.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs33.close();
2020-06-17 21:47:08 jdbc[13]: 
/**/prep20.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:47:08 jdbc[13]: 
/**/prep20.setString(2, "FUNCTION_COLUMNS");
2020-06-17 21:47:08 jdbc[13]: 
/**/ResultSet rs34 = prep20.executeQuery();
2020-06-17 21:47:08 jdbc[13]: 
/*SQL l:123 #:17 t:6*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'FUNCTION_COLUMNS'};
2020-06-17 21:47:08 jdbc[13]: 
/**/rs34.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs34.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs34.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs34.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs34.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs34.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs34.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs34.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs34.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs34.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs34.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs34.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs34.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs34.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs34.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs34.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs34.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs34.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs34.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs34.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs34.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs34.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs34.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs34.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs34.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs34.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs34.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs34.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs34.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs34.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs34.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs34.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs34.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs34.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs34.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs34.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs34.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs34.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs34.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs34.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs34.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs34.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs34.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs34.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs34.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs34.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs34.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs34.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs34.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs34.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs34.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs34.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs34.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs34.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs34.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs34.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs34.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs34.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs34.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs34.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs34.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs34.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs34.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs34.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs34.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs34.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs34.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs34.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs34.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs34.close();
2020-06-17 21:47:08 jdbc[13]: 
/**/prep20.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:47:08 jdbc[13]: 
/**/prep20.setString(2, "HELP");
2020-06-17 21:47:08 jdbc[13]: 
/**/ResultSet rs35 = prep20.executeQuery();
2020-06-17 21:47:08 jdbc[13]: 
/*SQL l:123 #:5*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'HELP'};
2020-06-17 21:47:08 jdbc[13]: 
/**/rs35.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs35.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs35.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs35.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs35.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs35.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs35.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs35.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs35.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs35.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs35.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs35.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs35.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs35.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs35.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs35.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs35.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs35.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs35.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs35.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs35.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs35.close();
2020-06-17 21:47:08 jdbc[13]: 
/**/prep20.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:47:08 jdbc[13]: 
/**/prep20.setString(2, "INDEXES");
2020-06-17 21:47:08 jdbc[13]: 
/**/ResultSet rs36 = prep20.executeQuery();
2020-06-17 21:47:08 jdbc[13]: 
/*SQL l:123 #:22*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'INDEXES'};
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs36.close();
2020-06-17 21:47:08 jdbc[13]: 
/**/prep20.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:47:08 jdbc[13]: 
/**/prep20.setString(2, "IN_DOUBT");
2020-06-17 21:47:08 jdbc[13]: 
/**/ResultSet rs37 = prep20.executeQuery();
2020-06-17 21:47:08 jdbc[13]: 
/*SQL l:123 #:2*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'IN_DOUBT'};
2020-06-17 21:47:08 jdbc[13]: 
/**/rs37.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs37.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs37.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs37.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs37.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs37.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs37.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs37.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs37.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs37.close();
2020-06-17 21:47:08 jdbc[13]: 
/**/prep20.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:47:08 jdbc[13]: 
/**/prep20.setString(2, "KEY_COLUMN_USAGE");
2020-06-17 21:47:08 jdbc[13]: 
/**/ResultSet rs38 = prep20.executeQuery();
2020-06-17 21:47:08 jdbc[13]: 
/*SQL l:123 #:9*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'KEY_COLUMN_USAGE'};
2020-06-17 21:47:08 jdbc[13]: 
/**/rs38.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs38.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs38.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs38.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs38.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs38.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs38.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs38.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs38.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs38.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs38.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs38.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs38.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs38.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs38.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs38.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs38.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs38.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs38.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs38.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs38.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs38.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs38.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs38.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs38.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs38.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs38.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs38.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs38.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs38.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs38.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs38.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs38.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs38.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs38.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs38.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs38.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs38.close();
2020-06-17 21:47:08 jdbc[13]: 
/**/prep20.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:47:08 jdbc[13]: 
/**/prep20.setString(2, "LOCKS");
2020-06-17 21:47:08 jdbc[13]: 
/**/ResultSet rs39 = prep20.executeQuery();
2020-06-17 21:47:08 jdbc[13]: 
/*SQL l:123 #:4*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'LOCKS'};
2020-06-17 21:47:08 jdbc[13]: 
/**/rs39.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs39.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs39.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs39.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs39.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs39.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs39.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs39.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs39.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs39.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs39.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs39.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs39.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs39.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs39.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs39.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs39.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs39.close();
2020-06-17 21:47:08 jdbc[13]: 
/**/prep20.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:47:08 jdbc[13]: 
/**/prep20.setString(2, "QUERY_STATISTICS");
2020-06-17 21:47:08 jdbc[13]: 
/**/ResultSet rs40 = prep20.executeQuery();
2020-06-17 21:47:08 jdbc[13]: 
/*SQL l:123 #:12*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'QUERY_STATISTICS'};
2020-06-17 21:47:08 jdbc[13]: 
/**/rs40.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs40.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs40.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs40.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs40.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs40.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs40.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs40.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs40.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs40.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs40.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs40.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs40.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs40.close();
2020-06-17 21:47:08 jdbc[13]: 
/**/prep20.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:47:08 jdbc[13]: 
/**/prep20.setString(2, "REFERENTIAL_CONSTRAINTS");
2020-06-17 21:47:08 jdbc[13]: 
/**/ResultSet rs41 = prep20.executeQuery();
2020-06-17 21:47:08 jdbc[13]: 
/*SQL l:123 #:9*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'REFERENTIAL_CONSTRAINTS'};
2020-06-17 21:47:08 jdbc[13]: 
/**/rs41.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs41.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs41.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs41.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs41.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs41.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs41.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs41.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs41.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs41.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs41.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs41.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs41.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs41.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs41.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs41.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs41.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs41.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs41.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs41.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs41.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs41.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs41.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs41.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs41.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs41.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs41.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs41.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs41.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs41.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs41.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs41.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs41.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs41.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs41.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs41.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs41.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs41.close();
2020-06-17 21:47:08 jdbc[13]: 
/**/prep20.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:47:08 jdbc[13]: 
/**/prep20.setString(2, "RIGHTS");
2020-06-17 21:47:08 jdbc[13]: 
/**/ResultSet rs42 = prep20.executeQuery();
2020-06-17 21:47:08 jdbc[13]: 
/*SQL l:123 #:7*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'RIGHTS'};
2020-06-17 21:47:08 jdbc[13]: 
/**/rs42.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs42.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs42.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs42.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs42.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs42.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs42.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs42.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs42.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs42.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs42.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs42.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs42.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs42.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs42.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs42.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs42.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs42.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs42.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs42.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs42.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs42.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs42.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs42.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs42.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs42.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs42.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs42.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs42.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs42.close();
2020-06-17 21:47:08 jdbc[13]: 
/**/prep20.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:47:08 jdbc[13]: 
/**/prep20.setString(2, "ROLES");
2020-06-17 21:47:08 jdbc[13]: 
/**/ResultSet rs43 = prep20.executeQuery();
2020-06-17 21:47:08 jdbc[13]: 
/*SQL l:123 #:3*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'ROLES'};
2020-06-17 21:47:08 jdbc[13]: 
/**/rs43.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs43.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs43.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs43.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs43.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs43.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs43.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs43.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs43.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs43.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs43.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs43.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs43.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs43.close();
2020-06-17 21:47:08 jdbc[13]: 
/**/prep20.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:47:08 jdbc[13]: 
/**/prep20.setString(2, "SCHEMATA");
2020-06-17 21:47:08 jdbc[13]: 
/**/ResultSet rs44 = prep20.executeQuery();
2020-06-17 21:47:08 jdbc[13]: 
/*SQL l:123 #:8*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'SCHEMATA'};
2020-06-17 21:47:08 jdbc[13]: 
/**/rs44.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs44.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs44.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs44.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs44.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs44.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs44.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs44.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs44.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs44.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs44.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs44.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs44.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs44.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs44.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs44.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs44.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs44.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs44.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs44.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs44.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs44.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs44.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs44.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs44.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs44.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs44.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs44.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs44.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs44.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs44.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs44.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs44.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs44.close();
2020-06-17 21:47:08 jdbc[13]: 
/**/prep20.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:47:08 jdbc[13]: 
/**/prep20.setString(2, "SEQUENCES");
2020-06-17 21:47:08 jdbc[13]: 
/**/ResultSet rs45 = prep20.executeQuery();
2020-06-17 21:47:08 jdbc[13]: 
/*SQL l:123 #:12*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'SEQUENCES'};
2020-06-17 21:47:08 jdbc[13]: 
/**/rs45.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs45.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs45.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs45.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs45.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs45.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs45.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs45.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs45.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs45.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs45.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs45.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs45.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs45.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs45.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs45.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs45.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs45.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs45.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs45.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs45.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs45.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs45.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs45.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs45.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs45.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs45.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs45.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs45.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs45.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs45.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs45.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs45.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs45.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs45.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs45.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs45.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs45.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs45.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs45.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs45.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs45.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs45.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs45.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs45.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs45.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs45.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs45.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs45.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs45.close();
2020-06-17 21:47:08 jdbc[13]: 
/**/prep20.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:47:08 jdbc[13]: 
/**/prep20.setString(2, "SESSIONS");
2020-06-17 21:47:08 jdbc[13]: 
/**/ResultSet rs46 = prep20.executeQuery();
2020-06-17 21:47:08 jdbc[13]: 
/*SQL l:123 #:12*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'SESSIONS'};
2020-06-17 21:47:08 jdbc[13]: 
/**/rs46.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs46.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs46.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs46.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs46.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs46.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs46.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs46.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs46.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs46.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs46.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs46.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs46.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs46.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs46.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs46.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs46.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs46.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs46.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs46.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs46.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs46.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs46.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs46.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs46.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs46.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs46.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs46.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs46.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs46.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs46.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs46.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs46.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs46.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs46.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs46.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs46.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs46.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs46.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs46.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs46.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs46.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs46.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs46.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs46.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs46.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs46.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs46.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs46.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs46.close();
2020-06-17 21:47:08 jdbc[13]: 
/**/prep20.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:47:08 jdbc[13]: 
/**/prep20.setString(2, "SESSION_STATE");
2020-06-17 21:47:08 jdbc[13]: 
/**/ResultSet rs47 = prep20.executeQuery();
2020-06-17 21:47:08 jdbc[13]: 
/*SQL l:123 #:2*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'SESSION_STATE'};
2020-06-17 21:47:08 jdbc[13]: 
/**/rs47.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs47.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs47.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs47.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs47.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs47.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs47.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs47.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs47.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs47.close();
2020-06-17 21:47:08 jdbc[13]: 
/**/prep20.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:47:08 jdbc[13]: 
/**/prep20.setString(2, "SETTINGS");
2020-06-17 21:47:08 jdbc[13]: 
/**/ResultSet rs48 = prep20.executeQuery();
2020-06-17 21:47:08 jdbc[13]: 
/*SQL l:123 #:2*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'SETTINGS'};
2020-06-17 21:47:08 jdbc[13]: 
/**/rs48.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs48.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs48.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs48.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs48.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs48.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs48.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs48.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs48.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs48.close();
2020-06-17 21:47:08 jdbc[13]: 
/**/prep20.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:47:08 jdbc[13]: 
/**/prep20.setString(2, "SYNONYMS");
2020-06-17 21:47:08 jdbc[13]: 
/**/ResultSet rs49 = prep20.executeQuery();
2020-06-17 21:47:08 jdbc[13]: 
/*SQL l:123 #:9*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'SYNONYMS'};
2020-06-17 21:47:08 jdbc[13]: 
/**/rs49.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs49.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs49.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs49.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs49.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs49.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs49.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs49.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs49.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs49.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs49.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs49.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs49.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs49.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs49.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs49.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs49.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs49.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs49.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs49.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs49.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs49.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs49.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs49.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs49.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs49.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs49.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs49.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs49.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs49.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs49.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs49.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs49.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs49.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs49.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs49.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs49.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs49.close();
2020-06-17 21:47:08 jdbc[13]: 
/**/prep20.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:47:08 jdbc[13]: 
/**/prep20.setString(2, "TABLES");
2020-06-17 21:47:08 jdbc[13]: 
/**/ResultSet rs50 = prep20.executeQuery();
2020-06-17 21:47:08 jdbc[13]: 
/*SQL l:123 #:12*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'TABLES'};
2020-06-17 21:47:08 jdbc[13]: 
/**/rs50.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs50.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs50.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs50.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs50.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs50.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs50.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs50.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs50.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs50.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs50.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs50.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs50.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs50.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs50.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs50.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs50.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs50.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs50.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs50.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs50.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs50.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs50.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs50.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs50.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs50.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs50.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs50.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs50.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs50.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs50.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs50.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs50.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs50.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs50.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs50.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs50.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs50.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs50.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs50.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs50.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs50.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs50.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs50.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs50.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs50.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs50.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs50.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs50.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs50.close();
2020-06-17 21:47:08 jdbc[13]: 
/**/prep20.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:47:08 jdbc[13]: 
/**/prep20.setString(2, "TABLE_CONSTRAINTS");
2020-06-17 21:47:08 jdbc[13]: 
/**/ResultSet rs51 = prep20.executeQuery();
2020-06-17 21:47:08 jdbc[13]: 
/*SQL l:123 #:9*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'TABLE_CONSTRAINTS'};
2020-06-17 21:47:08 jdbc[13]: 
/**/rs51.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs51.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs51.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs51.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs51.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs51.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs51.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs51.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs51.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs51.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs51.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs51.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs51.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs51.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs51.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs51.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs51.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs51.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs51.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs51.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs51.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs51.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs51.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs51.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs51.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs51.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs51.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs51.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs51.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs51.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs51.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs51.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs51.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs51.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs51.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs51.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs51.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs51.close();
2020-06-17 21:47:08 jdbc[13]: 
/**/prep20.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:47:08 jdbc[13]: 
/**/prep20.setString(2, "TABLE_PRIVILEGES");
2020-06-17 21:47:08 jdbc[13]: 
/**/ResultSet rs52 = prep20.executeQuery();
2020-06-17 21:47:08 jdbc[13]: 
/*SQL l:123 #:7*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'TABLE_PRIVILEGES'};
2020-06-17 21:47:08 jdbc[13]: 
/**/rs52.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs52.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs52.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs52.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs52.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs52.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs52.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs52.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs52.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs52.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs52.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs52.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs52.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs52.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs52.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs52.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs52.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs52.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs52.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs52.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs52.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs52.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs52.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs52.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs52.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs52.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs52.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs52.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs52.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs52.close();
2020-06-17 21:47:08 jdbc[13]: 
/**/prep20.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:47:08 jdbc[13]: 
/**/prep20.setString(2, "TABLE_TYPES");
2020-06-17 21:47:08 jdbc[13]: 
/**/ResultSet rs53 = prep20.executeQuery();
2020-06-17 21:47:08 jdbc[13]: 
/*SQL l:123 #:1*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'TABLE_TYPES'};
2020-06-17 21:47:08 jdbc[13]: 
/**/rs53.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs53.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs53.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs53.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs53.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs53.close();
2020-06-17 21:47:08 jdbc[13]: 
/**/prep20.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:47:08 jdbc[13]: 
/**/prep20.setString(2, "TRIGGERS");
2020-06-17 21:47:08 jdbc[13]: 
/**/ResultSet rs54 = prep20.executeQuery();
2020-06-17 21:47:08 jdbc[13]: 
/*SQL l:123 #:14*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'TRIGGERS'};
2020-06-17 21:47:08 jdbc[13]: 
/**/rs54.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs54.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs54.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs54.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs54.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs54.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs54.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs54.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs54.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs54.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs54.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs54.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs54.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs54.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs54.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs54.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs54.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs54.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs54.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs54.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs54.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs54.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs54.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs54.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs54.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs54.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs54.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs54.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs54.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs54.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs54.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs54.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs54.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs54.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs54.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs54.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs54.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs54.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs54.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs54.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs54.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs54.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs54.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs54.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs54.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs54.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs54.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs54.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs54.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs54.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs54.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs54.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs54.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs54.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs54.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs54.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs54.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs54.close();
2020-06-17 21:47:08 jdbc[13]: 
/**/prep20.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:47:08 jdbc[13]: 
/**/prep20.setString(2, "TYPE_INFO");
2020-06-17 21:47:08 jdbc[13]: 
/**/ResultSet rs55 = prep20.executeQuery();
2020-06-17 21:47:08 jdbc[13]: 
/*SQL l:123 #:14*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'TYPE_INFO'};
2020-06-17 21:47:08 jdbc[13]: 
/**/rs55.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs55.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs55.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs55.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs55.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs55.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs55.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs55.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs55.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs55.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs55.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs55.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs55.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs55.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs55.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs55.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs55.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs55.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs55.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs55.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs55.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs55.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs55.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs55.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs55.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs55.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs55.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs55.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs55.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs55.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs55.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs55.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs55.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs55.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs55.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs55.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs55.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs55.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs55.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs55.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs55.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs55.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs55.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs55.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs55.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs55.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs55.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs55.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs55.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs55.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs55.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs55.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs55.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs55.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs55.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs55.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs55.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs55.close();
2020-06-17 21:47:08 jdbc[13]: 
/**/prep20.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:47:08 jdbc[13]: 
/**/prep20.setString(2, "USERS");
2020-06-17 21:47:08 jdbc[13]: 
/**/ResultSet rs56 = prep20.executeQuery();
2020-06-17 21:47:08 jdbc[13]: 
/*SQL l:123 #:4*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'USERS'};
2020-06-17 21:47:08 jdbc[13]: 
/**/rs56.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs56.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs56.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs56.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs56.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs56.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs56.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs56.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs56.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs56.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs56.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs56.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs56.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs56.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs56.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs56.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs56.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs56.close();
2020-06-17 21:47:08 jdbc[13]: 
/**/prep20.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:47:08 jdbc[13]: 
/**/prep20.setString(2, "VIEWS");
2020-06-17 21:47:08 jdbc[13]: 
/**/ResultSet rs57 = prep20.executeQuery();
2020-06-17 21:47:08 jdbc[13]: 
/*SQL l:123 #:9*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'VIEWS'};
2020-06-17 21:47:08 jdbc[13]: 
/**/rs57.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs57.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs57.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs57.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs57.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs57.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs57.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs57.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs57.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs57.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs57.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs57.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs57.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs57.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs57.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs57.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs57.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs57.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs57.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs57.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs57.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs57.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs57.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs57.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs57.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs57.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs57.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs57.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs57.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs57.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs57.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs57.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs57.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs57.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs57.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs57.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs57.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs57.close();
2020-06-17 21:47:08 jdbc[13]: 
/**/prep20.close();
2020-06-17 21:47:08 jdbc[13]: 
/**/dbMeta4.getProcedures(null, "INFORMATION_SCHEMA", null);
2020-06-17 21:47:08 jdbc[13]: 
/**/PreparedStatement prep21 = conn10.prepareStatement("SELECT ALIAS_CATALOG PROCEDURE_CAT, ALIAS_SCHEMA PROCEDURE_SCHEM, ALIAS_NAME PROCEDURE_NAME, COLUMN_COUNT NUM_INPUT_PARAMS, ZERO() NUM_OUTPUT_PARAMS, ZERO() NUM_RESULT_SETS, REMARKS, RETURNS_RESULT PROCEDURE_TYPE, ALIAS_NAME SPECIFIC_NAME FROM INFORMATION_SCHEMA.FUNCTION_ALIASES WHERE ALIAS_CATALOG LIKE ? ESCAPE ? AND ALIAS_SCHEMA LIKE ? ESCAPE ? AND ALIAS_NAME LIKE ? ESCAPE ? ORDER BY PROCEDURE_SCHEM, PROCEDURE_NAME, NUM_INPUT_PARAMS");
2020-06-17 21:47:08 jdbc[13]: Plan       : calculate cost for plan [FUNCTION_ALIASES:-13:org.h2.table.MetaTable@5a3562be]
2020-06-17 21:47:08 jdbc[13]: Plan       :   for table filter FUNCTION_ALIASES:-13:org.h2.table.MetaTable@5a3562be
2020-06-17 21:47:08 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:47:08 jdbc[13]: Plan       :   best plan item cost 10,000 index meta
2020-06-17 21:47:08 jdbc[13]: Plan       : plan cost 10,001
2020-06-17 21:47:08 jdbc[13]: 
/**/prep21.setString(1, "%");
2020-06-17 21:47:08 jdbc[13]: 
/**/prep21.setString(2, "\\");
2020-06-17 21:47:08 jdbc[13]: 
/**/prep21.setString(3, "INFORMATION_SCHEMA");
2020-06-17 21:47:08 jdbc[13]: 
/**/prep21.setString(4, "\\");
2020-06-17 21:47:08 jdbc[13]: 
/**/prep21.setString(5, "%");
2020-06-17 21:47:08 jdbc[13]: 
/**/prep21.setString(6, "\\");
2020-06-17 21:47:08 jdbc[13]: 
/**/ResultSet rs58 = prep21.executeQuery();
2020-06-17 21:47:08 jdbc[13]: Plan       : calculate cost for plan [FUNCTION_ALIASES:-13:org.h2.table.MetaTable@5a3562be]
2020-06-17 21:47:08 jdbc[13]: Plan       :   for table filter FUNCTION_ALIASES:-13:org.h2.table.MetaTable@5a3562be
2020-06-17 21:47:08 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:47:08 jdbc[13]: Plan       :   best plan item cost 9,800 index meta
2020-06-17 21:47:08 jdbc[13]: Plan       : plan cost 9,801
2020-06-17 21:47:08 jdbc[13]: 
/*SQL l:438*/SELECT ALIAS_CATALOG PROCEDURE_CAT, ALIAS_SCHEMA PROCEDURE_SCHEM, ALIAS_NAME PROCEDURE_NAME, COLUMN_COUNT NUM_INPUT_PARAMS, ZERO() NUM_OUTPUT_PARAMS, ZERO() NUM_RESULT_SETS, REMARKS, RETURNS_RESULT PROCEDURE_TYPE, ALIAS_NAME SPECIFIC_NAME FROM INFORMATION_SCHEMA.FUNCTION_ALIASES WHERE ALIAS_CATALOG LIKE ? ESCAPE ? AND ALIAS_SCHEMA LIKE ? ESCAPE ? AND ALIAS_NAME LIKE ? ESCAPE ? ORDER BY PROCEDURE_SCHEM, PROCEDURE_NAME, NUM_INPUT_PARAMS {1: '%', 2: '\\', 3: 'INFORMATION_SCHEMA', 4: '\\', 5: '%', 6: '\\'};
2020-06-17 21:47:08 jdbc[13]: 
/**/rs58.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs58.close();
2020-06-17 21:47:08 jdbc[13]: 
/**/prep21.close();
2020-06-17 21:47:08 jdbc[13]: 
/**/dbMeta4.getTables(null, "PUBLIC", null, new String[]{"TABLE", "SYSTEM TABLE", "VIEW", "SYSTEM VIEW", "TABLE LINK", "SYNONYM", "EXTERNAL"});
2020-06-17 21:47:08 jdbc[13]: 
/**/PreparedStatement prep22 = conn10.prepareStatement("SELECT TABLE_CAT, TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_CAT, TYPE_SCHEM, TYPE_NAME, SELF_REFERENCING_COL_NAME, REF_GENERATION, SQL FROM (SELECT SYNONYM_CATALOG TABLE_CAT, SYNONYM_SCHEMA TABLE_SCHEM, SYNONYM_NAME as TABLE_NAME, TYPE_NAME AS TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME AS TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, NULL AS SQL FROM INFORMATION_SCHEMA.SYNONYMS WHERE SYNONYM_CATALOG LIKE ?1 ESCAPE ?4 AND SYNONYM_SCHEMA LIKE ?2 ESCAPE ?4 AND SYNONYM_NAME LIKE ?3 ESCAPE ?4 UNION SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5, ?6, ?7, ?8, ?9, ?10, ?11)) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/prep22.setString(1, "%");
2020-06-17 21:47:08 jdbc[13]: 
/**/prep22.setString(2, "PUBLIC");
2020-06-17 21:47:08 jdbc[13]: 
/**/prep22.setString(3, "%");
2020-06-17 21:47:08 jdbc[13]: 
/**/prep22.setString(4, "\\");
2020-06-17 21:47:08 jdbc[13]: 
/**/prep22.setString(5, "TABLE");
2020-06-17 21:47:08 jdbc[13]: 
/**/prep22.setString(6, "SYSTEM TABLE");
2020-06-17 21:47:08 jdbc[13]: 
/**/prep22.setString(7, "VIEW");
2020-06-17 21:47:08 jdbc[13]: 
/**/prep22.setString(8, "SYSTEM VIEW");
2020-06-17 21:47:08 jdbc[13]: 
/**/prep22.setString(9, "TABLE LINK");
2020-06-17 21:47:08 jdbc[13]: 
/**/prep22.setString(10, "SYNONYM");
2020-06-17 21:47:08 jdbc[13]: 
/**/prep22.setString(11, "EXTERNAL");
2020-06-17 21:47:08 jdbc[13]: 
/**/ResultSet rs59 = prep22.executeQuery();
2020-06-17 21:47:08 jdbc[13]: Plan       : calculate cost for plan [_2]
2020-06-17 21:47:08 jdbc[13]: Plan       :   for table filter _2
2020-06-17 21:47:08 jdbc[13]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@66a14c7b]
2020-06-17 21:47:08 jdbc[13]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@66a14c7b
2020-06-17 21:47:08 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:47:08 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:47:08 jdbc[13]: Plan       :   best plan item cost 4,022 index meta
2020-06-17 21:47:08 jdbc[13]: Plan       : plan cost 4,023
2020-06-17 21:47:08 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@16194a3f]
2020-06-17 21:47:08 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@16194a3f
2020-06-17 21:47:08 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:47:08 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:47:08 jdbc[13]: Plan       :   best plan item cost 3,981.78 index meta
2020-06-17 21:47:08 jdbc[13]: Plan       : plan cost 3,982.78
2020-06-17 21:47:08 jdbc[13]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@66a14c7b]
2020-06-17 21:47:08 jdbc[13]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@66a14c7b
2020-06-17 21:47:08 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:47:08 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:47:08 jdbc[13]: Plan       :   best plan item cost 4,022 index meta
2020-06-17 21:47:08 jdbc[13]: Plan       : plan cost 4,023
2020-06-17 21:47:08 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@16194a3f]
2020-06-17 21:47:08 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@16194a3f
2020-06-17 21:47:08 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:47:08 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:47:08 jdbc[13]: Plan       :   best plan item cost 3,981.78 index meta
2020-06-17 21:47:08 jdbc[13]: Plan       : plan cost 3,982.78
2020-06-17 21:47:08 jdbc[13]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@66a14c7b]
2020-06-17 21:47:08 jdbc[13]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@66a14c7b
2020-06-17 21:47:08 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:47:08 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:47:08 jdbc[13]: Plan       :   best plan item cost 4,022 index meta
2020-06-17 21:47:08 jdbc[13]: Plan       : plan cost 4,023
2020-06-17 21:47:08 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@16194a3f]
2020-06-17 21:47:08 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@16194a3f
2020-06-17 21:47:08 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:47:08 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:47:08 jdbc[13]: Plan       :   best plan item cost 3,981.78 index meta
2020-06-17 21:47:08 jdbc[13]: Plan       : plan cost 3,982.78
2020-06-17 21:47:08 jdbc[13]: Plan       :   best plan item cost 8,005.78 index (SELECT
    SYNONYM_CATALOG AS TABLE_CAT,
    SYNONYM_SCHEMA AS TABLE_SCHEM,
    SYNONYM_NAME AS TABLE_NAME,
    TYPE_NAME AS TABLE_TYPE,
    REMARKS,
    TYPE_NAME AS TYPE_CAT,
    TYPE_NAME AS TYPE_SCHEM,
    TYPE_NAME AS TYPE_NAME,
    TYPE_NAME AS SELF_REFERENCING_COL_NAME,
    TYPE_NAME AS REF_GENERATION,
    NULL AS SQL
FROM INFORMATION_SCHEMA.SYNONYMS
    /* meta */
WHERE (SYNONYM_NAME LIKE ?3 ESCAPE ?4)
    AND ((SYNONYM_CATALOG LIKE ?1 ESCAPE ?4)
    AND (SYNONYM_SCHEMA LIKE ?2 ESCAPE ?4)))
UNION
(SELECT
    TABLE_CATALOG AS TABLE_CAT,
    TABLE_SCHEMA AS TABLE_SCHEM,
    TABLE_NAME,
    TABLE_TYPE,
    REMARKS,
    TYPE_NAME AS TYPE_CAT,
    TYPE_NAME AS TYPE_SCHEM,
    TYPE_NAME,
    TYPE_NAME AS SELF_REFERENCING_COL_NAME,
    TYPE_NAME AS REF_GENERATION,
    SQL
FROM INFORMATION_SCHEMA.TABLES
    /* meta */
WHERE (TABLE_TYPE IN(?5, ?6, ?7, ?8, ?9, ?10, ?11))
    AND ((TABLE_NAME LIKE ?3 ESCAPE ?4)
    AND ((TABLE_CATALOG LIKE ?1 ESCAPE ?4)
    AND (TABLE_SCHEMA LIKE ?2 ESCAPE ?4))))
2020-06-17 21:47:08 jdbc[13]: Plan       : plan cost 8,006.78
2020-06-17 21:47:08 jdbc[13]: 
/*SQL l:1007 #:2*/SELECT TABLE_CAT, TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_CAT, TYPE_SCHEM, TYPE_NAME, SELF_REFERENCING_COL_NAME, REF_GENERATION, SQL FROM (SELECT SYNONYM_CATALOG TABLE_CAT, SYNONYM_SCHEMA TABLE_SCHEM, SYNONYM_NAME as TABLE_NAME, TYPE_NAME AS TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME AS TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, NULL AS SQL FROM INFORMATION_SCHEMA.SYNONYMS WHERE SYNONYM_CATALOG LIKE ?1 ESCAPE ?4 AND SYNONYM_SCHEMA LIKE ?2 ESCAPE ?4 AND SYNONYM_NAME LIKE ?3 ESCAPE ?4 UNION SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5, ?6, ?7, ?8, ?9, ?10, ?11)) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME {1: '%', 2: 'PUBLIC', 3: '%', 4: '\\', 5: 'TABLE', 6: 'SYSTEM TABLE', 7: 'VIEW', 8: 'SYSTEM VIEW', 9: 'TABLE LINK', 10: 'SYNONYM', 11: 'EXTERNAL'};
2020-06-17 21:47:08 jdbc[13]: 
/**/rs59.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs59.getString("TABLE_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs59.getString("TABLE_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs59.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs59.getString("TABLE_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs59.getString("TABLE_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs59.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs59.close();
2020-06-17 21:47:08 jdbc[13]: 
/**/prep22.close();
2020-06-17 21:47:08 jdbc[13]: 
/**/dbMeta4.getConnection();
2020-06-17 21:47:08 jdbc[13]: 
/**/PreparedStatement prep23 = conn10.prepareStatement("SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ?");
2020-06-17 21:47:08 jdbc[13]: 
/**/prep23.setString(1, "PUBLIC");
2020-06-17 21:47:08 jdbc[13]: 
/**/prep23.setString(2, "CUSTOMER_TBL");
2020-06-17 21:47:08 jdbc[13]: 
/**/ResultSet rs60 = prep23.executeQuery();
2020-06-17 21:47:08 jdbc[13]: 
/*SQL l:123 #:4*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'PUBLIC', 2: 'CUSTOMER_TBL'};
2020-06-17 21:47:08 jdbc[13]: 
/**/rs60.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs60.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs60.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs60.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs60.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs60.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs60.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs60.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs60.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs60.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs60.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs60.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs60.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs60.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs60.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs60.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs60.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs60.close();
2020-06-17 21:47:08 jdbc[13]: 
/**/prep23.setString(1, "PUBLIC");
2020-06-17 21:47:08 jdbc[13]: 
/**/prep23.setString(2, "LOG_TBL");
2020-06-17 21:47:08 jdbc[13]: 
/**/ResultSet rs61 = prep23.executeQuery();
2020-06-17 21:47:08 jdbc[13]: 
/*SQL l:123 #:9*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'PUBLIC', 2: 'LOG_TBL'};
2020-06-17 21:47:08 jdbc[13]: 
/**/rs61.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs61.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs61.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs61.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs61.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs61.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs61.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs61.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs61.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs61.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs61.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs61.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs61.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs61.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs61.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs61.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs61.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs61.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs61.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs61.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs61.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs61.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs61.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs61.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs61.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs61.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs61.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs61.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs61.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs61.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs61.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs61.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs61.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs61.getString("COLUMN_NAME");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs61.getInt("ORDINAL_POSITION");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs61.getString("COLUMN_TYPE");
2020-06-17 21:47:08 jdbc[13]: 
/**/rs61.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs61.close();
2020-06-17 21:47:08 jdbc[13]: 
/**/prep23.close();
2020-06-17 21:47:08 jdbc[13]: 
/**/dbMeta4.getProcedures(null, "PUBLIC", null);
2020-06-17 21:47:08 jdbc[13]: 
/**/PreparedStatement prep24 = conn10.prepareStatement("SELECT ALIAS_CATALOG PROCEDURE_CAT, ALIAS_SCHEMA PROCEDURE_SCHEM, ALIAS_NAME PROCEDURE_NAME, COLUMN_COUNT NUM_INPUT_PARAMS, ZERO() NUM_OUTPUT_PARAMS, ZERO() NUM_RESULT_SETS, REMARKS, RETURNS_RESULT PROCEDURE_TYPE, ALIAS_NAME SPECIFIC_NAME FROM INFORMATION_SCHEMA.FUNCTION_ALIASES WHERE ALIAS_CATALOG LIKE ? ESCAPE ? AND ALIAS_SCHEMA LIKE ? ESCAPE ? AND ALIAS_NAME LIKE ? ESCAPE ? ORDER BY PROCEDURE_SCHEM, PROCEDURE_NAME, NUM_INPUT_PARAMS");
2020-06-17 21:47:08 jdbc[13]: 
/**/prep24.setString(1, "%");
2020-06-17 21:47:08 jdbc[13]: 
/**/prep24.setString(2, "\\");
2020-06-17 21:47:08 jdbc[13]: 
/**/prep24.setString(3, "PUBLIC");
2020-06-17 21:47:08 jdbc[13]: 
/**/prep24.setString(4, "\\");
2020-06-17 21:47:08 jdbc[13]: 
/**/prep24.setString(5, "%");
2020-06-17 21:47:08 jdbc[13]: 
/**/prep24.setString(6, "\\");
2020-06-17 21:47:08 jdbc[13]: 
/**/ResultSet rs62 = prep24.executeQuery();
2020-06-17 21:47:08 jdbc[13]: Plan       : calculate cost for plan [FUNCTION_ALIASES:-13:org.h2.table.MetaTable@5a3562be]
2020-06-17 21:47:08 jdbc[13]: Plan       :   for table filter FUNCTION_ALIASES:-13:org.h2.table.MetaTable@5a3562be
2020-06-17 21:47:08 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:47:08 jdbc[13]: Plan       :   best plan item cost 9,900 index meta
2020-06-17 21:47:08 jdbc[13]: Plan       : plan cost 9,901
2020-06-17 21:47:08 jdbc[13]: 
/*SQL l:438*/SELECT ALIAS_CATALOG PROCEDURE_CAT, ALIAS_SCHEMA PROCEDURE_SCHEM, ALIAS_NAME PROCEDURE_NAME, COLUMN_COUNT NUM_INPUT_PARAMS, ZERO() NUM_OUTPUT_PARAMS, ZERO() NUM_RESULT_SETS, REMARKS, RETURNS_RESULT PROCEDURE_TYPE, ALIAS_NAME SPECIFIC_NAME FROM INFORMATION_SCHEMA.FUNCTION_ALIASES WHERE ALIAS_CATALOG LIKE ? ESCAPE ? AND ALIAS_SCHEMA LIKE ? ESCAPE ? AND ALIAS_NAME LIKE ? ESCAPE ? ORDER BY PROCEDURE_SCHEM, PROCEDURE_NAME, NUM_INPUT_PARAMS {1: '%', 2: '\\', 3: 'PUBLIC', 4: '\\', 5: '%', 6: '\\'};
2020-06-17 21:47:08 jdbc[13]: 
/**/rs62.next();
2020-06-17 21:47:08 jdbc[13]: 
/**/rs62.close();
2020-06-17 21:47:08 jdbc[13]: 
/**/prep24.close();
2020-06-17 21:47:09 jdbc[13]: 
/**/dbMeta3.getIndexInfo(null, "PUBLIC", "CUSTOMER_TBL", false, true);
2020-06-17 21:47:09 jdbc[13]: 
/**/PreparedStatement prep25 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, NON_UNIQUE, TABLE_CATALOG INDEX_QUALIFIER, INDEX_NAME, INDEX_TYPE TYPE, ORDINAL_POSITION, COLUMN_NAME, ASC_OR_DESC, CARDINALITY, PAGES, FILTER_CONDITION, SORT_TYPE FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND (TRUE) AND TABLE_NAME = ? ORDER BY NON_UNIQUE, TYPE, TABLE_SCHEM, INDEX_NAME, ORDINAL_POSITION");
2020-06-17 21:47:09 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@7df2c5cf]
2020-06-17 21:47:09 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@7df2c5cf
2020-06-17 21:47:09 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:47:09 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-17 21:47:09 jdbc[13]: Plan       :   best plan item cost 324.72 index meta
2020-06-17 21:47:09 jdbc[13]: Plan       : plan cost 325.72
2020-06-17 21:47:09 jdbc[13]: 
/**/prep25.setString(1, "%");
2020-06-17 21:47:09 jdbc[13]: 
/**/prep25.setString(2, "\\");
2020-06-17 21:47:09 jdbc[13]: 
/**/prep25.setString(3, "PUBLIC");
2020-06-17 21:47:09 jdbc[13]: 
/**/prep25.setString(4, "\\");
2020-06-17 21:47:09 jdbc[13]: 
/**/prep25.setString(5, "CUSTOMER_TBL");
2020-06-17 21:47:09 jdbc[13]: 
/**/ResultSet rs63 = prep25.executeQuery();
2020-06-17 21:47:09 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@7df2c5cf]
2020-06-17 21:47:09 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@7df2c5cf
2020-06-17 21:47:09 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:47:09 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-17 21:47:09 jdbc[13]: Plan       :   best plan item cost 321.44 index meta
2020-06-17 21:47:09 jdbc[13]: Plan       : plan cost 322.44
2020-06-17 21:47:09 jdbc[13]: 
/*SQL l:433 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, NON_UNIQUE, TABLE_CATALOG INDEX_QUALIFIER, INDEX_NAME, INDEX_TYPE TYPE, ORDINAL_POSITION, COLUMN_NAME, ASC_OR_DESC, CARDINALITY, PAGES, FILTER_CONDITION, SORT_TYPE FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND (TRUE) AND TABLE_NAME = ? ORDER BY NON_UNIQUE, TYPE, TABLE_SCHEM, INDEX_NAME, ORDINAL_POSITION {1: '%', 2: '\\', 3: 'PUBLIC', 4: '\\', 5: 'CUSTOMER_TBL'};
2020-06-17 21:47:09 jdbc[13]: 
/**/rs63.next();
2020-06-17 21:47:09 jdbc[13]: 
/**/rs63.getString("INDEX_NAME");
2020-06-17 21:47:09 jdbc[13]: 
/**/rs63.getInt("TYPE");
2020-06-17 21:47:09 jdbc[13]: 
/**/rs63.getBoolean("NON_UNIQUE");
2020-06-17 21:47:09 jdbc[13]: 
/**/rs63.getString("COLUMN_NAME");
2020-06-17 21:47:09 jdbc[13]: 
/**/rs63.next();
2020-06-17 21:47:09 jdbc[13]: 
/**/rs63.close();
2020-06-17 21:47:09 jdbc[13]: 
/**/prep25.close();
2020-06-17 21:47:09 jdbc[13]: 
/**/dbMeta3.getIndexInfo(null, "PUBLIC", "LOG_TBL", false, true);
2020-06-17 21:47:09 jdbc[13]: 
/**/PreparedStatement prep26 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, NON_UNIQUE, TABLE_CATALOG INDEX_QUALIFIER, INDEX_NAME, INDEX_TYPE TYPE, ORDINAL_POSITION, COLUMN_NAME, ASC_OR_DESC, CARDINALITY, PAGES, FILTER_CONDITION, SORT_TYPE FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND (TRUE) AND TABLE_NAME = ? ORDER BY NON_UNIQUE, TYPE, TABLE_SCHEM, INDEX_NAME, ORDINAL_POSITION");
2020-06-17 21:47:09 jdbc[13]: 
/**/prep26.setString(1, "%");
2020-06-17 21:47:09 jdbc[13]: 
/**/prep26.setString(2, "\\");
2020-06-17 21:47:09 jdbc[13]: 
/**/prep26.setString(3, "PUBLIC");
2020-06-17 21:47:09 jdbc[13]: 
/**/prep26.setString(4, "\\");
2020-06-17 21:47:09 jdbc[13]: 
/**/prep26.setString(5, "LOG_TBL");
2020-06-17 21:47:09 jdbc[13]: 
/**/ResultSet rs64 = prep26.executeQuery();
2020-06-17 21:47:09 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@7df2c5cf]
2020-06-17 21:47:09 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@7df2c5cf
2020-06-17 21:47:09 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:47:09 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-17 21:47:09 jdbc[13]: Plan       :   best plan item cost 321.44 index meta
2020-06-17 21:47:09 jdbc[13]: Plan       : plan cost 322.44
2020-06-17 21:47:09 jdbc[13]: 
/*SQL l:433 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, NON_UNIQUE, TABLE_CATALOG INDEX_QUALIFIER, INDEX_NAME, INDEX_TYPE TYPE, ORDINAL_POSITION, COLUMN_NAME, ASC_OR_DESC, CARDINALITY, PAGES, FILTER_CONDITION, SORT_TYPE FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND (TRUE) AND TABLE_NAME = ? ORDER BY NON_UNIQUE, TYPE, TABLE_SCHEM, INDEX_NAME, ORDINAL_POSITION {1: '%', 2: '\\', 3: 'PUBLIC', 4: '\\', 5: 'LOG_TBL'};
2020-06-17 21:47:09 jdbc[13]: 
/**/rs64.next();
2020-06-17 21:47:09 jdbc[13]: 
/**/rs64.getString("INDEX_NAME");
2020-06-17 21:47:09 jdbc[13]: 
/**/rs64.getInt("TYPE");
2020-06-17 21:47:09 jdbc[13]: 
/**/rs64.getBoolean("NON_UNIQUE");
2020-06-17 21:47:09 jdbc[13]: 
/**/rs64.getString("COLUMN_NAME");
2020-06-17 21:47:09 jdbc[13]: 
/**/rs64.next();
2020-06-17 21:47:09 jdbc[13]: 
/**/rs64.close();
2020-06-17 21:47:09 jdbc[13]: 
/**/prep26.close();
2020-06-17 21:47:09 jdbc[13]: 
/**/Statement stat3 = conn10.createStatement();
2020-06-17 21:47:09 jdbc[13]: 
/**/ResultSet rs65 = stat3.executeQuery("SELECT * FROM INFORMATION_SCHEMA.SEQUENCES ORDER BY SEQUENCE_NAME");
2020-06-17 21:47:09 jdbc[13]: Plan       : calculate cost for plan [SEQUENCES:-9:org.h2.table.MetaTable@33d62e08]
2020-06-17 21:47:09 jdbc[13]: Plan       :   for table filter SEQUENCES:-9:org.h2.table.MetaTable@33d62e08
2020-06-17 21:47:09 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:47:09 jdbc[13]: Plan       :   best plan item cost 10,000 index meta
2020-06-17 21:47:09 jdbc[13]: Plan       : plan cost 10,001
2020-06-17 21:47:09 jdbc[13]: 
/*SQL #:2*/SELECT * FROM INFORMATION_SCHEMA.SEQUENCES ORDER BY SEQUENCE_NAME;
2020-06-17 21:47:09 jdbc[13]: 
/**/rs65.next();
2020-06-17 21:47:09 jdbc[13]: 
/**/rs65.getString("SEQUENCE_NAME");
2020-06-17 21:47:09 jdbc[13]: 
/**/rs65.getString("CURRENT_VALUE");
2020-06-17 21:47:09 jdbc[13]: 
/**/rs65.getString("INCREMENT");
2020-06-17 21:47:09 jdbc[13]: 
/**/rs65.next();
2020-06-17 21:47:09 jdbc[13]: 
/**/rs65.getString("SEQUENCE_NAME");
2020-06-17 21:47:09 jdbc[13]: 
/**/rs65.getString("CURRENT_VALUE");
2020-06-17 21:47:09 jdbc[13]: 
/**/rs65.getString("INCREMENT");
2020-06-17 21:47:09 jdbc[13]: 
/**/rs65.next();
2020-06-17 21:47:09 jdbc[13]: 
/**/rs65.close();
2020-06-17 21:47:09 jdbc[13]: 
/**/ResultSet rs66 = stat3.executeQuery("SELECT * FROM INFORMATION_SCHEMA.USERS ORDER BY NAME");
2020-06-17 21:47:09 jdbc[13]: Plan       : calculate cost for plan [USERS:-10:org.h2.table.MetaTable@5943403c]
2020-06-17 21:47:09 jdbc[13]: Plan       :   for table filter USERS:-10:org.h2.table.MetaTable@5943403c
2020-06-17 21:47:09 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:47:09 jdbc[13]: Plan       :   best plan item cost 10,000 index meta
2020-06-17 21:47:09 jdbc[13]: Plan       : plan cost 10,001
2020-06-17 21:47:09 jdbc[13]: 
/*SQL #:1*/SELECT * FROM INFORMATION_SCHEMA.USERS ORDER BY NAME;
2020-06-17 21:47:09 jdbc[13]: 
/**/rs66.next();
2020-06-17 21:47:09 jdbc[13]: 
/**/rs66.getString("NAME");
2020-06-17 21:47:09 jdbc[13]: 
/**/rs66.getString("ADMIN");
2020-06-17 21:47:09 jdbc[13]: 
/**/rs66.next();
2020-06-17 21:47:09 jdbc[13]: 
/**/rs66.close();
2020-06-17 21:47:09 jdbc[13]: 
/**/stat3.close();
2020-06-17 21:47:09 jdbc[13]: 
/**/dbMeta3.getDatabaseProductName();
2020-06-17 21:47:09 jdbc[13]: 
/**/dbMeta3.getDatabaseProductVersion();
2020-06-17 21:47:12 jdbc[13]: 
/**/Statement stat4 = conn10.createStatement(1004, 1008);
2020-06-17 21:47:12 jdbc[13]: 
/**/stat4.setMaxRows(1000);
2020-06-17 21:47:12 jdbc[13]: 
/**/stat4.execute("SELECT * FROM LOG_TBL");
2020-06-17 21:47:12 jdbc[13]: Plan       : calculate cost for plan [PUBLIC.LOG_TBL]
2020-06-17 21:47:12 jdbc[13]: Plan       :   for table filter PUBLIC.LOG_TBL
2020-06-17 21:47:12 jdbc[13]: Table      :     potential plan item cost 10,220 index PUBLIC.LOG_TBL.tableScan
2020-06-17 21:47:12 jdbc[13]: Table      :     potential plan item cost 10,230 index PUBLIC.PRIMARY_KEY_3
2020-06-17 21:47:12 jdbc[13]: Plan       :   best plan item cost 10,220 index PUBLIC.LOG_TBL.tableScan
2020-06-17 21:47:12 jdbc[13]: Plan       : plan cost 10,221
2020-06-17 21:47:12 jdbc[13]: 
/*SQL #:2*/SELECT * FROM LOG_TBL;
2020-06-17 21:47:12 jdbc[13]: 
/**/ResultSet rs67 = stat4.getResultSet();
2020-06-17 21:47:12 jdbc[13]: 
/**/ResultSetMetaData rsMeta7 = rs67.getMetaData();
2020-06-17 21:47:12 jdbc[13]: 
/**/conn10.getCatalog();
2020-06-17 21:47:12 jdbc[13]: 
/*SQL #:1*/CALL DATABASE();
2020-06-17 21:47:12 jdbc[13]: 
/**/rsMeta7.getColumnCount();
2020-06-17 21:47:12 jdbc[13]: 
/**/rsMeta7.getColumnLabel(1);
2020-06-17 21:47:12 jdbc[13]: 
/**/rsMeta7.getColumnLabel(2);
2020-06-17 21:47:12 jdbc[13]: 
/**/rsMeta7.getColumnLabel(3);
2020-06-17 21:47:12 jdbc[13]: 
/**/rsMeta7.getColumnLabel(4);
2020-06-17 21:47:12 jdbc[13]: 
/**/rsMeta7.getColumnLabel(5);
2020-06-17 21:47:12 jdbc[13]: 
/**/rsMeta7.getColumnLabel(6);
2020-06-17 21:47:12 jdbc[13]: 
/**/rsMeta7.getColumnLabel(7);
2020-06-17 21:47:12 jdbc[13]: 
/**/rsMeta7.getColumnLabel(8);
2020-06-17 21:47:12 jdbc[13]: 
/**/rsMeta7.getColumnLabel(9);
2020-06-17 21:47:12 jdbc[13]: 
/**/rs67.next();
2020-06-17 21:47:12 jdbc[13]: 
/**/rs67.getString(1);
2020-06-17 21:47:12 jdbc[13]: 
/**/rs67.getString(2);
2020-06-17 21:47:12 jdbc[13]: 
/**/rs67.getString(3);
2020-06-17 21:47:12 jdbc[13]: 
/**/rs67.getString(4);
2020-06-17 21:47:12 jdbc[13]: 
/**/rs67.getString(5);
2020-06-17 21:47:12 jdbc[13]: 
/**/rs67.getString(6);
2020-06-17 21:47:12 jdbc[13]: 
/**/rs67.getString(7);
2020-06-17 21:47:12 jdbc[13]: 
/**/rs67.getString(8);
2020-06-17 21:47:12 jdbc[13]: 
/**/rs67.getString(9);
2020-06-17 21:47:12 jdbc[13]: 
/**/rs67.next();
2020-06-17 21:47:12 jdbc[13]: 
/**/rs67.getString(1);
2020-06-17 21:47:12 jdbc[13]: 
/**/rs67.getString(2);
2020-06-17 21:47:12 jdbc[13]: 
/**/rs67.getString(3);
2020-06-17 21:47:12 jdbc[13]: 
/**/rs67.getString(4);
2020-06-17 21:47:12 jdbc[13]: 
/**/rs67.getString(5);
2020-06-17 21:47:12 jdbc[13]: 
/**/rs67.getString(6);
2020-06-17 21:47:12 jdbc[13]: 
/**/rs67.getString(7);
2020-06-17 21:47:12 jdbc[13]: 
/**/rs67.getString(8);
2020-06-17 21:47:12 jdbc[13]: 
/**/rs67.getString(9);
2020-06-17 21:47:12 jdbc[13]: 
/**/rs67.next();
2020-06-17 21:47:12 jdbc[13]: 
/**/rs67.getConcurrency();
2020-06-17 21:47:12 jdbc[13]: 
/**/DatabaseMetaData dbMeta5 = conn10.getMetaData();
2020-06-17 21:47:12 jdbc[13]: 
/**/dbMeta5.getTables(null, "PUBLIC", "LOG_TBL", new String[]{"TABLE"});
2020-06-17 21:47:12 jdbc[13]: 
/**/PreparedStatement prep27 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME");
2020-06-17 21:47:12 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@16194a3f]
2020-06-17 21:47:12 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@16194a3f
2020-06-17 21:47:12 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:47:12 jdbc[13]: Table      :     potential plan item cost 4,322 index meta
2020-06-17 21:47:12 jdbc[13]: Plan       :   best plan item cost 4,278.78 index meta
2020-06-17 21:47:12 jdbc[13]: Plan       : plan cost 4,279.78
2020-06-17 21:47:12 jdbc[13]: 
/**/prep27.setString(1, "%");
2020-06-17 21:47:12 jdbc[13]: 
/**/prep27.setString(2, "PUBLIC");
2020-06-17 21:47:12 jdbc[13]: 
/**/prep27.setString(3, "LOG_TBL");
2020-06-17 21:47:12 jdbc[13]: 
/**/prep27.setString(4, "\\");
2020-06-17 21:47:12 jdbc[13]: 
/**/prep27.setString(5, "TABLE");
2020-06-17 21:47:12 jdbc[13]: 
/**/ResultSet rs68 = prep27.executeQuery();
2020-06-17 21:47:12 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@16194a3f]
2020-06-17 21:47:12 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@16194a3f
2020-06-17 21:47:12 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:47:12 jdbc[13]: Table      :     potential plan item cost 1,324 index meta
2020-06-17 21:47:12 jdbc[13]: Plan       :   best plan item cost 1,271.04 index meta
2020-06-17 21:47:12 jdbc[13]: Plan       : plan cost 1,272.04
2020-06-17 21:47:12 jdbc[13]: 
/*SQL l:414 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME {1: '%', 2: 'PUBLIC', 3: 'LOG_TBL', 4: '\\', 5: 'TABLE'};
2020-06-17 21:47:12 jdbc[13]: 
/**/rs68.next();
2020-06-17 21:47:12 jdbc[13]: 
/**/rs68.getString("SQL");
2020-06-17 21:47:12 jdbc[13]: 
/**/rs68.getString("TABLE_NAME");
2020-06-17 21:47:12 jdbc[13]: 
/**/dbMeta5.getPrimaryKeys(null, "PUBLIC", "LOG_TBL");
2020-06-17 21:47:12 jdbc[13]: 
/**/PreparedStatement prep28 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME");
2020-06-17 21:47:12 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@7df2c5cf]
2020-06-17 21:47:12 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@7df2c5cf
2020-06-17 21:47:12 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:47:12 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-17 21:47:12 jdbc[13]: Plan       :   best plan item cost 321.44 index meta
2020-06-17 21:47:12 jdbc[13]: Plan       : plan cost 322.44
2020-06-17 21:47:12 jdbc[13]: 
/**/prep28.setString(1, "%");
2020-06-17 21:47:12 jdbc[13]: 
/**/prep28.setString(2, "\\");
2020-06-17 21:47:12 jdbc[13]: 
/**/prep28.setString(3, "PUBLIC");
2020-06-17 21:47:12 jdbc[13]: 
/**/prep28.setString(4, "\\");
2020-06-17 21:47:12 jdbc[13]: 
/**/prep28.setString(5, "LOG_TBL");
2020-06-17 21:47:12 jdbc[13]: 
/**/ResultSet rs69 = prep28.executeQuery();
2020-06-17 21:47:12 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@7df2c5cf]
2020-06-17 21:47:12 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@7df2c5cf
2020-06-17 21:47:12 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:47:12 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-17 21:47:12 jdbc[13]: Plan       :   best plan item cost 318.16 index meta
2020-06-17 21:47:12 jdbc[13]: Plan       : plan cost 319.16
2020-06-17 21:47:12 jdbc[13]: 
/*SQL l:316 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME {1: '%', 2: '\\', 3: 'PUBLIC', 4: '\\', 5: 'LOG_TBL'};
2020-06-17 21:47:12 jdbc[13]: 
/**/rs69.next();
2020-06-17 21:47:12 jdbc[13]: 
/**/rs69.getString("COLUMN_NAME");
2020-06-17 21:47:12 jdbc[13]: 
/**/rs69.next();
2020-06-17 21:47:12 jdbc[13]: 
/**/rs67.getType();
2020-06-17 21:47:12 jdbc[13]: 
/**/rs67.close();
2020-06-17 21:47:12 jdbc[13]: 
/**/stat4.close();
2020-06-17 21:47:23 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-17 21:47:23 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 21:47:23 jdbc[3]: 
/**/conn0.setReadOnly(true);
2020-06-17 21:47:23 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:47:23 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:47:23 jdbc[3]: 
/**/PreparedStatement prep29 = conn0.prepareStatement("select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=?");
2020-06-17 21:47:23 jdbc[3]: Plan       : calculate cost for plan [CUSTOMER0_]
2020-06-17 21:47:23 jdbc[3]: Plan       :   for table filter CUSTOMER0_
2020-06-17 21:47:23 jdbc[3]: Table      :     potential plan item cost 10,250 index PUBLIC.CUSTOMER_TBL.tableScan
2020-06-17 21:47:23 jdbc[3]: Table      :     potential plan item cost 230 index PUBLIC.PRIMARY_KEY_B
2020-06-17 21:47:23 jdbc[3]: Plan       :   best plan item cost 227.7 index PUBLIC.PRIMARY_KEY_B
2020-06-17 21:47:23 jdbc[3]: Plan       : plan cost 228.7
2020-06-17 21:47:23 jdbc[3]: 
/**/prep29.setLong(1, 3L);
2020-06-17 21:47:23 jdbc[3]: 
/**/ResultSet rs70 = prep29.executeQuery();
2020-06-17 21:47:23 jdbc[3]: 
/*SQL l:225 #:1*/select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=? {1: 3};
2020-06-17 21:47:23 jdbc[3]: 
/**/rs70.next();
2020-06-17 21:47:23 jdbc[3]: 
/**/rs70.getString("customer2_0_0_");
2020-06-17 21:47:23 jdbc[3]: 
/**/rs70.wasNull();
2020-06-17 21:47:23 jdbc[3]: 
/**/rs70.getString("customer3_0_0_");
2020-06-17 21:47:23 jdbc[3]: 
/**/rs70.wasNull();
2020-06-17 21:47:23 jdbc[3]: 
/**/rs70.getString("customer4_0_0_");
2020-06-17 21:47:23 jdbc[3]: 
/**/rs70.wasNull();
2020-06-17 21:47:23 jdbc[3]: 
/**/rs70.next();
2020-06-17 21:47:23 jdbc[3]: 
/**/rs70.close();
2020-06-17 21:47:23 jdbc[3]: 
/**/prep29.getMaxRows();
2020-06-17 21:47:23 jdbc[3]: 
/**/prep29.getQueryTimeout();
2020-06-17 21:47:23 jdbc[3]: 
/**/prep29.close();
2020-06-17 21:47:23 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:47:23 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:47:23 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:47:23 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:47:23 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:47:23 jdbc[3]: 
/**/conn0.setReadOnly(false);
2020-06-17 21:47:23 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:47:23 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:47:23 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:47:24 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-17 21:47:24 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 21:47:24 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:47:24 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:47:24 jdbc[3]: 
/**/PreparedStatement prep30 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 21:47:24 jdbc[3]: 
/**/prep30.setString(1, "CustomerMS");
2020-06-17 21:47:24 jdbc[3]: 
/**/prep30.setString(2, "INFO");
2020-06-17 21:47:24 jdbc[3]: 
/**/prep30.setNull(3, 12);
2020-06-17 21:47:24 jdbc[3]: 
/**/prep30.setString(4, "/api/customers/3");
2020-06-17 21:47:24 jdbc[3]: 
/**/prep30.setString(5, "Customer(id=3, firstName=Ramila, lastName=Karki, email=ramila@gmail.com)");
2020-06-17 21:47:24 jdbc[3]: 
/**/prep30.setString(6, "cda1008eb6f59b1a");
2020-06-17 21:47:24 jdbc[3]: 
/**/prep30.setString(7, "2020-06-18T02:47:23.391Z");
2020-06-17 21:47:24 jdbc[3]: 
/**/prep30.setString(8, "cda1008eb6f59b1a");
2020-06-17 21:47:24 jdbc[3]: 
/**/prep30.executeUpdate();
2020-06-17 21:47:24 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 21:47:24 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 21:47:24 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/3', 5: 'Customer(id=3, firstName=Ramila, lastName=Karki, email=ramila@gmail.com)', 6: 'cda1008eb6f59b1a', 7: '2020-06-18T02:47:23.391Z', 8: 'cda1008eb6f59b1a'};
2020-06-17 21:47:24 jdbc[3]: 
/**/ResultSet rs71 = prep30.getGeneratedKeys();
2020-06-17 21:47:24 jdbc[3]: 
/**/rs71.next();
2020-06-17 21:47:24 jdbc[3]: 
/**/ResultSetMetaData rsMeta8 = rs71.getMetaData();
2020-06-17 21:47:24 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:47:24 jdbc[3]: 
/**/rsMeta8.getColumnCount();
2020-06-17 21:47:24 jdbc[3]: 
/**/rs71.getLong(1);
2020-06-17 21:47:24 jdbc[3]: 
/**/rs71.close();
2020-06-17 21:47:24 jdbc[3]: 
/**/prep30.getMaxRows();
2020-06-17 21:47:24 jdbc[3]: 
/**/prep30.getQueryTimeout();
2020-06-17 21:47:24 jdbc[3]: 
/**/prep30.close();
2020-06-17 21:47:24 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:47:24 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 21:47:24 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:47:24 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:47:24 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:47:24 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:47:24 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:47:24 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:47:24 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:47:25 jdbc[13]: 
/**/Statement stat5 = conn10.createStatement(1004, 1008);
2020-06-17 21:47:25 jdbc[13]: 
/**/stat5.setMaxRows(1000);
2020-06-17 21:47:25 jdbc[13]: 
/**/stat5.execute("SELECT * FROM LOG_TBL");
2020-06-17 21:47:25 jdbc[13]: 
/*SQL #:3*/SELECT * FROM LOG_TBL;
2020-06-17 21:47:25 jdbc[13]: 
/**/ResultSet rs72 = stat5.getResultSet();
2020-06-17 21:47:25 jdbc[13]: 
/**/ResultSetMetaData rsMeta9 = rs72.getMetaData();
2020-06-17 21:47:25 jdbc[13]: 
/**/conn10.getCatalog();
2020-06-17 21:47:25 jdbc[13]: 
/**/rsMeta9.getColumnCount();
2020-06-17 21:47:25 jdbc[13]: 
/**/rsMeta9.getColumnLabel(1);
2020-06-17 21:47:25 jdbc[13]: 
/**/rsMeta9.getColumnLabel(2);
2020-06-17 21:47:25 jdbc[13]: 
/**/rsMeta9.getColumnLabel(3);
2020-06-17 21:47:25 jdbc[13]: 
/**/rsMeta9.getColumnLabel(4);
2020-06-17 21:47:25 jdbc[13]: 
/**/rsMeta9.getColumnLabel(5);
2020-06-17 21:47:25 jdbc[13]: 
/**/rsMeta9.getColumnLabel(6);
2020-06-17 21:47:25 jdbc[13]: 
/**/rsMeta9.getColumnLabel(7);
2020-06-17 21:47:25 jdbc[13]: 
/**/rsMeta9.getColumnLabel(8);
2020-06-17 21:47:25 jdbc[13]: 
/**/rsMeta9.getColumnLabel(9);
2020-06-17 21:47:25 jdbc[13]: 
/**/rs72.next();
2020-06-17 21:47:25 jdbc[13]: 
/**/rs72.getString(1);
2020-06-17 21:47:25 jdbc[13]: 
/**/rs72.getString(2);
2020-06-17 21:47:25 jdbc[13]: 
/**/rs72.getString(3);
2020-06-17 21:47:25 jdbc[13]: 
/**/rs72.getString(4);
2020-06-17 21:47:25 jdbc[13]: 
/**/rs72.getString(5);
2020-06-17 21:47:25 jdbc[13]: 
/**/rs72.getString(6);
2020-06-17 21:47:25 jdbc[13]: 
/**/rs72.getString(7);
2020-06-17 21:47:25 jdbc[13]: 
/**/rs72.getString(8);
2020-06-17 21:47:25 jdbc[13]: 
/**/rs72.getString(9);
2020-06-17 21:47:25 jdbc[13]: 
/**/rs72.next();
2020-06-17 21:47:25 jdbc[13]: 
/**/rs72.getString(1);
2020-06-17 21:47:25 jdbc[13]: 
/**/rs72.getString(2);
2020-06-17 21:47:25 jdbc[13]: 
/**/rs72.getString(3);
2020-06-17 21:47:25 jdbc[13]: 
/**/rs72.getString(4);
2020-06-17 21:47:25 jdbc[13]: 
/**/rs72.getString(5);
2020-06-17 21:47:25 jdbc[13]: 
/**/rs72.getString(6);
2020-06-17 21:47:25 jdbc[13]: 
/**/rs72.getString(7);
2020-06-17 21:47:25 jdbc[13]: 
/**/rs72.getString(8);
2020-06-17 21:47:25 jdbc[13]: 
/**/rs72.getString(9);
2020-06-17 21:47:25 jdbc[13]: 
/**/rs72.next();
2020-06-17 21:47:25 jdbc[13]: 
/**/rs72.getString(1);
2020-06-17 21:47:25 jdbc[13]: 
/**/rs72.getString(2);
2020-06-17 21:47:25 jdbc[13]: 
/**/rs72.getString(3);
2020-06-17 21:47:25 jdbc[13]: 
/**/rs72.getString(4);
2020-06-17 21:47:25 jdbc[13]: 
/**/rs72.getString(5);
2020-06-17 21:47:25 jdbc[13]: 
/**/rs72.getString(6);
2020-06-17 21:47:25 jdbc[13]: 
/**/rs72.getString(7);
2020-06-17 21:47:25 jdbc[13]: 
/**/rs72.getString(8);
2020-06-17 21:47:25 jdbc[13]: 
/**/rs72.getString(9);
2020-06-17 21:47:25 jdbc[13]: 
/**/rs72.next();
2020-06-17 21:47:25 jdbc[13]: 
/**/rs72.getConcurrency();
2020-06-17 21:47:25 jdbc[13]: 
/**/DatabaseMetaData dbMeta6 = conn10.getMetaData();
2020-06-17 21:47:25 jdbc[13]: 
/**/dbMeta6.getTables(null, "PUBLIC", "LOG_TBL", new String[]{"TABLE"});
2020-06-17 21:47:25 jdbc[13]: 
/**/PreparedStatement prep31 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME");
2020-06-17 21:47:25 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@16194a3f]
2020-06-17 21:47:25 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@16194a3f
2020-06-17 21:47:25 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:47:25 jdbc[13]: Table      :     potential plan item cost 4,322 index meta
2020-06-17 21:47:25 jdbc[13]: Plan       :   best plan item cost 4,278.78 index meta
2020-06-17 21:47:25 jdbc[13]: Plan       : plan cost 4,279.78
2020-06-17 21:47:25 jdbc[13]: 
/**/prep31.setString(1, "%");
2020-06-17 21:47:25 jdbc[13]: 
/**/prep31.setString(2, "PUBLIC");
2020-06-17 21:47:25 jdbc[13]: 
/**/prep31.setString(3, "LOG_TBL");
2020-06-17 21:47:25 jdbc[13]: 
/**/prep31.setString(4, "\\");
2020-06-17 21:47:25 jdbc[13]: 
/**/prep31.setString(5, "TABLE");
2020-06-17 21:47:25 jdbc[13]: 
/**/ResultSet rs73 = prep31.executeQuery();
2020-06-17 21:47:25 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@16194a3f]
2020-06-17 21:47:25 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@16194a3f
2020-06-17 21:47:25 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:47:25 jdbc[13]: Table      :     potential plan item cost 1,324 index meta
2020-06-17 21:47:25 jdbc[13]: Plan       :   best plan item cost 1,271.04 index meta
2020-06-17 21:47:25 jdbc[13]: Plan       : plan cost 1,272.04
2020-06-17 21:47:25 jdbc[13]: 
/*SQL l:414 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME {1: '%', 2: 'PUBLIC', 3: 'LOG_TBL', 4: '\\', 5: 'TABLE'};
2020-06-17 21:47:25 jdbc[13]: 
/**/rs73.next();
2020-06-17 21:47:25 jdbc[13]: 
/**/rs73.getString("SQL");
2020-06-17 21:47:25 jdbc[13]: 
/**/rs73.getString("TABLE_NAME");
2020-06-17 21:47:25 jdbc[13]: 
/**/dbMeta6.getPrimaryKeys(null, "PUBLIC", "LOG_TBL");
2020-06-17 21:47:25 jdbc[13]: 
/**/PreparedStatement prep32 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME");
2020-06-17 21:47:25 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@7df2c5cf]
2020-06-17 21:47:25 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@7df2c5cf
2020-06-17 21:47:25 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:47:25 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-17 21:47:25 jdbc[13]: Plan       :   best plan item cost 321.44 index meta
2020-06-17 21:47:25 jdbc[13]: Plan       : plan cost 322.44
2020-06-17 21:47:25 jdbc[13]: 
/**/prep32.setString(1, "%");
2020-06-17 21:47:25 jdbc[13]: 
/**/prep32.setString(2, "\\");
2020-06-17 21:47:25 jdbc[13]: 
/**/prep32.setString(3, "PUBLIC");
2020-06-17 21:47:25 jdbc[13]: 
/**/prep32.setString(4, "\\");
2020-06-17 21:47:25 jdbc[13]: 
/**/prep32.setString(5, "LOG_TBL");
2020-06-17 21:47:25 jdbc[13]: 
/**/ResultSet rs74 = prep32.executeQuery();
2020-06-17 21:47:25 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@7df2c5cf]
2020-06-17 21:47:25 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@7df2c5cf
2020-06-17 21:47:25 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:47:25 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-17 21:47:25 jdbc[13]: Plan       :   best plan item cost 318.16 index meta
2020-06-17 21:47:25 jdbc[13]: Plan       : plan cost 319.16
2020-06-17 21:47:25 jdbc[13]: 
/*SQL l:316 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME {1: '%', 2: '\\', 3: 'PUBLIC', 4: '\\', 5: 'LOG_TBL'};
2020-06-17 21:47:25 jdbc[13]: 
/**/rs74.next();
2020-06-17 21:47:25 jdbc[13]: 
/**/rs74.getString("COLUMN_NAME");
2020-06-17 21:47:25 jdbc[13]: 
/**/rs74.next();
2020-06-17 21:47:25 jdbc[13]: 
/**/rs72.getType();
2020-06-17 21:47:25 jdbc[13]: 
/**/rs72.close();
2020-06-17 21:47:25 jdbc[13]: 
/**/stat5.close();
2020-06-17 21:47:33 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-17 21:47:33 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 21:47:33 jdbc[3]: 
/**/conn0.setReadOnly(true);
2020-06-17 21:47:33 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:47:33 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:47:33 jdbc[3]: 
/**/PreparedStatement prep33 = conn0.prepareStatement("select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=?");
2020-06-17 21:47:33 jdbc[3]: 
/**/prep33.setLong(1, 4L);
2020-06-17 21:47:33 jdbc[3]: 
/**/ResultSet rs75 = prep33.executeQuery();
2020-06-17 21:47:33 jdbc[3]: 
/*SQL l:225 #:1*/select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=? {1: 4};
2020-06-17 21:47:33 jdbc[3]: 
/**/rs75.next();
2020-06-17 21:47:33 jdbc[3]: 
/**/rs75.getString("customer2_0_0_");
2020-06-17 21:47:33 jdbc[3]: 
/**/rs75.wasNull();
2020-06-17 21:47:33 jdbc[3]: 
/**/rs75.getString("customer3_0_0_");
2020-06-17 21:47:33 jdbc[3]: 
/**/rs75.wasNull();
2020-06-17 21:47:33 jdbc[3]: 
/**/rs75.getString("customer4_0_0_");
2020-06-17 21:47:33 jdbc[3]: 
/**/rs75.wasNull();
2020-06-17 21:47:33 jdbc[3]: 
/**/rs75.next();
2020-06-17 21:47:33 jdbc[3]: 
/**/rs75.close();
2020-06-17 21:47:33 jdbc[3]: 
/**/prep33.getMaxRows();
2020-06-17 21:47:33 jdbc[3]: 
/**/prep33.getQueryTimeout();
2020-06-17 21:47:33 jdbc[3]: 
/**/prep33.close();
2020-06-17 21:47:33 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:47:33 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:47:33 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:47:33 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:47:33 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:47:33 jdbc[3]: 
/**/conn0.setReadOnly(false);
2020-06-17 21:47:33 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:47:33 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:47:33 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:47:34 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-17 21:47:34 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 21:47:34 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:47:34 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:47:34 jdbc[3]: 
/**/PreparedStatement prep34 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 21:47:34 jdbc[3]: 
/**/prep34.setString(1, "CustomerMS");
2020-06-17 21:47:34 jdbc[3]: 
/**/prep34.setString(2, "INFO");
2020-06-17 21:47:34 jdbc[3]: 
/**/prep34.setNull(3, 12);
2020-06-17 21:47:34 jdbc[3]: 
/**/prep34.setString(4, "/api/customers/4");
2020-06-17 21:47:34 jdbc[3]: 
/**/prep34.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 21:47:34 jdbc[3]: 
/**/prep34.setString(6, "93222afc6f639d33");
2020-06-17 21:47:34 jdbc[3]: 
/**/prep34.setString(7, "2020-06-18T02:47:33.067Z");
2020-06-17 21:47:34 jdbc[3]: 
/**/prep34.setString(8, "93222afc6f639d33");
2020-06-17 21:47:34 jdbc[3]: 
/**/prep34.executeUpdate();
2020-06-17 21:47:34 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 21:47:34 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 21:47:34 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/4', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: '93222afc6f639d33', 7: '2020-06-18T02:47:33.067Z', 8: '93222afc6f639d33'};
2020-06-17 21:47:34 jdbc[3]: 
/**/ResultSet rs76 = prep34.getGeneratedKeys();
2020-06-17 21:47:34 jdbc[3]: 
/**/rs76.next();
2020-06-17 21:47:34 jdbc[3]: 
/**/ResultSetMetaData rsMeta10 = rs76.getMetaData();
2020-06-17 21:47:34 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:47:34 jdbc[3]: 
/**/rsMeta10.getColumnCount();
2020-06-17 21:47:34 jdbc[3]: 
/**/rs76.getLong(1);
2020-06-17 21:47:34 jdbc[3]: 
/**/rs76.close();
2020-06-17 21:47:34 jdbc[3]: 
/**/prep34.getMaxRows();
2020-06-17 21:47:34 jdbc[3]: 
/**/prep34.getQueryTimeout();
2020-06-17 21:47:34 jdbc[3]: 
/**/prep34.close();
2020-06-17 21:47:34 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:47:34 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 21:47:34 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:47:34 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:47:34 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:47:34 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:47:34 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:47:34 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:47:34 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:47:34 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:47:34 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:47:34 jdbc[3]: 
/**/PreparedStatement prep35 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 21:47:34 jdbc[3]: 
/**/prep35.setString(1, "CustomerMS");
2020-06-17 21:47:34 jdbc[3]: 
/**/prep35.setString(2, "INFO");
2020-06-17 21:47:34 jdbc[3]: 
/**/prep35.setNull(3, 12);
2020-06-17 21:47:34 jdbc[3]: 
/**/prep35.setString(4, "/api/customers/4");
2020-06-17 21:47:34 jdbc[3]: 
/**/prep35.setString(5, "Customer(id=4, firstName=David, lastName=Yonge, email=david@gmail.com)");
2020-06-17 21:47:34 jdbc[3]: 
/**/prep35.setString(6, "93222afc6f639d33");
2020-06-17 21:47:34 jdbc[3]: 
/**/prep35.setString(7, "2020-06-18T02:47:33.071Z");
2020-06-17 21:47:34 jdbc[3]: 
/**/prep35.setString(8, "93222afc6f639d33");
2020-06-17 21:47:34 jdbc[3]: 
/**/prep35.executeUpdate();
2020-06-17 21:47:34 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 21:47:34 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 21:47:34 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/4', 5: 'Customer(id=4, firstName=David, lastName=Yonge, email=david@gmail.com)', 6: '93222afc6f639d33', 7: '2020-06-18T02:47:33.071Z', 8: '93222afc6f639d33'};
2020-06-17 21:47:34 jdbc[3]: 
/**/ResultSet rs77 = prep35.getGeneratedKeys();
2020-06-17 21:47:34 jdbc[3]: 
/**/rs77.next();
2020-06-17 21:47:34 jdbc[3]: 
/**/ResultSetMetaData rsMeta11 = rs77.getMetaData();
2020-06-17 21:47:34 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:47:34 jdbc[3]: 
/**/rsMeta11.getColumnCount();
2020-06-17 21:47:34 jdbc[3]: 
/**/rs77.getLong(1);
2020-06-17 21:47:34 jdbc[3]: 
/**/rs77.close();
2020-06-17 21:47:34 jdbc[3]: 
/**/prep35.getMaxRows();
2020-06-17 21:47:34 jdbc[3]: 
/**/prep35.getQueryTimeout();
2020-06-17 21:47:34 jdbc[3]: 
/**/prep35.close();
2020-06-17 21:47:34 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:47:34 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 21:47:34 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:47:34 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:47:34 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:47:34 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:47:34 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:47:34 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:47:34 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:47:36 jdbc[13]: 
/**/Statement stat6 = conn10.createStatement(1004, 1008);
2020-06-17 21:47:36 jdbc[13]: 
/**/stat6.setMaxRows(1000);
2020-06-17 21:47:36 jdbc[13]: 
/**/stat6.execute("SELECT * FROM LOG_TBL");
2020-06-17 21:47:36 jdbc[13]: 
/*SQL #:5*/SELECT * FROM LOG_TBL;
2020-06-17 21:47:36 jdbc[13]: 
/**/ResultSet rs78 = stat6.getResultSet();
2020-06-17 21:47:36 jdbc[13]: 
/**/ResultSetMetaData rsMeta12 = rs78.getMetaData();
2020-06-17 21:47:36 jdbc[13]: 
/**/conn10.getCatalog();
2020-06-17 21:47:36 jdbc[13]: 
/**/rsMeta12.getColumnCount();
2020-06-17 21:47:36 jdbc[13]: 
/**/rsMeta12.getColumnLabel(1);
2020-06-17 21:47:36 jdbc[13]: 
/**/rsMeta12.getColumnLabel(2);
2020-06-17 21:47:36 jdbc[13]: 
/**/rsMeta12.getColumnLabel(3);
2020-06-17 21:47:36 jdbc[13]: 
/**/rsMeta12.getColumnLabel(4);
2020-06-17 21:47:36 jdbc[13]: 
/**/rsMeta12.getColumnLabel(5);
2020-06-17 21:47:36 jdbc[13]: 
/**/rsMeta12.getColumnLabel(6);
2020-06-17 21:47:36 jdbc[13]: 
/**/rsMeta12.getColumnLabel(7);
2020-06-17 21:47:36 jdbc[13]: 
/**/rsMeta12.getColumnLabel(8);
2020-06-17 21:47:36 jdbc[13]: 
/**/rsMeta12.getColumnLabel(9);
2020-06-17 21:47:36 jdbc[13]: 
/**/rs78.next();
2020-06-17 21:47:36 jdbc[13]: 
/**/rs78.getString(1);
2020-06-17 21:47:36 jdbc[13]: 
/**/rs78.getString(2);
2020-06-17 21:47:36 jdbc[13]: 
/**/rs78.getString(3);
2020-06-17 21:47:36 jdbc[13]: 
/**/rs78.getString(4);
2020-06-17 21:47:36 jdbc[13]: 
/**/rs78.getString(5);
2020-06-17 21:47:36 jdbc[13]: 
/**/rs78.getString(6);
2020-06-17 21:47:36 jdbc[13]: 
/**/rs78.getString(7);
2020-06-17 21:47:36 jdbc[13]: 
/**/rs78.getString(8);
2020-06-17 21:47:36 jdbc[13]: 
/**/rs78.getString(9);
2020-06-17 21:47:36 jdbc[13]: 
/**/rs78.next();
2020-06-17 21:47:36 jdbc[13]: 
/**/rs78.getString(1);
2020-06-17 21:47:36 jdbc[13]: 
/**/rs78.getString(2);
2020-06-17 21:47:36 jdbc[13]: 
/**/rs78.getString(3);
2020-06-17 21:47:36 jdbc[13]: 
/**/rs78.getString(4);
2020-06-17 21:47:36 jdbc[13]: 
/**/rs78.getString(5);
2020-06-17 21:47:36 jdbc[13]: 
/**/rs78.getString(6);
2020-06-17 21:47:36 jdbc[13]: 
/**/rs78.getString(7);
2020-06-17 21:47:36 jdbc[13]: 
/**/rs78.getString(8);
2020-06-17 21:47:36 jdbc[13]: 
/**/rs78.getString(9);
2020-06-17 21:47:36 jdbc[13]: 
/**/rs78.next();
2020-06-17 21:47:36 jdbc[13]: 
/**/rs78.getString(1);
2020-06-17 21:47:36 jdbc[13]: 
/**/rs78.getString(2);
2020-06-17 21:47:36 jdbc[13]: 
/**/rs78.getString(3);
2020-06-17 21:47:36 jdbc[13]: 
/**/rs78.getString(4);
2020-06-17 21:47:36 jdbc[13]: 
/**/rs78.getString(5);
2020-06-17 21:47:36 jdbc[13]: 
/**/rs78.getString(6);
2020-06-17 21:47:36 jdbc[13]: 
/**/rs78.getString(7);
2020-06-17 21:47:36 jdbc[13]: 
/**/rs78.getString(8);
2020-06-17 21:47:36 jdbc[13]: 
/**/rs78.getString(9);
2020-06-17 21:47:36 jdbc[13]: 
/**/rs78.next();
2020-06-17 21:47:36 jdbc[13]: 
/**/rs78.getString(1);
2020-06-17 21:47:36 jdbc[13]: 
/**/rs78.getString(2);
2020-06-17 21:47:36 jdbc[13]: 
/**/rs78.getString(3);
2020-06-17 21:47:36 jdbc[13]: 
/**/rs78.getString(4);
2020-06-17 21:47:36 jdbc[13]: 
/**/rs78.getString(5);
2020-06-17 21:47:36 jdbc[13]: 
/**/rs78.getString(6);
2020-06-17 21:47:36 jdbc[13]: 
/**/rs78.getString(7);
2020-06-17 21:47:36 jdbc[13]: 
/**/rs78.getString(8);
2020-06-17 21:47:36 jdbc[13]: 
/**/rs78.getString(9);
2020-06-17 21:47:36 jdbc[13]: 
/**/rs78.next();
2020-06-17 21:47:36 jdbc[13]: 
/**/rs78.getString(1);
2020-06-17 21:47:36 jdbc[13]: 
/**/rs78.getString(2);
2020-06-17 21:47:36 jdbc[13]: 
/**/rs78.getString(3);
2020-06-17 21:47:36 jdbc[13]: 
/**/rs78.getString(4);
2020-06-17 21:47:36 jdbc[13]: 
/**/rs78.getString(5);
2020-06-17 21:47:36 jdbc[13]: 
/**/rs78.getString(6);
2020-06-17 21:47:36 jdbc[13]: 
/**/rs78.getString(7);
2020-06-17 21:47:36 jdbc[13]: 
/**/rs78.getString(8);
2020-06-17 21:47:36 jdbc[13]: 
/**/rs78.getString(9);
2020-06-17 21:47:36 jdbc[13]: 
/**/rs78.next();
2020-06-17 21:47:36 jdbc[13]: 
/**/rs78.getConcurrency();
2020-06-17 21:47:36 jdbc[13]: 
/**/DatabaseMetaData dbMeta7 = conn10.getMetaData();
2020-06-17 21:47:36 jdbc[13]: 
/**/dbMeta7.getTables(null, "PUBLIC", "LOG_TBL", new String[]{"TABLE"});
2020-06-17 21:47:36 jdbc[13]: 
/**/PreparedStatement prep36 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME");
2020-06-17 21:47:36 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@16194a3f]
2020-06-17 21:47:36 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@16194a3f
2020-06-17 21:47:36 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:47:36 jdbc[13]: Table      :     potential plan item cost 4,322 index meta
2020-06-17 21:47:36 jdbc[13]: Plan       :   best plan item cost 4,278.78 index meta
2020-06-17 21:47:36 jdbc[13]: Plan       : plan cost 4,279.78
2020-06-17 21:47:36 jdbc[13]: 
/**/prep36.setString(1, "%");
2020-06-17 21:47:36 jdbc[13]: 
/**/prep36.setString(2, "PUBLIC");
2020-06-17 21:47:36 jdbc[13]: 
/**/prep36.setString(3, "LOG_TBL");
2020-06-17 21:47:36 jdbc[13]: 
/**/prep36.setString(4, "\\");
2020-06-17 21:47:36 jdbc[13]: 
/**/prep36.setString(5, "TABLE");
2020-06-17 21:47:36 jdbc[13]: 
/**/ResultSet rs79 = prep36.executeQuery();
2020-06-17 21:47:36 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@16194a3f]
2020-06-17 21:47:36 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@16194a3f
2020-06-17 21:47:36 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:47:36 jdbc[13]: Table      :     potential plan item cost 1,324 index meta
2020-06-17 21:47:36 jdbc[13]: Plan       :   best plan item cost 1,271.04 index meta
2020-06-17 21:47:36 jdbc[13]: Plan       : plan cost 1,272.04
2020-06-17 21:47:36 jdbc[13]: 
/*SQL l:414 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME {1: '%', 2: 'PUBLIC', 3: 'LOG_TBL', 4: '\\', 5: 'TABLE'};
2020-06-17 21:47:36 jdbc[13]: 
/**/rs79.next();
2020-06-17 21:47:36 jdbc[13]: 
/**/rs79.getString("SQL");
2020-06-17 21:47:36 jdbc[13]: 
/**/rs79.getString("TABLE_NAME");
2020-06-17 21:47:36 jdbc[13]: 
/**/dbMeta7.getPrimaryKeys(null, "PUBLIC", "LOG_TBL");
2020-06-17 21:47:36 jdbc[13]: 
/**/PreparedStatement prep37 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME");
2020-06-17 21:47:36 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@7df2c5cf]
2020-06-17 21:47:36 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@7df2c5cf
2020-06-17 21:47:36 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:47:36 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-17 21:47:36 jdbc[13]: Plan       :   best plan item cost 321.44 index meta
2020-06-17 21:47:36 jdbc[13]: Plan       : plan cost 322.44
2020-06-17 21:47:36 jdbc[13]: 
/**/prep37.setString(1, "%");
2020-06-17 21:47:36 jdbc[13]: 
/**/prep37.setString(2, "\\");
2020-06-17 21:47:36 jdbc[13]: 
/**/prep37.setString(3, "PUBLIC");
2020-06-17 21:47:36 jdbc[13]: 
/**/prep37.setString(4, "\\");
2020-06-17 21:47:36 jdbc[13]: 
/**/prep37.setString(5, "LOG_TBL");
2020-06-17 21:47:36 jdbc[13]: 
/**/ResultSet rs80 = prep37.executeQuery();
2020-06-17 21:47:36 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@7df2c5cf]
2020-06-17 21:47:36 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@7df2c5cf
2020-06-17 21:47:36 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:47:36 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-17 21:47:36 jdbc[13]: Plan       :   best plan item cost 318.16 index meta
2020-06-17 21:47:36 jdbc[13]: Plan       : plan cost 319.16
2020-06-17 21:47:36 jdbc[13]: 
/*SQL l:316 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME {1: '%', 2: '\\', 3: 'PUBLIC', 4: '\\', 5: 'LOG_TBL'};
2020-06-17 21:47:36 jdbc[13]: 
/**/rs80.next();
2020-06-17 21:47:36 jdbc[13]: 
/**/rs80.getString("COLUMN_NAME");
2020-06-17 21:47:36 jdbc[13]: 
/**/rs80.next();
2020-06-17 21:47:36 jdbc[13]: 
/**/rs78.getType();
2020-06-17 21:47:36 jdbc[13]: 
/**/rs78.close();
2020-06-17 21:47:36 jdbc[13]: 
/**/stat6.close();
2020-06-17 21:48:04 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-17 21:48:04 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 21:48:04 jdbc[3]: 
/**/conn0.setReadOnly(true);
2020-06-17 21:48:04 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:48:04 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:48:04 jdbc[3]: 
/**/PreparedStatement prep38 = conn0.prepareStatement("select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=?");
2020-06-17 21:48:04 jdbc[3]: 
/**/prep38.setLong(1, 5L);
2020-06-17 21:48:04 jdbc[3]: 
/**/ResultSet rs81 = prep38.executeQuery();
2020-06-17 21:48:04 jdbc[3]: 
/*SQL l:225 #:1*/select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=? {1: 5};
2020-06-17 21:48:04 jdbc[3]: 
/**/rs81.next();
2020-06-17 21:48:04 jdbc[3]: 
/**/rs81.getString("customer2_0_0_");
2020-06-17 21:48:04 jdbc[3]: 
/**/rs81.wasNull();
2020-06-17 21:48:04 jdbc[3]: 
/**/rs81.getString("customer3_0_0_");
2020-06-17 21:48:04 jdbc[3]: 
/**/rs81.wasNull();
2020-06-17 21:48:04 jdbc[3]: 
/**/rs81.getString("customer4_0_0_");
2020-06-17 21:48:04 jdbc[3]: 
/**/rs81.wasNull();
2020-06-17 21:48:04 jdbc[3]: 
/**/rs81.next();
2020-06-17 21:48:04 jdbc[3]: 
/**/rs81.close();
2020-06-17 21:48:04 jdbc[3]: 
/**/prep38.getMaxRows();
2020-06-17 21:48:04 jdbc[3]: 
/**/prep38.getQueryTimeout();
2020-06-17 21:48:04 jdbc[3]: 
/**/prep38.close();
2020-06-17 21:48:04 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:48:04 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:48:04 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:48:04 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:48:04 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:48:04 jdbc[3]: 
/**/conn0.setReadOnly(false);
2020-06-17 21:48:04 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:48:04 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:48:04 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:48:05 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:48:05 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:48:05 jdbc[3]: 
/**/PreparedStatement prep39 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 21:48:05 jdbc[3]: 
/**/prep39.setString(1, "CustomerMS");
2020-06-17 21:48:05 jdbc[3]: 
/**/prep39.setString(2, "INFO");
2020-06-17 21:48:05 jdbc[3]: 
/**/prep39.setNull(3, 12);
2020-06-17 21:48:05 jdbc[3]: 
/**/prep39.setString(4, "/api/customers/5");
2020-06-17 21:48:05 jdbc[3]: 
/**/prep39.setString(5, "Customer(id=5, firstName=Peter, lastName=Parker, email=peter@gmail.com)");
2020-06-17 21:48:05 jdbc[3]: 
/**/prep39.setString(6, "66f1f3cca2518457");
2020-06-17 21:48:05 jdbc[3]: 
/**/prep39.setString(7, "2020-06-18T02:48:04.745Z");
2020-06-17 21:48:05 jdbc[3]: 
/**/prep39.setString(8, "66f1f3cca2518457");
2020-06-17 21:48:05 jdbc[3]: 
/**/prep39.executeUpdate();
2020-06-17 21:48:05 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 21:48:05 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 21:48:05 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/5', 5: 'Customer(id=5, firstName=Peter, lastName=Parker, email=peter@gmail.com)', 6: '66f1f3cca2518457', 7: '2020-06-18T02:48:04.745Z', 8: '66f1f3cca2518457'};
2020-06-17 21:48:05 jdbc[3]: 
/**/ResultSet rs82 = prep39.getGeneratedKeys();
2020-06-17 21:48:05 jdbc[3]: 
/**/rs82.next();
2020-06-17 21:48:05 jdbc[3]: 
/**/ResultSetMetaData rsMeta13 = rs82.getMetaData();
2020-06-17 21:48:05 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:48:05 jdbc[3]: 
/**/rsMeta13.getColumnCount();
2020-06-17 21:48:05 jdbc[3]: 
/**/rs82.getLong(1);
2020-06-17 21:48:05 jdbc[3]: 
/**/rs82.close();
2020-06-17 21:48:05 jdbc[3]: 
/**/prep39.getMaxRows();
2020-06-17 21:48:05 jdbc[3]: 
/**/prep39.getQueryTimeout();
2020-06-17 21:48:05 jdbc[3]: 
/**/prep39.close();
2020-06-17 21:48:05 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:48:05 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 21:48:05 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:48:05 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:48:05 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:48:05 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:48:05 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:48:05 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:48:05 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:48:07 jdbc[13]: 
/**/Statement stat7 = conn10.createStatement(1004, 1008);
2020-06-17 21:48:07 jdbc[13]: 
/**/stat7.setMaxRows(1000);
2020-06-17 21:48:07 jdbc[13]: 
/**/stat7.execute("SELECT * FROM LOG_TBL");
2020-06-17 21:48:07 jdbc[13]: 
/*SQL #:6*/SELECT * FROM LOG_TBL;
2020-06-17 21:48:07 jdbc[13]: 
/**/ResultSet rs83 = stat7.getResultSet();
2020-06-17 21:48:07 jdbc[13]: 
/**/ResultSetMetaData rsMeta14 = rs83.getMetaData();
2020-06-17 21:48:07 jdbc[13]: 
/**/conn10.getCatalog();
2020-06-17 21:48:07 jdbc[13]: 
/**/rsMeta14.getColumnCount();
2020-06-17 21:48:07 jdbc[13]: 
/**/rsMeta14.getColumnLabel(1);
2020-06-17 21:48:07 jdbc[13]: 
/**/rsMeta14.getColumnLabel(2);
2020-06-17 21:48:07 jdbc[13]: 
/**/rsMeta14.getColumnLabel(3);
2020-06-17 21:48:07 jdbc[13]: 
/**/rsMeta14.getColumnLabel(4);
2020-06-17 21:48:07 jdbc[13]: 
/**/rsMeta14.getColumnLabel(5);
2020-06-17 21:48:07 jdbc[13]: 
/**/rsMeta14.getColumnLabel(6);
2020-06-17 21:48:07 jdbc[13]: 
/**/rsMeta14.getColumnLabel(7);
2020-06-17 21:48:07 jdbc[13]: 
/**/rsMeta14.getColumnLabel(8);
2020-06-17 21:48:07 jdbc[13]: 
/**/rsMeta14.getColumnLabel(9);
2020-06-17 21:48:07 jdbc[13]: 
/**/rs83.next();
2020-06-17 21:48:07 jdbc[13]: 
/**/rs83.getString(1);
2020-06-17 21:48:07 jdbc[13]: 
/**/rs83.getString(2);
2020-06-17 21:48:07 jdbc[13]: 
/**/rs83.getString(3);
2020-06-17 21:48:07 jdbc[13]: 
/**/rs83.getString(4);
2020-06-17 21:48:07 jdbc[13]: 
/**/rs83.getString(5);
2020-06-17 21:48:07 jdbc[13]: 
/**/rs83.getString(6);
2020-06-17 21:48:07 jdbc[13]: 
/**/rs83.getString(7);
2020-06-17 21:48:07 jdbc[13]: 
/**/rs83.getString(8);
2020-06-17 21:48:07 jdbc[13]: 
/**/rs83.getString(9);
2020-06-17 21:48:07 jdbc[13]: 
/**/rs83.next();
2020-06-17 21:48:07 jdbc[13]: 
/**/rs83.getString(1);
2020-06-17 21:48:07 jdbc[13]: 
/**/rs83.getString(2);
2020-06-17 21:48:07 jdbc[13]: 
/**/rs83.getString(3);
2020-06-17 21:48:07 jdbc[13]: 
/**/rs83.getString(4);
2020-06-17 21:48:07 jdbc[13]: 
/**/rs83.getString(5);
2020-06-17 21:48:07 jdbc[13]: 
/**/rs83.getString(6);
2020-06-17 21:48:07 jdbc[13]: 
/**/rs83.getString(7);
2020-06-17 21:48:07 jdbc[13]: 
/**/rs83.getString(8);
2020-06-17 21:48:07 jdbc[13]: 
/**/rs83.getString(9);
2020-06-17 21:48:07 jdbc[13]: 
/**/rs83.next();
2020-06-17 21:48:07 jdbc[13]: 
/**/rs83.getString(1);
2020-06-17 21:48:07 jdbc[13]: 
/**/rs83.getString(2);
2020-06-17 21:48:07 jdbc[13]: 
/**/rs83.getString(3);
2020-06-17 21:48:07 jdbc[13]: 
/**/rs83.getString(4);
2020-06-17 21:48:07 jdbc[13]: 
/**/rs83.getString(5);
2020-06-17 21:48:07 jdbc[13]: 
/**/rs83.getString(6);
2020-06-17 21:48:07 jdbc[13]: 
/**/rs83.getString(7);
2020-06-17 21:48:07 jdbc[13]: 
/**/rs83.getString(8);
2020-06-17 21:48:07 jdbc[13]: 
/**/rs83.getString(9);
2020-06-17 21:48:07 jdbc[13]: 
/**/rs83.next();
2020-06-17 21:48:07 jdbc[13]: 
/**/rs83.getString(1);
2020-06-17 21:48:07 jdbc[13]: 
/**/rs83.getString(2);
2020-06-17 21:48:07 jdbc[13]: 
/**/rs83.getString(3);
2020-06-17 21:48:07 jdbc[13]: 
/**/rs83.getString(4);
2020-06-17 21:48:07 jdbc[13]: 
/**/rs83.getString(5);
2020-06-17 21:48:07 jdbc[13]: 
/**/rs83.getString(6);
2020-06-17 21:48:07 jdbc[13]: 
/**/rs83.getString(7);
2020-06-17 21:48:07 jdbc[13]: 
/**/rs83.getString(8);
2020-06-17 21:48:07 jdbc[13]: 
/**/rs83.getString(9);
2020-06-17 21:48:07 jdbc[13]: 
/**/rs83.next();
2020-06-17 21:48:07 jdbc[13]: 
/**/rs83.getString(1);
2020-06-17 21:48:07 jdbc[13]: 
/**/rs83.getString(2);
2020-06-17 21:48:07 jdbc[13]: 
/**/rs83.getString(3);
2020-06-17 21:48:07 jdbc[13]: 
/**/rs83.getString(4);
2020-06-17 21:48:07 jdbc[13]: 
/**/rs83.getString(5);
2020-06-17 21:48:07 jdbc[13]: 
/**/rs83.getString(6);
2020-06-17 21:48:07 jdbc[13]: 
/**/rs83.getString(7);
2020-06-17 21:48:07 jdbc[13]: 
/**/rs83.getString(8);
2020-06-17 21:48:07 jdbc[13]: 
/**/rs83.getString(9);
2020-06-17 21:48:07 jdbc[13]: 
/**/rs83.next();
2020-06-17 21:48:07 jdbc[13]: 
/**/rs83.getString(1);
2020-06-17 21:48:07 jdbc[13]: 
/**/rs83.getString(2);
2020-06-17 21:48:07 jdbc[13]: 
/**/rs83.getString(3);
2020-06-17 21:48:07 jdbc[13]: 
/**/rs83.getString(4);
2020-06-17 21:48:07 jdbc[13]: 
/**/rs83.getString(5);
2020-06-17 21:48:07 jdbc[13]: 
/**/rs83.getString(6);
2020-06-17 21:48:07 jdbc[13]: 
/**/rs83.getString(7);
2020-06-17 21:48:07 jdbc[13]: 
/**/rs83.getString(8);
2020-06-17 21:48:07 jdbc[13]: 
/**/rs83.getString(9);
2020-06-17 21:48:07 jdbc[13]: 
/**/rs83.next();
2020-06-17 21:48:07 jdbc[13]: 
/**/rs83.getConcurrency();
2020-06-17 21:48:07 jdbc[13]: 
/**/DatabaseMetaData dbMeta8 = conn10.getMetaData();
2020-06-17 21:48:07 jdbc[13]: 
/**/dbMeta8.getTables(null, "PUBLIC", "LOG_TBL", new String[]{"TABLE"});
2020-06-17 21:48:07 jdbc[13]: 
/**/PreparedStatement prep40 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME");
2020-06-17 21:48:07 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@16194a3f]
2020-06-17 21:48:07 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@16194a3f
2020-06-17 21:48:07 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:48:07 jdbc[13]: Table      :     potential plan item cost 4,322 index meta
2020-06-17 21:48:07 jdbc[13]: Plan       :   best plan item cost 4,278.78 index meta
2020-06-17 21:48:07 jdbc[13]: Plan       : plan cost 4,279.78
2020-06-17 21:48:07 jdbc[13]: 
/**/prep40.setString(1, "%");
2020-06-17 21:48:07 jdbc[13]: 
/**/prep40.setString(2, "PUBLIC");
2020-06-17 21:48:07 jdbc[13]: 
/**/prep40.setString(3, "LOG_TBL");
2020-06-17 21:48:07 jdbc[13]: 
/**/prep40.setString(4, "\\");
2020-06-17 21:48:07 jdbc[13]: 
/**/prep40.setString(5, "TABLE");
2020-06-17 21:48:07 jdbc[13]: 
/**/ResultSet rs84 = prep40.executeQuery();
2020-06-17 21:48:07 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@16194a3f]
2020-06-17 21:48:07 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@16194a3f
2020-06-17 21:48:07 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:48:07 jdbc[13]: Table      :     potential plan item cost 1,324 index meta
2020-06-17 21:48:07 jdbc[13]: Plan       :   best plan item cost 1,271.04 index meta
2020-06-17 21:48:07 jdbc[13]: Plan       : plan cost 1,272.04
2020-06-17 21:48:07 jdbc[13]: 
/*SQL l:414 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME {1: '%', 2: 'PUBLIC', 3: 'LOG_TBL', 4: '\\', 5: 'TABLE'};
2020-06-17 21:48:07 jdbc[13]: 
/**/rs84.next();
2020-06-17 21:48:07 jdbc[13]: 
/**/rs84.getString("SQL");
2020-06-17 21:48:07 jdbc[13]: 
/**/rs84.getString("TABLE_NAME");
2020-06-17 21:48:07 jdbc[13]: 
/**/dbMeta8.getPrimaryKeys(null, "PUBLIC", "LOG_TBL");
2020-06-17 21:48:07 jdbc[13]: 
/**/PreparedStatement prep41 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME");
2020-06-17 21:48:07 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@7df2c5cf]
2020-06-17 21:48:07 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@7df2c5cf
2020-06-17 21:48:07 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:48:07 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-17 21:48:07 jdbc[13]: Plan       :   best plan item cost 321.44 index meta
2020-06-17 21:48:07 jdbc[13]: Plan       : plan cost 322.44
2020-06-17 21:48:07 jdbc[13]: 
/**/prep41.setString(1, "%");
2020-06-17 21:48:07 jdbc[13]: 
/**/prep41.setString(2, "\\");
2020-06-17 21:48:07 jdbc[13]: 
/**/prep41.setString(3, "PUBLIC");
2020-06-17 21:48:07 jdbc[13]: 
/**/prep41.setString(4, "\\");
2020-06-17 21:48:07 jdbc[13]: 
/**/prep41.setString(5, "LOG_TBL");
2020-06-17 21:48:07 jdbc[13]: 
/**/ResultSet rs85 = prep41.executeQuery();
2020-06-17 21:48:07 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@7df2c5cf]
2020-06-17 21:48:07 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@7df2c5cf
2020-06-17 21:48:07 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:48:07 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-17 21:48:07 jdbc[13]: Plan       :   best plan item cost 318.16 index meta
2020-06-17 21:48:07 jdbc[13]: Plan       : plan cost 319.16
2020-06-17 21:48:07 jdbc[13]: 
/*SQL l:316 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME {1: '%', 2: '\\', 3: 'PUBLIC', 4: '\\', 5: 'LOG_TBL'};
2020-06-17 21:48:07 jdbc[13]: 
/**/rs85.next();
2020-06-17 21:48:07 jdbc[13]: 
/**/rs85.getString("COLUMN_NAME");
2020-06-17 21:48:07 jdbc[13]: 
/**/rs85.next();
2020-06-17 21:48:07 jdbc[13]: 
/**/rs83.getType();
2020-06-17 21:48:07 jdbc[13]: 
/**/rs83.close();
2020-06-17 21:48:07 jdbc[13]: 
/**/stat7.close();
2020-06-17 21:48:16 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-17 21:48:16 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 21:48:16 jdbc[3]: 
/**/conn0.setReadOnly(true);
2020-06-17 21:48:16 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:48:16 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:48:16 jdbc[3]: 
/**/PreparedStatement prep42 = conn0.prepareStatement("select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=?");
2020-06-17 21:48:16 jdbc[3]: 
/**/prep42.setLong(1, 6L);
2020-06-17 21:48:16 jdbc[3]: 
/**/ResultSet rs86 = prep42.executeQuery();
2020-06-17 21:48:16 jdbc[3]: 
/*SQL l:225*/select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=? {1: 6};
2020-06-17 21:48:16 jdbc[3]: 
/**/rs86.next();
2020-06-17 21:48:16 jdbc[3]: 
/**/rs86.close();
2020-06-17 21:48:16 jdbc[3]: 
/**/prep42.getMaxRows();
2020-06-17 21:48:16 jdbc[3]: 
/**/prep42.getQueryTimeout();
2020-06-17 21:48:16 jdbc[3]: 
/**/prep42.close();
2020-06-17 21:48:16 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:48:16 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:48:16 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:48:16 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:48:16 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:48:16 jdbc[3]: 
/**/conn0.setReadOnly(false);
2020-06-17 21:48:16 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:48:16 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:48:16 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:48:17 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-17 21:48:17 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 21:48:17 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:48:17 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:48:17 jdbc[3]: 
/**/PreparedStatement prep43 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 21:48:17 jdbc[3]: 
/**/prep43.setString(1, "CustomerMS");
2020-06-17 21:48:17 jdbc[3]: 
/**/prep43.setString(2, "INFO");
2020-06-17 21:48:17 jdbc[3]: 
/**/prep43.setNull(3, 12);
2020-06-17 21:48:17 jdbc[3]: 
/**/prep43.setString(4, "/api/customers/6");
2020-06-17 21:48:17 jdbc[3]: 
/**/prep43.setString(5, "Customer(id=null, firstName=null, lastName=null, email=null)");
2020-06-17 21:48:17 jdbc[3]: 
/**/prep43.setString(6, "e4ff784815173d28");
2020-06-17 21:48:17 jdbc[3]: 
/**/prep43.setString(7, "2020-06-18T02:48:16.076Z");
2020-06-17 21:48:17 jdbc[3]: 
/**/prep43.setString(8, "e4ff784815173d28");
2020-06-17 21:48:17 jdbc[3]: 
/**/prep43.executeUpdate();
2020-06-17 21:48:17 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 21:48:17 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 21:48:17 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/6', 5: 'Customer(id=null, firstName=null, lastName=null, email=null)', 6: 'e4ff784815173d28', 7: '2020-06-18T02:48:16.076Z', 8: 'e4ff784815173d28'};
2020-06-17 21:48:17 jdbc[3]: 
/**/ResultSet rs87 = prep43.getGeneratedKeys();
2020-06-17 21:48:17 jdbc[3]: 
/**/rs87.next();
2020-06-17 21:48:17 jdbc[3]: 
/**/ResultSetMetaData rsMeta15 = rs87.getMetaData();
2020-06-17 21:48:17 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:48:17 jdbc[3]: 
/**/rsMeta15.getColumnCount();
2020-06-17 21:48:17 jdbc[3]: 
/**/rs87.getLong(1);
2020-06-17 21:48:17 jdbc[3]: 
/**/rs87.close();
2020-06-17 21:48:17 jdbc[3]: 
/**/prep43.getMaxRows();
2020-06-17 21:48:17 jdbc[3]: 
/**/prep43.getQueryTimeout();
2020-06-17 21:48:17 jdbc[3]: 
/**/prep43.close();
2020-06-17 21:48:17 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:48:17 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 21:48:17 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:48:17 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:48:17 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:48:17 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:48:17 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:48:17 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:48:17 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:48:18 jdbc[13]: 
/**/Statement stat8 = conn10.createStatement(1004, 1008);
2020-06-17 21:48:18 jdbc[13]: 
/**/stat8.setMaxRows(1000);
2020-06-17 21:48:18 jdbc[13]: 
/**/stat8.execute("SELECT * FROM LOG_TBL");
2020-06-17 21:48:18 jdbc[13]: 
/*SQL #:7*/SELECT * FROM LOG_TBL;
2020-06-17 21:48:18 jdbc[13]: 
/**/ResultSet rs88 = stat8.getResultSet();
2020-06-17 21:48:18 jdbc[13]: 
/**/ResultSetMetaData rsMeta16 = rs88.getMetaData();
2020-06-17 21:48:18 jdbc[13]: 
/**/conn10.getCatalog();
2020-06-17 21:48:18 jdbc[13]: 
/**/rsMeta16.getColumnCount();
2020-06-17 21:48:18 jdbc[13]: 
/**/rsMeta16.getColumnLabel(1);
2020-06-17 21:48:18 jdbc[13]: 
/**/rsMeta16.getColumnLabel(2);
2020-06-17 21:48:18 jdbc[13]: 
/**/rsMeta16.getColumnLabel(3);
2020-06-17 21:48:18 jdbc[13]: 
/**/rsMeta16.getColumnLabel(4);
2020-06-17 21:48:18 jdbc[13]: 
/**/rsMeta16.getColumnLabel(5);
2020-06-17 21:48:18 jdbc[13]: 
/**/rsMeta16.getColumnLabel(6);
2020-06-17 21:48:18 jdbc[13]: 
/**/rsMeta16.getColumnLabel(7);
2020-06-17 21:48:18 jdbc[13]: 
/**/rsMeta16.getColumnLabel(8);
2020-06-17 21:48:18 jdbc[13]: 
/**/rsMeta16.getColumnLabel(9);
2020-06-17 21:48:18 jdbc[13]: 
/**/rs88.next();
2020-06-17 21:48:18 jdbc[13]: 
/**/rs88.getString(1);
2020-06-17 21:48:18 jdbc[13]: 
/**/rs88.getString(2);
2020-06-17 21:48:18 jdbc[13]: 
/**/rs88.getString(3);
2020-06-17 21:48:18 jdbc[13]: 
/**/rs88.getString(4);
2020-06-17 21:48:18 jdbc[13]: 
/**/rs88.getString(5);
2020-06-17 21:48:18 jdbc[13]: 
/**/rs88.getString(6);
2020-06-17 21:48:18 jdbc[13]: 
/**/rs88.getString(7);
2020-06-17 21:48:18 jdbc[13]: 
/**/rs88.getString(8);
2020-06-17 21:48:18 jdbc[13]: 
/**/rs88.getString(9);
2020-06-17 21:48:18 jdbc[13]: 
/**/rs88.next();
2020-06-17 21:48:18 jdbc[13]: 
/**/rs88.getString(1);
2020-06-17 21:48:18 jdbc[13]: 
/**/rs88.getString(2);
2020-06-17 21:48:18 jdbc[13]: 
/**/rs88.getString(3);
2020-06-17 21:48:18 jdbc[13]: 
/**/rs88.getString(4);
2020-06-17 21:48:18 jdbc[13]: 
/**/rs88.getString(5);
2020-06-17 21:48:18 jdbc[13]: 
/**/rs88.getString(6);
2020-06-17 21:48:18 jdbc[13]: 
/**/rs88.getString(7);
2020-06-17 21:48:18 jdbc[13]: 
/**/rs88.getString(8);
2020-06-17 21:48:18 jdbc[13]: 
/**/rs88.getString(9);
2020-06-17 21:48:18 jdbc[13]: 
/**/rs88.next();
2020-06-17 21:48:18 jdbc[13]: 
/**/rs88.getString(1);
2020-06-17 21:48:18 jdbc[13]: 
/**/rs88.getString(2);
2020-06-17 21:48:18 jdbc[13]: 
/**/rs88.getString(3);
2020-06-17 21:48:18 jdbc[13]: 
/**/rs88.getString(4);
2020-06-17 21:48:18 jdbc[13]: 
/**/rs88.getString(5);
2020-06-17 21:48:18 jdbc[13]: 
/**/rs88.getString(6);
2020-06-17 21:48:18 jdbc[13]: 
/**/rs88.getString(7);
2020-06-17 21:48:18 jdbc[13]: 
/**/rs88.getString(8);
2020-06-17 21:48:18 jdbc[13]: 
/**/rs88.getString(9);
2020-06-17 21:48:18 jdbc[13]: 
/**/rs88.next();
2020-06-17 21:48:18 jdbc[13]: 
/**/rs88.getString(1);
2020-06-17 21:48:18 jdbc[13]: 
/**/rs88.getString(2);
2020-06-17 21:48:18 jdbc[13]: 
/**/rs88.getString(3);
2020-06-17 21:48:18 jdbc[13]: 
/**/rs88.getString(4);
2020-06-17 21:48:18 jdbc[13]: 
/**/rs88.getString(5);
2020-06-17 21:48:18 jdbc[13]: 
/**/rs88.getString(6);
2020-06-17 21:48:18 jdbc[13]: 
/**/rs88.getString(7);
2020-06-17 21:48:18 jdbc[13]: 
/**/rs88.getString(8);
2020-06-17 21:48:18 jdbc[13]: 
/**/rs88.getString(9);
2020-06-17 21:48:18 jdbc[13]: 
/**/rs88.next();
2020-06-17 21:48:18 jdbc[13]: 
/**/rs88.getString(1);
2020-06-17 21:48:18 jdbc[13]: 
/**/rs88.getString(2);
2020-06-17 21:48:18 jdbc[13]: 
/**/rs88.getString(3);
2020-06-17 21:48:18 jdbc[13]: 
/**/rs88.getString(4);
2020-06-17 21:48:18 jdbc[13]: 
/**/rs88.getString(5);
2020-06-17 21:48:18 jdbc[13]: 
/**/rs88.getString(6);
2020-06-17 21:48:18 jdbc[13]: 
/**/rs88.getString(7);
2020-06-17 21:48:18 jdbc[13]: 
/**/rs88.getString(8);
2020-06-17 21:48:18 jdbc[13]: 
/**/rs88.getString(9);
2020-06-17 21:48:18 jdbc[13]: 
/**/rs88.next();
2020-06-17 21:48:18 jdbc[13]: 
/**/rs88.getString(1);
2020-06-17 21:48:18 jdbc[13]: 
/**/rs88.getString(2);
2020-06-17 21:48:18 jdbc[13]: 
/**/rs88.getString(3);
2020-06-17 21:48:18 jdbc[13]: 
/**/rs88.getString(4);
2020-06-17 21:48:18 jdbc[13]: 
/**/rs88.getString(5);
2020-06-17 21:48:18 jdbc[13]: 
/**/rs88.getString(6);
2020-06-17 21:48:18 jdbc[13]: 
/**/rs88.getString(7);
2020-06-17 21:48:18 jdbc[13]: 
/**/rs88.getString(8);
2020-06-17 21:48:18 jdbc[13]: 
/**/rs88.getString(9);
2020-06-17 21:48:18 jdbc[13]: 
/**/rs88.next();
2020-06-17 21:48:18 jdbc[13]: 
/**/rs88.getString(1);
2020-06-17 21:48:18 jdbc[13]: 
/**/rs88.getString(2);
2020-06-17 21:48:18 jdbc[13]: 
/**/rs88.getString(3);
2020-06-17 21:48:18 jdbc[13]: 
/**/rs88.getString(4);
2020-06-17 21:48:18 jdbc[13]: 
/**/rs88.getString(5);
2020-06-17 21:48:18 jdbc[13]: 
/**/rs88.getString(6);
2020-06-17 21:48:18 jdbc[13]: 
/**/rs88.getString(7);
2020-06-17 21:48:18 jdbc[13]: 
/**/rs88.getString(8);
2020-06-17 21:48:18 jdbc[13]: 
/**/rs88.getString(9);
2020-06-17 21:48:18 jdbc[13]: 
/**/rs88.next();
2020-06-17 21:48:18 jdbc[13]: 
/**/rs88.getConcurrency();
2020-06-17 21:48:18 jdbc[13]: 
/**/DatabaseMetaData dbMeta9 = conn10.getMetaData();
2020-06-17 21:48:18 jdbc[13]: 
/**/dbMeta9.getTables(null, "PUBLIC", "LOG_TBL", new String[]{"TABLE"});
2020-06-17 21:48:18 jdbc[13]: 
/**/PreparedStatement prep44 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME");
2020-06-17 21:48:18 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@16194a3f]
2020-06-17 21:48:18 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@16194a3f
2020-06-17 21:48:18 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:48:18 jdbc[13]: Table      :     potential plan item cost 4,322 index meta
2020-06-17 21:48:18 jdbc[13]: Plan       :   best plan item cost 4,278.78 index meta
2020-06-17 21:48:18 jdbc[13]: Plan       : plan cost 4,279.78
2020-06-17 21:48:18 jdbc[13]: 
/**/prep44.setString(1, "%");
2020-06-17 21:48:18 jdbc[13]: 
/**/prep44.setString(2, "PUBLIC");
2020-06-17 21:48:18 jdbc[13]: 
/**/prep44.setString(3, "LOG_TBL");
2020-06-17 21:48:18 jdbc[13]: 
/**/prep44.setString(4, "\\");
2020-06-17 21:48:18 jdbc[13]: 
/**/prep44.setString(5, "TABLE");
2020-06-17 21:48:18 jdbc[13]: 
/**/ResultSet rs89 = prep44.executeQuery();
2020-06-17 21:48:18 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@16194a3f]
2020-06-17 21:48:18 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@16194a3f
2020-06-17 21:48:18 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:48:18 jdbc[13]: Table      :     potential plan item cost 1,324 index meta
2020-06-17 21:48:18 jdbc[13]: Plan       :   best plan item cost 1,271.04 index meta
2020-06-17 21:48:18 jdbc[13]: Plan       : plan cost 1,272.04
2020-06-17 21:48:18 jdbc[13]: 
/*SQL l:414 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME {1: '%', 2: 'PUBLIC', 3: 'LOG_TBL', 4: '\\', 5: 'TABLE'};
2020-06-17 21:48:18 jdbc[13]: 
/**/rs89.next();
2020-06-17 21:48:18 jdbc[13]: 
/**/rs89.getString("SQL");
2020-06-17 21:48:18 jdbc[13]: 
/**/rs89.getString("TABLE_NAME");
2020-06-17 21:48:18 jdbc[13]: 
/**/dbMeta9.getPrimaryKeys(null, "PUBLIC", "LOG_TBL");
2020-06-17 21:48:18 jdbc[13]: 
/**/PreparedStatement prep45 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME");
2020-06-17 21:48:18 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@7df2c5cf]
2020-06-17 21:48:18 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@7df2c5cf
2020-06-17 21:48:18 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:48:18 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-17 21:48:18 jdbc[13]: Plan       :   best plan item cost 321.44 index meta
2020-06-17 21:48:18 jdbc[13]: Plan       : plan cost 322.44
2020-06-17 21:48:18 jdbc[13]: 
/**/prep45.setString(1, "%");
2020-06-17 21:48:18 jdbc[13]: 
/**/prep45.setString(2, "\\");
2020-06-17 21:48:18 jdbc[13]: 
/**/prep45.setString(3, "PUBLIC");
2020-06-17 21:48:18 jdbc[13]: 
/**/prep45.setString(4, "\\");
2020-06-17 21:48:18 jdbc[13]: 
/**/prep45.setString(5, "LOG_TBL");
2020-06-17 21:48:18 jdbc[13]: 
/**/ResultSet rs90 = prep45.executeQuery();
2020-06-17 21:48:18 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@7df2c5cf]
2020-06-17 21:48:18 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@7df2c5cf
2020-06-17 21:48:18 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:48:18 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-17 21:48:18 jdbc[13]: Plan       :   best plan item cost 318.16 index meta
2020-06-17 21:48:18 jdbc[13]: Plan       : plan cost 319.16
2020-06-17 21:48:18 jdbc[13]: 
/*SQL l:316 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME {1: '%', 2: '\\', 3: 'PUBLIC', 4: '\\', 5: 'LOG_TBL'};
2020-06-17 21:48:18 jdbc[13]: 
/**/rs90.next();
2020-06-17 21:48:18 jdbc[13]: 
/**/rs90.getString("COLUMN_NAME");
2020-06-17 21:48:18 jdbc[13]: 
/**/rs90.next();
2020-06-17 21:48:18 jdbc[13]: 
/**/rs88.getType();
2020-06-17 21:48:18 jdbc[13]: 
/**/rs88.close();
2020-06-17 21:48:18 jdbc[13]: 
/**/stat8.close();
2020-06-17 21:48:30 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-17 21:48:30 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 21:48:30 jdbc[3]: 
/**/conn0.setReadOnly(true);
2020-06-17 21:48:30 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:48:30 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:48:30 jdbc[3]: 
/**/PreparedStatement prep46 = conn0.prepareStatement("select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=?");
2020-06-17 21:48:30 jdbc[3]: 
/**/prep46.setLong(1, 2L);
2020-06-17 21:48:30 jdbc[3]: 
/**/ResultSet rs91 = prep46.executeQuery();
2020-06-17 21:48:30 jdbc[3]: 
/*SQL l:225 #:1*/select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=? {1: 2};
2020-06-17 21:48:30 jdbc[3]: 
/**/rs91.next();
2020-06-17 21:48:30 jdbc[3]: 
/**/rs91.getString("customer2_0_0_");
2020-06-17 21:48:30 jdbc[3]: 
/**/rs91.wasNull();
2020-06-17 21:48:30 jdbc[3]: 
/**/rs91.getString("customer3_0_0_");
2020-06-17 21:48:30 jdbc[3]: 
/**/rs91.wasNull();
2020-06-17 21:48:30 jdbc[3]: 
/**/rs91.getString("customer4_0_0_");
2020-06-17 21:48:30 jdbc[3]: 
/**/rs91.wasNull();
2020-06-17 21:48:30 jdbc[3]: 
/**/rs91.next();
2020-06-17 21:48:30 jdbc[3]: 
/**/rs91.close();
2020-06-17 21:48:30 jdbc[3]: 
/**/prep46.getMaxRows();
2020-06-17 21:48:30 jdbc[3]: 
/**/prep46.getQueryTimeout();
2020-06-17 21:48:30 jdbc[3]: 
/**/prep46.close();
2020-06-17 21:48:30 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:48:30 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:48:30 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:48:30 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:48:30 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:48:30 jdbc[3]: 
/**/conn0.setReadOnly(false);
2020-06-17 21:48:30 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:48:30 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:48:30 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:48:31 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:48:31 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:48:31 jdbc[3]: 
/**/PreparedStatement prep47 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 21:48:31 jdbc[3]: 
/**/prep47.setString(1, "CustomerMS");
2020-06-17 21:48:31 jdbc[3]: 
/**/prep47.setString(2, "INFO");
2020-06-17 21:48:31 jdbc[3]: 
/**/prep47.setNull(3, 12);
2020-06-17 21:48:31 jdbc[3]: 
/**/prep47.setString(4, "/api/customers/2");
2020-06-17 21:48:31 jdbc[3]: 
/**/prep47.setString(5, "Customer(id=3, firstName=Ramila, lastName=Karki, email=ramila@gmail.com)");
2020-06-17 21:48:31 jdbc[3]: 
/**/prep47.setString(6, "543f683d787432fc");
2020-06-17 21:48:31 jdbc[3]: 
/**/prep47.setString(7, "2020-06-18T02:48:30.897Z");
2020-06-17 21:48:31 jdbc[3]: 
/**/prep47.setString(8, "543f683d787432fc");
2020-06-17 21:48:31 jdbc[3]: 
/**/prep47.executeUpdate();
2020-06-17 21:48:31 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 21:48:31 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 21:48:31 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/2', 5: 'Customer(id=3, firstName=Ramila, lastName=Karki, email=ramila@gmail.com)', 6: '543f683d787432fc', 7: '2020-06-18T02:48:30.897Z', 8: '543f683d787432fc'};
2020-06-17 21:48:31 jdbc[3]: 
/**/ResultSet rs92 = prep47.getGeneratedKeys();
2020-06-17 21:48:31 jdbc[3]: 
/**/rs92.next();
2020-06-17 21:48:31 jdbc[3]: 
/**/ResultSetMetaData rsMeta17 = rs92.getMetaData();
2020-06-17 21:48:31 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:48:31 jdbc[3]: 
/**/rsMeta17.getColumnCount();
2020-06-17 21:48:31 jdbc[3]: 
/**/rs92.getLong(1);
2020-06-17 21:48:31 jdbc[3]: 
/**/rs92.close();
2020-06-17 21:48:31 jdbc[3]: 
/**/prep47.getMaxRows();
2020-06-17 21:48:31 jdbc[3]: 
/**/prep47.getQueryTimeout();
2020-06-17 21:48:31 jdbc[3]: 
/**/prep47.close();
2020-06-17 21:48:31 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:48:31 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 21:48:31 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:48:31 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:48:31 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:48:31 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:48:31 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:48:31 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:48:31 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:48:31 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:48:31 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:48:31 jdbc[3]: 
/**/PreparedStatement prep48 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 21:48:31 jdbc[3]: 
/**/prep48.setString(1, "CustomerMS");
2020-06-17 21:48:31 jdbc[3]: 
/**/prep48.setString(2, "INFO");
2020-06-17 21:48:31 jdbc[3]: 
/**/prep48.setNull(3, 12);
2020-06-17 21:48:31 jdbc[3]: 
/**/prep48.setString(4, "/api/customers/2");
2020-06-17 21:48:31 jdbc[3]: 
/**/prep48.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 21:48:31 jdbc[3]: 
/**/prep48.setString(6, "543f683d787432fc");
2020-06-17 21:48:31 jdbc[3]: 
/**/prep48.setString(7, "2020-06-18T02:48:30.901Z");
2020-06-17 21:48:31 jdbc[3]: 
/**/prep48.setString(8, "543f683d787432fc");
2020-06-17 21:48:31 jdbc[3]: 
/**/prep48.executeUpdate();
2020-06-17 21:48:31 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 21:48:31 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 21:48:31 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/2', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: '543f683d787432fc', 7: '2020-06-18T02:48:30.901Z', 8: '543f683d787432fc'};
2020-06-17 21:48:31 jdbc[3]: 
/**/ResultSet rs93 = prep48.getGeneratedKeys();
2020-06-17 21:48:31 jdbc[3]: 
/**/rs93.next();
2020-06-17 21:48:31 jdbc[3]: 
/**/ResultSetMetaData rsMeta18 = rs93.getMetaData();
2020-06-17 21:48:31 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:48:31 jdbc[3]: 
/**/rsMeta18.getColumnCount();
2020-06-17 21:48:31 jdbc[3]: 
/**/rs93.getLong(1);
2020-06-17 21:48:31 jdbc[3]: 
/**/rs93.close();
2020-06-17 21:48:31 jdbc[3]: 
/**/prep48.getMaxRows();
2020-06-17 21:48:31 jdbc[3]: 
/**/prep48.getQueryTimeout();
2020-06-17 21:48:31 jdbc[3]: 
/**/prep48.close();
2020-06-17 21:48:31 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:48:31 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 21:48:31 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:48:31 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:48:31 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:48:31 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:48:31 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:48:31 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:48:31 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:48:32 jdbc[13]: 
/**/Statement stat9 = conn10.createStatement(1004, 1008);
2020-06-17 21:48:32 jdbc[13]: 
/**/stat9.setMaxRows(1000);
2020-06-17 21:48:32 jdbc[13]: 
/**/stat9.execute("SELECT * FROM LOG_TBL");
2020-06-17 21:48:32 jdbc[13]: 
/*SQL #:9*/SELECT * FROM LOG_TBL;
2020-06-17 21:48:32 jdbc[13]: 
/**/ResultSet rs94 = stat9.getResultSet();
2020-06-17 21:48:32 jdbc[13]: 
/**/ResultSetMetaData rsMeta19 = rs94.getMetaData();
2020-06-17 21:48:32 jdbc[13]: 
/**/conn10.getCatalog();
2020-06-17 21:48:32 jdbc[13]: 
/**/rsMeta19.getColumnCount();
2020-06-17 21:48:32 jdbc[13]: 
/**/rsMeta19.getColumnLabel(1);
2020-06-17 21:48:32 jdbc[13]: 
/**/rsMeta19.getColumnLabel(2);
2020-06-17 21:48:32 jdbc[13]: 
/**/rsMeta19.getColumnLabel(3);
2020-06-17 21:48:32 jdbc[13]: 
/**/rsMeta19.getColumnLabel(4);
2020-06-17 21:48:32 jdbc[13]: 
/**/rsMeta19.getColumnLabel(5);
2020-06-17 21:48:32 jdbc[13]: 
/**/rsMeta19.getColumnLabel(6);
2020-06-17 21:48:32 jdbc[13]: 
/**/rsMeta19.getColumnLabel(7);
2020-06-17 21:48:32 jdbc[13]: 
/**/rsMeta19.getColumnLabel(8);
2020-06-17 21:48:32 jdbc[13]: 
/**/rsMeta19.getColumnLabel(9);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.next();
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(1);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(2);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(3);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(4);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(5);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(6);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(7);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(8);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(9);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.next();
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(1);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(2);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(3);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(4);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(5);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(6);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(7);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(8);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(9);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.next();
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(1);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(2);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(3);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(4);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(5);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(6);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(7);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(8);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(9);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.next();
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(1);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(2);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(3);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(4);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(5);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(6);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(7);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(8);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(9);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.next();
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(1);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(2);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(3);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(4);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(5);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(6);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(7);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(8);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(9);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.next();
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(1);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(2);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(3);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(4);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(5);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(6);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(7);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(8);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(9);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.next();
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(1);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(2);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(3);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(4);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(5);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(6);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(7);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(8);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(9);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.next();
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(1);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(2);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(3);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(4);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(5);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(6);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(7);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(8);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(9);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.next();
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(1);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(2);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(3);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(4);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(5);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(6);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(7);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(8);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getString(9);
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.next();
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getConcurrency();
2020-06-17 21:48:32 jdbc[13]: 
/**/DatabaseMetaData dbMeta10 = conn10.getMetaData();
2020-06-17 21:48:32 jdbc[13]: 
/**/dbMeta10.getTables(null, "PUBLIC", "LOG_TBL", new String[]{"TABLE"});
2020-06-17 21:48:32 jdbc[13]: 
/**/PreparedStatement prep49 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME");
2020-06-17 21:48:32 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@16194a3f]
2020-06-17 21:48:32 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@16194a3f
2020-06-17 21:48:32 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:48:32 jdbc[13]: Table      :     potential plan item cost 4,322 index meta
2020-06-17 21:48:32 jdbc[13]: Plan       :   best plan item cost 4,278.78 index meta
2020-06-17 21:48:32 jdbc[13]: Plan       : plan cost 4,279.78
2020-06-17 21:48:32 jdbc[13]: 
/**/prep49.setString(1, "%");
2020-06-17 21:48:32 jdbc[13]: 
/**/prep49.setString(2, "PUBLIC");
2020-06-17 21:48:32 jdbc[13]: 
/**/prep49.setString(3, "LOG_TBL");
2020-06-17 21:48:32 jdbc[13]: 
/**/prep49.setString(4, "\\");
2020-06-17 21:48:32 jdbc[13]: 
/**/prep49.setString(5, "TABLE");
2020-06-17 21:48:32 jdbc[13]: 
/**/ResultSet rs95 = prep49.executeQuery();
2020-06-17 21:48:32 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@16194a3f]
2020-06-17 21:48:32 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@16194a3f
2020-06-17 21:48:32 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:48:32 jdbc[13]: Table      :     potential plan item cost 1,324 index meta
2020-06-17 21:48:32 jdbc[13]: Plan       :   best plan item cost 1,271.04 index meta
2020-06-17 21:48:32 jdbc[13]: Plan       : plan cost 1,272.04
2020-06-17 21:48:32 jdbc[13]: 
/*SQL l:414 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME {1: '%', 2: 'PUBLIC', 3: 'LOG_TBL', 4: '\\', 5: 'TABLE'};
2020-06-17 21:48:32 jdbc[13]: 
/**/rs95.next();
2020-06-17 21:48:32 jdbc[13]: 
/**/rs95.getString("SQL");
2020-06-17 21:48:32 jdbc[13]: 
/**/rs95.getString("TABLE_NAME");
2020-06-17 21:48:32 jdbc[13]: 
/**/dbMeta10.getPrimaryKeys(null, "PUBLIC", "LOG_TBL");
2020-06-17 21:48:32 jdbc[13]: 
/**/PreparedStatement prep50 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME");
2020-06-17 21:48:32 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@7df2c5cf]
2020-06-17 21:48:32 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@7df2c5cf
2020-06-17 21:48:32 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:48:32 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-17 21:48:32 jdbc[13]: Plan       :   best plan item cost 321.44 index meta
2020-06-17 21:48:32 jdbc[13]: Plan       : plan cost 322.44
2020-06-17 21:48:32 jdbc[13]: 
/**/prep50.setString(1, "%");
2020-06-17 21:48:32 jdbc[13]: 
/**/prep50.setString(2, "\\");
2020-06-17 21:48:32 jdbc[13]: 
/**/prep50.setString(3, "PUBLIC");
2020-06-17 21:48:32 jdbc[13]: 
/**/prep50.setString(4, "\\");
2020-06-17 21:48:32 jdbc[13]: 
/**/prep50.setString(5, "LOG_TBL");
2020-06-17 21:48:32 jdbc[13]: 
/**/ResultSet rs96 = prep50.executeQuery();
2020-06-17 21:48:32 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@7df2c5cf]
2020-06-17 21:48:32 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@7df2c5cf
2020-06-17 21:48:32 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:48:32 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-17 21:48:32 jdbc[13]: Plan       :   best plan item cost 318.16 index meta
2020-06-17 21:48:32 jdbc[13]: Plan       : plan cost 319.16
2020-06-17 21:48:32 jdbc[13]: 
/*SQL l:316 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME {1: '%', 2: '\\', 3: 'PUBLIC', 4: '\\', 5: 'LOG_TBL'};
2020-06-17 21:48:32 jdbc[13]: 
/**/rs96.next();
2020-06-17 21:48:32 jdbc[13]: 
/**/rs96.getString("COLUMN_NAME");
2020-06-17 21:48:32 jdbc[13]: 
/**/rs96.next();
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.getType();
2020-06-17 21:48:32 jdbc[13]: 
/**/rs94.close();
2020-06-17 21:48:32 jdbc[13]: 
/**/stat9.close();
2020-06-17 21:49:32 jdbc[13]: 
/**/conn10.close();
2020-06-17 21:49:32 lock: 13 shared read lock unlock SYS 
2020-06-17 21:49:32 database: disconnecting session #13
2020-06-17 21:49:32 database: disconnected session #13
2020-06-17 21:49:32 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-17 21:49:32 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 21:49:32 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:49:32 jdbc[3]: 
/**/Statement stat10 = conn0.createStatement();
2020-06-17 21:49:32 jdbc[3]: 
/**/stat10.execute("drop table if exists customer_tbl CASCADE ");
2020-06-17 21:49:32 lock: 3 exclusive write lock requesting for CUSTOMER_TBL 
2020-06-17 21:49:32 lock: 3 exclusive write lock added for CUSTOMER_TBL 
2020-06-17 21:49:32 lock: 3 exclusive write lock requesting for SYS 
2020-06-17 21:49:32 lock: 3 exclusive write lock added for SYS 
2020-06-17 21:49:32 jdbc[3]: 
/*SQL t:2*/drop table if exists customer_tbl CASCADE;
2020-06-17 21:49:32 lock: 3 exclusive write lock unlock SYS 
2020-06-17 21:49:32 jdbc[3]: 
/**/stat10.getWarnings();
2020-06-17 21:49:32 jdbc[3]: 
/**/stat10.execute("drop table if exists log_tbl CASCADE ");
2020-06-17 21:49:32 lock: 3 exclusive write lock requesting for LOG_TBL 
2020-06-17 21:49:32 lock: 3 exclusive write lock added for LOG_TBL 
2020-06-17 21:49:32 lock: 3 exclusive write lock requesting for SYS 
2020-06-17 21:49:32 lock: 3 exclusive write lock added for SYS 
2020-06-17 21:49:32 jdbc[3]: 
/*SQL */drop table if exists log_tbl CASCADE;
2020-06-17 21:49:32 lock: 3 exclusive write lock unlock SYS 
2020-06-17 21:49:32 jdbc[3]: 
/**/stat10.getWarnings();
2020-06-17 21:49:32 jdbc[3]: 
/**/stat10.close();
2020-06-17 21:49:32 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:49:32 database: closing /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb from shutdown hook
2020-06-17 21:49:32 lock: 3 shared read lock unlock SYS 
2020-06-17 21:49:32 database: disconnecting session #3
2020-06-17 21:49:32 database: disconnected session #3
2020-06-17 21:49:32 lock: 4 shared read lock unlock SYS 
2020-06-17 21:49:32 database: disconnecting session #4
2020-06-17 21:49:32 database: disconnected session #4
2020-06-17 21:49:32 lock: 5 shared read lock unlock SYS 
2020-06-17 21:49:32 database: disconnecting session #5
2020-06-17 21:49:32 database: disconnected session #5
2020-06-17 21:49:32 lock: 6 shared read lock unlock SYS 
2020-06-17 21:49:32 database: disconnecting session #6
2020-06-17 21:49:32 database: disconnected session #6
2020-06-17 21:49:32 lock: 7 shared read lock unlock SYS 
2020-06-17 21:49:32 database: disconnecting session #7
2020-06-17 21:49:32 database: disconnected session #7
2020-06-17 21:49:32 lock: 8 shared read lock unlock SYS 
2020-06-17 21:49:32 database: disconnecting session #8
2020-06-17 21:49:32 database: disconnected session #8
2020-06-17 21:49:32 lock: 9 shared read lock unlock SYS 
2020-06-17 21:49:32 database: disconnecting session #9
2020-06-17 21:49:32 database: disconnected session #9
2020-06-17 21:49:32 lock: 10 shared read lock unlock SYS 
2020-06-17 21:49:32 database: disconnecting session #10
2020-06-17 21:49:32 database: disconnected session #10
2020-06-17 21:49:32 lock: 11 shared read lock unlock SYS 
2020-06-17 21:49:32 database: disconnecting session #11
2020-06-17 21:49:32 database: disconnected session #11
2020-06-17 21:49:32 lock: 12 shared read lock unlock SYS 
2020-06-17 21:49:32 database: disconnecting session #12
2020-06-17 21:49:32 database: disconnected session #12
2020-06-17 21:49:32 jdbc[3]: 
/**/conn0.close();
2020-06-17 21:49:32 jdbc[4]: 
/**/conn1.close();
2020-06-17 21:49:32 jdbc[5]: 
/**/conn2.close();
2020-06-17 21:49:32 jdbc[6]: 
/**/conn3.close();
2020-06-17 21:49:32 jdbc[7]: 
/**/conn4.close();
2020-06-17 21:49:32 jdbc[8]: 
/**/conn5.close();
2020-06-17 21:49:32 jdbc[9]: 
/**/conn6.close();
2020-06-17 21:49:32 jdbc[10]: 
/**/conn7.close();
2020-06-17 21:49:32 jdbc[11]: 
/**/conn8.close();
2020-06-17 21:49:32 jdbc[12]: 
/**/conn9.close();
2020-06-17 21:49:32 database: closing /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:49:32 lock: 1 shared read lock unlock SYS 
2020-06-17 21:49:32 lock: 2 shared read lock unlock SYS 
2020-06-17 21:49:32 database: closed
2020-06-17 21:50:01 database: opening /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb (build 200)
2020-06-17 21:50:01 lock: 1 exclusive write lock requesting for SYS 
2020-06-17 21:50:01 lock: 1 exclusive write lock added for SYS 
2020-06-17 21:50:01 lock: 1 exclusive write lock unlock SYS 
2020-06-17 21:50:01 lock: 1 exclusive write lock requesting for SYS 
2020-06-17 21:50:01 lock: 1 exclusive write lock added for SYS 
2020-06-17 21:50:01 lock: 1 exclusive write lock unlock SYS 
2020-06-17 21:50:01 lock: 1 exclusive write lock requesting for SYS 
2020-06-17 21:50:01 lock: 1 exclusive write lock added for SYS 
2020-06-17 21:50:01 lock: 1 exclusive write lock unlock SYS 
2020-06-17 21:50:01 database: opened /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:50:01 database: connecting session #3 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:50:01 jdbc[3]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:50:01 jdbc[3]: 
/**/Connection conn0 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 21:50:01 jdbc[3]: 
/**/conn0.isReadOnly();
2020-06-17 21:50:01 jdbc[3]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 21:50:01 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:50:01 jdbc[3]: 
/**/conn0.isValid(1);
2020-06-17 21:50:01 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 21:50:01 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 21:50:01 jdbc[3]: 
/**/DatabaseMetaData dbMeta0 = conn0.getMetaData();
2020-06-17 21:50:01 jdbc[3]: 
/**/dbMeta0.getURL();
2020-06-17 21:50:01 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:50:01 database: connecting session #4 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:50:01 jdbc[4]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:50:01 jdbc[4]: 
/**/Connection conn1 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 21:50:01 jdbc[4]: 
/**/conn1.isReadOnly();
2020-06-17 21:50:01 jdbc[4]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 21:50:01 jdbc[4]: 
/**/conn1.getAutoCommit();
2020-06-17 21:50:01 database: connecting session #5 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:50:01 jdbc[5]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:50:01 jdbc[5]: 
/**/Connection conn2 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 21:50:01 jdbc[5]: 
/**/conn2.isReadOnly();
2020-06-17 21:50:01 jdbc[5]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 21:50:01 jdbc[5]: 
/**/conn2.getAutoCommit();
2020-06-17 21:50:01 database: connecting session #6 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:50:01 jdbc[6]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:50:01 jdbc[6]: 
/**/Connection conn3 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 21:50:01 jdbc[6]: 
/**/conn3.isReadOnly();
2020-06-17 21:50:01 jdbc[6]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 21:50:01 jdbc[6]: 
/**/conn3.getAutoCommit();
2020-06-17 21:50:01 database: connecting session #7 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:50:01 jdbc[7]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:50:01 jdbc[7]: 
/**/Connection conn4 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 21:50:01 jdbc[7]: 
/**/conn4.isReadOnly();
2020-06-17 21:50:01 jdbc[7]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 21:50:01 jdbc[7]: 
/**/conn4.getAutoCommit();
2020-06-17 21:50:01 database: connecting session #8 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:50:01 jdbc[8]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:50:01 jdbc[8]: 
/**/Connection conn5 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 21:50:01 jdbc[8]: 
/**/conn5.isReadOnly();
2020-06-17 21:50:01 jdbc[8]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 21:50:01 jdbc[8]: 
/**/conn5.getAutoCommit();
2020-06-17 21:50:01 database: connecting session #9 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:50:01 jdbc[9]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:50:01 jdbc[9]: 
/**/Connection conn6 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 21:50:01 jdbc[9]: 
/**/conn6.isReadOnly();
2020-06-17 21:50:01 jdbc[9]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 21:50:01 jdbc[9]: 
/**/conn6.getAutoCommit();
2020-06-17 21:50:01 database: connecting session #10 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:50:01 jdbc[10]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:50:01 jdbc[10]: 
/**/Connection conn7 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 21:50:01 jdbc[10]: 
/**/conn7.isReadOnly();
2020-06-17 21:50:01 jdbc[10]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 21:50:01 jdbc[10]: 
/**/conn7.getAutoCommit();
2020-06-17 21:50:01 database: connecting session #11 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:50:01 jdbc[11]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:50:01 jdbc[11]: 
/**/Connection conn8 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 21:50:01 jdbc[11]: 
/**/conn8.isReadOnly();
2020-06-17 21:50:01 jdbc[11]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 21:50:01 jdbc[11]: 
/**/conn8.getAutoCommit();
2020-06-17 21:50:01 database: connecting session #12 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:50:01 jdbc[12]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:50:01 jdbc[12]: 
/**/Connection conn9 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 21:50:01 jdbc[12]: 
/**/conn9.isReadOnly();
2020-06-17 21:50:01 jdbc[12]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 21:50:01 jdbc[12]: 
/**/conn9.getAutoCommit();
2020-06-17 21:50:02 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-17 21:50:02 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 21:50:02 jdbc[3]: 
/**/DatabaseMetaData dbMeta1 = conn0.getMetaData();
2020-06-17 21:50:02 jdbc[3]: 
/**/dbMeta1.getDatabaseProductName();
2020-06-17 21:50:02 jdbc[3]: 
/**/dbMeta1.getDatabaseProductVersion();
2020-06-17 21:50:02 jdbc[3]: 
/**/dbMeta1.getDatabaseMajorVersion();
2020-06-17 21:50:02 jdbc[3]: 
/**/dbMeta1.getDatabaseMinorVersion();
2020-06-17 21:50:02 jdbc[3]: 
/**/dbMeta1.getDriverName();
2020-06-17 21:50:02 jdbc[3]: 
/**/dbMeta1.getDriverVersion();
2020-06-17 21:50:02 jdbc[3]: 
/**/dbMeta1.getDriverMajorVersion();
2020-06-17 21:50:02 jdbc[3]: 
/**/dbMeta1.getDriverMinorVersion();
2020-06-17 21:50:02 jdbc[3]: 
/**/dbMeta1.getJDBCMajorVersion();
2020-06-17 21:50:02 jdbc[3]: 
/**/dbMeta1.getJDBCMinorVersion();
2020-06-17 21:50:02 jdbc[3]: 
/**/dbMeta1.supportsCatalogsInTableDefinitions();
2020-06-17 21:50:02 jdbc[3]: 
/**/dbMeta1.supportsSchemasInTableDefinitions();
2020-06-17 21:50:02 jdbc[3]: 
/**/dbMeta1.storesLowerCaseIdentifiers();
2020-06-17 21:50:02 jdbc[3]: 
/**/PreparedStatement prep0 = conn0.prepareStatement("SELECT NAME, VALUE FROM INFORMATION_SCHEMA.SETTINGS WHERE NAME IN (?, ?, ?, ?)");
2020-06-17 21:50:02 jdbc[3]: Plan       : calculate cost for plan [SETTINGS:-7:org.h2.table.MetaTable@6551abe]
2020-06-17 21:50:02 jdbc[3]: Plan       :   for table filter SETTINGS:-7:org.h2.table.MetaTable@6551abe
2020-06-17 21:50:02 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:50:02 jdbc[3]: Plan       :   best plan item cost 9,900 index meta
2020-06-17 21:50:02 jdbc[3]: Plan       : plan cost 9,901
2020-06-17 21:50:02 jdbc[3]: 
/**/prep0.setString(1, "MODE");
2020-06-17 21:50:02 jdbc[3]: 
/**/prep0.setString(2, "DATABASE_TO_UPPER");
2020-06-17 21:50:02 jdbc[3]: 
/**/prep0.setString(3, "DATABASE_TO_LOWER");
2020-06-17 21:50:02 jdbc[3]: 
/**/prep0.setString(4, "CASE_INSENSITIVE_IDENTIFIERS");
2020-06-17 21:50:02 jdbc[3]: 
/**/ResultSet rs0 = prep0.executeQuery();
2020-06-17 21:50:02 jdbc[3]: 
/*SQL l:78 #:4 t:3*/SELECT NAME, VALUE FROM INFORMATION_SCHEMA.SETTINGS WHERE NAME IN (?, ?, ?, ?) {1: 'MODE', 2: 'DATABASE_TO_UPPER', 3: 'DATABASE_TO_LOWER', 4: 'CASE_INSENSITIVE_IDENTIFIERS'};
2020-06-17 21:50:02 jdbc[3]: 
/**/rs0.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs0.getString(2);
2020-06-17 21:50:02 jdbc[3]: 
/**/rs0.getString(1);
2020-06-17 21:50:02 jdbc[3]: 
/**/rs0.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs0.getString(2);
2020-06-17 21:50:02 jdbc[3]: 
/**/rs0.getString(1);
2020-06-17 21:50:02 jdbc[3]: 
/**/rs0.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs0.getString(2);
2020-06-17 21:50:02 jdbc[3]: 
/**/rs0.getString(1);
2020-06-17 21:50:02 jdbc[3]: 
/**/rs0.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs0.getString(2);
2020-06-17 21:50:02 jdbc[3]: 
/**/rs0.getString(1);
2020-06-17 21:50:02 jdbc[3]: 
/**/rs0.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/prep0.close();
2020-06-17 21:50:02 jdbc[3]: 
/**/dbMeta1.storesUpperCaseIdentifiers();
2020-06-17 21:50:02 jdbc[3]: 
/**/dbMeta1.storesMixedCaseIdentifiers();
2020-06-17 21:50:02 jdbc[3]: 
/**/dbMeta1.storesUpperCaseIdentifiers();
2020-06-17 21:50:02 jdbc[3]: 
/**/dbMeta1.storesLowerCaseQuotedIdentifiers();
2020-06-17 21:50:02 jdbc[3]: 
/**/dbMeta1.storesUpperCaseQuotedIdentifiers();
2020-06-17 21:50:02 jdbc[3]: 
/**/dbMeta1.storesMixedCaseQuotedIdentifiers();
2020-06-17 21:50:02 jdbc[3]: 
/**/dbMeta1.getSQLKeywords();
2020-06-17 21:50:02 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:50:02 jdbc[3]: 
/*SQL #:1*/CALL DATABASE();
2020-06-17 21:50:02 jdbc[3]: 
/**/dbMeta1.supportsNamedParameters();
2020-06-17 21:50:02 jdbc[3]: 
/**/dbMeta1.supportsResultSetType(1004);
2020-06-17 21:50:02 jdbc[3]: 
/**/dbMeta1.supportsGetGeneratedKeys();
2020-06-17 21:50:02 jdbc[3]: 
/**/dbMeta1.supportsBatchUpdates();
2020-06-17 21:50:02 jdbc[3]: 
/**/dbMeta1.dataDefinitionIgnoredInTransactions();
2020-06-17 21:50:02 jdbc[3]: 
/**/dbMeta1.dataDefinitionCausesTransactionCommit();
2020-06-17 21:50:02 jdbc[3]: 
/**/dbMeta1.getSQLKeywords();
2020-06-17 21:50:02 jdbc[3]: 
/**/dbMeta1.getSQLStateType();
2020-06-17 21:50:02 jdbc[3]: 
/**/dbMeta1.locatorsUpdateCopy();
2020-06-17 21:50:02 jdbc[3]: 
/**/dbMeta1.getTypeInfo();
2020-06-17 21:50:02 jdbc[3]: 
/**/PreparedStatement prep1 = conn0.prepareStatement("SELECT TYPE_NAME, DATA_TYPE, PRECISION, PREFIX LITERAL_PREFIX, SUFFIX LITERAL_SUFFIX, PARAMS CREATE_PARAMS, NULLABLE, CASE_SENSITIVE, SEARCHABLE, FALSE UNSIGNED_ATTRIBUTE, FALSE FIXED_PREC_SCALE, AUTO_INCREMENT, TYPE_NAME LOCAL_TYPE_NAME, MINIMUM_SCALE, MAXIMUM_SCALE, DATA_TYPE SQL_DATA_TYPE, ZERO() SQL_DATETIME_SUB, RADIX NUM_PREC_RADIX FROM INFORMATION_SCHEMA.TYPE_INFO ORDER BY DATA_TYPE, POS");
2020-06-17 21:50:02 jdbc[3]: Plan       : calculate cost for plan [TYPE_INFO:-5:org.h2.table.MetaTable@7703f6ff]
2020-06-17 21:50:02 jdbc[3]: Plan       :   for table filter TYPE_INFO:-5:org.h2.table.MetaTable@7703f6ff
2020-06-17 21:50:02 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:50:02 jdbc[3]: Plan       :   best plan item cost 10,000 index meta
2020-06-17 21:50:02 jdbc[3]: Plan       : plan cost 10,001
2020-06-17 21:50:02 jdbc[3]: 
/**/ResultSet rs1 = prep1.executeQuery();
2020-06-17 21:50:02 jdbc[3]: 
/*SQL #:46 t:1*/SELECT TYPE_NAME, DATA_TYPE, PRECISION, PREFIX LITERAL_PREFIX, SUFFIX LITERAL_SUFFIX, PARAMS CREATE_PARAMS, NULLABLE, CASE_SENSITIVE, SEARCHABLE, FALSE UNSIGNED_ATTRIBUTE, FALSE FIXED_PREC_SCALE, AUTO_INCREMENT, TYPE_NAME LOCAL_TYPE_NAME, MINIMUM_SCALE, MAXIMUM_SCALE, DATA_TYPE SQL_DATA_TYPE, ZERO() SQL_DATETIME_SUB, RADIX NUM_PREC_RADIX FROM INFORMATION_SCHEMA.TYPE_INFO ORDER BY DATA_TYPE, POS;
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getStatement();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs1.close();
2020-06-17 21:50:02 jdbc[3]: 
/**/prep1.close();
2020-06-17 21:50:02 jdbc[3]: 
/**/conn0.getSchema();
2020-06-17 21:50:02 jdbc[3]: 
/**/conn0.getSchema();
2020-06-17 21:50:02 jdbc[3]: 
/**/dbMeta1.supportsNamedParameters();
2020-06-17 21:50:02 jdbc[3]: 
/**/Statement stat0 = conn0.createStatement();
2020-06-17 21:50:02 jdbc[3]: 
/**/ResultSet rs2 = stat0.executeQuery("select * from INFORMATION_SCHEMA.SEQUENCES");
2020-06-17 21:50:02 jdbc[3]: Plan       : calculate cost for plan [SEQUENCES:-9:org.h2.table.MetaTable@57e8a174]
2020-06-17 21:50:02 jdbc[3]: Plan       :   for table filter SEQUENCES:-9:org.h2.table.MetaTable@57e8a174
2020-06-17 21:50:02 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:50:02 jdbc[3]: Plan       :   best plan item cost 10,000 index meta
2020-06-17 21:50:02 jdbc[3]: Plan       : plan cost 10,001
2020-06-17 21:50:02 jdbc[3]: 
/*SQL */select * from INFORMATION_SCHEMA.SEQUENCES;
2020-06-17 21:50:02 jdbc[3]: 
/**/rs2.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs2.close();
2020-06-17 21:50:02 jdbc[3]: 
/**/stat0.close();
2020-06-17 21:50:02 jdbc[3]: 
/**/dbMeta1.getCatalogSeparator();
2020-06-17 21:50:02 jdbc[3]: 
/**/dbMeta1.isCatalogAtStart();
2020-06-17 21:50:02 jdbc[3]: 
/**/dbMeta1.getTypeInfo();
2020-06-17 21:50:02 jdbc[3]: 
/**/PreparedStatement prep2 = conn0.prepareStatement("SELECT TYPE_NAME, DATA_TYPE, PRECISION, PREFIX LITERAL_PREFIX, SUFFIX LITERAL_SUFFIX, PARAMS CREATE_PARAMS, NULLABLE, CASE_SENSITIVE, SEARCHABLE, FALSE UNSIGNED_ATTRIBUTE, FALSE FIXED_PREC_SCALE, AUTO_INCREMENT, TYPE_NAME LOCAL_TYPE_NAME, MINIMUM_SCALE, MAXIMUM_SCALE, DATA_TYPE SQL_DATA_TYPE, ZERO() SQL_DATETIME_SUB, RADIX NUM_PREC_RADIX FROM INFORMATION_SCHEMA.TYPE_INFO ORDER BY DATA_TYPE, POS");
2020-06-17 21:50:02 jdbc[3]: 
/**/ResultSet rs3 = prep2.executeQuery();
2020-06-17 21:50:02 jdbc[3]: 
/*SQL #:46*/SELECT TYPE_NAME, DATA_TYPE, PRECISION, PREFIX LITERAL_PREFIX, SUFFIX LITERAL_SUFFIX, PARAMS CREATE_PARAMS, NULLABLE, CASE_SENSITIVE, SEARCHABLE, FALSE UNSIGNED_ATTRIBUTE, FALSE FIXED_PREC_SCALE, AUTO_INCREMENT, TYPE_NAME LOCAL_TYPE_NAME, MINIMUM_SCALE, MAXIMUM_SCALE, DATA_TYPE SQL_DATA_TYPE, ZERO() SQL_DATETIME_SUB, RADIX NUM_PREC_RADIX FROM INFORMATION_SCHEMA.TYPE_INFO ORDER BY DATA_TYPE, POS;
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getStatement();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs3.close();
2020-06-17 21:50:02 jdbc[3]: 
/**/prep2.close();
2020-06-17 21:50:02 jdbc[3]: 
/**/DatabaseMetaData dbMeta2 = conn0.getMetaData();
2020-06-17 21:50:02 jdbc[3]: 
/**/dbMeta2.getJDBCMajorVersion();
2020-06-17 21:50:02 jdbc[3]: 
/**/Clob clob0 = conn0.createClob();
2020-06-17 21:50:02 jdbc[3]: 
/**/clob0.free();
2020-06-17 21:50:02 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:50:02 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:50:02 jdbc[3]: 
/**/Statement stat1 = conn0.createStatement();
2020-06-17 21:50:02 jdbc[3]: 
/**/stat1.execute("drop table if exists customer_tbl CASCADE ");
2020-06-17 21:50:02 jdbc[3]: 
/*SQL */drop table if exists customer_tbl CASCADE;
2020-06-17 21:50:02 jdbc[3]: 
/**/stat1.getWarnings();
2020-06-17 21:50:02 jdbc[3]: 
/**/stat1.execute("drop table if exists log_tbl CASCADE ");
2020-06-17 21:50:02 jdbc[3]: 
/*SQL */drop table if exists log_tbl CASCADE;
2020-06-17 21:50:02 jdbc[3]: 
/**/stat1.getWarnings();
2020-06-17 21:50:02 jdbc[3]: 
/**/stat1.close();
2020-06-17 21:50:02 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:50:02 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:50:02 jdbc[3]: 
/**/Statement stat2 = conn0.createStatement();
2020-06-17 21:50:02 jdbc[3]: 
/**/stat2.execute("create table customer_tbl (id bigint generated by default as identity, customer_email varchar(255), customer_firstname varchar(255), customer_lastname varchar(255), primary key (id))");
2020-06-17 21:50:02 lock: 3 exclusive write lock requesting for SYS 
2020-06-17 21:50:02 lock: 3 exclusive write lock added for SYS 
2020-06-17 21:50:02 lock: 3 exclusive write lock unlock SYS 
2020-06-17 21:50:02 lock: 3 exclusive write lock requesting for SYS 
2020-06-17 21:50:02 lock: 3 exclusive write lock added for SYS 
2020-06-17 21:50:02 lock: 3 exclusive write lock requesting for CUSTOMER_TBL 
2020-06-17 21:50:02 lock: 3 exclusive write lock added for CUSTOMER_TBL 
2020-06-17 21:50:02 jdbc[3]: 
/*SQL t:5*/create table customer_tbl (id bigint generated by default as identity, customer_email varchar(255), customer_firstname varchar(255), customer_lastname varchar(255), primary key (id));
2020-06-17 21:50:02 lock: 3 exclusive write lock unlock SYS 
2020-06-17 21:50:02 lock: 3 exclusive write lock unlock CUSTOMER_TBL 
2020-06-17 21:50:02 jdbc[3]: 
/**/stat2.getWarnings();
2020-06-17 21:50:02 jdbc[3]: 
/**/stat2.execute("create table log_tbl (id bigint generated by default as identity, application_name varchar(255), level varchar(255), parent_span_id varchar(255), request varchar(255), response varchar(255), span_id varchar(255), time varchar(255), trace_id varchar(255), primary key (id))");
2020-06-17 21:50:02 lock: 3 exclusive write lock requesting for SYS 
2020-06-17 21:50:02 lock: 3 exclusive write lock added for SYS 
2020-06-17 21:50:02 lock: 3 exclusive write lock unlock SYS 
2020-06-17 21:50:02 lock: 3 exclusive write lock requesting for SYS 
2020-06-17 21:50:02 lock: 3 exclusive write lock added for SYS 
2020-06-17 21:50:02 lock: 3 exclusive write lock requesting for LOG_TBL 
2020-06-17 21:50:02 lock: 3 exclusive write lock added for LOG_TBL 
2020-06-17 21:50:02 jdbc[3]: 
/*SQL t:1*/create table log_tbl (id bigint generated by default as identity, application_name varchar(255), level varchar(255), parent_span_id varchar(255), request varchar(255), response varchar(255), span_id varchar(255), time varchar(255), trace_id varchar(255), primary key (id));
2020-06-17 21:50:02 lock: 3 exclusive write lock unlock SYS 
2020-06-17 21:50:02 lock: 3 exclusive write lock unlock LOG_TBL 
2020-06-17 21:50:02 jdbc[3]: 
/**/stat2.getWarnings();
2020-06-17 21:50:02 jdbc[3]: 
/**/stat2.close();
2020-06-17 21:50:02 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:50:02 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:50:02 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:50:02 jdbc[3]: 
/**/PreparedStatement prep3 = conn0.prepareStatement("select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=?");
2020-06-17 21:50:02 jdbc[3]: Plan       : calculate cost for plan [CUSTOMER0_]
2020-06-17 21:50:02 jdbc[3]: Plan       :   for table filter CUSTOMER0_
2020-06-17 21:50:02 jdbc[3]: Table      :     potential plan item cost 10,200 index PUBLIC.CUSTOMER_TBL.tableScan
2020-06-17 21:50:02 jdbc[3]: Table      :     potential plan item cost 230 index PUBLIC.PRIMARY_KEY_B
2020-06-17 21:50:02 jdbc[3]: Plan       :   best plan item cost 227.7 index PUBLIC.PRIMARY_KEY_B
2020-06-17 21:50:02 jdbc[3]: Plan       : plan cost 228.7
2020-06-17 21:50:02 jdbc[3]: 
/**/prep3.setLong(1, 1L);
2020-06-17 21:50:02 jdbc[3]: 
/**/ResultSet rs8 = prep3.executeQuery();
2020-06-17 21:50:02 jdbc[3]: 
/*SQL l:225*/select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=? {1: 1};
2020-06-17 21:50:02 jdbc[3]: 
/**/rs8.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs8.close();
2020-06-17 21:50:02 jdbc[3]: 
/**/prep3.getMaxRows();
2020-06-17 21:50:02 jdbc[3]: 
/**/prep3.getQueryTimeout();
2020-06-17 21:50:02 jdbc[3]: Plan       : calculate cost for plan [SETTINGS:-7:org.h2.table.MetaTable@6551abe]
2020-06-17 21:50:02 jdbc[3]: Plan       :   for table filter SETTINGS:-7:org.h2.table.MetaTable@6551abe
2020-06-17 21:50:02 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:50:02 jdbc[3]: Plan       :   best plan item cost 9,900 index meta
2020-06-17 21:50:02 jdbc[3]: Plan       : plan cost 9,901
2020-06-17 21:50:02 jdbc[3]: 
/*SQL l:58 #:1*/SELECT VALUE FROM INFORMATION_SCHEMA.SETTINGS WHERE NAME=? {1: 'QUERY_TIMEOUT'};
2020-06-17 21:50:02 jdbc[3]: 
/**/prep3.close();
2020-06-17 21:50:02 jdbc[3]: 
/**/PreparedStatement prep4 = conn0.prepareStatement("insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?)", 1);;
2020-06-17 21:50:02 jdbc[3]: 
/**/prep4.setString(1, "ram@gmail.com");
2020-06-17 21:50:02 jdbc[3]: 
/**/prep4.setString(2, "Ram");
2020-06-17 21:50:02 jdbc[3]: 
/**/prep4.setString(3, "Thapa");
2020-06-17 21:50:02 jdbc[3]: 
/**/prep4.executeUpdate();
2020-06-17 21:50:02 lock: 1 exclusive write lock requesting for SYS 
2020-06-17 21:50:02 lock: 1 exclusive write lock added for SYS 
2020-06-17 21:50:02 lock: 1 exclusive write lock unlock SYS 
2020-06-17 21:50:02 lock: 3 shared read lock requesting for CUSTOMER_TBL 
2020-06-17 21:50:02 lock: 3 shared read lock ok CUSTOMER_TBL 
2020-06-17 21:50:02 jdbc[3]: 
/*SQL l:107 #:1 t:1*/insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?) {1: 'ram@gmail.com', 2: 'Ram', 3: 'Thapa'};
2020-06-17 21:50:02 jdbc[3]: 
/**/ResultSet rs9 = prep4.getGeneratedKeys();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs9.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/ResultSetMetaData rsMeta0 = rs9.getMetaData();
2020-06-17 21:50:02 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:50:02 jdbc[3]: 
/**/rsMeta0.getColumnCount();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs9.getLong(1);
2020-06-17 21:50:02 jdbc[3]: 
/**/rs9.close();
2020-06-17 21:50:02 jdbc[3]: 
/**/prep4.getMaxRows();
2020-06-17 21:50:02 jdbc[3]: 
/**/prep4.getQueryTimeout();
2020-06-17 21:50:02 jdbc[3]: 
/**/prep4.close();
2020-06-17 21:50:02 jdbc[3]: 
/**/PreparedStatement prep5 = conn0.prepareStatement("select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=?");
2020-06-17 21:50:02 jdbc[3]: 
/**/prep5.setLong(1, 2L);
2020-06-17 21:50:02 jdbc[3]: 
/**/ResultSet rs10 = prep5.executeQuery();
2020-06-17 21:50:02 jdbc[3]: 
/*SQL l:225*/select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=? {1: 2};
2020-06-17 21:50:02 jdbc[3]: 
/**/rs10.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs10.close();
2020-06-17 21:50:02 jdbc[3]: 
/**/prep5.getMaxRows();
2020-06-17 21:50:02 jdbc[3]: 
/**/prep5.getQueryTimeout();
2020-06-17 21:50:02 jdbc[3]: 
/**/prep5.close();
2020-06-17 21:50:02 jdbc[3]: 
/**/PreparedStatement prep6 = conn0.prepareStatement("insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?)", 1);;
2020-06-17 21:50:02 jdbc[3]: 
/**/prep6.setString(1, "hari@gmail.com");
2020-06-17 21:50:02 jdbc[3]: 
/**/prep6.setString(2, "Hari");
2020-06-17 21:50:02 jdbc[3]: 
/**/prep6.setString(3, "Neupane");
2020-06-17 21:50:02 jdbc[3]: 
/**/prep6.executeUpdate();
2020-06-17 21:50:02 jdbc[3]: 
/*SQL l:107 #:1*/insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?) {1: 'hari@gmail.com', 2: 'Hari', 3: 'Neupane'};
2020-06-17 21:50:02 jdbc[3]: 
/**/ResultSet rs11 = prep6.getGeneratedKeys();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs11.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/ResultSetMetaData rsMeta1 = rs11.getMetaData();
2020-06-17 21:50:02 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:50:02 jdbc[3]: 
/**/rsMeta1.getColumnCount();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs11.getLong(1);
2020-06-17 21:50:02 jdbc[3]: 
/**/rs11.close();
2020-06-17 21:50:02 jdbc[3]: 
/**/prep6.getMaxRows();
2020-06-17 21:50:02 jdbc[3]: 
/**/prep6.getQueryTimeout();
2020-06-17 21:50:02 jdbc[3]: 
/**/prep6.close();
2020-06-17 21:50:02 jdbc[3]: 
/**/PreparedStatement prep7 = conn0.prepareStatement("select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=?");
2020-06-17 21:50:02 jdbc[3]: 
/**/prep7.setLong(1, 3L);
2020-06-17 21:50:02 jdbc[3]: 
/**/ResultSet rs12 = prep7.executeQuery();
2020-06-17 21:50:02 jdbc[3]: 
/*SQL l:225*/select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=? {1: 3};
2020-06-17 21:50:02 jdbc[3]: 
/**/rs12.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs12.close();
2020-06-17 21:50:02 jdbc[3]: 
/**/prep7.getMaxRows();
2020-06-17 21:50:02 jdbc[3]: 
/**/prep7.getQueryTimeout();
2020-06-17 21:50:02 jdbc[3]: 
/**/prep7.close();
2020-06-17 21:50:02 jdbc[3]: 
/**/PreparedStatement prep8 = conn0.prepareStatement("insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?)", 1);;
2020-06-17 21:50:02 jdbc[3]: 
/**/prep8.setString(1, "ramila@gmail.com");
2020-06-17 21:50:02 jdbc[3]: 
/**/prep8.setString(2, "Ramila");
2020-06-17 21:50:02 jdbc[3]: 
/**/prep8.setString(3, "Karki");
2020-06-17 21:50:02 jdbc[3]: 
/**/prep8.executeUpdate();
2020-06-17 21:50:02 jdbc[3]: 
/*SQL l:107 #:1*/insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?) {1: 'ramila@gmail.com', 2: 'Ramila', 3: 'Karki'};
2020-06-17 21:50:02 jdbc[3]: 
/**/ResultSet rs13 = prep8.getGeneratedKeys();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs13.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/ResultSetMetaData rsMeta2 = rs13.getMetaData();
2020-06-17 21:50:02 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:50:02 jdbc[3]: 
/**/rsMeta2.getColumnCount();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs13.getLong(1);
2020-06-17 21:50:02 jdbc[3]: 
/**/rs13.close();
2020-06-17 21:50:02 jdbc[3]: 
/**/prep8.getMaxRows();
2020-06-17 21:50:02 jdbc[3]: 
/**/prep8.getQueryTimeout();
2020-06-17 21:50:02 jdbc[3]: 
/**/prep8.close();
2020-06-17 21:50:02 jdbc[3]: 
/**/PreparedStatement prep9 = conn0.prepareStatement("select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=?");
2020-06-17 21:50:02 jdbc[3]: 
/**/prep9.setLong(1, 4L);
2020-06-17 21:50:02 jdbc[3]: 
/**/ResultSet rs14 = prep9.executeQuery();
2020-06-17 21:50:02 jdbc[3]: 
/*SQL l:225*/select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=? {1: 4};
2020-06-17 21:50:02 jdbc[3]: 
/**/rs14.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs14.close();
2020-06-17 21:50:02 jdbc[3]: 
/**/prep9.getMaxRows();
2020-06-17 21:50:02 jdbc[3]: 
/**/prep9.getQueryTimeout();
2020-06-17 21:50:02 jdbc[3]: 
/**/prep9.close();
2020-06-17 21:50:02 jdbc[3]: 
/**/PreparedStatement prep10 = conn0.prepareStatement("insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?)", 1);;
2020-06-17 21:50:02 jdbc[3]: 
/**/prep10.setString(1, "david@gmail.com");
2020-06-17 21:50:02 jdbc[3]: 
/**/prep10.setString(2, "David");
2020-06-17 21:50:02 jdbc[3]: 
/**/prep10.setString(3, "Yonge");
2020-06-17 21:50:02 jdbc[3]: 
/**/prep10.executeUpdate();
2020-06-17 21:50:02 jdbc[3]: 
/*SQL l:107 #:1*/insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?) {1: 'david@gmail.com', 2: 'David', 3: 'Yonge'};
2020-06-17 21:50:02 jdbc[3]: 
/**/ResultSet rs15 = prep10.getGeneratedKeys();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs15.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/ResultSetMetaData rsMeta3 = rs15.getMetaData();
2020-06-17 21:50:02 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:50:02 jdbc[3]: 
/**/rsMeta3.getColumnCount();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs15.getLong(1);
2020-06-17 21:50:02 jdbc[3]: 
/**/rs15.close();
2020-06-17 21:50:02 jdbc[3]: 
/**/prep10.getMaxRows();
2020-06-17 21:50:02 jdbc[3]: 
/**/prep10.getQueryTimeout();
2020-06-17 21:50:02 jdbc[3]: 
/**/prep10.close();
2020-06-17 21:50:02 jdbc[3]: 
/**/PreparedStatement prep11 = conn0.prepareStatement("select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=?");
2020-06-17 21:50:02 jdbc[3]: 
/**/prep11.setLong(1, 5L);
2020-06-17 21:50:02 jdbc[3]: 
/**/ResultSet rs16 = prep11.executeQuery();
2020-06-17 21:50:02 jdbc[3]: 
/*SQL l:225*/select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=? {1: 5};
2020-06-17 21:50:02 jdbc[3]: 
/**/rs16.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs16.close();
2020-06-17 21:50:02 jdbc[3]: 
/**/prep11.getMaxRows();
2020-06-17 21:50:02 jdbc[3]: 
/**/prep11.getQueryTimeout();
2020-06-17 21:50:02 jdbc[3]: 
/**/prep11.close();
2020-06-17 21:50:02 jdbc[3]: 
/**/PreparedStatement prep12 = conn0.prepareStatement("insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?)", 1);;
2020-06-17 21:50:02 jdbc[3]: 
/**/prep12.setString(1, "peter@gmail.com");
2020-06-17 21:50:02 jdbc[3]: 
/**/prep12.setString(2, "Peter");
2020-06-17 21:50:02 jdbc[3]: 
/**/prep12.setString(3, "Parker");
2020-06-17 21:50:02 jdbc[3]: 
/**/prep12.executeUpdate();
2020-06-17 21:50:02 jdbc[3]: 
/*SQL l:107 #:1*/insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?) {1: 'peter@gmail.com', 2: 'Peter', 3: 'Parker'};
2020-06-17 21:50:02 jdbc[3]: 
/**/ResultSet rs17 = prep12.getGeneratedKeys();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs17.next();
2020-06-17 21:50:02 jdbc[3]: 
/**/ResultSetMetaData rsMeta4 = rs17.getMetaData();
2020-06-17 21:50:02 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:50:02 jdbc[3]: 
/**/rsMeta4.getColumnCount();
2020-06-17 21:50:02 jdbc[3]: 
/**/rs17.getLong(1);
2020-06-17 21:50:02 jdbc[3]: 
/**/rs17.close();
2020-06-17 21:50:02 jdbc[3]: 
/**/prep12.getMaxRows();
2020-06-17 21:50:02 jdbc[3]: 
/**/prep12.getQueryTimeout();
2020-06-17 21:50:02 jdbc[3]: 
/**/prep12.close();
2020-06-17 21:50:02 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:50:02 lock: 3 shared read lock unlock CUSTOMER_TBL 
2020-06-17 21:50:02 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:50:02 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:50:02 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:50:02 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:50:02 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:50:02 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:50:02 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:50:05 jdbc[3]: 
/**/PreparedStatement prep13 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 21:50:05 jdbc[3]: 
/**/prep13.setString(1, "CustomerMS");
2020-06-17 21:50:05 jdbc[3]: 
/**/prep13.setString(2, "INFO");
2020-06-17 21:50:05 jdbc[3]: 
/**/prep13.setNull(3, 12);
2020-06-17 21:50:05 jdbc[3]: 
/**/prep13.setString(4, "/api/customers/2");
2020-06-17 21:50:05 jdbc[3]: 
/**/prep13.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 21:50:05 jdbc[3]: 
/**/prep13.setString(6, "835c44c5407a860f");
2020-06-17 21:50:05 jdbc[3]: 
/**/prep13.setString(7, "2020-06-17T20:43:48.395Z");
2020-06-17 21:50:05 jdbc[3]: 
/**/prep13.setString(8, "835c44c5407a860f");
2020-06-17 21:50:05 jdbc[3]: 
/**/prep13.executeUpdate();
2020-06-17 21:50:05 lock: 1 exclusive write lock requesting for SYS 
2020-06-17 21:50:05 lock: 1 exclusive write lock added for SYS 
2020-06-17 21:50:05 lock: 1 exclusive write lock unlock SYS 
2020-06-17 21:50:05 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 21:50:05 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 21:50:05 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/2', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: '835c44c5407a860f', 7: '2020-06-17T20:43:48.395Z', 8: '835c44c5407a860f'};
2020-06-17 21:50:05 jdbc[3]: 
/**/ResultSet rs18 = prep13.getGeneratedKeys();
2020-06-17 21:50:05 jdbc[3]: 
/**/rs18.next();
2020-06-17 21:50:05 jdbc[3]: 
/**/ResultSetMetaData rsMeta5 = rs18.getMetaData();
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:50:05 jdbc[3]: 
/**/rsMeta5.getColumnCount();
2020-06-17 21:50:05 jdbc[3]: 
/**/rs18.getLong(1);
2020-06-17 21:50:05 jdbc[3]: 
/**/rs18.close();
2020-06-17 21:50:05 jdbc[3]: 
/**/prep13.getMaxRows();
2020-06-17 21:50:05 jdbc[3]: 
/**/prep13.getQueryTimeout();
2020-06-17 21:50:05 jdbc[3]: 
/**/prep13.close();
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:50:05 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 21:50:05 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:50:05 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:50:05 jdbc[3]: 
/**/PreparedStatement prep14 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 21:50:05 jdbc[3]: 
/**/prep14.setString(1, "CustomerMS");
2020-06-17 21:50:05 jdbc[3]: 
/**/prep14.setString(2, "INFO");
2020-06-17 21:50:05 jdbc[3]: 
/**/prep14.setNull(3, 12);
2020-06-17 21:50:05 jdbc[3]: 
/**/prep14.setString(4, "/api/customers/2");
2020-06-17 21:50:05 jdbc[3]: 
/**/prep14.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 21:50:05 jdbc[3]: 
/**/prep14.setString(6, "ac4762af3b603bf9");
2020-06-17 21:50:05 jdbc[3]: 
/**/prep14.setString(7, "2020-06-18T02:47:02.751Z");
2020-06-17 21:50:05 jdbc[3]: 
/**/prep14.setString(8, "ac4762af3b603bf9");
2020-06-17 21:50:05 jdbc[3]: 
/**/prep14.executeUpdate();
2020-06-17 21:50:05 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 21:50:05 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 21:50:05 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/2', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: 'ac4762af3b603bf9', 7: '2020-06-18T02:47:02.751Z', 8: 'ac4762af3b603bf9'};
2020-06-17 21:50:05 jdbc[3]: 
/**/ResultSet rs19 = prep14.getGeneratedKeys();
2020-06-17 21:50:05 jdbc[3]: 
/**/rs19.next();
2020-06-17 21:50:05 jdbc[3]: 
/**/ResultSetMetaData rsMeta6 = rs19.getMetaData();
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:50:05 jdbc[3]: 
/**/rsMeta6.getColumnCount();
2020-06-17 21:50:05 jdbc[3]: 
/**/rs19.getLong(1);
2020-06-17 21:50:05 jdbc[3]: 
/**/rs19.close();
2020-06-17 21:50:05 jdbc[3]: 
/**/prep14.getMaxRows();
2020-06-17 21:50:05 jdbc[3]: 
/**/prep14.getQueryTimeout();
2020-06-17 21:50:05 jdbc[3]: 
/**/prep14.close();
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:50:05 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 21:50:05 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:50:05 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:50:05 jdbc[3]: 
/**/PreparedStatement prep15 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 21:50:05 jdbc[3]: 
/**/prep15.setString(1, "CustomerMS");
2020-06-17 21:50:05 jdbc[3]: 
/**/prep15.setString(2, "INFO");
2020-06-17 21:50:05 jdbc[3]: 
/**/prep15.setNull(3, 12);
2020-06-17 21:50:05 jdbc[3]: 
/**/prep15.setString(4, "/api/customers/3");
2020-06-17 21:50:05 jdbc[3]: 
/**/prep15.setString(5, "Customer(id=3, firstName=Ramila, lastName=Karki, email=ramila@gmail.com)");
2020-06-17 21:50:05 jdbc[3]: 
/**/prep15.setString(6, "cda1008eb6f59b1a");
2020-06-17 21:50:05 jdbc[3]: 
/**/prep15.setString(7, "2020-06-18T02:47:23.391Z");
2020-06-17 21:50:05 jdbc[3]: 
/**/prep15.setString(8, "cda1008eb6f59b1a");
2020-06-17 21:50:05 jdbc[3]: 
/**/prep15.executeUpdate();
2020-06-17 21:50:05 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 21:50:05 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 21:50:05 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/3', 5: 'Customer(id=3, firstName=Ramila, lastName=Karki, email=ramila@gmail.com)', 6: 'cda1008eb6f59b1a', 7: '2020-06-18T02:47:23.391Z', 8: 'cda1008eb6f59b1a'};
2020-06-17 21:50:05 jdbc[3]: 
/**/ResultSet rs20 = prep15.getGeneratedKeys();
2020-06-17 21:50:05 jdbc[3]: 
/**/rs20.next();
2020-06-17 21:50:05 jdbc[3]: 
/**/ResultSetMetaData rsMeta7 = rs20.getMetaData();
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:50:05 jdbc[3]: 
/**/rsMeta7.getColumnCount();
2020-06-17 21:50:05 jdbc[3]: 
/**/rs20.getLong(1);
2020-06-17 21:50:05 jdbc[3]: 
/**/rs20.close();
2020-06-17 21:50:05 jdbc[3]: 
/**/prep15.getMaxRows();
2020-06-17 21:50:05 jdbc[3]: 
/**/prep15.getQueryTimeout();
2020-06-17 21:50:05 jdbc[3]: 
/**/prep15.close();
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:50:05 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 21:50:05 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:50:05 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:50:05 jdbc[3]: 
/**/PreparedStatement prep16 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 21:50:05 jdbc[3]: 
/**/prep16.setString(1, "CustomerMS");
2020-06-17 21:50:05 jdbc[3]: 
/**/prep16.setString(2, "INFO");
2020-06-17 21:50:05 jdbc[3]: 
/**/prep16.setNull(3, 12);
2020-06-17 21:50:05 jdbc[3]: 
/**/prep16.setString(4, "/api/customers/4");
2020-06-17 21:50:05 jdbc[3]: 
/**/prep16.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 21:50:05 jdbc[3]: 
/**/prep16.setString(6, "93222afc6f639d33");
2020-06-17 21:50:05 jdbc[3]: 
/**/prep16.setString(7, "2020-06-18T02:47:33.067Z");
2020-06-17 21:50:05 jdbc[3]: 
/**/prep16.setString(8, "93222afc6f639d33");
2020-06-17 21:50:05 jdbc[3]: 
/**/prep16.executeUpdate();
2020-06-17 21:50:05 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 21:50:05 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 21:50:05 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/4', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: '93222afc6f639d33', 7: '2020-06-18T02:47:33.067Z', 8: '93222afc6f639d33'};
2020-06-17 21:50:05 jdbc[3]: 
/**/ResultSet rs21 = prep16.getGeneratedKeys();
2020-06-17 21:50:05 jdbc[3]: 
/**/rs21.next();
2020-06-17 21:50:05 jdbc[3]: 
/**/ResultSetMetaData rsMeta8 = rs21.getMetaData();
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:50:05 jdbc[3]: 
/**/rsMeta8.getColumnCount();
2020-06-17 21:50:05 jdbc[3]: 
/**/rs21.getLong(1);
2020-06-17 21:50:05 jdbc[3]: 
/**/rs21.close();
2020-06-17 21:50:05 jdbc[3]: 
/**/prep16.getMaxRows();
2020-06-17 21:50:05 jdbc[3]: 
/**/prep16.getQueryTimeout();
2020-06-17 21:50:05 jdbc[3]: 
/**/prep16.close();
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:50:05 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 21:50:05 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:50:05 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:50:05 jdbc[3]: 
/**/PreparedStatement prep17 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 21:50:05 jdbc[3]: 
/**/prep17.setString(1, "CustomerMS");
2020-06-17 21:50:05 jdbc[3]: 
/**/prep17.setString(2, "INFO");
2020-06-17 21:50:05 jdbc[3]: 
/**/prep17.setNull(3, 12);
2020-06-17 21:50:05 jdbc[3]: 
/**/prep17.setString(4, "/api/customers/4");
2020-06-17 21:50:05 jdbc[3]: 
/**/prep17.setString(5, "Customer(id=4, firstName=David, lastName=Yonge, email=david@gmail.com)");
2020-06-17 21:50:05 jdbc[3]: 
/**/prep17.setString(6, "93222afc6f639d33");
2020-06-17 21:50:05 jdbc[3]: 
/**/prep17.setString(7, "2020-06-18T02:47:33.071Z");
2020-06-17 21:50:05 jdbc[3]: 
/**/prep17.setString(8, "93222afc6f639d33");
2020-06-17 21:50:05 jdbc[3]: 
/**/prep17.executeUpdate();
2020-06-17 21:50:05 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 21:50:05 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 21:50:05 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/4', 5: 'Customer(id=4, firstName=David, lastName=Yonge, email=david@gmail.com)', 6: '93222afc6f639d33', 7: '2020-06-18T02:47:33.071Z', 8: '93222afc6f639d33'};
2020-06-17 21:50:05 jdbc[3]: 
/**/ResultSet rs22 = prep17.getGeneratedKeys();
2020-06-17 21:50:05 jdbc[3]: 
/**/rs22.next();
2020-06-17 21:50:05 jdbc[3]: 
/**/ResultSetMetaData rsMeta9 = rs22.getMetaData();
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:50:05 jdbc[3]: 
/**/rsMeta9.getColumnCount();
2020-06-17 21:50:05 jdbc[3]: 
/**/rs22.getLong(1);
2020-06-17 21:50:05 jdbc[3]: 
/**/rs22.close();
2020-06-17 21:50:05 jdbc[3]: 
/**/prep17.getMaxRows();
2020-06-17 21:50:05 jdbc[3]: 
/**/prep17.getQueryTimeout();
2020-06-17 21:50:05 jdbc[3]: 
/**/prep17.close();
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:50:05 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 21:50:05 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:50:05 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:50:05 jdbc[3]: 
/**/PreparedStatement prep18 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 21:50:05 jdbc[3]: 
/**/prep18.setString(1, "CustomerMS");
2020-06-17 21:50:05 jdbc[3]: 
/**/prep18.setString(2, "INFO");
2020-06-17 21:50:05 jdbc[3]: 
/**/prep18.setNull(3, 12);
2020-06-17 21:50:05 jdbc[3]: 
/**/prep18.setString(4, "/api/customers/5");
2020-06-17 21:50:05 jdbc[3]: 
/**/prep18.setString(5, "Customer(id=5, firstName=Peter, lastName=Parker, email=peter@gmail.com)");
2020-06-17 21:50:05 jdbc[3]: 
/**/prep18.setString(6, "66f1f3cca2518457");
2020-06-17 21:50:05 jdbc[3]: 
/**/prep18.setString(7, "2020-06-18T02:48:04.745Z");
2020-06-17 21:50:05 jdbc[3]: 
/**/prep18.setString(8, "66f1f3cca2518457");
2020-06-17 21:50:05 jdbc[3]: 
/**/prep18.executeUpdate();
2020-06-17 21:50:05 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 21:50:05 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 21:50:05 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/5', 5: 'Customer(id=5, firstName=Peter, lastName=Parker, email=peter@gmail.com)', 6: '66f1f3cca2518457', 7: '2020-06-18T02:48:04.745Z', 8: '66f1f3cca2518457'};
2020-06-17 21:50:05 jdbc[3]: 
/**/ResultSet rs23 = prep18.getGeneratedKeys();
2020-06-17 21:50:05 jdbc[3]: 
/**/rs23.next();
2020-06-17 21:50:05 jdbc[3]: 
/**/ResultSetMetaData rsMeta10 = rs23.getMetaData();
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:50:05 jdbc[3]: 
/**/rsMeta10.getColumnCount();
2020-06-17 21:50:05 jdbc[3]: 
/**/rs23.getLong(1);
2020-06-17 21:50:05 jdbc[3]: 
/**/rs23.close();
2020-06-17 21:50:05 jdbc[3]: 
/**/prep18.getMaxRows();
2020-06-17 21:50:05 jdbc[3]: 
/**/prep18.getQueryTimeout();
2020-06-17 21:50:05 jdbc[3]: 
/**/prep18.close();
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:50:05 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 21:50:05 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:50:05 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:50:05 jdbc[3]: 
/**/PreparedStatement prep19 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 21:50:05 jdbc[3]: 
/**/prep19.setString(1, "CustomerMS");
2020-06-17 21:50:05 jdbc[3]: 
/**/prep19.setString(2, "INFO");
2020-06-17 21:50:05 jdbc[3]: 
/**/prep19.setNull(3, 12);
2020-06-17 21:50:05 jdbc[3]: 
/**/prep19.setString(4, "/api/customers/6");
2020-06-17 21:50:05 jdbc[3]: 
/**/prep19.setString(5, "Customer(id=null, firstName=null, lastName=null, email=null)");
2020-06-17 21:50:05 jdbc[3]: 
/**/prep19.setString(6, "e4ff784815173d28");
2020-06-17 21:50:05 jdbc[3]: 
/**/prep19.setString(7, "2020-06-18T02:48:16.076Z");
2020-06-17 21:50:05 jdbc[3]: 
/**/prep19.setString(8, "e4ff784815173d28");
2020-06-17 21:50:05 jdbc[3]: 
/**/prep19.executeUpdate();
2020-06-17 21:50:05 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 21:50:05 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 21:50:05 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/6', 5: 'Customer(id=null, firstName=null, lastName=null, email=null)', 6: 'e4ff784815173d28', 7: '2020-06-18T02:48:16.076Z', 8: 'e4ff784815173d28'};
2020-06-17 21:50:05 jdbc[3]: 
/**/ResultSet rs24 = prep19.getGeneratedKeys();
2020-06-17 21:50:05 jdbc[3]: 
/**/rs24.next();
2020-06-17 21:50:05 jdbc[3]: 
/**/ResultSetMetaData rsMeta11 = rs24.getMetaData();
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:50:05 jdbc[3]: 
/**/rsMeta11.getColumnCount();
2020-06-17 21:50:05 jdbc[3]: 
/**/rs24.getLong(1);
2020-06-17 21:50:05 jdbc[3]: 
/**/rs24.close();
2020-06-17 21:50:05 jdbc[3]: 
/**/prep19.getMaxRows();
2020-06-17 21:50:05 jdbc[3]: 
/**/prep19.getQueryTimeout();
2020-06-17 21:50:05 jdbc[3]: 
/**/prep19.close();
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:50:05 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 21:50:05 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:50:05 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:50:05 jdbc[3]: 
/**/PreparedStatement prep20 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 21:50:05 jdbc[3]: 
/**/prep20.setString(1, "CustomerMS");
2020-06-17 21:50:05 jdbc[3]: 
/**/prep20.setString(2, "INFO");
2020-06-17 21:50:05 jdbc[3]: 
/**/prep20.setNull(3, 12);
2020-06-17 21:50:05 jdbc[3]: 
/**/prep20.setString(4, "/api/customers/2");
2020-06-17 21:50:05 jdbc[3]: 
/**/prep20.setString(5, "Customer(id=3, firstName=Ramila, lastName=Karki, email=ramila@gmail.com)");
2020-06-17 21:50:05 jdbc[3]: 
/**/prep20.setString(6, "543f683d787432fc");
2020-06-17 21:50:05 jdbc[3]: 
/**/prep20.setString(7, "2020-06-18T02:48:30.897Z");
2020-06-17 21:50:05 jdbc[3]: 
/**/prep20.setString(8, "543f683d787432fc");
2020-06-17 21:50:05 jdbc[3]: 
/**/prep20.executeUpdate();
2020-06-17 21:50:05 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 21:50:05 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 21:50:05 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/2', 5: 'Customer(id=3, firstName=Ramila, lastName=Karki, email=ramila@gmail.com)', 6: '543f683d787432fc', 7: '2020-06-18T02:48:30.897Z', 8: '543f683d787432fc'};
2020-06-17 21:50:05 jdbc[3]: 
/**/ResultSet rs25 = prep20.getGeneratedKeys();
2020-06-17 21:50:05 jdbc[3]: 
/**/rs25.next();
2020-06-17 21:50:05 jdbc[3]: 
/**/ResultSetMetaData rsMeta12 = rs25.getMetaData();
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:50:05 jdbc[3]: 
/**/rsMeta12.getColumnCount();
2020-06-17 21:50:05 jdbc[3]: 
/**/rs25.getLong(1);
2020-06-17 21:50:05 jdbc[3]: 
/**/rs25.close();
2020-06-17 21:50:05 jdbc[3]: 
/**/prep20.getMaxRows();
2020-06-17 21:50:05 jdbc[3]: 
/**/prep20.getQueryTimeout();
2020-06-17 21:50:05 jdbc[3]: 
/**/prep20.close();
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:50:05 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 21:50:05 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:50:05 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:50:05 jdbc[3]: 
/**/PreparedStatement prep21 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 21:50:05 jdbc[3]: 
/**/prep21.setString(1, "CustomerMS");
2020-06-17 21:50:05 jdbc[3]: 
/**/prep21.setString(2, "INFO");
2020-06-17 21:50:05 jdbc[3]: 
/**/prep21.setNull(3, 12);
2020-06-17 21:50:05 jdbc[3]: 
/**/prep21.setString(4, "/api/customers/2");
2020-06-17 21:50:05 jdbc[3]: 
/**/prep21.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 21:50:05 jdbc[3]: 
/**/prep21.setString(6, "543f683d787432fc");
2020-06-17 21:50:05 jdbc[3]: 
/**/prep21.setString(7, "2020-06-18T02:48:30.901Z");
2020-06-17 21:50:05 jdbc[3]: 
/**/prep21.setString(8, "543f683d787432fc");
2020-06-17 21:50:05 jdbc[3]: 
/**/prep21.executeUpdate();
2020-06-17 21:50:05 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 21:50:05 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 21:50:05 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/2', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: '543f683d787432fc', 7: '2020-06-18T02:48:30.901Z', 8: '543f683d787432fc'};
2020-06-17 21:50:05 jdbc[3]: 
/**/ResultSet rs26 = prep21.getGeneratedKeys();
2020-06-17 21:50:05 jdbc[3]: 
/**/rs26.next();
2020-06-17 21:50:05 jdbc[3]: 
/**/ResultSetMetaData rsMeta13 = rs26.getMetaData();
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:50:05 jdbc[3]: 
/**/rsMeta13.getColumnCount();
2020-06-17 21:50:05 jdbc[3]: 
/**/rs26.getLong(1);
2020-06-17 21:50:05 jdbc[3]: 
/**/rs26.close();
2020-06-17 21:50:05 jdbc[3]: 
/**/prep21.getMaxRows();
2020-06-17 21:50:05 jdbc[3]: 
/**/prep21.getQueryTimeout();
2020-06-17 21:50:05 jdbc[3]: 
/**/prep21.close();
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:50:05 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 21:50:05 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:50:05 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:50:05 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:52:59 database: connecting session #13 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:52:59 jdbc[13]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:52:59 jdbc[13]: 
/**/Connection conn10 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3;FORBID_CREATION=TRUE", "SA", "");
2020-06-17 21:52:59 jdbc[13]: 
/**/DatabaseMetaData dbMeta3 = conn10.getMetaData();
2020-06-17 21:52:59 jdbc[13]: 
/**/PreparedStatement prep22 = conn10.prepareStatement("SELECT NAME, VALUE FROM INFORMATION_SCHEMA.SETTINGS WHERE NAME IN (?, ?, ?, ?)");
2020-06-17 21:52:59 jdbc[13]: Plan       : calculate cost for plan [SETTINGS:-7:org.h2.table.MetaTable@6551abe]
2020-06-17 21:52:59 jdbc[13]: Plan       :   for table filter SETTINGS:-7:org.h2.table.MetaTable@6551abe
2020-06-17 21:52:59 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:52:59 jdbc[13]: Plan       :   best plan item cost 9,900 index meta
2020-06-17 21:52:59 jdbc[13]: Plan       : plan cost 9,901
2020-06-17 21:52:59 jdbc[13]: 
/**/prep22.setString(1, "MODE");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep22.setString(2, "DATABASE_TO_UPPER");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep22.setString(3, "DATABASE_TO_LOWER");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep22.setString(4, "CASE_INSENSITIVE_IDENTIFIERS");
2020-06-17 21:52:59 jdbc[13]: 
/**/ResultSet rs27 = prep22.executeQuery();
2020-06-17 21:52:59 jdbc[13]: 
/*SQL l:78 #:4*/SELECT NAME, VALUE FROM INFORMATION_SCHEMA.SETTINGS WHERE NAME IN (?, ?, ?, ?) {1: 'MODE', 2: 'DATABASE_TO_UPPER', 3: 'DATABASE_TO_LOWER', 4: 'CASE_INSENSITIVE_IDENTIFIERS'};
2020-06-17 21:52:59 jdbc[13]: 
/**/rs27.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs27.getString(2);
2020-06-17 21:52:59 jdbc[13]: 
/**/rs27.getString(1);
2020-06-17 21:52:59 jdbc[13]: 
/**/rs27.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs27.getString(2);
2020-06-17 21:52:59 jdbc[13]: 
/**/rs27.getString(1);
2020-06-17 21:52:59 jdbc[13]: 
/**/rs27.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs27.getString(2);
2020-06-17 21:52:59 jdbc[13]: 
/**/rs27.getString(1);
2020-06-17 21:52:59 jdbc[13]: 
/**/rs27.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs27.getString(2);
2020-06-17 21:52:59 jdbc[13]: 
/**/rs27.getString(1);
2020-06-17 21:52:59 jdbc[13]: 
/**/rs27.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/prep22.close();
2020-06-17 21:52:59 jdbc[13]: 
/**/DatabaseMetaData dbMeta4 = conn10.getMetaData();
2020-06-17 21:52:59 jdbc[13]: 
/**/dbMeta4.getSchemas();
2020-06-17 21:52:59 jdbc[13]: 
/**/PreparedStatement prep23 = conn10.prepareStatement("SELECT SCHEMA_NAME TABLE_SCHEM, CATALOG_NAME TABLE_CATALOG,  IS_DEFAULT FROM INFORMATION_SCHEMA.SCHEMATA ORDER BY SCHEMA_NAME");
2020-06-17 21:52:59 jdbc[13]: Plan       : calculate cost for plan [SCHEMATA:-14:org.h2.table.MetaTable@3c1c4d65]
2020-06-17 21:52:59 jdbc[13]: Plan       :   for table filter SCHEMATA:-14:org.h2.table.MetaTable@3c1c4d65
2020-06-17 21:52:59 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:52:59 jdbc[13]: Plan       :   best plan item cost 10,000 index meta
2020-06-17 21:52:59 jdbc[13]: Plan       : plan cost 10,001
2020-06-17 21:52:59 jdbc[13]: 
/**/ResultSet rs28 = prep23.executeQuery();
2020-06-17 21:52:59 jdbc[13]: 
/*SQL #:2*/SELECT SCHEMA_NAME TABLE_SCHEM, CATALOG_NAME TABLE_CATALOG,  IS_DEFAULT FROM INFORMATION_SCHEMA.SCHEMATA ORDER BY SCHEMA_NAME;
2020-06-17 21:52:59 jdbc[13]: 
/**/rs28.findColumn("IS_DEFAULT");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs28.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs28.getBoolean(3);
2020-06-17 21:52:59 jdbc[13]: 
/**/rs28.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs28.getBoolean(3);
2020-06-17 21:52:59 jdbc[13]: 
/**/rs28.getString("TABLE_SCHEM");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs28.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/dbMeta4.getSchemas();
2020-06-17 21:52:59 jdbc[13]: 
/**/PreparedStatement prep24 = conn10.prepareStatement("SELECT SCHEMA_NAME TABLE_SCHEM, CATALOG_NAME TABLE_CATALOG,  IS_DEFAULT FROM INFORMATION_SCHEMA.SCHEMATA ORDER BY SCHEMA_NAME");
2020-06-17 21:52:59 jdbc[13]: Plan       : calculate cost for plan [SCHEMATA:-14:org.h2.table.MetaTable@3c1c4d65]
2020-06-17 21:52:59 jdbc[13]: Plan       :   for table filter SCHEMATA:-14:org.h2.table.MetaTable@3c1c4d65
2020-06-17 21:52:59 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:52:59 jdbc[13]: Plan       :   best plan item cost 10,000 index meta
2020-06-17 21:52:59 jdbc[13]: Plan       : plan cost 10,001
2020-06-17 21:52:59 jdbc[13]: 
/**/ResultSet rs29 = prep24.executeQuery();
2020-06-17 21:52:59 jdbc[13]: 
/*SQL #:2*/SELECT SCHEMA_NAME TABLE_SCHEM, CATALOG_NAME TABLE_CATALOG,  IS_DEFAULT FROM INFORMATION_SCHEMA.SCHEMATA ORDER BY SCHEMA_NAME;
2020-06-17 21:52:59 jdbc[13]: 
/**/rs29.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs29.getString("TABLE_SCHEM");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs29.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs29.getString("TABLE_SCHEM");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs29.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs29.close();
2020-06-17 21:52:59 jdbc[13]: 
/**/prep24.close();
2020-06-17 21:52:59 jdbc[13]: 
/**/dbMeta4.getTables(null, "INFORMATION_SCHEMA", null, new String[]{"TABLE", "SYSTEM TABLE", "VIEW", "SYSTEM VIEW", "TABLE LINK", "SYNONYM", "EXTERNAL"});
2020-06-17 21:52:59 jdbc[13]: 
/**/PreparedStatement prep25 = conn10.prepareStatement("SELECT TABLE_CAT, TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_CAT, TYPE_SCHEM, TYPE_NAME, SELF_REFERENCING_COL_NAME, REF_GENERATION, SQL FROM (SELECT SYNONYM_CATALOG TABLE_CAT, SYNONYM_SCHEMA TABLE_SCHEM, SYNONYM_NAME as TABLE_NAME, TYPE_NAME AS TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME AS TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, NULL AS SQL FROM INFORMATION_SCHEMA.SYNONYMS WHERE SYNONYM_CATALOG LIKE ?1 ESCAPE ?4 AND SYNONYM_SCHEMA LIKE ?2 ESCAPE ?4 AND SYNONYM_NAME LIKE ?3 ESCAPE ?4 UNION SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5, ?6, ?7, ?8, ?9, ?10, ?11)) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME");
2020-06-17 21:52:59 jdbc[13]: Plan       : calculate cost for plan [_0]
2020-06-17 21:52:59 jdbc[13]: Plan       :   for table filter _0
2020-06-17 21:52:59 jdbc[13]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@48e9dc70]
2020-06-17 21:52:59 jdbc[13]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@48e9dc70
2020-06-17 21:52:59 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:52:59 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:52:59 jdbc[13]: Plan       :   best plan item cost 4,022 index meta
2020-06-17 21:52:59 jdbc[13]: Plan       : plan cost 4,023
2020-06-17 21:52:59 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@1e97159]
2020-06-17 21:52:59 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@1e97159
2020-06-17 21:52:59 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:52:59 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:52:59 jdbc[13]: Plan       :   best plan item cost 3,981.78 index meta
2020-06-17 21:52:59 jdbc[13]: Plan       : plan cost 3,982.78
2020-06-17 21:52:59 jdbc[13]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@48e9dc70]
2020-06-17 21:52:59 jdbc[13]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@48e9dc70
2020-06-17 21:52:59 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:52:59 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:52:59 jdbc[13]: Plan       :   best plan item cost 4,022 index meta
2020-06-17 21:52:59 jdbc[13]: Plan       : plan cost 4,023
2020-06-17 21:52:59 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@1e97159]
2020-06-17 21:52:59 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@1e97159
2020-06-17 21:52:59 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:52:59 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:52:59 jdbc[13]: Plan       :   best plan item cost 3,981.78 index meta
2020-06-17 21:52:59 jdbc[13]: Plan       : plan cost 3,982.78
2020-06-17 21:52:59 jdbc[13]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@48e9dc70]
2020-06-17 21:52:59 jdbc[13]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@48e9dc70
2020-06-17 21:52:59 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:52:59 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:52:59 jdbc[13]: Plan       :   best plan item cost 4,022 index meta
2020-06-17 21:52:59 jdbc[13]: Plan       : plan cost 4,023
2020-06-17 21:52:59 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@1e97159]
2020-06-17 21:52:59 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@1e97159
2020-06-17 21:52:59 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:52:59 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:52:59 jdbc[13]: Plan       :   best plan item cost 3,981.78 index meta
2020-06-17 21:52:59 jdbc[13]: Plan       : plan cost 3,982.78
2020-06-17 21:52:59 jdbc[13]: Plan       :   best plan item cost 8,005.78 index (SELECT
    SYNONYM_CATALOG AS TABLE_CAT,
    SYNONYM_SCHEMA AS TABLE_SCHEM,
    SYNONYM_NAME AS TABLE_NAME,
    TYPE_NAME AS TABLE_TYPE,
    REMARKS,
    TYPE_NAME AS TYPE_CAT,
    TYPE_NAME AS TYPE_SCHEM,
    TYPE_NAME AS TYPE_NAME,
    TYPE_NAME AS SELF_REFERENCING_COL_NAME,
    TYPE_NAME AS REF_GENERATION,
    NULL AS SQL
FROM INFORMATION_SCHEMA.SYNONYMS
    /* meta */
WHERE (SYNONYM_NAME LIKE ?3 ESCAPE ?4)
    AND ((SYNONYM_CATALOG LIKE ?1 ESCAPE ?4)
    AND (SYNONYM_SCHEMA LIKE ?2 ESCAPE ?4)))
UNION
(SELECT
    TABLE_CATALOG AS TABLE_CAT,
    TABLE_SCHEMA AS TABLE_SCHEM,
    TABLE_NAME,
    TABLE_TYPE,
    REMARKS,
    TYPE_NAME AS TYPE_CAT,
    TYPE_NAME AS TYPE_SCHEM,
    TYPE_NAME,
    TYPE_NAME AS SELF_REFERENCING_COL_NAME,
    TYPE_NAME AS REF_GENERATION,
    SQL
FROM INFORMATION_SCHEMA.TABLES
    /* meta */
WHERE (TABLE_TYPE IN(?5, ?6, ?7, ?8, ?9, ?10, ?11))
    AND ((TABLE_NAME LIKE ?3 ESCAPE ?4)
    AND ((TABLE_CATALOG LIKE ?1 ESCAPE ?4)
    AND (TABLE_SCHEMA LIKE ?2 ESCAPE ?4))))
2020-06-17 21:52:59 jdbc[13]: Plan       : plan cost 8,006.78
2020-06-17 21:52:59 jdbc[13]: 
/**/prep25.setString(1, "%");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep25.setString(2, "INFORMATION_SCHEMA");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep25.setString(3, "%");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep25.setString(4, "\\");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep25.setString(5, "TABLE");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep25.setString(6, "SYSTEM TABLE");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep25.setString(7, "VIEW");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep25.setString(8, "SYSTEM VIEW");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep25.setString(9, "TABLE LINK");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep25.setString(10, "SYNONYM");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep25.setString(11, "EXTERNAL");
2020-06-17 21:52:59 jdbc[13]: 
/**/ResultSet rs30 = prep25.executeQuery();
2020-06-17 21:52:59 jdbc[13]: Plan       : calculate cost for plan [_1]
2020-06-17 21:52:59 jdbc[13]: Plan       :   for table filter _1
2020-06-17 21:52:59 jdbc[13]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@48e9dc70]
2020-06-17 21:52:59 jdbc[13]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@48e9dc70
2020-06-17 21:52:59 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:52:59 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:52:59 jdbc[13]: Plan       :   best plan item cost 4,022 index meta
2020-06-17 21:52:59 jdbc[13]: Plan       : plan cost 4,023
2020-06-17 21:52:59 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@1e97159]
2020-06-17 21:52:59 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@1e97159
2020-06-17 21:52:59 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:52:59 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:52:59 jdbc[13]: Plan       :   best plan item cost 3,981.78 index meta
2020-06-17 21:52:59 jdbc[13]: Plan       : plan cost 3,982.78
2020-06-17 21:52:59 jdbc[13]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@48e9dc70]
2020-06-17 21:52:59 jdbc[13]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@48e9dc70
2020-06-17 21:52:59 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:52:59 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:52:59 jdbc[13]: Plan       :   best plan item cost 4,022 index meta
2020-06-17 21:52:59 jdbc[13]: Plan       : plan cost 4,023
2020-06-17 21:52:59 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@1e97159]
2020-06-17 21:52:59 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@1e97159
2020-06-17 21:52:59 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:52:59 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:52:59 jdbc[13]: Plan       :   best plan item cost 3,981.78 index meta
2020-06-17 21:52:59 jdbc[13]: Plan       : plan cost 3,982.78
2020-06-17 21:52:59 jdbc[13]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@48e9dc70]
2020-06-17 21:52:59 jdbc[13]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@48e9dc70
2020-06-17 21:52:59 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:52:59 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:52:59 jdbc[13]: Plan       :   best plan item cost 4,022 index meta
2020-06-17 21:52:59 jdbc[13]: Plan       : plan cost 4,023
2020-06-17 21:52:59 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@1e97159]
2020-06-17 21:52:59 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@1e97159
2020-06-17 21:52:59 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:52:59 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:52:59 jdbc[13]: Plan       :   best plan item cost 3,981.78 index meta
2020-06-17 21:52:59 jdbc[13]: Plan       : plan cost 3,982.78
2020-06-17 21:52:59 jdbc[13]: Plan       :   best plan item cost 8,005.78 index (SELECT
    SYNONYM_CATALOG AS TABLE_CAT,
    SYNONYM_SCHEMA AS TABLE_SCHEM,
    SYNONYM_NAME AS TABLE_NAME,
    TYPE_NAME AS TABLE_TYPE,
    REMARKS,
    TYPE_NAME AS TYPE_CAT,
    TYPE_NAME AS TYPE_SCHEM,
    TYPE_NAME AS TYPE_NAME,
    TYPE_NAME AS SELF_REFERENCING_COL_NAME,
    TYPE_NAME AS REF_GENERATION,
    NULL AS SQL
FROM INFORMATION_SCHEMA.SYNONYMS
    /* meta */
WHERE (SYNONYM_NAME LIKE ?3 ESCAPE ?4)
    AND ((SYNONYM_CATALOG LIKE ?1 ESCAPE ?4)
    AND (SYNONYM_SCHEMA LIKE ?2 ESCAPE ?4)))
UNION
(SELECT
    TABLE_CATALOG AS TABLE_CAT,
    TABLE_SCHEMA AS TABLE_SCHEM,
    TABLE_NAME,
    TABLE_TYPE,
    REMARKS,
    TYPE_NAME AS TYPE_CAT,
    TYPE_NAME AS TYPE_SCHEM,
    TYPE_NAME,
    TYPE_NAME AS SELF_REFERENCING_COL_NAME,
    TYPE_NAME AS REF_GENERATION,
    SQL
FROM INFORMATION_SCHEMA.TABLES
    /* meta */
WHERE (TABLE_TYPE IN(?5, ?6, ?7, ?8, ?9, ?10, ?11))
    AND ((TABLE_NAME LIKE ?3 ESCAPE ?4)
    AND ((TABLE_CATALOG LIKE ?1 ESCAPE ?4)
    AND (TABLE_SCHEMA LIKE ?2 ESCAPE ?4))))
2020-06-17 21:52:59 jdbc[13]: Plan       : plan cost 8,006.78
2020-06-17 21:52:59 jdbc[13]: 
/*SQL l:1007 #:33 t:2*/SELECT TABLE_CAT, TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_CAT, TYPE_SCHEM, TYPE_NAME, SELF_REFERENCING_COL_NAME, REF_GENERATION, SQL FROM (SELECT SYNONYM_CATALOG TABLE_CAT, SYNONYM_SCHEMA TABLE_SCHEM, SYNONYM_NAME as TABLE_NAME, TYPE_NAME AS TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME AS TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, NULL AS SQL FROM INFORMATION_SCHEMA.SYNONYMS WHERE SYNONYM_CATALOG LIKE ?1 ESCAPE ?4 AND SYNONYM_SCHEMA LIKE ?2 ESCAPE ?4 AND SYNONYM_NAME LIKE ?3 ESCAPE ?4 UNION SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5, ?6, ?7, ?8, ?9, ?10, ?11)) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME {1: '%', 2: 'INFORMATION_SCHEMA', 3: '%', 4: '\\', 5: 'TABLE', 6: 'SYSTEM TABLE', 7: 'VIEW', 8: 'SYSTEM VIEW', 9: 'TABLE LINK', 10: 'SYNONYM', 11: 'EXTERNAL'};
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.getString("TABLE_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.getString("TABLE_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.getString("TABLE_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.getString("TABLE_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.getString("TABLE_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.getString("TABLE_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.getString("TABLE_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.getString("TABLE_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.getString("TABLE_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.getString("TABLE_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.getString("TABLE_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.getString("TABLE_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.getString("TABLE_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.getString("TABLE_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.getString("TABLE_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.getString("TABLE_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.getString("TABLE_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.getString("TABLE_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.getString("TABLE_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.getString("TABLE_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.getString("TABLE_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.getString("TABLE_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.getString("TABLE_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.getString("TABLE_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.getString("TABLE_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.getString("TABLE_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.getString("TABLE_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.getString("TABLE_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.getString("TABLE_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.getString("TABLE_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.getString("TABLE_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.getString("TABLE_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.getString("TABLE_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.getString("TABLE_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.getString("TABLE_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.getString("TABLE_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.getString("TABLE_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.getString("TABLE_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.getString("TABLE_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.getString("TABLE_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.getString("TABLE_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.getString("TABLE_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.getString("TABLE_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.getString("TABLE_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.getString("TABLE_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.getString("TABLE_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.getString("TABLE_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.getString("TABLE_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.getString("TABLE_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.getString("TABLE_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.getString("TABLE_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.getString("TABLE_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.getString("TABLE_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.getString("TABLE_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.getString("TABLE_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.getString("TABLE_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.getString("TABLE_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.getString("TABLE_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.getString("TABLE_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.getString("TABLE_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.getString("TABLE_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.getString("TABLE_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.getString("TABLE_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.getString("TABLE_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.getString("TABLE_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.getString("TABLE_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs30.close();
2020-06-17 21:52:59 jdbc[13]: 
/**/prep25.close();
2020-06-17 21:52:59 jdbc[13]: 
/**/dbMeta4.getConnection();
2020-06-17 21:52:59 jdbc[13]: 
/**/PreparedStatement prep26 = conn10.prepareStatement("SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ?");
2020-06-17 21:52:59 jdbc[13]: Plan       : calculate cost for plan [COLUMNS:-2:org.h2.table.MetaTable@58c0a012]
2020-06-17 21:52:59 jdbc[13]: Plan       :   for table filter COLUMNS:-2:org.h2.table.MetaTable@58c0a012
2020-06-17 21:52:59 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:52:59 jdbc[13]: Table      :     potential plan item cost 28 index meta
2020-06-17 21:52:59 jdbc[13]: Plan       :   best plan item cost 27.44 index meta
2020-06-17 21:52:59 jdbc[13]: Plan       : plan cost 28.44
2020-06-17 21:52:59 jdbc[13]: 
/**/prep26.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep26.setString(2, "CATALOGS");
2020-06-17 21:52:59 jdbc[13]: 
/**/ResultSet rs31 = prep26.executeQuery();
2020-06-17 21:52:59 jdbc[13]: 
/*SQL l:123 #:1*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'CATALOGS'};
2020-06-17 21:52:59 jdbc[13]: 
/**/rs31.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs31.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs31.close();
2020-06-17 21:52:59 jdbc[13]: 
/**/prep26.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep26.setString(2, "COLLATIONS");
2020-06-17 21:52:59 jdbc[13]: 
/**/ResultSet rs32 = prep26.executeQuery();
2020-06-17 21:52:59 jdbc[13]: 
/*SQL l:123 #:2*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'COLLATIONS'};
2020-06-17 21:52:59 jdbc[13]: 
/**/rs32.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs32.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs32.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs32.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs32.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs32.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs32.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs32.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs32.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs32.close();
2020-06-17 21:52:59 jdbc[13]: 
/**/prep26.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep26.setString(2, "COLUMNS");
2020-06-17 21:52:59 jdbc[13]: 
/**/ResultSet rs33 = prep26.executeQuery();
2020-06-17 21:52:59 jdbc[13]: 
/*SQL l:123 #:32*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'COLUMNS'};
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs33.close();
2020-06-17 21:52:59 jdbc[13]: 
/**/prep26.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep26.setString(2, "COLUMN_PRIVILEGES");
2020-06-17 21:52:59 jdbc[13]: 
/**/ResultSet rs34 = prep26.executeQuery();
2020-06-17 21:52:59 jdbc[13]: 
/*SQL l:123 #:8*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'COLUMN_PRIVILEGES'};
2020-06-17 21:52:59 jdbc[13]: 
/**/rs34.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs34.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs34.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs34.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs34.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs34.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs34.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs34.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs34.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs34.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs34.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs34.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs34.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs34.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs34.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs34.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs34.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs34.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs34.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs34.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs34.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs34.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs34.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs34.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs34.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs34.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs34.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs34.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs34.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs34.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs34.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs34.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs34.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs34.close();
2020-06-17 21:52:59 jdbc[13]: 
/**/prep26.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep26.setString(2, "CONSTANTS");
2020-06-17 21:52:59 jdbc[13]: 
/**/ResultSet rs35 = prep26.executeQuery();
2020-06-17 21:52:59 jdbc[13]: 
/*SQL l:123 #:7*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'CONSTANTS'};
2020-06-17 21:52:59 jdbc[13]: 
/**/rs35.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs35.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs35.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs35.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs35.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs35.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs35.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs35.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs35.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs35.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs35.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs35.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs35.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs35.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs35.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs35.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs35.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs35.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs35.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs35.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs35.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs35.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs35.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs35.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs35.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs35.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs35.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs35.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs35.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs35.close();
2020-06-17 21:52:59 jdbc[13]: 
/**/prep26.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep26.setString(2, "CONSTRAINTS");
2020-06-17 21:52:59 jdbc[13]: 
/**/ResultSet rs36 = prep26.executeQuery();
2020-06-17 21:52:59 jdbc[13]: 
/*SQL l:123 #:13*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'CONSTRAINTS'};
2020-06-17 21:52:59 jdbc[13]: 
/**/rs36.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs36.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs36.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs36.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs36.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs36.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs36.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs36.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs36.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs36.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs36.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs36.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs36.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs36.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs36.close();
2020-06-17 21:52:59 jdbc[13]: 
/**/prep26.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep26.setString(2, "CROSS_REFERENCES");
2020-06-17 21:52:59 jdbc[13]: 
/**/ResultSet rs37 = prep26.executeQuery();
2020-06-17 21:52:59 jdbc[13]: 
/*SQL l:123 #:14*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'CROSS_REFERENCES'};
2020-06-17 21:52:59 jdbc[13]: 
/**/rs37.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs37.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs37.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs37.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs37.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs37.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs37.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs37.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs37.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs37.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs37.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs37.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs37.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs37.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs37.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs37.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs37.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs37.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs37.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs37.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs37.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs37.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs37.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs37.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs37.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs37.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs37.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs37.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs37.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs37.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs37.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs37.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs37.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs37.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs37.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs37.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs37.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs37.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs37.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs37.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs37.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs37.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs37.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs37.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs37.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs37.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs37.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs37.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs37.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs37.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs37.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs37.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs37.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs37.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs37.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs37.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs37.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs37.close();
2020-06-17 21:52:59 jdbc[13]: 
/**/prep26.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep26.setString(2, "DOMAINS");
2020-06-17 21:52:59 jdbc[13]: 
/**/ResultSet rs38 = prep26.executeQuery();
2020-06-17 21:52:59 jdbc[13]: 
/*SQL l:123 #:14*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'DOMAINS'};
2020-06-17 21:52:59 jdbc[13]: 
/**/rs38.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs38.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs38.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs38.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs38.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs38.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs38.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs38.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs38.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs38.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs38.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs38.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs38.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs38.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs38.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs38.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs38.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs38.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs38.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs38.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs38.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs38.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs38.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs38.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs38.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs38.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs38.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs38.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs38.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs38.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs38.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs38.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs38.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs38.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs38.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs38.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs38.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs38.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs38.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs38.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs38.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs38.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs38.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs38.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs38.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs38.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs38.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs38.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs38.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs38.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs38.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs38.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs38.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs38.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs38.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs38.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs38.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs38.close();
2020-06-17 21:52:59 jdbc[13]: 
/**/prep26.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep26.setString(2, "FUNCTION_ALIASES");
2020-06-17 21:52:59 jdbc[13]: 
/**/ResultSet rs39 = prep26.executeQuery();
2020-06-17 21:52:59 jdbc[13]: 
/*SQL l:123 #:12*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'FUNCTION_ALIASES'};
2020-06-17 21:52:59 jdbc[13]: 
/**/rs39.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs39.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs39.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs39.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs39.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs39.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs39.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs39.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs39.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs39.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs39.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs39.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs39.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs39.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs39.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs39.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs39.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs39.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs39.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs39.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs39.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs39.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs39.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs39.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs39.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs39.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs39.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs39.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs39.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs39.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs39.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs39.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs39.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs39.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs39.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs39.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs39.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs39.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs39.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs39.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs39.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs39.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs39.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs39.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs39.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs39.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs39.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs39.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs39.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs39.close();
2020-06-17 21:52:59 jdbc[13]: 
/**/prep26.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep26.setString(2, "FUNCTION_COLUMNS");
2020-06-17 21:52:59 jdbc[13]: 
/**/ResultSet rs40 = prep26.executeQuery();
2020-06-17 21:52:59 jdbc[13]: 
/*SQL l:123 #:17 t:7*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'FUNCTION_COLUMNS'};
2020-06-17 21:52:59 jdbc[13]: 
/**/rs40.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs40.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs40.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs40.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs40.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs40.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs40.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs40.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs40.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs40.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs40.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs40.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs40.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs40.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs40.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs40.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs40.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs40.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs40.close();
2020-06-17 21:52:59 jdbc[13]: 
/**/prep26.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep26.setString(2, "HELP");
2020-06-17 21:52:59 jdbc[13]: 
/**/ResultSet rs41 = prep26.executeQuery();
2020-06-17 21:52:59 jdbc[13]: 
/*SQL l:123 #:5*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'HELP'};
2020-06-17 21:52:59 jdbc[13]: 
/**/rs41.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs41.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs41.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs41.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs41.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs41.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs41.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs41.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs41.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs41.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs41.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs41.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs41.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs41.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs41.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs41.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs41.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs41.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs41.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs41.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs41.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs41.close();
2020-06-17 21:52:59 jdbc[13]: 
/**/prep26.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep26.setString(2, "INDEXES");
2020-06-17 21:52:59 jdbc[13]: 
/**/ResultSet rs42 = prep26.executeQuery();
2020-06-17 21:52:59 jdbc[13]: 
/*SQL l:123 #:22*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'INDEXES'};
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs42.close();
2020-06-17 21:52:59 jdbc[13]: 
/**/prep26.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep26.setString(2, "IN_DOUBT");
2020-06-17 21:52:59 jdbc[13]: 
/**/ResultSet rs43 = prep26.executeQuery();
2020-06-17 21:52:59 jdbc[13]: 
/*SQL l:123 #:2*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'IN_DOUBT'};
2020-06-17 21:52:59 jdbc[13]: 
/**/rs43.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs43.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs43.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs43.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs43.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs43.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs43.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs43.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs43.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs43.close();
2020-06-17 21:52:59 jdbc[13]: 
/**/prep26.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep26.setString(2, "KEY_COLUMN_USAGE");
2020-06-17 21:52:59 jdbc[13]: 
/**/ResultSet rs44 = prep26.executeQuery();
2020-06-17 21:52:59 jdbc[13]: 
/*SQL l:123 #:9*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'KEY_COLUMN_USAGE'};
2020-06-17 21:52:59 jdbc[13]: 
/**/rs44.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs44.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs44.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs44.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs44.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs44.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs44.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs44.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs44.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs44.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs44.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs44.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs44.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs44.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs44.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs44.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs44.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs44.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs44.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs44.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs44.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs44.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs44.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs44.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs44.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs44.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs44.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs44.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs44.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs44.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs44.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs44.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs44.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs44.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs44.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs44.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs44.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs44.close();
2020-06-17 21:52:59 jdbc[13]: 
/**/prep26.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep26.setString(2, "LOCKS");
2020-06-17 21:52:59 jdbc[13]: 
/**/ResultSet rs45 = prep26.executeQuery();
2020-06-17 21:52:59 jdbc[13]: 
/*SQL l:123 #:4*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'LOCKS'};
2020-06-17 21:52:59 jdbc[13]: 
/**/rs45.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs45.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs45.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs45.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs45.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs45.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs45.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs45.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs45.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs45.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs45.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs45.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs45.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs45.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs45.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs45.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs45.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs45.close();
2020-06-17 21:52:59 jdbc[13]: 
/**/prep26.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep26.setString(2, "QUERY_STATISTICS");
2020-06-17 21:52:59 jdbc[13]: 
/**/ResultSet rs46 = prep26.executeQuery();
2020-06-17 21:52:59 jdbc[13]: 
/*SQL l:123 #:12*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'QUERY_STATISTICS'};
2020-06-17 21:52:59 jdbc[13]: 
/**/rs46.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs46.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs46.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs46.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs46.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs46.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs46.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs46.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs46.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs46.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs46.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs46.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs46.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs46.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs46.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs46.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs46.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs46.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs46.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs46.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs46.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs46.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs46.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs46.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs46.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs46.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs46.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs46.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs46.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs46.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs46.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs46.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs46.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs46.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs46.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs46.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs46.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs46.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs46.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs46.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs46.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs46.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs46.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs46.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs46.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs46.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs46.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs46.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs46.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs46.close();
2020-06-17 21:52:59 jdbc[13]: 
/**/prep26.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep26.setString(2, "REFERENTIAL_CONSTRAINTS");
2020-06-17 21:52:59 jdbc[13]: 
/**/ResultSet rs47 = prep26.executeQuery();
2020-06-17 21:52:59 jdbc[13]: 
/*SQL l:123 #:9*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'REFERENTIAL_CONSTRAINTS'};
2020-06-17 21:52:59 jdbc[13]: 
/**/rs47.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs47.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs47.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs47.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs47.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs47.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs47.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs47.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs47.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs47.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs47.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs47.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs47.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs47.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs47.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs47.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs47.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs47.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs47.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs47.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs47.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs47.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs47.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs47.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs47.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs47.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs47.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs47.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs47.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs47.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs47.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs47.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs47.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs47.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs47.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs47.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs47.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs47.close();
2020-06-17 21:52:59 jdbc[13]: 
/**/prep26.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep26.setString(2, "RIGHTS");
2020-06-17 21:52:59 jdbc[13]: 
/**/ResultSet rs48 = prep26.executeQuery();
2020-06-17 21:52:59 jdbc[13]: 
/*SQL l:123 #:7*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'RIGHTS'};
2020-06-17 21:52:59 jdbc[13]: 
/**/rs48.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs48.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs48.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs48.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs48.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs48.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs48.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs48.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs48.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs48.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs48.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs48.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs48.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs48.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs48.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs48.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs48.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs48.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs48.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs48.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs48.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs48.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs48.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs48.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs48.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs48.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs48.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs48.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs48.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs48.close();
2020-06-17 21:52:59 jdbc[13]: 
/**/prep26.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep26.setString(2, "ROLES");
2020-06-17 21:52:59 jdbc[13]: 
/**/ResultSet rs49 = prep26.executeQuery();
2020-06-17 21:52:59 jdbc[13]: 
/*SQL l:123 #:3*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'ROLES'};
2020-06-17 21:52:59 jdbc[13]: 
/**/rs49.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs49.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs49.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs49.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs49.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs49.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs49.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs49.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs49.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs49.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs49.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs49.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs49.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs49.close();
2020-06-17 21:52:59 jdbc[13]: 
/**/prep26.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep26.setString(2, "SCHEMATA");
2020-06-17 21:52:59 jdbc[13]: 
/**/ResultSet rs50 = prep26.executeQuery();
2020-06-17 21:52:59 jdbc[13]: 
/*SQL l:123 #:8*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'SCHEMATA'};
2020-06-17 21:52:59 jdbc[13]: 
/**/rs50.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs50.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs50.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs50.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs50.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs50.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs50.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs50.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs50.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs50.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs50.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs50.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs50.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs50.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs50.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs50.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs50.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs50.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs50.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs50.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs50.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs50.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs50.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs50.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs50.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs50.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs50.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs50.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs50.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs50.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs50.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs50.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs50.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs50.close();
2020-06-17 21:52:59 jdbc[13]: 
/**/prep26.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep26.setString(2, "SEQUENCES");
2020-06-17 21:52:59 jdbc[13]: 
/**/ResultSet rs51 = prep26.executeQuery();
2020-06-17 21:52:59 jdbc[13]: 
/*SQL l:123 #:12*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'SEQUENCES'};
2020-06-17 21:52:59 jdbc[13]: 
/**/rs51.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs51.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs51.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs51.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs51.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs51.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs51.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs51.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs51.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs51.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs51.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs51.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs51.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs51.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs51.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs51.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs51.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs51.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs51.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs51.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs51.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs51.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs51.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs51.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs51.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs51.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs51.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs51.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs51.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs51.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs51.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs51.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs51.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs51.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs51.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs51.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs51.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs51.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs51.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs51.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs51.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs51.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs51.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs51.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs51.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs51.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs51.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs51.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs51.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs51.close();
2020-06-17 21:52:59 jdbc[13]: 
/**/prep26.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep26.setString(2, "SESSIONS");
2020-06-17 21:52:59 jdbc[13]: 
/**/ResultSet rs52 = prep26.executeQuery();
2020-06-17 21:52:59 jdbc[13]: 
/*SQL l:123 #:12*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'SESSIONS'};
2020-06-17 21:52:59 jdbc[13]: 
/**/rs52.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs52.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs52.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs52.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs52.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs52.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs52.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs52.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs52.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs52.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs52.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs52.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs52.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs52.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs52.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs52.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs52.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs52.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs52.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs52.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs52.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs52.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs52.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs52.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs52.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs52.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs52.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs52.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs52.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs52.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs52.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs52.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs52.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs52.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs52.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs52.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs52.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs52.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs52.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs52.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs52.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs52.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs52.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs52.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs52.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs52.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs52.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs52.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs52.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs52.close();
2020-06-17 21:52:59 jdbc[13]: 
/**/prep26.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep26.setString(2, "SESSION_STATE");
2020-06-17 21:52:59 jdbc[13]: 
/**/ResultSet rs53 = prep26.executeQuery();
2020-06-17 21:52:59 jdbc[13]: 
/*SQL l:123 #:2*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'SESSION_STATE'};
2020-06-17 21:52:59 jdbc[13]: 
/**/rs53.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs53.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs53.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs53.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs53.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs53.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs53.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs53.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs53.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs53.close();
2020-06-17 21:52:59 jdbc[13]: 
/**/prep26.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep26.setString(2, "SETTINGS");
2020-06-17 21:52:59 jdbc[13]: 
/**/ResultSet rs54 = prep26.executeQuery();
2020-06-17 21:52:59 jdbc[13]: 
/*SQL l:123 #:2*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'SETTINGS'};
2020-06-17 21:52:59 jdbc[13]: 
/**/rs54.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs54.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs54.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs54.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs54.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs54.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs54.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs54.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs54.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs54.close();
2020-06-17 21:52:59 jdbc[13]: 
/**/prep26.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep26.setString(2, "SYNONYMS");
2020-06-17 21:52:59 jdbc[13]: 
/**/ResultSet rs55 = prep26.executeQuery();
2020-06-17 21:52:59 jdbc[13]: 
/*SQL l:123 #:9*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'SYNONYMS'};
2020-06-17 21:52:59 jdbc[13]: 
/**/rs55.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs55.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs55.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs55.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs55.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs55.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs55.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs55.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs55.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs55.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs55.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs55.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs55.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs55.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs55.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs55.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs55.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs55.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs55.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs55.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs55.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs55.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs55.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs55.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs55.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs55.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs55.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs55.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs55.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs55.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs55.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs55.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs55.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs55.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs55.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs55.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs55.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs55.close();
2020-06-17 21:52:59 jdbc[13]: 
/**/prep26.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep26.setString(2, "TABLES");
2020-06-17 21:52:59 jdbc[13]: 
/**/ResultSet rs56 = prep26.executeQuery();
2020-06-17 21:52:59 jdbc[13]: 
/*SQL l:123 #:12*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'TABLES'};
2020-06-17 21:52:59 jdbc[13]: 
/**/rs56.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs56.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs56.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs56.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs56.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs56.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs56.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs56.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs56.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs56.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs56.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs56.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs56.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs56.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs56.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs56.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs56.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs56.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs56.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs56.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs56.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs56.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs56.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs56.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs56.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs56.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs56.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs56.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs56.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs56.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs56.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs56.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs56.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs56.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs56.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs56.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs56.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs56.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs56.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs56.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs56.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs56.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs56.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs56.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs56.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs56.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs56.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs56.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs56.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs56.close();
2020-06-17 21:52:59 jdbc[13]: 
/**/prep26.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep26.setString(2, "TABLE_CONSTRAINTS");
2020-06-17 21:52:59 jdbc[13]: 
/**/ResultSet rs57 = prep26.executeQuery();
2020-06-17 21:52:59 jdbc[13]: 
/*SQL l:123 #:9*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'TABLE_CONSTRAINTS'};
2020-06-17 21:52:59 jdbc[13]: 
/**/rs57.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs57.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs57.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs57.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs57.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs57.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs57.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs57.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs57.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs57.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs57.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs57.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs57.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs57.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs57.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs57.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs57.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs57.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs57.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs57.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs57.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs57.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs57.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs57.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs57.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs57.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs57.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs57.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs57.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs57.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs57.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs57.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs57.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs57.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs57.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs57.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs57.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs57.close();
2020-06-17 21:52:59 jdbc[13]: 
/**/prep26.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep26.setString(2, "TABLE_PRIVILEGES");
2020-06-17 21:52:59 jdbc[13]: 
/**/ResultSet rs58 = prep26.executeQuery();
2020-06-17 21:52:59 jdbc[13]: 
/*SQL l:123 #:7*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'TABLE_PRIVILEGES'};
2020-06-17 21:52:59 jdbc[13]: 
/**/rs58.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs58.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs58.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs58.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs58.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs58.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs58.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs58.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs58.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs58.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs58.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs58.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs58.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs58.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs58.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs58.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs58.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs58.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs58.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs58.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs58.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs58.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs58.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs58.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs58.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs58.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs58.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs58.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs58.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs58.close();
2020-06-17 21:52:59 jdbc[13]: 
/**/prep26.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep26.setString(2, "TABLE_TYPES");
2020-06-17 21:52:59 jdbc[13]: 
/**/ResultSet rs59 = prep26.executeQuery();
2020-06-17 21:52:59 jdbc[13]: 
/*SQL l:123 #:1*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'TABLE_TYPES'};
2020-06-17 21:52:59 jdbc[13]: 
/**/rs59.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs59.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs59.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs59.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs59.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs59.close();
2020-06-17 21:52:59 jdbc[13]: 
/**/prep26.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep26.setString(2, "TRIGGERS");
2020-06-17 21:52:59 jdbc[13]: 
/**/ResultSet rs60 = prep26.executeQuery();
2020-06-17 21:52:59 jdbc[13]: 
/*SQL l:123 #:14*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'TRIGGERS'};
2020-06-17 21:52:59 jdbc[13]: 
/**/rs60.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs60.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs60.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs60.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs60.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs60.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs60.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs60.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs60.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs60.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs60.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs60.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs60.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs60.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs60.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs60.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs60.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs60.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs60.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs60.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs60.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs60.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs60.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs60.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs60.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs60.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs60.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs60.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs60.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs60.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs60.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs60.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs60.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs60.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs60.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs60.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs60.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs60.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs60.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs60.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs60.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs60.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs60.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs60.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs60.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs60.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs60.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs60.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs60.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs60.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs60.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs60.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs60.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs60.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs60.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs60.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs60.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs60.close();
2020-06-17 21:52:59 jdbc[13]: 
/**/prep26.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep26.setString(2, "TYPE_INFO");
2020-06-17 21:52:59 jdbc[13]: 
/**/ResultSet rs61 = prep26.executeQuery();
2020-06-17 21:52:59 jdbc[13]: 
/*SQL l:123 #:14*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'TYPE_INFO'};
2020-06-17 21:52:59 jdbc[13]: 
/**/rs61.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs61.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs61.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs61.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs61.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs61.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs61.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs61.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs61.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs61.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs61.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs61.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs61.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs61.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs61.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs61.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs61.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs61.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs61.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs61.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs61.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs61.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs61.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs61.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs61.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs61.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs61.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs61.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs61.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs61.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs61.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs61.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs61.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs61.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs61.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs61.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs61.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs61.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs61.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs61.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs61.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs61.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs61.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs61.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs61.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs61.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs61.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs61.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs61.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs61.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs61.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs61.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs61.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs61.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs61.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs61.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs61.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs61.close();
2020-06-17 21:52:59 jdbc[13]: 
/**/prep26.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep26.setString(2, "USERS");
2020-06-17 21:52:59 jdbc[13]: 
/**/ResultSet rs62 = prep26.executeQuery();
2020-06-17 21:52:59 jdbc[13]: 
/*SQL l:123 #:4*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'USERS'};
2020-06-17 21:52:59 jdbc[13]: 
/**/rs62.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs62.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs62.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs62.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs62.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs62.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs62.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs62.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs62.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs62.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs62.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs62.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs62.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs62.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs62.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs62.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs62.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs62.close();
2020-06-17 21:52:59 jdbc[13]: 
/**/prep26.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep26.setString(2, "VIEWS");
2020-06-17 21:52:59 jdbc[13]: 
/**/ResultSet rs63 = prep26.executeQuery();
2020-06-17 21:52:59 jdbc[13]: 
/*SQL l:123 #:9*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'VIEWS'};
2020-06-17 21:52:59 jdbc[13]: 
/**/rs63.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs63.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs63.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs63.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs63.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs63.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs63.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs63.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs63.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs63.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs63.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs63.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs63.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs63.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs63.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs63.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs63.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs63.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs63.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs63.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs63.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs63.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs63.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs63.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs63.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs63.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs63.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs63.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs63.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs63.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs63.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs63.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs63.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs63.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs63.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs63.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs63.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs63.close();
2020-06-17 21:52:59 jdbc[13]: 
/**/prep26.close();
2020-06-17 21:52:59 jdbc[13]: 
/**/dbMeta4.getProcedures(null, "INFORMATION_SCHEMA", null);
2020-06-17 21:52:59 jdbc[13]: 
/**/PreparedStatement prep27 = conn10.prepareStatement("SELECT ALIAS_CATALOG PROCEDURE_CAT, ALIAS_SCHEMA PROCEDURE_SCHEM, ALIAS_NAME PROCEDURE_NAME, COLUMN_COUNT NUM_INPUT_PARAMS, ZERO() NUM_OUTPUT_PARAMS, ZERO() NUM_RESULT_SETS, REMARKS, RETURNS_RESULT PROCEDURE_TYPE, ALIAS_NAME SPECIFIC_NAME FROM INFORMATION_SCHEMA.FUNCTION_ALIASES WHERE ALIAS_CATALOG LIKE ? ESCAPE ? AND ALIAS_SCHEMA LIKE ? ESCAPE ? AND ALIAS_NAME LIKE ? ESCAPE ? ORDER BY PROCEDURE_SCHEM, PROCEDURE_NAME, NUM_INPUT_PARAMS");
2020-06-17 21:52:59 jdbc[13]: Plan       : calculate cost for plan [FUNCTION_ALIASES:-13:org.h2.table.MetaTable@1ec978d9]
2020-06-17 21:52:59 jdbc[13]: Plan       :   for table filter FUNCTION_ALIASES:-13:org.h2.table.MetaTable@1ec978d9
2020-06-17 21:52:59 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:52:59 jdbc[13]: Plan       :   best plan item cost 10,000 index meta
2020-06-17 21:52:59 jdbc[13]: Plan       : plan cost 10,001
2020-06-17 21:52:59 jdbc[13]: 
/**/prep27.setString(1, "%");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep27.setString(2, "\\");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep27.setString(3, "INFORMATION_SCHEMA");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep27.setString(4, "\\");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep27.setString(5, "%");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep27.setString(6, "\\");
2020-06-17 21:52:59 jdbc[13]: 
/**/ResultSet rs64 = prep27.executeQuery();
2020-06-17 21:52:59 jdbc[13]: Plan       : calculate cost for plan [FUNCTION_ALIASES:-13:org.h2.table.MetaTable@1ec978d9]
2020-06-17 21:52:59 jdbc[13]: Plan       :   for table filter FUNCTION_ALIASES:-13:org.h2.table.MetaTable@1ec978d9
2020-06-17 21:52:59 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:52:59 jdbc[13]: Plan       :   best plan item cost 9,800 index meta
2020-06-17 21:52:59 jdbc[13]: Plan       : plan cost 9,801
2020-06-17 21:52:59 jdbc[13]: 
/*SQL l:438*/SELECT ALIAS_CATALOG PROCEDURE_CAT, ALIAS_SCHEMA PROCEDURE_SCHEM, ALIAS_NAME PROCEDURE_NAME, COLUMN_COUNT NUM_INPUT_PARAMS, ZERO() NUM_OUTPUT_PARAMS, ZERO() NUM_RESULT_SETS, REMARKS, RETURNS_RESULT PROCEDURE_TYPE, ALIAS_NAME SPECIFIC_NAME FROM INFORMATION_SCHEMA.FUNCTION_ALIASES WHERE ALIAS_CATALOG LIKE ? ESCAPE ? AND ALIAS_SCHEMA LIKE ? ESCAPE ? AND ALIAS_NAME LIKE ? ESCAPE ? ORDER BY PROCEDURE_SCHEM, PROCEDURE_NAME, NUM_INPUT_PARAMS {1: '%', 2: '\\', 3: 'INFORMATION_SCHEMA', 4: '\\', 5: '%', 6: '\\'};
2020-06-17 21:52:59 jdbc[13]: 
/**/rs64.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs64.close();
2020-06-17 21:52:59 jdbc[13]: 
/**/prep27.close();
2020-06-17 21:52:59 jdbc[13]: 
/**/dbMeta4.getTables(null, "PUBLIC", null, new String[]{"TABLE", "SYSTEM TABLE", "VIEW", "SYSTEM VIEW", "TABLE LINK", "SYNONYM", "EXTERNAL"});
2020-06-17 21:52:59 jdbc[13]: 
/**/PreparedStatement prep28 = conn10.prepareStatement("SELECT TABLE_CAT, TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_CAT, TYPE_SCHEM, TYPE_NAME, SELF_REFERENCING_COL_NAME, REF_GENERATION, SQL FROM (SELECT SYNONYM_CATALOG TABLE_CAT, SYNONYM_SCHEMA TABLE_SCHEM, SYNONYM_NAME as TABLE_NAME, TYPE_NAME AS TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME AS TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, NULL AS SQL FROM INFORMATION_SCHEMA.SYNONYMS WHERE SYNONYM_CATALOG LIKE ?1 ESCAPE ?4 AND SYNONYM_SCHEMA LIKE ?2 ESCAPE ?4 AND SYNONYM_NAME LIKE ?3 ESCAPE ?4 UNION SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5, ?6, ?7, ?8, ?9, ?10, ?11)) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep28.setString(1, "%");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep28.setString(2, "PUBLIC");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep28.setString(3, "%");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep28.setString(4, "\\");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep28.setString(5, "TABLE");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep28.setString(6, "SYSTEM TABLE");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep28.setString(7, "VIEW");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep28.setString(8, "SYSTEM VIEW");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep28.setString(9, "TABLE LINK");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep28.setString(10, "SYNONYM");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep28.setString(11, "EXTERNAL");
2020-06-17 21:52:59 jdbc[13]: 
/**/ResultSet rs65 = prep28.executeQuery();
2020-06-17 21:52:59 jdbc[13]: Plan       : calculate cost for plan [_2]
2020-06-17 21:52:59 jdbc[13]: Plan       :   for table filter _2
2020-06-17 21:52:59 jdbc[13]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@48e9dc70]
2020-06-17 21:52:59 jdbc[13]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@48e9dc70
2020-06-17 21:52:59 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:52:59 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:52:59 jdbc[13]: Plan       :   best plan item cost 4,022 index meta
2020-06-17 21:52:59 jdbc[13]: Plan       : plan cost 4,023
2020-06-17 21:52:59 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@1e97159]
2020-06-17 21:52:59 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@1e97159
2020-06-17 21:52:59 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:52:59 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:52:59 jdbc[13]: Plan       :   best plan item cost 3,981.78 index meta
2020-06-17 21:52:59 jdbc[13]: Plan       : plan cost 3,982.78
2020-06-17 21:52:59 jdbc[13]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@48e9dc70]
2020-06-17 21:52:59 jdbc[13]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@48e9dc70
2020-06-17 21:52:59 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:52:59 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:52:59 jdbc[13]: Plan       :   best plan item cost 4,022 index meta
2020-06-17 21:52:59 jdbc[13]: Plan       : plan cost 4,023
2020-06-17 21:52:59 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@1e97159]
2020-06-17 21:52:59 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@1e97159
2020-06-17 21:52:59 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:52:59 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:52:59 jdbc[13]: Plan       :   best plan item cost 3,981.78 index meta
2020-06-17 21:52:59 jdbc[13]: Plan       : plan cost 3,982.78
2020-06-17 21:52:59 jdbc[13]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@48e9dc70]
2020-06-17 21:52:59 jdbc[13]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@48e9dc70
2020-06-17 21:52:59 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:52:59 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:52:59 jdbc[13]: Plan       :   best plan item cost 4,022 index meta
2020-06-17 21:52:59 jdbc[13]: Plan       : plan cost 4,023
2020-06-17 21:52:59 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@1e97159]
2020-06-17 21:52:59 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@1e97159
2020-06-17 21:52:59 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:52:59 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:52:59 jdbc[13]: Plan       :   best plan item cost 3,981.78 index meta
2020-06-17 21:52:59 jdbc[13]: Plan       : plan cost 3,982.78
2020-06-17 21:52:59 jdbc[13]: Plan       :   best plan item cost 8,005.78 index (SELECT
    SYNONYM_CATALOG AS TABLE_CAT,
    SYNONYM_SCHEMA AS TABLE_SCHEM,
    SYNONYM_NAME AS TABLE_NAME,
    TYPE_NAME AS TABLE_TYPE,
    REMARKS,
    TYPE_NAME AS TYPE_CAT,
    TYPE_NAME AS TYPE_SCHEM,
    TYPE_NAME AS TYPE_NAME,
    TYPE_NAME AS SELF_REFERENCING_COL_NAME,
    TYPE_NAME AS REF_GENERATION,
    NULL AS SQL
FROM INFORMATION_SCHEMA.SYNONYMS
    /* meta */
WHERE (SYNONYM_NAME LIKE ?3 ESCAPE ?4)
    AND ((SYNONYM_CATALOG LIKE ?1 ESCAPE ?4)
    AND (SYNONYM_SCHEMA LIKE ?2 ESCAPE ?4)))
UNION
(SELECT
    TABLE_CATALOG AS TABLE_CAT,
    TABLE_SCHEMA AS TABLE_SCHEM,
    TABLE_NAME,
    TABLE_TYPE,
    REMARKS,
    TYPE_NAME AS TYPE_CAT,
    TYPE_NAME AS TYPE_SCHEM,
    TYPE_NAME,
    TYPE_NAME AS SELF_REFERENCING_COL_NAME,
    TYPE_NAME AS REF_GENERATION,
    SQL
FROM INFORMATION_SCHEMA.TABLES
    /* meta */
WHERE (TABLE_TYPE IN(?5, ?6, ?7, ?8, ?9, ?10, ?11))
    AND ((TABLE_NAME LIKE ?3 ESCAPE ?4)
    AND ((TABLE_CATALOG LIKE ?1 ESCAPE ?4)
    AND (TABLE_SCHEMA LIKE ?2 ESCAPE ?4))))
2020-06-17 21:52:59 jdbc[13]: Plan       : plan cost 8,006.78
2020-06-17 21:52:59 jdbc[13]: 
/*SQL l:1007 #:2*/SELECT TABLE_CAT, TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_CAT, TYPE_SCHEM, TYPE_NAME, SELF_REFERENCING_COL_NAME, REF_GENERATION, SQL FROM (SELECT SYNONYM_CATALOG TABLE_CAT, SYNONYM_SCHEMA TABLE_SCHEM, SYNONYM_NAME as TABLE_NAME, TYPE_NAME AS TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME AS TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, NULL AS SQL FROM INFORMATION_SCHEMA.SYNONYMS WHERE SYNONYM_CATALOG LIKE ?1 ESCAPE ?4 AND SYNONYM_SCHEMA LIKE ?2 ESCAPE ?4 AND SYNONYM_NAME LIKE ?3 ESCAPE ?4 UNION SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5, ?6, ?7, ?8, ?9, ?10, ?11)) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME {1: '%', 2: 'PUBLIC', 3: '%', 4: '\\', 5: 'TABLE', 6: 'SYSTEM TABLE', 7: 'VIEW', 8: 'SYSTEM VIEW', 9: 'TABLE LINK', 10: 'SYNONYM', 11: 'EXTERNAL'};
2020-06-17 21:52:59 jdbc[13]: 
/**/rs65.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs65.getString("TABLE_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs65.getString("TABLE_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs65.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs65.getString("TABLE_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs65.getString("TABLE_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs65.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs65.close();
2020-06-17 21:52:59 jdbc[13]: 
/**/prep28.close();
2020-06-17 21:52:59 jdbc[13]: 
/**/dbMeta4.getConnection();
2020-06-17 21:52:59 jdbc[13]: 
/**/PreparedStatement prep29 = conn10.prepareStatement("SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ?");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep29.setString(1, "PUBLIC");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep29.setString(2, "CUSTOMER_TBL");
2020-06-17 21:52:59 jdbc[13]: 
/**/ResultSet rs66 = prep29.executeQuery();
2020-06-17 21:52:59 jdbc[13]: 
/*SQL l:123 #:4*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'PUBLIC', 2: 'CUSTOMER_TBL'};
2020-06-17 21:52:59 jdbc[13]: 
/**/rs66.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs66.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs66.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs66.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs66.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs66.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs66.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs66.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs66.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs66.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs66.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs66.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs66.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs66.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs66.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs66.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs66.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs66.close();
2020-06-17 21:52:59 jdbc[13]: 
/**/prep29.setString(1, "PUBLIC");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep29.setString(2, "LOG_TBL");
2020-06-17 21:52:59 jdbc[13]: 
/**/ResultSet rs67 = prep29.executeQuery();
2020-06-17 21:52:59 jdbc[13]: 
/*SQL l:123 #:9*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'PUBLIC', 2: 'LOG_TBL'};
2020-06-17 21:52:59 jdbc[13]: 
/**/rs67.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs67.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs67.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs67.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs67.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs67.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs67.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs67.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs67.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs67.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs67.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs67.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs67.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs67.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs67.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs67.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs67.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs67.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs67.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs67.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs67.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs67.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs67.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs67.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs67.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs67.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs67.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs67.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs67.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs67.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs67.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs67.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs67.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs67.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs67.getInt("ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs67.getString("COLUMN_TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs67.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs67.close();
2020-06-17 21:52:59 jdbc[13]: 
/**/prep29.close();
2020-06-17 21:52:59 jdbc[13]: 
/**/dbMeta4.getProcedures(null, "PUBLIC", null);
2020-06-17 21:52:59 jdbc[13]: 
/**/PreparedStatement prep30 = conn10.prepareStatement("SELECT ALIAS_CATALOG PROCEDURE_CAT, ALIAS_SCHEMA PROCEDURE_SCHEM, ALIAS_NAME PROCEDURE_NAME, COLUMN_COUNT NUM_INPUT_PARAMS, ZERO() NUM_OUTPUT_PARAMS, ZERO() NUM_RESULT_SETS, REMARKS, RETURNS_RESULT PROCEDURE_TYPE, ALIAS_NAME SPECIFIC_NAME FROM INFORMATION_SCHEMA.FUNCTION_ALIASES WHERE ALIAS_CATALOG LIKE ? ESCAPE ? AND ALIAS_SCHEMA LIKE ? ESCAPE ? AND ALIAS_NAME LIKE ? ESCAPE ? ORDER BY PROCEDURE_SCHEM, PROCEDURE_NAME, NUM_INPUT_PARAMS");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep30.setString(1, "%");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep30.setString(2, "\\");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep30.setString(3, "PUBLIC");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep30.setString(4, "\\");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep30.setString(5, "%");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep30.setString(6, "\\");
2020-06-17 21:52:59 jdbc[13]: 
/**/ResultSet rs68 = prep30.executeQuery();
2020-06-17 21:52:59 jdbc[13]: Plan       : calculate cost for plan [FUNCTION_ALIASES:-13:org.h2.table.MetaTable@1ec978d9]
2020-06-17 21:52:59 jdbc[13]: Plan       :   for table filter FUNCTION_ALIASES:-13:org.h2.table.MetaTable@1ec978d9
2020-06-17 21:52:59 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:52:59 jdbc[13]: Plan       :   best plan item cost 9,900 index meta
2020-06-17 21:52:59 jdbc[13]: Plan       : plan cost 9,901
2020-06-17 21:52:59 jdbc[13]: 
/*SQL l:438*/SELECT ALIAS_CATALOG PROCEDURE_CAT, ALIAS_SCHEMA PROCEDURE_SCHEM, ALIAS_NAME PROCEDURE_NAME, COLUMN_COUNT NUM_INPUT_PARAMS, ZERO() NUM_OUTPUT_PARAMS, ZERO() NUM_RESULT_SETS, REMARKS, RETURNS_RESULT PROCEDURE_TYPE, ALIAS_NAME SPECIFIC_NAME FROM INFORMATION_SCHEMA.FUNCTION_ALIASES WHERE ALIAS_CATALOG LIKE ? ESCAPE ? AND ALIAS_SCHEMA LIKE ? ESCAPE ? AND ALIAS_NAME LIKE ? ESCAPE ? ORDER BY PROCEDURE_SCHEM, PROCEDURE_NAME, NUM_INPUT_PARAMS {1: '%', 2: '\\', 3: 'PUBLIC', 4: '\\', 5: '%', 6: '\\'};
2020-06-17 21:52:59 jdbc[13]: 
/**/rs68.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs68.close();
2020-06-17 21:52:59 jdbc[13]: 
/**/prep30.close();
2020-06-17 21:52:59 jdbc[13]: 
/**/dbMeta3.getIndexInfo(null, "PUBLIC", "CUSTOMER_TBL", false, true);
2020-06-17 21:52:59 jdbc[13]: 
/**/PreparedStatement prep31 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, NON_UNIQUE, TABLE_CATALOG INDEX_QUALIFIER, INDEX_NAME, INDEX_TYPE TYPE, ORDINAL_POSITION, COLUMN_NAME, ASC_OR_DESC, CARDINALITY, PAGES, FILTER_CONDITION, SORT_TYPE FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND (TRUE) AND TABLE_NAME = ? ORDER BY NON_UNIQUE, TYPE, TABLE_SCHEM, INDEX_NAME, ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@2e567e2a]
2020-06-17 21:52:59 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@2e567e2a
2020-06-17 21:52:59 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:52:59 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-17 21:52:59 jdbc[13]: Plan       :   best plan item cost 324.72 index meta
2020-06-17 21:52:59 jdbc[13]: Plan       : plan cost 325.72
2020-06-17 21:52:59 jdbc[13]: 
/**/prep31.setString(1, "%");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep31.setString(2, "\\");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep31.setString(3, "PUBLIC");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep31.setString(4, "\\");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep31.setString(5, "CUSTOMER_TBL");
2020-06-17 21:52:59 jdbc[13]: 
/**/ResultSet rs69 = prep31.executeQuery();
2020-06-17 21:52:59 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@2e567e2a]
2020-06-17 21:52:59 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@2e567e2a
2020-06-17 21:52:59 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:52:59 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-17 21:52:59 jdbc[13]: Plan       :   best plan item cost 321.44 index meta
2020-06-17 21:52:59 jdbc[13]: Plan       : plan cost 322.44
2020-06-17 21:52:59 jdbc[13]: 
/*SQL l:433 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, NON_UNIQUE, TABLE_CATALOG INDEX_QUALIFIER, INDEX_NAME, INDEX_TYPE TYPE, ORDINAL_POSITION, COLUMN_NAME, ASC_OR_DESC, CARDINALITY, PAGES, FILTER_CONDITION, SORT_TYPE FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND (TRUE) AND TABLE_NAME = ? ORDER BY NON_UNIQUE, TYPE, TABLE_SCHEM, INDEX_NAME, ORDINAL_POSITION {1: '%', 2: '\\', 3: 'PUBLIC', 4: '\\', 5: 'CUSTOMER_TBL'};
2020-06-17 21:52:59 jdbc[13]: 
/**/rs69.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs69.getString("INDEX_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs69.getInt("TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs69.getBoolean("NON_UNIQUE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs69.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs69.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs69.close();
2020-06-17 21:52:59 jdbc[13]: 
/**/prep31.close();
2020-06-17 21:52:59 jdbc[13]: 
/**/dbMeta3.getIndexInfo(null, "PUBLIC", "LOG_TBL", false, true);
2020-06-17 21:52:59 jdbc[13]: 
/**/PreparedStatement prep32 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, NON_UNIQUE, TABLE_CATALOG INDEX_QUALIFIER, INDEX_NAME, INDEX_TYPE TYPE, ORDINAL_POSITION, COLUMN_NAME, ASC_OR_DESC, CARDINALITY, PAGES, FILTER_CONDITION, SORT_TYPE FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND (TRUE) AND TABLE_NAME = ? ORDER BY NON_UNIQUE, TYPE, TABLE_SCHEM, INDEX_NAME, ORDINAL_POSITION");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep32.setString(1, "%");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep32.setString(2, "\\");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep32.setString(3, "PUBLIC");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep32.setString(4, "\\");
2020-06-17 21:52:59 jdbc[13]: 
/**/prep32.setString(5, "LOG_TBL");
2020-06-17 21:52:59 jdbc[13]: 
/**/ResultSet rs70 = prep32.executeQuery();
2020-06-17 21:52:59 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@2e567e2a]
2020-06-17 21:52:59 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@2e567e2a
2020-06-17 21:52:59 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:52:59 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-17 21:52:59 jdbc[13]: Plan       :   best plan item cost 321.44 index meta
2020-06-17 21:52:59 jdbc[13]: Plan       : plan cost 322.44
2020-06-17 21:52:59 jdbc[13]: 
/*SQL l:433 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, NON_UNIQUE, TABLE_CATALOG INDEX_QUALIFIER, INDEX_NAME, INDEX_TYPE TYPE, ORDINAL_POSITION, COLUMN_NAME, ASC_OR_DESC, CARDINALITY, PAGES, FILTER_CONDITION, SORT_TYPE FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND (TRUE) AND TABLE_NAME = ? ORDER BY NON_UNIQUE, TYPE, TABLE_SCHEM, INDEX_NAME, ORDINAL_POSITION {1: '%', 2: '\\', 3: 'PUBLIC', 4: '\\', 5: 'LOG_TBL'};
2020-06-17 21:52:59 jdbc[13]: 
/**/rs70.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs70.getString("INDEX_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs70.getInt("TYPE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs70.getBoolean("NON_UNIQUE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs70.getString("COLUMN_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs70.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs70.close();
2020-06-17 21:52:59 jdbc[13]: 
/**/prep32.close();
2020-06-17 21:52:59 jdbc[13]: 
/**/Statement stat3 = conn10.createStatement();
2020-06-17 21:52:59 jdbc[13]: 
/**/ResultSet rs71 = stat3.executeQuery("SELECT * FROM INFORMATION_SCHEMA.SEQUENCES ORDER BY SEQUENCE_NAME");
2020-06-17 21:52:59 jdbc[13]: Plan       : calculate cost for plan [SEQUENCES:-9:org.h2.table.MetaTable@57e8a174]
2020-06-17 21:52:59 jdbc[13]: Plan       :   for table filter SEQUENCES:-9:org.h2.table.MetaTable@57e8a174
2020-06-17 21:52:59 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:52:59 jdbc[13]: Plan       :   best plan item cost 10,000 index meta
2020-06-17 21:52:59 jdbc[13]: Plan       : plan cost 10,001
2020-06-17 21:52:59 jdbc[13]: 
/*SQL #:2*/SELECT * FROM INFORMATION_SCHEMA.SEQUENCES ORDER BY SEQUENCE_NAME;
2020-06-17 21:52:59 jdbc[13]: 
/**/rs71.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs71.getString("SEQUENCE_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs71.getString("CURRENT_VALUE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs71.getString("INCREMENT");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs71.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs71.getString("SEQUENCE_NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs71.getString("CURRENT_VALUE");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs71.getString("INCREMENT");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs71.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs71.close();
2020-06-17 21:52:59 jdbc[13]: 
/**/ResultSet rs72 = stat3.executeQuery("SELECT * FROM INFORMATION_SCHEMA.USERS ORDER BY NAME");
2020-06-17 21:52:59 jdbc[13]: Plan       : calculate cost for plan [USERS:-10:org.h2.table.MetaTable@1c52dd4c]
2020-06-17 21:52:59 jdbc[13]: Plan       :   for table filter USERS:-10:org.h2.table.MetaTable@1c52dd4c
2020-06-17 21:52:59 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:52:59 jdbc[13]: Plan       :   best plan item cost 10,000 index meta
2020-06-17 21:52:59 jdbc[13]: Plan       : plan cost 10,001
2020-06-17 21:52:59 jdbc[13]: 
/*SQL #:1*/SELECT * FROM INFORMATION_SCHEMA.USERS ORDER BY NAME;
2020-06-17 21:52:59 jdbc[13]: 
/**/rs72.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs72.getString("NAME");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs72.getString("ADMIN");
2020-06-17 21:52:59 jdbc[13]: 
/**/rs72.next();
2020-06-17 21:52:59 jdbc[13]: 
/**/rs72.close();
2020-06-17 21:52:59 jdbc[13]: 
/**/stat3.close();
2020-06-17 21:52:59 jdbc[13]: 
/**/dbMeta3.getDatabaseProductName();
2020-06-17 21:52:59 jdbc[13]: 
/**/dbMeta3.getDatabaseProductVersion();
2020-06-17 21:53:02 jdbc[13]: 
/**/Statement stat4 = conn10.createStatement(1004, 1008);
2020-06-17 21:53:02 jdbc[13]: 
/**/stat4.setMaxRows(1000);
2020-06-17 21:53:02 jdbc[13]: 
/**/stat4.execute("SELECT * FROM LOG_TBL");
2020-06-17 21:53:02 jdbc[13]: Plan       : calculate cost for plan [PUBLIC.LOG_TBL]
2020-06-17 21:53:02 jdbc[13]: Plan       :   for table filter PUBLIC.LOG_TBL
2020-06-17 21:53:02 jdbc[13]: Table      :     potential plan item cost 10,290 index PUBLIC.LOG_TBL.tableScan
2020-06-17 21:53:02 jdbc[13]: Table      :     potential plan item cost 10,300 index PUBLIC.PRIMARY_KEY_3
2020-06-17 21:53:02 jdbc[13]: Plan       :   best plan item cost 10,290 index PUBLIC.LOG_TBL.tableScan
2020-06-17 21:53:02 jdbc[13]: Plan       : plan cost 10,291
2020-06-17 21:53:02 jdbc[13]: 
/*SQL #:9*/SELECT * FROM LOG_TBL;
2020-06-17 21:53:02 jdbc[13]: 
/**/ResultSet rs73 = stat4.getResultSet();
2020-06-17 21:53:02 jdbc[13]: 
/**/ResultSetMetaData rsMeta14 = rs73.getMetaData();
2020-06-17 21:53:02 jdbc[13]: 
/**/conn10.getCatalog();
2020-06-17 21:53:02 jdbc[13]: 
/*SQL #:1*/CALL DATABASE();
2020-06-17 21:53:02 jdbc[13]: 
/**/rsMeta14.getColumnCount();
2020-06-17 21:53:02 jdbc[13]: 
/**/rsMeta14.getColumnLabel(1);
2020-06-17 21:53:02 jdbc[13]: 
/**/rsMeta14.getColumnLabel(2);
2020-06-17 21:53:02 jdbc[13]: 
/**/rsMeta14.getColumnLabel(3);
2020-06-17 21:53:02 jdbc[13]: 
/**/rsMeta14.getColumnLabel(4);
2020-06-17 21:53:02 jdbc[13]: 
/**/rsMeta14.getColumnLabel(5);
2020-06-17 21:53:02 jdbc[13]: 
/**/rsMeta14.getColumnLabel(6);
2020-06-17 21:53:02 jdbc[13]: 
/**/rsMeta14.getColumnLabel(7);
2020-06-17 21:53:02 jdbc[13]: 
/**/rsMeta14.getColumnLabel(8);
2020-06-17 21:53:02 jdbc[13]: 
/**/rsMeta14.getColumnLabel(9);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.next();
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(1);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(2);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(3);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(4);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(5);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(6);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(7);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(8);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(9);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.next();
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(1);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(2);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(3);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(4);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(5);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(6);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(7);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(8);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(9);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.next();
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(1);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(2);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(3);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(4);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(5);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(6);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(7);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(8);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(9);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.next();
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(1);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(2);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(3);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(4);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(5);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(6);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(7);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(8);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(9);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.next();
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(1);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(2);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(3);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(4);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(5);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(6);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(7);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(8);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(9);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.next();
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(1);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(2);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(3);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(4);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(5);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(6);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(7);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(8);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(9);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.next();
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(1);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(2);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(3);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(4);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(5);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(6);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(7);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(8);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(9);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.next();
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(1);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(2);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(3);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(4);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(5);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(6);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(7);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(8);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(9);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.next();
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(1);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(2);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(3);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(4);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(5);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(6);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(7);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(8);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getString(9);
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.next();
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getConcurrency();
2020-06-17 21:53:02 jdbc[13]: 
/**/DatabaseMetaData dbMeta5 = conn10.getMetaData();
2020-06-17 21:53:02 jdbc[13]: 
/**/dbMeta5.getTables(null, "PUBLIC", "LOG_TBL", new String[]{"TABLE"});
2020-06-17 21:53:02 jdbc[13]: 
/**/PreparedStatement prep33 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME");
2020-06-17 21:53:02 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@1e97159]
2020-06-17 21:53:02 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@1e97159
2020-06-17 21:53:02 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:53:02 jdbc[13]: Table      :     potential plan item cost 4,322 index meta
2020-06-17 21:53:02 jdbc[13]: Plan       :   best plan item cost 4,278.78 index meta
2020-06-17 21:53:02 jdbc[13]: Plan       : plan cost 4,279.78
2020-06-17 21:53:02 jdbc[13]: 
/**/prep33.setString(1, "%");
2020-06-17 21:53:02 jdbc[13]: 
/**/prep33.setString(2, "PUBLIC");
2020-06-17 21:53:02 jdbc[13]: 
/**/prep33.setString(3, "LOG_TBL");
2020-06-17 21:53:02 jdbc[13]: 
/**/prep33.setString(4, "\\");
2020-06-17 21:53:02 jdbc[13]: 
/**/prep33.setString(5, "TABLE");
2020-06-17 21:53:02 jdbc[13]: 
/**/ResultSet rs74 = prep33.executeQuery();
2020-06-17 21:53:02 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@1e97159]
2020-06-17 21:53:02 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@1e97159
2020-06-17 21:53:02 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:53:02 jdbc[13]: Table      :     potential plan item cost 1,324 index meta
2020-06-17 21:53:02 jdbc[13]: Plan       :   best plan item cost 1,271.04 index meta
2020-06-17 21:53:02 jdbc[13]: Plan       : plan cost 1,272.04
2020-06-17 21:53:02 jdbc[13]: 
/*SQL l:414 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME {1: '%', 2: 'PUBLIC', 3: 'LOG_TBL', 4: '\\', 5: 'TABLE'};
2020-06-17 21:53:02 jdbc[13]: 
/**/rs74.next();
2020-06-17 21:53:02 jdbc[13]: 
/**/rs74.getString("SQL");
2020-06-17 21:53:02 jdbc[13]: 
/**/rs74.getString("TABLE_NAME");
2020-06-17 21:53:02 jdbc[13]: 
/**/dbMeta5.getPrimaryKeys(null, "PUBLIC", "LOG_TBL");
2020-06-17 21:53:02 jdbc[13]: 
/**/PreparedStatement prep34 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME");
2020-06-17 21:53:02 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@2e567e2a]
2020-06-17 21:53:02 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@2e567e2a
2020-06-17 21:53:02 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:53:02 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-17 21:53:02 jdbc[13]: Plan       :   best plan item cost 321.44 index meta
2020-06-17 21:53:02 jdbc[13]: Plan       : plan cost 322.44
2020-06-17 21:53:02 jdbc[13]: 
/**/prep34.setString(1, "%");
2020-06-17 21:53:02 jdbc[13]: 
/**/prep34.setString(2, "\\");
2020-06-17 21:53:02 jdbc[13]: 
/**/prep34.setString(3, "PUBLIC");
2020-06-17 21:53:02 jdbc[13]: 
/**/prep34.setString(4, "\\");
2020-06-17 21:53:02 jdbc[13]: 
/**/prep34.setString(5, "LOG_TBL");
2020-06-17 21:53:02 jdbc[13]: 
/**/ResultSet rs75 = prep34.executeQuery();
2020-06-17 21:53:02 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@2e567e2a]
2020-06-17 21:53:02 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@2e567e2a
2020-06-17 21:53:02 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:53:02 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-17 21:53:02 jdbc[13]: Plan       :   best plan item cost 318.16 index meta
2020-06-17 21:53:02 jdbc[13]: Plan       : plan cost 319.16
2020-06-17 21:53:02 jdbc[13]: 
/*SQL l:316 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME {1: '%', 2: '\\', 3: 'PUBLIC', 4: '\\', 5: 'LOG_TBL'};
2020-06-17 21:53:02 jdbc[13]: 
/**/rs75.next();
2020-06-17 21:53:02 jdbc[13]: 
/**/rs75.getString("COLUMN_NAME");
2020-06-17 21:53:02 jdbc[13]: 
/**/rs75.next();
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.getType();
2020-06-17 21:53:02 jdbc[13]: 
/**/rs73.close();
2020-06-17 21:53:02 jdbc[13]: 
/**/stat4.close();
2020-06-17 21:53:16 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-17 21:53:16 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 21:53:16 jdbc[3]: 
/**/conn0.setReadOnly(true);
2020-06-17 21:53:16 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:53:16 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:53:16 jdbc[3]: 
/**/PreparedStatement prep35 = conn0.prepareStatement("select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=?");
2020-06-17 21:53:16 jdbc[3]: Plan       : calculate cost for plan [CUSTOMER0_]
2020-06-17 21:53:16 jdbc[3]: Plan       :   for table filter CUSTOMER0_
2020-06-17 21:53:16 jdbc[3]: Table      :     potential plan item cost 10,250 index PUBLIC.CUSTOMER_TBL.tableScan
2020-06-17 21:53:16 jdbc[3]: Table      :     potential plan item cost 230 index PUBLIC.PRIMARY_KEY_B
2020-06-17 21:53:16 jdbc[3]: Plan       :   best plan item cost 227.7 index PUBLIC.PRIMARY_KEY_B
2020-06-17 21:53:16 jdbc[3]: Plan       : plan cost 228.7
2020-06-17 21:53:16 jdbc[3]: 
/**/prep35.setLong(1, 2L);
2020-06-17 21:53:16 jdbc[3]: 
/**/ResultSet rs76 = prep35.executeQuery();
2020-06-17 21:53:16 jdbc[3]: 
/*SQL l:225 #:1*/select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=? {1: 2};
2020-06-17 21:53:16 jdbc[3]: 
/**/rs76.next();
2020-06-17 21:53:16 jdbc[3]: 
/**/rs76.getString("customer2_0_0_");
2020-06-17 21:53:16 jdbc[3]: 
/**/rs76.wasNull();
2020-06-17 21:53:16 jdbc[3]: 
/**/rs76.getString("customer3_0_0_");
2020-06-17 21:53:16 jdbc[3]: 
/**/rs76.wasNull();
2020-06-17 21:53:16 jdbc[3]: 
/**/rs76.getString("customer4_0_0_");
2020-06-17 21:53:16 jdbc[3]: 
/**/rs76.wasNull();
2020-06-17 21:53:16 jdbc[3]: 
/**/rs76.next();
2020-06-17 21:53:16 jdbc[3]: 
/**/rs76.close();
2020-06-17 21:53:16 jdbc[3]: 
/**/prep35.getMaxRows();
2020-06-17 21:53:16 jdbc[3]: 
/**/prep35.getQueryTimeout();
2020-06-17 21:53:16 jdbc[3]: 
/**/prep35.close();
2020-06-17 21:53:16 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:53:16 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:53:16 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:53:16 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:53:16 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:53:16 jdbc[3]: 
/**/conn0.setReadOnly(false);
2020-06-17 21:53:16 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:53:16 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:53:16 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:53:17 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-17 21:53:17 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 21:53:17 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:53:17 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:53:17 jdbc[3]: 
/**/PreparedStatement prep36 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 21:53:17 jdbc[3]: 
/**/prep36.setString(1, "CustomerMS");
2020-06-17 21:53:17 jdbc[3]: 
/**/prep36.setString(2, "INFO");
2020-06-17 21:53:17 jdbc[3]: 
/**/prep36.setNull(3, 12);
2020-06-17 21:53:17 jdbc[3]: 
/**/prep36.setString(4, "/api/customers/2");
2020-06-17 21:53:17 jdbc[3]: 
/**/prep36.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 21:53:17 jdbc[3]: 
/**/prep36.setString(6, "dd81605f39be9222");
2020-06-17 21:53:17 jdbc[3]: 
/**/prep36.setString(7, "2020-06-18T02:53:16.435Z");
2020-06-17 21:53:17 jdbc[3]: 
/**/prep36.setString(8, "dd81605f39be9222");
2020-06-17 21:53:17 jdbc[3]: 
/**/prep36.executeUpdate();
2020-06-17 21:53:17 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 21:53:17 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 21:53:17 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/2', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: 'dd81605f39be9222', 7: '2020-06-18T02:53:16.435Z', 8: 'dd81605f39be9222'};
2020-06-17 21:53:17 jdbc[3]: 
/**/ResultSet rs77 = prep36.getGeneratedKeys();
2020-06-17 21:53:17 jdbc[3]: 
/**/rs77.next();
2020-06-17 21:53:17 jdbc[3]: 
/**/ResultSetMetaData rsMeta15 = rs77.getMetaData();
2020-06-17 21:53:17 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:53:17 jdbc[3]: 
/**/rsMeta15.getColumnCount();
2020-06-17 21:53:17 jdbc[3]: 
/**/rs77.getLong(1);
2020-06-17 21:53:17 jdbc[3]: 
/**/rs77.close();
2020-06-17 21:53:17 jdbc[3]: 
/**/prep36.getMaxRows();
2020-06-17 21:53:17 jdbc[3]: 
/**/prep36.getQueryTimeout();
2020-06-17 21:53:17 jdbc[3]: 
/**/prep36.close();
2020-06-17 21:53:17 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:53:17 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 21:53:17 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:53:17 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:53:17 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:53:17 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:53:17 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:53:17 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:53:17 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:53:18 jdbc[13]: 
/**/Statement stat5 = conn10.createStatement(1004, 1008);
2020-06-17 21:53:18 jdbc[13]: 
/**/stat5.setMaxRows(1000);
2020-06-17 21:53:18 jdbc[13]: 
/**/stat5.execute("SELECT * FROM LOG_TBL");
2020-06-17 21:53:18 jdbc[13]: 
/*SQL #:10*/SELECT * FROM LOG_TBL;
2020-06-17 21:53:18 jdbc[13]: 
/**/ResultSet rs78 = stat5.getResultSet();
2020-06-17 21:53:18 jdbc[13]: 
/**/ResultSetMetaData rsMeta16 = rs78.getMetaData();
2020-06-17 21:53:18 jdbc[13]: 
/**/conn10.getCatalog();
2020-06-17 21:53:18 jdbc[13]: 
/**/rsMeta16.getColumnCount();
2020-06-17 21:53:18 jdbc[13]: 
/**/rsMeta16.getColumnLabel(1);
2020-06-17 21:53:18 jdbc[13]: 
/**/rsMeta16.getColumnLabel(2);
2020-06-17 21:53:18 jdbc[13]: 
/**/rsMeta16.getColumnLabel(3);
2020-06-17 21:53:18 jdbc[13]: 
/**/rsMeta16.getColumnLabel(4);
2020-06-17 21:53:18 jdbc[13]: 
/**/rsMeta16.getColumnLabel(5);
2020-06-17 21:53:18 jdbc[13]: 
/**/rsMeta16.getColumnLabel(6);
2020-06-17 21:53:18 jdbc[13]: 
/**/rsMeta16.getColumnLabel(7);
2020-06-17 21:53:18 jdbc[13]: 
/**/rsMeta16.getColumnLabel(8);
2020-06-17 21:53:18 jdbc[13]: 
/**/rsMeta16.getColumnLabel(9);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.next();
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(1);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(2);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(3);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(4);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(5);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(6);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(7);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(8);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(9);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.next();
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(1);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(2);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(3);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(4);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(5);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(6);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(7);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(8);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(9);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.next();
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(1);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(2);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(3);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(4);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(5);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(6);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(7);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(8);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(9);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.next();
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(1);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(2);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(3);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(4);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(5);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(6);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(7);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(8);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(9);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.next();
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(1);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(2);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(3);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(4);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(5);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(6);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(7);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(8);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(9);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.next();
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(1);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(2);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(3);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(4);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(5);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(6);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(7);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(8);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(9);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.next();
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(1);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(2);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(3);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(4);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(5);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(6);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(7);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(8);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(9);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.next();
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(1);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(2);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(3);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(4);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(5);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(6);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(7);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(8);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(9);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.next();
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(1);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(2);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(3);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(4);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(5);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(6);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(7);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(8);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(9);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.next();
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(1);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(2);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(3);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(4);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(5);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(6);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(7);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(8);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getString(9);
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.next();
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getConcurrency();
2020-06-17 21:53:18 jdbc[13]: 
/**/DatabaseMetaData dbMeta6 = conn10.getMetaData();
2020-06-17 21:53:18 jdbc[13]: 
/**/dbMeta6.getTables(null, "PUBLIC", "LOG_TBL", new String[]{"TABLE"});
2020-06-17 21:53:18 jdbc[13]: 
/**/PreparedStatement prep37 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME");
2020-06-17 21:53:18 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@1e97159]
2020-06-17 21:53:18 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@1e97159
2020-06-17 21:53:18 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:53:18 jdbc[13]: Table      :     potential plan item cost 4,322 index meta
2020-06-17 21:53:18 jdbc[13]: Plan       :   best plan item cost 4,278.78 index meta
2020-06-17 21:53:18 jdbc[13]: Plan       : plan cost 4,279.78
2020-06-17 21:53:18 jdbc[13]: 
/**/prep37.setString(1, "%");
2020-06-17 21:53:18 jdbc[13]: 
/**/prep37.setString(2, "PUBLIC");
2020-06-17 21:53:18 jdbc[13]: 
/**/prep37.setString(3, "LOG_TBL");
2020-06-17 21:53:18 jdbc[13]: 
/**/prep37.setString(4, "\\");
2020-06-17 21:53:18 jdbc[13]: 
/**/prep37.setString(5, "TABLE");
2020-06-17 21:53:18 jdbc[13]: 
/**/ResultSet rs79 = prep37.executeQuery();
2020-06-17 21:53:18 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@1e97159]
2020-06-17 21:53:18 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@1e97159
2020-06-17 21:53:18 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:53:18 jdbc[13]: Table      :     potential plan item cost 1,324 index meta
2020-06-17 21:53:18 jdbc[13]: Plan       :   best plan item cost 1,271.04 index meta
2020-06-17 21:53:18 jdbc[13]: Plan       : plan cost 1,272.04
2020-06-17 21:53:18 jdbc[13]: 
/*SQL l:414 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME {1: '%', 2: 'PUBLIC', 3: 'LOG_TBL', 4: '\\', 5: 'TABLE'};
2020-06-17 21:53:18 jdbc[13]: 
/**/rs79.next();
2020-06-17 21:53:18 jdbc[13]: 
/**/rs79.getString("SQL");
2020-06-17 21:53:18 jdbc[13]: 
/**/rs79.getString("TABLE_NAME");
2020-06-17 21:53:18 jdbc[13]: 
/**/dbMeta6.getPrimaryKeys(null, "PUBLIC", "LOG_TBL");
2020-06-17 21:53:18 jdbc[13]: 
/**/PreparedStatement prep38 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME");
2020-06-17 21:53:18 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@2e567e2a]
2020-06-17 21:53:18 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@2e567e2a
2020-06-17 21:53:18 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:53:18 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-17 21:53:18 jdbc[13]: Plan       :   best plan item cost 321.44 index meta
2020-06-17 21:53:18 jdbc[13]: Plan       : plan cost 322.44
2020-06-17 21:53:18 jdbc[13]: 
/**/prep38.setString(1, "%");
2020-06-17 21:53:18 jdbc[13]: 
/**/prep38.setString(2, "\\");
2020-06-17 21:53:18 jdbc[13]: 
/**/prep38.setString(3, "PUBLIC");
2020-06-17 21:53:18 jdbc[13]: 
/**/prep38.setString(4, "\\");
2020-06-17 21:53:18 jdbc[13]: 
/**/prep38.setString(5, "LOG_TBL");
2020-06-17 21:53:18 jdbc[13]: 
/**/ResultSet rs80 = prep38.executeQuery();
2020-06-17 21:53:18 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@2e567e2a]
2020-06-17 21:53:18 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@2e567e2a
2020-06-17 21:53:18 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:53:18 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-17 21:53:18 jdbc[13]: Plan       :   best plan item cost 318.16 index meta
2020-06-17 21:53:18 jdbc[13]: Plan       : plan cost 319.16
2020-06-17 21:53:18 jdbc[13]: 
/*SQL l:316 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME {1: '%', 2: '\\', 3: 'PUBLIC', 4: '\\', 5: 'LOG_TBL'};
2020-06-17 21:53:18 jdbc[13]: 
/**/rs80.next();
2020-06-17 21:53:18 jdbc[13]: 
/**/rs80.getString("COLUMN_NAME");
2020-06-17 21:53:18 jdbc[13]: 
/**/rs80.next();
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.getType();
2020-06-17 21:53:18 jdbc[13]: 
/**/rs78.close();
2020-06-17 21:53:18 jdbc[13]: 
/**/stat5.close();
2020-06-17 21:53:23 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-17 21:53:23 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 21:53:23 jdbc[3]: 
/**/conn0.setReadOnly(true);
2020-06-17 21:53:23 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:53:23 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:53:23 jdbc[3]: 
/**/PreparedStatement prep39 = conn0.prepareStatement("select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=?");
2020-06-17 21:53:23 jdbc[3]: 
/**/prep39.setLong(1, 2L);
2020-06-17 21:53:23 jdbc[3]: 
/**/ResultSet rs81 = prep39.executeQuery();
2020-06-17 21:53:23 jdbc[3]: 
/*SQL l:225 #:1*/select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=? {1: 2};
2020-06-17 21:53:23 jdbc[3]: 
/**/rs81.next();
2020-06-17 21:53:23 jdbc[3]: 
/**/rs81.getString("customer2_0_0_");
2020-06-17 21:53:23 jdbc[3]: 
/**/rs81.wasNull();
2020-06-17 21:53:23 jdbc[3]: 
/**/rs81.getString("customer3_0_0_");
2020-06-17 21:53:23 jdbc[3]: 
/**/rs81.wasNull();
2020-06-17 21:53:23 jdbc[3]: 
/**/rs81.getString("customer4_0_0_");
2020-06-17 21:53:23 jdbc[3]: 
/**/rs81.wasNull();
2020-06-17 21:53:23 jdbc[3]: 
/**/rs81.next();
2020-06-17 21:53:23 jdbc[3]: 
/**/rs81.close();
2020-06-17 21:53:23 jdbc[3]: 
/**/prep39.getMaxRows();
2020-06-17 21:53:23 jdbc[3]: 
/**/prep39.getQueryTimeout();
2020-06-17 21:53:23 jdbc[3]: 
/**/prep39.close();
2020-06-17 21:53:23 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:53:23 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:53:23 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:53:23 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:53:23 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:53:23 jdbc[3]: 
/**/conn0.setReadOnly(false);
2020-06-17 21:53:23 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:53:23 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:53:23 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:53:24 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:53:24 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:53:24 jdbc[3]: 
/**/PreparedStatement prep40 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 21:53:24 jdbc[3]: 
/**/prep40.setString(1, "CustomerMS");
2020-06-17 21:53:24 jdbc[3]: 
/**/prep40.setString(2, "INFO");
2020-06-17 21:53:24 jdbc[3]: 
/**/prep40.setNull(3, 12);
2020-06-17 21:53:24 jdbc[3]: 
/**/prep40.setString(4, "/api/customers/2");
2020-06-17 21:53:24 jdbc[3]: 
/**/prep40.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 21:53:24 jdbc[3]: 
/**/prep40.setString(6, "34ab3d102fb49096");
2020-06-17 21:53:24 jdbc[3]: 
/**/prep40.setString(7, "2020-06-18T02:53:23.797Z");
2020-06-17 21:53:24 jdbc[3]: 
/**/prep40.setString(8, "34ab3d102fb49096");
2020-06-17 21:53:24 jdbc[3]: 
/**/prep40.executeUpdate();
2020-06-17 21:53:24 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 21:53:24 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 21:53:24 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/2', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: '34ab3d102fb49096', 7: '2020-06-18T02:53:23.797Z', 8: '34ab3d102fb49096'};
2020-06-17 21:53:24 jdbc[3]: 
/**/ResultSet rs82 = prep40.getGeneratedKeys();
2020-06-17 21:53:24 jdbc[3]: 
/**/rs82.next();
2020-06-17 21:53:24 jdbc[3]: 
/**/ResultSetMetaData rsMeta17 = rs82.getMetaData();
2020-06-17 21:53:24 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:53:24 jdbc[3]: 
/**/rsMeta17.getColumnCount();
2020-06-17 21:53:24 jdbc[3]: 
/**/rs82.getLong(1);
2020-06-17 21:53:24 jdbc[3]: 
/**/rs82.close();
2020-06-17 21:53:24 jdbc[3]: 
/**/prep40.getMaxRows();
2020-06-17 21:53:24 jdbc[3]: 
/**/prep40.getQueryTimeout();
2020-06-17 21:53:24 jdbc[3]: 
/**/prep40.close();
2020-06-17 21:53:24 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:53:24 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 21:53:24 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:53:24 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:53:24 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:53:24 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:53:24 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:53:24 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:53:24 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:53:29 jdbc[13]: 
/**/Statement stat6 = conn10.createStatement(1004, 1008);
2020-06-17 21:53:29 jdbc[13]: 
/**/stat6.setMaxRows(1000);
2020-06-17 21:53:29 jdbc[13]: 
/**/stat6.execute("SELECT * FROM LOG_TBL");
2020-06-17 21:53:29 jdbc[13]: 
/*SQL #:11*/SELECT * FROM LOG_TBL;
2020-06-17 21:53:29 jdbc[13]: 
/**/ResultSet rs83 = stat6.getResultSet();
2020-06-17 21:53:29 jdbc[13]: 
/**/ResultSetMetaData rsMeta18 = rs83.getMetaData();
2020-06-17 21:53:29 jdbc[13]: 
/**/conn10.getCatalog();
2020-06-17 21:53:29 jdbc[13]: 
/**/rsMeta18.getColumnCount();
2020-06-17 21:53:29 jdbc[13]: 
/**/rsMeta18.getColumnLabel(1);
2020-06-17 21:53:29 jdbc[13]: 
/**/rsMeta18.getColumnLabel(2);
2020-06-17 21:53:29 jdbc[13]: 
/**/rsMeta18.getColumnLabel(3);
2020-06-17 21:53:29 jdbc[13]: 
/**/rsMeta18.getColumnLabel(4);
2020-06-17 21:53:29 jdbc[13]: 
/**/rsMeta18.getColumnLabel(5);
2020-06-17 21:53:29 jdbc[13]: 
/**/rsMeta18.getColumnLabel(6);
2020-06-17 21:53:29 jdbc[13]: 
/**/rsMeta18.getColumnLabel(7);
2020-06-17 21:53:29 jdbc[13]: 
/**/rsMeta18.getColumnLabel(8);
2020-06-17 21:53:29 jdbc[13]: 
/**/rsMeta18.getColumnLabel(9);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.next();
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(1);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(2);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(3);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(4);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(5);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(6);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(7);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(8);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(9);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.next();
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(1);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(2);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(3);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(4);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(5);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(6);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(7);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(8);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(9);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.next();
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(1);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(2);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(3);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(4);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(5);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(6);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(7);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(8);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(9);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.next();
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(1);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(2);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(3);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(4);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(5);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(6);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(7);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(8);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(9);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.next();
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(1);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(2);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(3);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(4);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(5);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(6);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(7);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(8);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(9);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.next();
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(1);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(2);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(3);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(4);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(5);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(6);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(7);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(8);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(9);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.next();
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(1);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(2);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(3);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(4);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(5);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(6);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(7);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(8);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(9);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.next();
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(1);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(2);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(3);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(4);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(5);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(6);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(7);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(8);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(9);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.next();
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(1);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(2);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(3);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(4);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(5);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(6);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(7);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(8);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(9);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.next();
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(1);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(2);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(3);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(4);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(5);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(6);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(7);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(8);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(9);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.next();
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(1);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(2);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(3);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(4);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(5);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(6);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(7);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(8);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getString(9);
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.next();
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getConcurrency();
2020-06-17 21:53:29 jdbc[13]: 
/**/DatabaseMetaData dbMeta7 = conn10.getMetaData();
2020-06-17 21:53:29 jdbc[13]: 
/**/dbMeta7.getTables(null, "PUBLIC", "LOG_TBL", new String[]{"TABLE"});
2020-06-17 21:53:29 jdbc[13]: 
/**/PreparedStatement prep41 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME");
2020-06-17 21:53:29 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@1e97159]
2020-06-17 21:53:29 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@1e97159
2020-06-17 21:53:29 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:53:29 jdbc[13]: Table      :     potential plan item cost 4,322 index meta
2020-06-17 21:53:29 jdbc[13]: Plan       :   best plan item cost 4,278.78 index meta
2020-06-17 21:53:29 jdbc[13]: Plan       : plan cost 4,279.78
2020-06-17 21:53:29 jdbc[13]: 
/**/prep41.setString(1, "%");
2020-06-17 21:53:29 jdbc[13]: 
/**/prep41.setString(2, "PUBLIC");
2020-06-17 21:53:29 jdbc[13]: 
/**/prep41.setString(3, "LOG_TBL");
2020-06-17 21:53:29 jdbc[13]: 
/**/prep41.setString(4, "\\");
2020-06-17 21:53:29 jdbc[13]: 
/**/prep41.setString(5, "TABLE");
2020-06-17 21:53:29 jdbc[13]: 
/**/ResultSet rs84 = prep41.executeQuery();
2020-06-17 21:53:29 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@1e97159]
2020-06-17 21:53:29 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@1e97159
2020-06-17 21:53:29 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:53:29 jdbc[13]: Table      :     potential plan item cost 1,324 index meta
2020-06-17 21:53:29 jdbc[13]: Plan       :   best plan item cost 1,271.04 index meta
2020-06-17 21:53:29 jdbc[13]: Plan       : plan cost 1,272.04
2020-06-17 21:53:29 jdbc[13]: 
/*SQL l:414 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME {1: '%', 2: 'PUBLIC', 3: 'LOG_TBL', 4: '\\', 5: 'TABLE'};
2020-06-17 21:53:29 jdbc[13]: 
/**/rs84.next();
2020-06-17 21:53:29 jdbc[13]: 
/**/rs84.getString("SQL");
2020-06-17 21:53:29 jdbc[13]: 
/**/rs84.getString("TABLE_NAME");
2020-06-17 21:53:29 jdbc[13]: 
/**/dbMeta7.getPrimaryKeys(null, "PUBLIC", "LOG_TBL");
2020-06-17 21:53:29 jdbc[13]: 
/**/PreparedStatement prep42 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME");
2020-06-17 21:53:29 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@2e567e2a]
2020-06-17 21:53:29 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@2e567e2a
2020-06-17 21:53:29 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:53:29 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-17 21:53:29 jdbc[13]: Plan       :   best plan item cost 321.44 index meta
2020-06-17 21:53:29 jdbc[13]: Plan       : plan cost 322.44
2020-06-17 21:53:29 jdbc[13]: 
/**/prep42.setString(1, "%");
2020-06-17 21:53:29 jdbc[13]: 
/**/prep42.setString(2, "\\");
2020-06-17 21:53:29 jdbc[13]: 
/**/prep42.setString(3, "PUBLIC");
2020-06-17 21:53:29 jdbc[13]: 
/**/prep42.setString(4, "\\");
2020-06-17 21:53:29 jdbc[13]: 
/**/prep42.setString(5, "LOG_TBL");
2020-06-17 21:53:29 jdbc[13]: 
/**/ResultSet rs85 = prep42.executeQuery();
2020-06-17 21:53:29 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@2e567e2a]
2020-06-17 21:53:29 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@2e567e2a
2020-06-17 21:53:29 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:53:29 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-17 21:53:29 jdbc[13]: Plan       :   best plan item cost 318.16 index meta
2020-06-17 21:53:29 jdbc[13]: Plan       : plan cost 319.16
2020-06-17 21:53:29 jdbc[13]: 
/*SQL l:316 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME {1: '%', 2: '\\', 3: 'PUBLIC', 4: '\\', 5: 'LOG_TBL'};
2020-06-17 21:53:29 jdbc[13]: 
/**/rs85.next();
2020-06-17 21:53:29 jdbc[13]: 
/**/rs85.getString("COLUMN_NAME");
2020-06-17 21:53:29 jdbc[13]: 
/**/rs85.next();
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.getType();
2020-06-17 21:53:29 jdbc[13]: 
/**/rs83.close();
2020-06-17 21:53:29 jdbc[13]: 
/**/stat6.close();
2020-06-17 21:53:35 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-17 21:53:35 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 21:53:35 jdbc[3]: 
/**/conn0.setReadOnly(true);
2020-06-17 21:53:35 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:53:35 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:53:35 jdbc[3]: 
/**/PreparedStatement prep43 = conn0.prepareStatement("select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=?");
2020-06-17 21:53:35 jdbc[3]: 
/**/prep43.setLong(1, 2L);
2020-06-17 21:53:35 jdbc[3]: 
/**/ResultSet rs86 = prep43.executeQuery();
2020-06-17 21:53:35 jdbc[3]: 
/*SQL l:225 #:1*/select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=? {1: 2};
2020-06-17 21:53:35 jdbc[3]: 
/**/rs86.next();
2020-06-17 21:53:35 jdbc[3]: 
/**/rs86.getString("customer2_0_0_");
2020-06-17 21:53:35 jdbc[3]: 
/**/rs86.wasNull();
2020-06-17 21:53:35 jdbc[3]: 
/**/rs86.getString("customer3_0_0_");
2020-06-17 21:53:35 jdbc[3]: 
/**/rs86.wasNull();
2020-06-17 21:53:35 jdbc[3]: 
/**/rs86.getString("customer4_0_0_");
2020-06-17 21:53:35 jdbc[3]: 
/**/rs86.wasNull();
2020-06-17 21:53:35 jdbc[3]: 
/**/rs86.next();
2020-06-17 21:53:35 jdbc[3]: 
/**/rs86.close();
2020-06-17 21:53:35 jdbc[3]: 
/**/prep43.getMaxRows();
2020-06-17 21:53:35 jdbc[3]: 
/**/prep43.getQueryTimeout();
2020-06-17 21:53:35 jdbc[3]: 
/**/prep43.close();
2020-06-17 21:53:35 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:53:35 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:53:35 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:53:35 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:53:35 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:53:35 jdbc[3]: 
/**/conn0.setReadOnly(false);
2020-06-17 21:53:35 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:53:35 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:53:35 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:53:36 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-17 21:53:36 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 21:53:36 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:53:36 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:53:36 jdbc[3]: 
/**/PreparedStatement prep44 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 21:53:36 jdbc[3]: 
/**/prep44.setString(1, "CustomerMS");
2020-06-17 21:53:36 jdbc[3]: 
/**/prep44.setString(2, "INFO");
2020-06-17 21:53:36 jdbc[3]: 
/**/prep44.setNull(3, 12);
2020-06-17 21:53:36 jdbc[3]: 
/**/prep44.setString(4, "/api/customers/2");
2020-06-17 21:53:36 jdbc[3]: 
/**/prep44.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 21:53:36 jdbc[3]: 
/**/prep44.setString(6, "19d2e4d621c50722");
2020-06-17 21:53:36 jdbc[3]: 
/**/prep44.setString(7, "2020-06-18T02:53:35.082Z");
2020-06-17 21:53:36 jdbc[3]: 
/**/prep44.setString(8, "19d2e4d621c50722");
2020-06-17 21:53:36 jdbc[3]: 
/**/prep44.executeUpdate();
2020-06-17 21:53:36 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 21:53:36 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 21:53:36 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/2', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: '19d2e4d621c50722', 7: '2020-06-18T02:53:35.082Z', 8: '19d2e4d621c50722'};
2020-06-17 21:53:36 jdbc[3]: 
/**/ResultSet rs87 = prep44.getGeneratedKeys();
2020-06-17 21:53:36 jdbc[3]: 
/**/rs87.next();
2020-06-17 21:53:36 jdbc[3]: 
/**/ResultSetMetaData rsMeta19 = rs87.getMetaData();
2020-06-17 21:53:36 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:53:36 jdbc[3]: 
/**/rsMeta19.getColumnCount();
2020-06-17 21:53:36 jdbc[3]: 
/**/rs87.getLong(1);
2020-06-17 21:53:36 jdbc[3]: 
/**/rs87.close();
2020-06-17 21:53:36 jdbc[3]: 
/**/prep44.getMaxRows();
2020-06-17 21:53:36 jdbc[3]: 
/**/prep44.getQueryTimeout();
2020-06-17 21:53:36 jdbc[3]: 
/**/prep44.close();
2020-06-17 21:53:36 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:53:36 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 21:53:36 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:53:36 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:53:36 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:53:36 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:53:36 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:53:36 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:53:36 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:53:36 jdbc[13]: 
/**/Statement stat7 = conn10.createStatement(1004, 1008);
2020-06-17 21:53:36 jdbc[13]: 
/**/stat7.setMaxRows(1000);
2020-06-17 21:53:36 jdbc[13]: 
/**/stat7.execute("SELECT * FROM LOG_TBL");
2020-06-17 21:53:36 jdbc[13]: 
/*SQL #:12*/SELECT * FROM LOG_TBL;
2020-06-17 21:53:36 jdbc[13]: 
/**/ResultSet rs88 = stat7.getResultSet();
2020-06-17 21:53:36 jdbc[13]: 
/**/ResultSetMetaData rsMeta20 = rs88.getMetaData();
2020-06-17 21:53:36 jdbc[13]: 
/**/conn10.getCatalog();
2020-06-17 21:53:36 jdbc[13]: 
/**/rsMeta20.getColumnCount();
2020-06-17 21:53:36 jdbc[13]: 
/**/rsMeta20.getColumnLabel(1);
2020-06-17 21:53:36 jdbc[13]: 
/**/rsMeta20.getColumnLabel(2);
2020-06-17 21:53:36 jdbc[13]: 
/**/rsMeta20.getColumnLabel(3);
2020-06-17 21:53:36 jdbc[13]: 
/**/rsMeta20.getColumnLabel(4);
2020-06-17 21:53:36 jdbc[13]: 
/**/rsMeta20.getColumnLabel(5);
2020-06-17 21:53:36 jdbc[13]: 
/**/rsMeta20.getColumnLabel(6);
2020-06-17 21:53:36 jdbc[13]: 
/**/rsMeta20.getColumnLabel(7);
2020-06-17 21:53:36 jdbc[13]: 
/**/rsMeta20.getColumnLabel(8);
2020-06-17 21:53:36 jdbc[13]: 
/**/rsMeta20.getColumnLabel(9);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.next();
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(1);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(2);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(3);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(4);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(5);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(6);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(7);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(8);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(9);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.next();
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(1);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(2);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(3);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(4);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(5);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(6);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(7);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(8);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(9);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.next();
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(1);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(2);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(3);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(4);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(5);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(6);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(7);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(8);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(9);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.next();
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(1);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(2);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(3);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(4);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(5);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(6);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(7);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(8);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(9);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.next();
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(1);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(2);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(3);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(4);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(5);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(6);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(7);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(8);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(9);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.next();
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(1);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(2);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(3);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(4);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(5);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(6);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(7);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(8);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(9);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.next();
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(1);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(2);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(3);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(4);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(5);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(6);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(7);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(8);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(9);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.next();
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(1);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(2);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(3);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(4);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(5);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(6);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(7);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(8);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(9);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.next();
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(1);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(2);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(3);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(4);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(5);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(6);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(7);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(8);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(9);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.next();
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(1);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(2);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(3);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(4);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(5);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(6);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(7);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(8);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(9);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.next();
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(1);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(2);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(3);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(4);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(5);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(6);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(7);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(8);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(9);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.next();
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(1);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(2);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(3);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(4);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(5);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(6);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(7);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(8);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getString(9);
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.next();
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getConcurrency();
2020-06-17 21:53:36 jdbc[13]: 
/**/DatabaseMetaData dbMeta8 = conn10.getMetaData();
2020-06-17 21:53:36 jdbc[13]: 
/**/dbMeta8.getTables(null, "PUBLIC", "LOG_TBL", new String[]{"TABLE"});
2020-06-17 21:53:36 jdbc[13]: 
/**/PreparedStatement prep45 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME");
2020-06-17 21:53:36 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@1e97159]
2020-06-17 21:53:36 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@1e97159
2020-06-17 21:53:36 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:53:36 jdbc[13]: Table      :     potential plan item cost 4,322 index meta
2020-06-17 21:53:36 jdbc[13]: Plan       :   best plan item cost 4,278.78 index meta
2020-06-17 21:53:36 jdbc[13]: Plan       : plan cost 4,279.78
2020-06-17 21:53:36 jdbc[13]: 
/**/prep45.setString(1, "%");
2020-06-17 21:53:36 jdbc[13]: 
/**/prep45.setString(2, "PUBLIC");
2020-06-17 21:53:36 jdbc[13]: 
/**/prep45.setString(3, "LOG_TBL");
2020-06-17 21:53:36 jdbc[13]: 
/**/prep45.setString(4, "\\");
2020-06-17 21:53:36 jdbc[13]: 
/**/prep45.setString(5, "TABLE");
2020-06-17 21:53:36 jdbc[13]: 
/**/ResultSet rs89 = prep45.executeQuery();
2020-06-17 21:53:36 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@1e97159]
2020-06-17 21:53:36 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@1e97159
2020-06-17 21:53:36 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:53:36 jdbc[13]: Table      :     potential plan item cost 1,324 index meta
2020-06-17 21:53:36 jdbc[13]: Plan       :   best plan item cost 1,271.04 index meta
2020-06-17 21:53:36 jdbc[13]: Plan       : plan cost 1,272.04
2020-06-17 21:53:36 jdbc[13]: 
/*SQL l:414 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME {1: '%', 2: 'PUBLIC', 3: 'LOG_TBL', 4: '\\', 5: 'TABLE'};
2020-06-17 21:53:36 jdbc[13]: 
/**/rs89.next();
2020-06-17 21:53:36 jdbc[13]: 
/**/rs89.getString("SQL");
2020-06-17 21:53:36 jdbc[13]: 
/**/rs89.getString("TABLE_NAME");
2020-06-17 21:53:36 jdbc[13]: 
/**/dbMeta8.getPrimaryKeys(null, "PUBLIC", "LOG_TBL");
2020-06-17 21:53:36 jdbc[13]: 
/**/PreparedStatement prep46 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME");
2020-06-17 21:53:36 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@2e567e2a]
2020-06-17 21:53:36 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@2e567e2a
2020-06-17 21:53:36 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:53:36 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-17 21:53:36 jdbc[13]: Plan       :   best plan item cost 321.44 index meta
2020-06-17 21:53:36 jdbc[13]: Plan       : plan cost 322.44
2020-06-17 21:53:36 jdbc[13]: 
/**/prep46.setString(1, "%");
2020-06-17 21:53:36 jdbc[13]: 
/**/prep46.setString(2, "\\");
2020-06-17 21:53:36 jdbc[13]: 
/**/prep46.setString(3, "PUBLIC");
2020-06-17 21:53:36 jdbc[13]: 
/**/prep46.setString(4, "\\");
2020-06-17 21:53:36 jdbc[13]: 
/**/prep46.setString(5, "LOG_TBL");
2020-06-17 21:53:36 jdbc[13]: 
/**/ResultSet rs90 = prep46.executeQuery();
2020-06-17 21:53:36 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@2e567e2a]
2020-06-17 21:53:36 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@2e567e2a
2020-06-17 21:53:36 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:53:36 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-17 21:53:36 jdbc[13]: Plan       :   best plan item cost 318.16 index meta
2020-06-17 21:53:36 jdbc[13]: Plan       : plan cost 319.16
2020-06-17 21:53:36 jdbc[13]: 
/*SQL l:316 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME {1: '%', 2: '\\', 3: 'PUBLIC', 4: '\\', 5: 'LOG_TBL'};
2020-06-17 21:53:36 jdbc[13]: 
/**/rs90.next();
2020-06-17 21:53:36 jdbc[13]: 
/**/rs90.getString("COLUMN_NAME");
2020-06-17 21:53:36 jdbc[13]: 
/**/rs90.next();
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.getType();
2020-06-17 21:53:36 jdbc[13]: 
/**/rs88.close();
2020-06-17 21:53:36 jdbc[13]: 
/**/stat7.close();
2020-06-17 21:53:42 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-17 21:53:42 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 21:53:42 jdbc[3]: 
/**/conn0.setReadOnly(true);
2020-06-17 21:53:42 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:53:42 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:53:42 jdbc[3]: 
/**/PreparedStatement prep47 = conn0.prepareStatement("select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=?");
2020-06-17 21:53:42 jdbc[3]: 
/**/prep47.setLong(1, 3L);
2020-06-17 21:53:42 jdbc[3]: 
/**/ResultSet rs91 = prep47.executeQuery();
2020-06-17 21:53:42 jdbc[3]: 
/*SQL l:225 #:1*/select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=? {1: 3};
2020-06-17 21:53:42 jdbc[3]: 
/**/rs91.next();
2020-06-17 21:53:42 jdbc[3]: 
/**/rs91.getString("customer2_0_0_");
2020-06-17 21:53:42 jdbc[3]: 
/**/rs91.wasNull();
2020-06-17 21:53:42 jdbc[3]: 
/**/rs91.getString("customer3_0_0_");
2020-06-17 21:53:42 jdbc[3]: 
/**/rs91.wasNull();
2020-06-17 21:53:42 jdbc[3]: 
/**/rs91.getString("customer4_0_0_");
2020-06-17 21:53:42 jdbc[3]: 
/**/rs91.wasNull();
2020-06-17 21:53:42 jdbc[3]: 
/**/rs91.next();
2020-06-17 21:53:42 jdbc[3]: 
/**/rs91.close();
2020-06-17 21:53:42 jdbc[3]: 
/**/prep47.getMaxRows();
2020-06-17 21:53:42 jdbc[3]: 
/**/prep47.getQueryTimeout();
2020-06-17 21:53:42 jdbc[3]: 
/**/prep47.close();
2020-06-17 21:53:42 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:53:42 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:53:42 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:53:42 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:53:42 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:53:42 jdbc[3]: 
/**/conn0.setReadOnly(false);
2020-06-17 21:53:42 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:53:42 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:53:42 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:53:43 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-17 21:53:43 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 21:53:43 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:53:43 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:53:43 jdbc[3]: 
/**/PreparedStatement prep48 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 21:53:43 jdbc[3]: 
/**/prep48.setString(1, "CustomerMS");
2020-06-17 21:53:43 jdbc[3]: 
/**/prep48.setString(2, "INFO");
2020-06-17 21:53:43 jdbc[3]: 
/**/prep48.setNull(3, 12);
2020-06-17 21:53:43 jdbc[3]: 
/**/prep48.setString(4, "/api/customers/3");
2020-06-17 21:53:43 jdbc[3]: 
/**/prep48.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 21:53:43 jdbc[3]: 
/**/prep48.setString(6, "ab696d894d92b334");
2020-06-17 21:53:43 jdbc[3]: 
/**/prep48.setString(7, "2020-06-18T02:53:42.252Z");
2020-06-17 21:53:43 jdbc[3]: 
/**/prep48.setString(8, "ab696d894d92b334");
2020-06-17 21:53:43 jdbc[3]: 
/**/prep48.executeUpdate();
2020-06-17 21:53:43 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 21:53:43 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 21:53:43 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/3', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: 'ab696d894d92b334', 7: '2020-06-18T02:53:42.252Z', 8: 'ab696d894d92b334'};
2020-06-17 21:53:43 jdbc[3]: 
/**/ResultSet rs92 = prep48.getGeneratedKeys();
2020-06-17 21:53:43 jdbc[3]: 
/**/rs92.next();
2020-06-17 21:53:43 jdbc[3]: 
/**/ResultSetMetaData rsMeta21 = rs92.getMetaData();
2020-06-17 21:53:43 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:53:43 jdbc[3]: 
/**/rsMeta21.getColumnCount();
2020-06-17 21:53:43 jdbc[3]: 
/**/rs92.getLong(1);
2020-06-17 21:53:43 jdbc[3]: 
/**/rs92.close();
2020-06-17 21:53:43 jdbc[3]: 
/**/prep48.getMaxRows();
2020-06-17 21:53:43 jdbc[3]: 
/**/prep48.getQueryTimeout();
2020-06-17 21:53:43 jdbc[3]: 
/**/prep48.close();
2020-06-17 21:53:43 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:53:43 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 21:53:43 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:53:43 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:53:43 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:53:43 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:53:43 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:53:43 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:53:43 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:53:43 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:53:43 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:53:43 jdbc[3]: 
/**/PreparedStatement prep49 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 21:53:43 jdbc[3]: 
/**/prep49.setString(1, "CustomerMS");
2020-06-17 21:53:43 jdbc[3]: 
/**/prep49.setString(2, "INFO");
2020-06-17 21:53:43 jdbc[3]: 
/**/prep49.setNull(3, 12);
2020-06-17 21:53:43 jdbc[3]: 
/**/prep49.setString(4, "/api/customers/3");
2020-06-17 21:53:43 jdbc[3]: 
/**/prep49.setString(5, "Customer(id=3, firstName=Ramila, lastName=Karki, email=ramila@gmail.com)");
2020-06-17 21:53:43 jdbc[3]: 
/**/prep49.setString(6, "ab696d894d92b334");
2020-06-17 21:53:43 jdbc[3]: 
/**/prep49.setString(7, "2020-06-18T02:53:42.257Z");
2020-06-17 21:53:43 jdbc[3]: 
/**/prep49.setString(8, "ab696d894d92b334");
2020-06-17 21:53:43 jdbc[3]: 
/**/prep49.executeUpdate();
2020-06-17 21:53:43 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 21:53:43 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 21:53:43 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/3', 5: 'Customer(id=3, firstName=Ramila, lastName=Karki, email=ramila@gmail.com)', 6: 'ab696d894d92b334', 7: '2020-06-18T02:53:42.257Z', 8: 'ab696d894d92b334'};
2020-06-17 21:53:43 jdbc[3]: 
/**/ResultSet rs93 = prep49.getGeneratedKeys();
2020-06-17 21:53:43 jdbc[3]: 
/**/rs93.next();
2020-06-17 21:53:43 jdbc[3]: 
/**/ResultSetMetaData rsMeta22 = rs93.getMetaData();
2020-06-17 21:53:43 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:53:43 jdbc[3]: 
/**/rsMeta22.getColumnCount();
2020-06-17 21:53:43 jdbc[3]: 
/**/rs93.getLong(1);
2020-06-17 21:53:43 jdbc[3]: 
/**/rs93.close();
2020-06-17 21:53:43 jdbc[3]: 
/**/prep49.getMaxRows();
2020-06-17 21:53:43 jdbc[3]: 
/**/prep49.getQueryTimeout();
2020-06-17 21:53:43 jdbc[3]: 
/**/prep49.close();
2020-06-17 21:53:43 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:53:43 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 21:53:43 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:53:43 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:53:43 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:53:43 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:53:43 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:53:43 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:53:43 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:53:45 jdbc[13]: 
/**/Statement stat8 = conn10.createStatement(1004, 1008);
2020-06-17 21:53:45 jdbc[13]: 
/**/stat8.setMaxRows(1000);
2020-06-17 21:53:45 jdbc[13]: 
/**/stat8.execute("SELECT * FROM LOG_TBL");
2020-06-17 21:53:45 jdbc[13]: 
/*SQL #:14*/SELECT * FROM LOG_TBL;
2020-06-17 21:53:45 jdbc[13]: 
/**/ResultSet rs94 = stat8.getResultSet();
2020-06-17 21:53:45 jdbc[13]: 
/**/ResultSetMetaData rsMeta23 = rs94.getMetaData();
2020-06-17 21:53:45 jdbc[13]: 
/**/conn10.getCatalog();
2020-06-17 21:53:45 jdbc[13]: 
/**/rsMeta23.getColumnCount();
2020-06-17 21:53:45 jdbc[13]: 
/**/rsMeta23.getColumnLabel(1);
2020-06-17 21:53:45 jdbc[13]: 
/**/rsMeta23.getColumnLabel(2);
2020-06-17 21:53:45 jdbc[13]: 
/**/rsMeta23.getColumnLabel(3);
2020-06-17 21:53:45 jdbc[13]: 
/**/rsMeta23.getColumnLabel(4);
2020-06-17 21:53:45 jdbc[13]: 
/**/rsMeta23.getColumnLabel(5);
2020-06-17 21:53:45 jdbc[13]: 
/**/rsMeta23.getColumnLabel(6);
2020-06-17 21:53:45 jdbc[13]: 
/**/rsMeta23.getColumnLabel(7);
2020-06-17 21:53:45 jdbc[13]: 
/**/rsMeta23.getColumnLabel(8);
2020-06-17 21:53:45 jdbc[13]: 
/**/rsMeta23.getColumnLabel(9);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.next();
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(1);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(2);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(3);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(4);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(5);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(6);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(7);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(8);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(9);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.next();
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(1);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(2);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(3);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(4);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(5);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(6);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(7);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(8);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(9);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.next();
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(1);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(2);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(3);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(4);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(5);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(6);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(7);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(8);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(9);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.next();
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(1);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(2);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(3);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(4);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(5);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(6);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(7);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(8);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(9);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.next();
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(1);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(2);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(3);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(4);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(5);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(6);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(7);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(8);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(9);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.next();
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(1);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(2);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(3);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(4);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(5);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(6);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(7);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(8);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(9);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.next();
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(1);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(2);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(3);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(4);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(5);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(6);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(7);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(8);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(9);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.next();
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(1);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(2);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(3);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(4);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(5);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(6);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(7);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(8);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(9);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.next();
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(1);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(2);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(3);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(4);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(5);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(6);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(7);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(8);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(9);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.next();
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(1);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(2);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(3);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(4);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(5);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(6);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(7);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(8);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(9);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.next();
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(1);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(2);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(3);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(4);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(5);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(6);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(7);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(8);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(9);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.next();
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(1);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(2);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(3);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(4);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(5);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(6);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(7);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(8);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(9);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.next();
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(1);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(2);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(3);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(4);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(5);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(6);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(7);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(8);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(9);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.next();
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(1);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(2);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(3);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(4);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(5);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(6);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(7);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(8);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getString(9);
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.next();
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getConcurrency();
2020-06-17 21:53:45 jdbc[13]: 
/**/DatabaseMetaData dbMeta9 = conn10.getMetaData();
2020-06-17 21:53:45 jdbc[13]: 
/**/dbMeta9.getTables(null, "PUBLIC", "LOG_TBL", new String[]{"TABLE"});
2020-06-17 21:53:45 jdbc[13]: 
/**/PreparedStatement prep50 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME");
2020-06-17 21:53:45 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@1e97159]
2020-06-17 21:53:45 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@1e97159
2020-06-17 21:53:45 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:53:45 jdbc[13]: Table      :     potential plan item cost 4,322 index meta
2020-06-17 21:53:45 jdbc[13]: Plan       :   best plan item cost 4,278.78 index meta
2020-06-17 21:53:45 jdbc[13]: Plan       : plan cost 4,279.78
2020-06-17 21:53:45 jdbc[13]: 
/**/prep50.setString(1, "%");
2020-06-17 21:53:45 jdbc[13]: 
/**/prep50.setString(2, "PUBLIC");
2020-06-17 21:53:45 jdbc[13]: 
/**/prep50.setString(3, "LOG_TBL");
2020-06-17 21:53:45 jdbc[13]: 
/**/prep50.setString(4, "\\");
2020-06-17 21:53:45 jdbc[13]: 
/**/prep50.setString(5, "TABLE");
2020-06-17 21:53:45 jdbc[13]: 
/**/ResultSet rs95 = prep50.executeQuery();
2020-06-17 21:53:45 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@1e97159]
2020-06-17 21:53:45 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@1e97159
2020-06-17 21:53:45 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:53:45 jdbc[13]: Table      :     potential plan item cost 1,324 index meta
2020-06-17 21:53:45 jdbc[13]: Plan       :   best plan item cost 1,271.04 index meta
2020-06-17 21:53:45 jdbc[13]: Plan       : plan cost 1,272.04
2020-06-17 21:53:45 jdbc[13]: 
/*SQL l:414 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME {1: '%', 2: 'PUBLIC', 3: 'LOG_TBL', 4: '\\', 5: 'TABLE'};
2020-06-17 21:53:45 jdbc[13]: 
/**/rs95.next();
2020-06-17 21:53:45 jdbc[13]: 
/**/rs95.getString("SQL");
2020-06-17 21:53:45 jdbc[13]: 
/**/rs95.getString("TABLE_NAME");
2020-06-17 21:53:45 jdbc[13]: 
/**/dbMeta9.getPrimaryKeys(null, "PUBLIC", "LOG_TBL");
2020-06-17 21:53:45 jdbc[13]: 
/**/PreparedStatement prep51 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME");
2020-06-17 21:53:45 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@2e567e2a]
2020-06-17 21:53:45 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@2e567e2a
2020-06-17 21:53:45 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:53:45 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-17 21:53:45 jdbc[13]: Plan       :   best plan item cost 321.44 index meta
2020-06-17 21:53:45 jdbc[13]: Plan       : plan cost 322.44
2020-06-17 21:53:45 jdbc[13]: 
/**/prep51.setString(1, "%");
2020-06-17 21:53:45 jdbc[13]: 
/**/prep51.setString(2, "\\");
2020-06-17 21:53:45 jdbc[13]: 
/**/prep51.setString(3, "PUBLIC");
2020-06-17 21:53:45 jdbc[13]: 
/**/prep51.setString(4, "\\");
2020-06-17 21:53:45 jdbc[13]: 
/**/prep51.setString(5, "LOG_TBL");
2020-06-17 21:53:45 jdbc[13]: 
/**/ResultSet rs96 = prep51.executeQuery();
2020-06-17 21:53:45 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@2e567e2a]
2020-06-17 21:53:45 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@2e567e2a
2020-06-17 21:53:45 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:53:45 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-17 21:53:45 jdbc[13]: Plan       :   best plan item cost 318.16 index meta
2020-06-17 21:53:45 jdbc[13]: Plan       : plan cost 319.16
2020-06-17 21:53:45 jdbc[13]: 
/*SQL l:316 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME {1: '%', 2: '\\', 3: 'PUBLIC', 4: '\\', 5: 'LOG_TBL'};
2020-06-17 21:53:45 jdbc[13]: 
/**/rs96.next();
2020-06-17 21:53:45 jdbc[13]: 
/**/rs96.getString("COLUMN_NAME");
2020-06-17 21:53:45 jdbc[13]: 
/**/rs96.next();
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.getType();
2020-06-17 21:53:45 jdbc[13]: 
/**/rs94.close();
2020-06-17 21:53:45 jdbc[13]: 
/**/stat8.close();
2020-06-17 21:53:58 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-17 21:53:58 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 21:53:58 jdbc[3]: 
/**/conn0.setReadOnly(true);
2020-06-17 21:53:58 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:53:58 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:53:58 jdbc[3]: 
/**/PreparedStatement prep52 = conn0.prepareStatement("select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=?");
2020-06-17 21:53:58 jdbc[3]: 
/**/prep52.setLong(1, 4L);
2020-06-17 21:53:58 jdbc[3]: 
/**/ResultSet rs97 = prep52.executeQuery();
2020-06-17 21:53:58 jdbc[3]: 
/*SQL l:225 #:1*/select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=? {1: 4};
2020-06-17 21:53:58 jdbc[3]: 
/**/rs97.next();
2020-06-17 21:53:58 jdbc[3]: 
/**/rs97.getString("customer2_0_0_");
2020-06-17 21:53:58 jdbc[3]: 
/**/rs97.wasNull();
2020-06-17 21:53:58 jdbc[3]: 
/**/rs97.getString("customer3_0_0_");
2020-06-17 21:53:58 jdbc[3]: 
/**/rs97.wasNull();
2020-06-17 21:53:58 jdbc[3]: 
/**/rs97.getString("customer4_0_0_");
2020-06-17 21:53:58 jdbc[3]: 
/**/rs97.wasNull();
2020-06-17 21:53:58 jdbc[3]: 
/**/rs97.next();
2020-06-17 21:53:58 jdbc[3]: 
/**/rs97.close();
2020-06-17 21:53:58 jdbc[3]: 
/**/prep52.getMaxRows();
2020-06-17 21:53:58 jdbc[3]: 
/**/prep52.getQueryTimeout();
2020-06-17 21:53:58 jdbc[3]: 
/**/prep52.close();
2020-06-17 21:53:58 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:53:58 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:53:58 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:53:58 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:53:58 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:53:58 jdbc[3]: 
/**/conn0.setReadOnly(false);
2020-06-17 21:53:58 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:53:58 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:53:58 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:53:59 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:53:59 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:53:59 jdbc[3]: 
/**/PreparedStatement prep53 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 21:53:59 jdbc[3]: 
/**/prep53.setString(1, "CustomerMS");
2020-06-17 21:53:59 jdbc[3]: 
/**/prep53.setString(2, "INFO");
2020-06-17 21:53:59 jdbc[3]: 
/**/prep53.setNull(3, 12);
2020-06-17 21:53:59 jdbc[3]: 
/**/prep53.setString(4, "/api/customers/4");
2020-06-17 21:53:59 jdbc[3]: 
/**/prep53.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 21:53:59 jdbc[3]: 
/**/prep53.setString(6, "cc0b9a3859b08cfa");
2020-06-17 21:53:59 jdbc[3]: 
/**/prep53.setString(7, "2020-06-18T02:53:58.878Z");
2020-06-17 21:53:59 jdbc[3]: 
/**/prep53.setString(8, "cc0b9a3859b08cfa");
2020-06-17 21:53:59 jdbc[3]: 
/**/prep53.executeUpdate();
2020-06-17 21:53:59 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 21:53:59 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 21:53:59 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/4', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: 'cc0b9a3859b08cfa', 7: '2020-06-18T02:53:58.878Z', 8: 'cc0b9a3859b08cfa'};
2020-06-17 21:53:59 jdbc[3]: 
/**/ResultSet rs98 = prep53.getGeneratedKeys();
2020-06-17 21:53:59 jdbc[3]: 
/**/rs98.next();
2020-06-17 21:53:59 jdbc[3]: 
/**/ResultSetMetaData rsMeta24 = rs98.getMetaData();
2020-06-17 21:53:59 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:53:59 jdbc[3]: 
/**/rsMeta24.getColumnCount();
2020-06-17 21:53:59 jdbc[3]: 
/**/rs98.getLong(1);
2020-06-17 21:53:59 jdbc[3]: 
/**/rs98.close();
2020-06-17 21:53:59 jdbc[3]: 
/**/prep53.getMaxRows();
2020-06-17 21:53:59 jdbc[3]: 
/**/prep53.getQueryTimeout();
2020-06-17 21:53:59 jdbc[3]: 
/**/prep53.close();
2020-06-17 21:53:59 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:53:59 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 21:53:59 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:53:59 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:53:59 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:53:59 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:53:59 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:53:59 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:53:59 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:53:59 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:53:59 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:53:59 jdbc[3]: 
/**/PreparedStatement prep54 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 21:53:59 jdbc[3]: 
/**/prep54.setString(1, "CustomerMS");
2020-06-17 21:53:59 jdbc[3]: 
/**/prep54.setString(2, "INFO");
2020-06-17 21:53:59 jdbc[3]: 
/**/prep54.setNull(3, 12);
2020-06-17 21:53:59 jdbc[3]: 
/**/prep54.setString(4, "/api/customers/4");
2020-06-17 21:53:59 jdbc[3]: 
/**/prep54.setString(5, "Customer(id=4, firstName=David, lastName=Yonge, email=david@gmail.com)");
2020-06-17 21:53:59 jdbc[3]: 
/**/prep54.setString(6, "cc0b9a3859b08cfa");
2020-06-17 21:53:59 jdbc[3]: 
/**/prep54.setString(7, "2020-06-18T02:53:58.882Z");
2020-06-17 21:53:59 jdbc[3]: 
/**/prep54.setString(8, "cc0b9a3859b08cfa");
2020-06-17 21:53:59 jdbc[3]: 
/**/prep54.executeUpdate();
2020-06-17 21:53:59 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 21:53:59 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 21:53:59 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/4', 5: 'Customer(id=4, firstName=David, lastName=Yonge, email=david@gmail.com)', 6: 'cc0b9a3859b08cfa', 7: '2020-06-18T02:53:58.882Z', 8: 'cc0b9a3859b08cfa'};
2020-06-17 21:53:59 jdbc[3]: 
/**/ResultSet rs99 = prep54.getGeneratedKeys();
2020-06-17 21:53:59 jdbc[3]: 
/**/rs99.next();
2020-06-17 21:53:59 jdbc[3]: 
/**/ResultSetMetaData rsMeta25 = rs99.getMetaData();
2020-06-17 21:53:59 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:53:59 jdbc[3]: 
/**/rsMeta25.getColumnCount();
2020-06-17 21:53:59 jdbc[3]: 
/**/rs99.getLong(1);
2020-06-17 21:53:59 jdbc[3]: 
/**/rs99.close();
2020-06-17 21:53:59 jdbc[3]: 
/**/prep54.getMaxRows();
2020-06-17 21:53:59 jdbc[3]: 
/**/prep54.getQueryTimeout();
2020-06-17 21:53:59 jdbc[3]: 
/**/prep54.close();
2020-06-17 21:53:59 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:53:59 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 21:53:59 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:53:59 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:53:59 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:53:59 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:53:59 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:53:59 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:53:59 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:54:01 jdbc[13]: 
/**/Statement stat9 = conn10.createStatement(1004, 1008);
2020-06-17 21:54:01 jdbc[13]: 
/**/stat9.setMaxRows(1000);
2020-06-17 21:54:01 jdbc[13]: 
/**/stat9.execute("SELECT * FROM LOG_TBL");
2020-06-17 21:54:01 jdbc[13]: 
/*SQL #:16*/SELECT * FROM LOG_TBL;
2020-06-17 21:54:01 jdbc[13]: 
/**/ResultSet rs100 = stat9.getResultSet();
2020-06-17 21:54:01 jdbc[13]: 
/**/ResultSetMetaData rsMeta26 = rs100.getMetaData();
2020-06-17 21:54:01 jdbc[13]: 
/**/conn10.getCatalog();
2020-06-17 21:54:01 jdbc[13]: 
/**/rsMeta26.getColumnCount();
2020-06-17 21:54:01 jdbc[13]: 
/**/rsMeta26.getColumnLabel(1);
2020-06-17 21:54:01 jdbc[13]: 
/**/rsMeta26.getColumnLabel(2);
2020-06-17 21:54:01 jdbc[13]: 
/**/rsMeta26.getColumnLabel(3);
2020-06-17 21:54:01 jdbc[13]: 
/**/rsMeta26.getColumnLabel(4);
2020-06-17 21:54:01 jdbc[13]: 
/**/rsMeta26.getColumnLabel(5);
2020-06-17 21:54:01 jdbc[13]: 
/**/rsMeta26.getColumnLabel(6);
2020-06-17 21:54:01 jdbc[13]: 
/**/rsMeta26.getColumnLabel(7);
2020-06-17 21:54:01 jdbc[13]: 
/**/rsMeta26.getColumnLabel(8);
2020-06-17 21:54:01 jdbc[13]: 
/**/rsMeta26.getColumnLabel(9);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.next();
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(1);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(2);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(3);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(4);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(5);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(6);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(7);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(8);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(9);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.next();
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(1);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(2);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(3);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(4);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(5);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(6);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(7);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(8);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(9);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.next();
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(1);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(2);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(3);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(4);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(5);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(6);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(7);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(8);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(9);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.next();
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(1);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(2);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(3);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(4);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(5);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(6);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(7);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(8);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(9);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.next();
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(1);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(2);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(3);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(4);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(5);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(6);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(7);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(8);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(9);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.next();
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(1);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(2);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(3);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(4);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(5);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(6);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(7);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(8);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(9);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.next();
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(1);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(2);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(3);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(4);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(5);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(6);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(7);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(8);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(9);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.next();
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(1);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(2);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(3);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(4);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(5);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(6);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(7);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(8);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(9);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.next();
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(1);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(2);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(3);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(4);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(5);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(6);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(7);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(8);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(9);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.next();
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(1);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(2);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(3);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(4);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(5);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(6);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(7);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(8);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(9);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.next();
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(1);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(2);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(3);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(4);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(5);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(6);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(7);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(8);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(9);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.next();
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(1);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(2);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(3);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(4);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(5);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(6);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(7);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(8);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(9);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.next();
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(1);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(2);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(3);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(4);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(5);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(6);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(7);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(8);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(9);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.next();
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(1);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(2);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(3);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(4);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(5);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(6);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(7);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(8);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(9);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.next();
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(1);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(2);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(3);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(4);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(5);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(6);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(7);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(8);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(9);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.next();
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(1);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(2);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(3);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(4);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(5);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(6);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(7);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(8);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getString(9);
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.next();
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getConcurrency();
2020-06-17 21:54:01 jdbc[13]: 
/**/DatabaseMetaData dbMeta10 = conn10.getMetaData();
2020-06-17 21:54:01 jdbc[13]: 
/**/dbMeta10.getTables(null, "PUBLIC", "LOG_TBL", new String[]{"TABLE"});
2020-06-17 21:54:01 jdbc[13]: 
/**/PreparedStatement prep55 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME");
2020-06-17 21:54:01 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@1e97159]
2020-06-17 21:54:01 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@1e97159
2020-06-17 21:54:01 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:54:01 jdbc[13]: Table      :     potential plan item cost 4,322 index meta
2020-06-17 21:54:01 jdbc[13]: Plan       :   best plan item cost 4,278.78 index meta
2020-06-17 21:54:01 jdbc[13]: Plan       : plan cost 4,279.78
2020-06-17 21:54:01 jdbc[13]: 
/**/prep55.setString(1, "%");
2020-06-17 21:54:01 jdbc[13]: 
/**/prep55.setString(2, "PUBLIC");
2020-06-17 21:54:01 jdbc[13]: 
/**/prep55.setString(3, "LOG_TBL");
2020-06-17 21:54:01 jdbc[13]: 
/**/prep55.setString(4, "\\");
2020-06-17 21:54:01 jdbc[13]: 
/**/prep55.setString(5, "TABLE");
2020-06-17 21:54:01 jdbc[13]: 
/**/ResultSet rs101 = prep55.executeQuery();
2020-06-17 21:54:01 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@1e97159]
2020-06-17 21:54:01 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@1e97159
2020-06-17 21:54:01 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:54:01 jdbc[13]: Table      :     potential plan item cost 1,324 index meta
2020-06-17 21:54:01 jdbc[13]: Plan       :   best plan item cost 1,271.04 index meta
2020-06-17 21:54:01 jdbc[13]: Plan       : plan cost 1,272.04
2020-06-17 21:54:01 jdbc[13]: 
/*SQL l:414 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME {1: '%', 2: 'PUBLIC', 3: 'LOG_TBL', 4: '\\', 5: 'TABLE'};
2020-06-17 21:54:01 jdbc[13]: 
/**/rs101.next();
2020-06-17 21:54:01 jdbc[13]: 
/**/rs101.getString("SQL");
2020-06-17 21:54:01 jdbc[13]: 
/**/rs101.getString("TABLE_NAME");
2020-06-17 21:54:01 jdbc[13]: 
/**/dbMeta10.getPrimaryKeys(null, "PUBLIC", "LOG_TBL");
2020-06-17 21:54:01 jdbc[13]: 
/**/PreparedStatement prep56 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME");
2020-06-17 21:54:01 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@2e567e2a]
2020-06-17 21:54:01 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@2e567e2a
2020-06-17 21:54:01 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:54:01 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-17 21:54:01 jdbc[13]: Plan       :   best plan item cost 321.44 index meta
2020-06-17 21:54:01 jdbc[13]: Plan       : plan cost 322.44
2020-06-17 21:54:01 jdbc[13]: 
/**/prep56.setString(1, "%");
2020-06-17 21:54:01 jdbc[13]: 
/**/prep56.setString(2, "\\");
2020-06-17 21:54:01 jdbc[13]: 
/**/prep56.setString(3, "PUBLIC");
2020-06-17 21:54:01 jdbc[13]: 
/**/prep56.setString(4, "\\");
2020-06-17 21:54:01 jdbc[13]: 
/**/prep56.setString(5, "LOG_TBL");
2020-06-17 21:54:01 jdbc[13]: 
/**/ResultSet rs102 = prep56.executeQuery();
2020-06-17 21:54:01 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@2e567e2a]
2020-06-17 21:54:01 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@2e567e2a
2020-06-17 21:54:01 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:54:01 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-17 21:54:01 jdbc[13]: Plan       :   best plan item cost 318.16 index meta
2020-06-17 21:54:01 jdbc[13]: Plan       : plan cost 319.16
2020-06-17 21:54:01 jdbc[13]: 
/*SQL l:316 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME {1: '%', 2: '\\', 3: 'PUBLIC', 4: '\\', 5: 'LOG_TBL'};
2020-06-17 21:54:01 jdbc[13]: 
/**/rs102.next();
2020-06-17 21:54:01 jdbc[13]: 
/**/rs102.getString("COLUMN_NAME");
2020-06-17 21:54:01 jdbc[13]: 
/**/rs102.next();
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.getType();
2020-06-17 21:54:01 jdbc[13]: 
/**/rs100.close();
2020-06-17 21:54:01 jdbc[13]: 
/**/stat9.close();
2020-06-17 21:55:26 jdbc[13]: 
/**/conn10.close();
2020-06-17 21:55:26 lock: 13 shared read lock unlock SYS 
2020-06-17 21:55:26 database: disconnecting session #13
2020-06-17 21:55:26 database: disconnected session #13
2020-06-17 21:55:26 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-17 21:55:26 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 21:55:26 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:55:26 jdbc[3]: 
/**/Statement stat10 = conn0.createStatement();
2020-06-17 21:55:26 jdbc[3]: 
/**/stat10.execute("drop table if exists customer_tbl CASCADE ");
2020-06-17 21:55:26 lock: 3 exclusive write lock requesting for CUSTOMER_TBL 
2020-06-17 21:55:26 lock: 3 exclusive write lock added for CUSTOMER_TBL 
2020-06-17 21:55:26 lock: 3 exclusive write lock requesting for SYS 
2020-06-17 21:55:26 lock: 3 exclusive write lock added for SYS 
2020-06-17 21:55:26 jdbc[3]: 
/*SQL t:2*/drop table if exists customer_tbl CASCADE;
2020-06-17 21:55:26 lock: 3 exclusive write lock unlock SYS 
2020-06-17 21:55:26 jdbc[3]: 
/**/stat10.getWarnings();
2020-06-17 21:55:26 jdbc[3]: 
/**/stat10.execute("drop table if exists log_tbl CASCADE ");
2020-06-17 21:55:26 lock: 3 exclusive write lock requesting for LOG_TBL 
2020-06-17 21:55:26 lock: 3 exclusive write lock added for LOG_TBL 
2020-06-17 21:55:26 lock: 3 exclusive write lock requesting for SYS 
2020-06-17 21:55:26 lock: 3 exclusive write lock added for SYS 
2020-06-17 21:55:26 jdbc[3]: 
/*SQL */drop table if exists log_tbl CASCADE;
2020-06-17 21:55:26 lock: 3 exclusive write lock unlock SYS 
2020-06-17 21:55:26 jdbc[3]: 
/**/stat10.getWarnings();
2020-06-17 21:55:26 jdbc[3]: 
/**/stat10.close();
2020-06-17 21:55:26 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:55:26 database: closing /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb from shutdown hook
2020-06-17 21:55:26 lock: 3 shared read lock unlock SYS 
2020-06-17 21:55:26 database: disconnecting session #3
2020-06-17 21:55:26 database: disconnected session #3
2020-06-17 21:55:26 lock: 4 shared read lock unlock SYS 
2020-06-17 21:55:26 database: disconnecting session #4
2020-06-17 21:55:26 database: disconnected session #4
2020-06-17 21:55:26 lock: 5 shared read lock unlock SYS 
2020-06-17 21:55:26 database: disconnecting session #5
2020-06-17 21:55:26 database: disconnected session #5
2020-06-17 21:55:26 lock: 6 shared read lock unlock SYS 
2020-06-17 21:55:26 database: disconnecting session #6
2020-06-17 21:55:26 database: disconnected session #6
2020-06-17 21:55:26 lock: 7 shared read lock unlock SYS 
2020-06-17 21:55:26 database: disconnecting session #7
2020-06-17 21:55:26 database: disconnected session #7
2020-06-17 21:55:26 lock: 8 shared read lock unlock SYS 
2020-06-17 21:55:26 database: disconnecting session #8
2020-06-17 21:55:26 database: disconnected session #8
2020-06-17 21:55:26 lock: 9 shared read lock unlock SYS 
2020-06-17 21:55:26 database: disconnecting session #9
2020-06-17 21:55:26 database: disconnected session #9
2020-06-17 21:55:26 lock: 10 shared read lock unlock SYS 
2020-06-17 21:55:26 database: disconnecting session #10
2020-06-17 21:55:26 database: disconnected session #10
2020-06-17 21:55:26 lock: 11 shared read lock unlock SYS 
2020-06-17 21:55:26 database: disconnecting session #11
2020-06-17 21:55:26 database: disconnected session #11
2020-06-17 21:55:26 lock: 12 shared read lock unlock SYS 
2020-06-17 21:55:26 database: disconnecting session #12
2020-06-17 21:55:26 database: disconnected session #12
2020-06-17 21:55:26 jdbc[3]: 
/**/conn0.close();
2020-06-17 21:55:26 jdbc[4]: 
/**/conn1.close();
2020-06-17 21:55:26 jdbc[5]: 
/**/conn2.close();
2020-06-17 21:55:26 jdbc[6]: 
/**/conn3.close();
2020-06-17 21:55:26 jdbc[7]: 
/**/conn4.close();
2020-06-17 21:55:26 jdbc[8]: 
/**/conn5.close();
2020-06-17 21:55:26 jdbc[9]: 
/**/conn6.close();
2020-06-17 21:55:26 jdbc[10]: 
/**/conn7.close();
2020-06-17 21:55:26 jdbc[11]: 
/**/conn8.close();
2020-06-17 21:55:26 jdbc[12]: 
/**/conn9.close();
2020-06-17 21:55:26 database: closing /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:55:26 lock: 1 shared read lock unlock SYS 
2020-06-17 21:55:26 lock: 2 shared read lock unlock SYS 
2020-06-17 21:55:26 database: closed
2020-06-17 21:55:35 database: opening /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb (build 200)
2020-06-17 21:55:35 lock: 1 exclusive write lock requesting for SYS 
2020-06-17 21:55:35 lock: 1 exclusive write lock added for SYS 
2020-06-17 21:55:35 lock: 1 exclusive write lock unlock SYS 
2020-06-17 21:55:35 lock: 1 exclusive write lock requesting for SYS 
2020-06-17 21:55:35 lock: 1 exclusive write lock added for SYS 
2020-06-17 21:55:35 lock: 1 exclusive write lock unlock SYS 
2020-06-17 21:55:35 lock: 1 exclusive write lock requesting for SYS 
2020-06-17 21:55:35 lock: 1 exclusive write lock added for SYS 
2020-06-17 21:55:35 lock: 1 exclusive write lock unlock SYS 
2020-06-17 21:55:35 database: opened /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:55:35 database: connecting session #3 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:55:35 jdbc[3]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:55:35 jdbc[3]: 
/**/Connection conn0 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 21:55:35 jdbc[3]: 
/**/conn0.isReadOnly();
2020-06-17 21:55:35 jdbc[3]: 
/*SQL #:1 t:1*/CALL READONLY();
2020-06-17 21:55:35 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:55:35 jdbc[3]: 
/**/conn0.isValid(1);
2020-06-17 21:55:35 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 21:55:35 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 21:55:35 jdbc[3]: 
/**/DatabaseMetaData dbMeta0 = conn0.getMetaData();
2020-06-17 21:55:35 jdbc[3]: 
/**/dbMeta0.getURL();
2020-06-17 21:55:35 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:55:35 database: connecting session #4 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:55:35 jdbc[4]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:55:35 jdbc[4]: 
/**/Connection conn1 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 21:55:35 jdbc[4]: 
/**/conn1.isReadOnly();
2020-06-17 21:55:35 jdbc[4]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 21:55:35 jdbc[4]: 
/**/conn1.getAutoCommit();
2020-06-17 21:55:35 database: connecting session #5 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:55:35 jdbc[5]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:55:35 jdbc[5]: 
/**/Connection conn2 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 21:55:35 jdbc[5]: 
/**/conn2.isReadOnly();
2020-06-17 21:55:35 jdbc[5]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 21:55:35 jdbc[5]: 
/**/conn2.getAutoCommit();
2020-06-17 21:55:35 database: connecting session #6 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:55:35 jdbc[6]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:55:35 jdbc[6]: 
/**/Connection conn3 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 21:55:35 jdbc[6]: 
/**/conn3.isReadOnly();
2020-06-17 21:55:35 jdbc[6]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 21:55:35 jdbc[6]: 
/**/conn3.getAutoCommit();
2020-06-17 21:55:35 database: connecting session #7 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:55:35 jdbc[7]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:55:35 jdbc[7]: 
/**/Connection conn4 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 21:55:35 jdbc[7]: 
/**/conn4.isReadOnly();
2020-06-17 21:55:35 jdbc[7]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 21:55:35 jdbc[7]: 
/**/conn4.getAutoCommit();
2020-06-17 21:55:35 database: connecting session #8 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:55:35 jdbc[8]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:55:35 jdbc[8]: 
/**/Connection conn5 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 21:55:35 jdbc[8]: 
/**/conn5.isReadOnly();
2020-06-17 21:55:35 jdbc[8]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 21:55:35 jdbc[8]: 
/**/conn5.getAutoCommit();
2020-06-17 21:55:35 database: connecting session #9 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:55:35 jdbc[9]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:55:35 jdbc[9]: 
/**/Connection conn6 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 21:55:35 jdbc[9]: 
/**/conn6.isReadOnly();
2020-06-17 21:55:35 jdbc[9]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 21:55:35 jdbc[9]: 
/**/conn6.getAutoCommit();
2020-06-17 21:55:35 database: connecting session #10 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:55:35 jdbc[10]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:55:35 jdbc[10]: 
/**/Connection conn7 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 21:55:35 jdbc[10]: 
/**/conn7.isReadOnly();
2020-06-17 21:55:35 jdbc[10]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 21:55:35 jdbc[10]: 
/**/conn7.getAutoCommit();
2020-06-17 21:55:35 database: connecting session #11 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:55:35 jdbc[11]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:55:35 jdbc[11]: 
/**/Connection conn8 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 21:55:35 jdbc[11]: 
/**/conn8.isReadOnly();
2020-06-17 21:55:35 jdbc[11]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 21:55:35 jdbc[11]: 
/**/conn8.getAutoCommit();
2020-06-17 21:55:35 database: connecting session #12 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:55:35 jdbc[12]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:55:35 jdbc[12]: 
/**/Connection conn9 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 21:55:35 jdbc[12]: 
/**/conn9.isReadOnly();
2020-06-17 21:55:35 jdbc[12]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 21:55:35 jdbc[12]: 
/**/conn9.getAutoCommit();
2020-06-17 21:55:36 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-17 21:55:36 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 21:55:36 jdbc[3]: 
/**/DatabaseMetaData dbMeta1 = conn0.getMetaData();
2020-06-17 21:55:36 jdbc[3]: 
/**/dbMeta1.getDatabaseProductName();
2020-06-17 21:55:36 jdbc[3]: 
/**/dbMeta1.getDatabaseProductVersion();
2020-06-17 21:55:36 jdbc[3]: 
/**/dbMeta1.getDatabaseMajorVersion();
2020-06-17 21:55:36 jdbc[3]: 
/**/dbMeta1.getDatabaseMinorVersion();
2020-06-17 21:55:36 jdbc[3]: 
/**/dbMeta1.getDriverName();
2020-06-17 21:55:36 jdbc[3]: 
/**/dbMeta1.getDriverVersion();
2020-06-17 21:55:36 jdbc[3]: 
/**/dbMeta1.getDriverMajorVersion();
2020-06-17 21:55:36 jdbc[3]: 
/**/dbMeta1.getDriverMinorVersion();
2020-06-17 21:55:36 jdbc[3]: 
/**/dbMeta1.getJDBCMajorVersion();
2020-06-17 21:55:36 jdbc[3]: 
/**/dbMeta1.getJDBCMinorVersion();
2020-06-17 21:55:36 jdbc[3]: 
/**/dbMeta1.supportsCatalogsInTableDefinitions();
2020-06-17 21:55:36 jdbc[3]: 
/**/dbMeta1.supportsSchemasInTableDefinitions();
2020-06-17 21:55:36 jdbc[3]: 
/**/dbMeta1.storesLowerCaseIdentifiers();
2020-06-17 21:55:36 jdbc[3]: 
/**/PreparedStatement prep0 = conn0.prepareStatement("SELECT NAME, VALUE FROM INFORMATION_SCHEMA.SETTINGS WHERE NAME IN (?, ?, ?, ?)");
2020-06-17 21:55:36 jdbc[3]: Plan       : calculate cost for plan [SETTINGS:-7:org.h2.table.MetaTable@124ca49d]
2020-06-17 21:55:36 jdbc[3]: Plan       :   for table filter SETTINGS:-7:org.h2.table.MetaTable@124ca49d
2020-06-17 21:55:36 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:55:36 jdbc[3]: Plan       :   best plan item cost 9,900 index meta
2020-06-17 21:55:36 jdbc[3]: Plan       : plan cost 9,901
2020-06-17 21:55:36 jdbc[3]: 
/**/prep0.setString(1, "MODE");
2020-06-17 21:55:36 jdbc[3]: 
/**/prep0.setString(2, "DATABASE_TO_UPPER");
2020-06-17 21:55:36 jdbc[3]: 
/**/prep0.setString(3, "DATABASE_TO_LOWER");
2020-06-17 21:55:36 jdbc[3]: 
/**/prep0.setString(4, "CASE_INSENSITIVE_IDENTIFIERS");
2020-06-17 21:55:36 jdbc[3]: 
/**/ResultSet rs0 = prep0.executeQuery();
2020-06-17 21:55:36 jdbc[3]: 
/*SQL l:78 #:4 t:3*/SELECT NAME, VALUE FROM INFORMATION_SCHEMA.SETTINGS WHERE NAME IN (?, ?, ?, ?) {1: 'MODE', 2: 'DATABASE_TO_UPPER', 3: 'DATABASE_TO_LOWER', 4: 'CASE_INSENSITIVE_IDENTIFIERS'};
2020-06-17 21:55:36 jdbc[3]: 
/**/rs0.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs0.getString(2);
2020-06-17 21:55:36 jdbc[3]: 
/**/rs0.getString(1);
2020-06-17 21:55:36 jdbc[3]: 
/**/rs0.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs0.getString(2);
2020-06-17 21:55:36 jdbc[3]: 
/**/rs0.getString(1);
2020-06-17 21:55:36 jdbc[3]: 
/**/rs0.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs0.getString(2);
2020-06-17 21:55:36 jdbc[3]: 
/**/rs0.getString(1);
2020-06-17 21:55:36 jdbc[3]: 
/**/rs0.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs0.getString(2);
2020-06-17 21:55:36 jdbc[3]: 
/**/rs0.getString(1);
2020-06-17 21:55:36 jdbc[3]: 
/**/rs0.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/prep0.close();
2020-06-17 21:55:36 jdbc[3]: 
/**/dbMeta1.storesUpperCaseIdentifiers();
2020-06-17 21:55:36 jdbc[3]: 
/**/dbMeta1.storesMixedCaseIdentifiers();
2020-06-17 21:55:36 jdbc[3]: 
/**/dbMeta1.storesUpperCaseIdentifiers();
2020-06-17 21:55:36 jdbc[3]: 
/**/dbMeta1.storesLowerCaseQuotedIdentifiers();
2020-06-17 21:55:36 jdbc[3]: 
/**/dbMeta1.storesUpperCaseQuotedIdentifiers();
2020-06-17 21:55:36 jdbc[3]: 
/**/dbMeta1.storesMixedCaseQuotedIdentifiers();
2020-06-17 21:55:36 jdbc[3]: 
/**/dbMeta1.getSQLKeywords();
2020-06-17 21:55:36 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:55:36 jdbc[3]: 
/*SQL #:1*/CALL DATABASE();
2020-06-17 21:55:36 jdbc[3]: 
/**/dbMeta1.supportsNamedParameters();
2020-06-17 21:55:36 jdbc[3]: 
/**/dbMeta1.supportsResultSetType(1004);
2020-06-17 21:55:36 jdbc[3]: 
/**/dbMeta1.supportsGetGeneratedKeys();
2020-06-17 21:55:36 jdbc[3]: 
/**/dbMeta1.supportsBatchUpdates();
2020-06-17 21:55:36 jdbc[3]: 
/**/dbMeta1.dataDefinitionIgnoredInTransactions();
2020-06-17 21:55:36 jdbc[3]: 
/**/dbMeta1.dataDefinitionCausesTransactionCommit();
2020-06-17 21:55:36 jdbc[3]: 
/**/dbMeta1.getSQLKeywords();
2020-06-17 21:55:36 jdbc[3]: 
/**/dbMeta1.getSQLStateType();
2020-06-17 21:55:36 jdbc[3]: 
/**/dbMeta1.locatorsUpdateCopy();
2020-06-17 21:55:36 jdbc[3]: 
/**/dbMeta1.getTypeInfo();
2020-06-17 21:55:36 jdbc[3]: 
/**/PreparedStatement prep1 = conn0.prepareStatement("SELECT TYPE_NAME, DATA_TYPE, PRECISION, PREFIX LITERAL_PREFIX, SUFFIX LITERAL_SUFFIX, PARAMS CREATE_PARAMS, NULLABLE, CASE_SENSITIVE, SEARCHABLE, FALSE UNSIGNED_ATTRIBUTE, FALSE FIXED_PREC_SCALE, AUTO_INCREMENT, TYPE_NAME LOCAL_TYPE_NAME, MINIMUM_SCALE, MAXIMUM_SCALE, DATA_TYPE SQL_DATA_TYPE, ZERO() SQL_DATETIME_SUB, RADIX NUM_PREC_RADIX FROM INFORMATION_SCHEMA.TYPE_INFO ORDER BY DATA_TYPE, POS");
2020-06-17 21:55:36 jdbc[3]: Plan       : calculate cost for plan [TYPE_INFO:-5:org.h2.table.MetaTable@7fc862ba]
2020-06-17 21:55:36 jdbc[3]: Plan       :   for table filter TYPE_INFO:-5:org.h2.table.MetaTable@7fc862ba
2020-06-17 21:55:36 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:55:36 jdbc[3]: Plan       :   best plan item cost 10,000 index meta
2020-06-17 21:55:36 jdbc[3]: Plan       : plan cost 10,001
2020-06-17 21:55:36 jdbc[3]: 
/**/ResultSet rs1 = prep1.executeQuery();
2020-06-17 21:55:36 jdbc[3]: 
/*SQL #:46 t:1*/SELECT TYPE_NAME, DATA_TYPE, PRECISION, PREFIX LITERAL_PREFIX, SUFFIX LITERAL_SUFFIX, PARAMS CREATE_PARAMS, NULLABLE, CASE_SENSITIVE, SEARCHABLE, FALSE UNSIGNED_ATTRIBUTE, FALSE FIXED_PREC_SCALE, AUTO_INCREMENT, TYPE_NAME LOCAL_TYPE_NAME, MINIMUM_SCALE, MAXIMUM_SCALE, DATA_TYPE SQL_DATA_TYPE, ZERO() SQL_DATETIME_SUB, RADIX NUM_PREC_RADIX FROM INFORMATION_SCHEMA.TYPE_INFO ORDER BY DATA_TYPE, POS;
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getStatement();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs1.close();
2020-06-17 21:55:36 jdbc[3]: 
/**/prep1.close();
2020-06-17 21:55:36 jdbc[3]: 
/**/conn0.getSchema();
2020-06-17 21:55:36 jdbc[3]: 
/**/conn0.getSchema();
2020-06-17 21:55:36 jdbc[3]: 
/**/dbMeta1.supportsNamedParameters();
2020-06-17 21:55:36 jdbc[3]: 
/**/Statement stat0 = conn0.createStatement();
2020-06-17 21:55:36 jdbc[3]: 
/**/ResultSet rs2 = stat0.executeQuery("select * from INFORMATION_SCHEMA.SEQUENCES");
2020-06-17 21:55:36 jdbc[3]: Plan       : calculate cost for plan [SEQUENCES:-9:org.h2.table.MetaTable@4270d505]
2020-06-17 21:55:36 jdbc[3]: Plan       :   for table filter SEQUENCES:-9:org.h2.table.MetaTable@4270d505
2020-06-17 21:55:36 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:55:36 jdbc[3]: Plan       :   best plan item cost 10,000 index meta
2020-06-17 21:55:36 jdbc[3]: Plan       : plan cost 10,001
2020-06-17 21:55:36 jdbc[3]: 
/*SQL */select * from INFORMATION_SCHEMA.SEQUENCES;
2020-06-17 21:55:36 jdbc[3]: 
/**/rs2.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs2.close();
2020-06-17 21:55:36 jdbc[3]: 
/**/stat0.close();
2020-06-17 21:55:36 jdbc[3]: 
/**/dbMeta1.getCatalogSeparator();
2020-06-17 21:55:36 jdbc[3]: 
/**/dbMeta1.isCatalogAtStart();
2020-06-17 21:55:36 jdbc[3]: 
/**/dbMeta1.getTypeInfo();
2020-06-17 21:55:36 jdbc[3]: 
/**/PreparedStatement prep2 = conn0.prepareStatement("SELECT TYPE_NAME, DATA_TYPE, PRECISION, PREFIX LITERAL_PREFIX, SUFFIX LITERAL_SUFFIX, PARAMS CREATE_PARAMS, NULLABLE, CASE_SENSITIVE, SEARCHABLE, FALSE UNSIGNED_ATTRIBUTE, FALSE FIXED_PREC_SCALE, AUTO_INCREMENT, TYPE_NAME LOCAL_TYPE_NAME, MINIMUM_SCALE, MAXIMUM_SCALE, DATA_TYPE SQL_DATA_TYPE, ZERO() SQL_DATETIME_SUB, RADIX NUM_PREC_RADIX FROM INFORMATION_SCHEMA.TYPE_INFO ORDER BY DATA_TYPE, POS");
2020-06-17 21:55:36 jdbc[3]: 
/**/ResultSet rs3 = prep2.executeQuery();
2020-06-17 21:55:36 jdbc[3]: 
/*SQL #:46*/SELECT TYPE_NAME, DATA_TYPE, PRECISION, PREFIX LITERAL_PREFIX, SUFFIX LITERAL_SUFFIX, PARAMS CREATE_PARAMS, NULLABLE, CASE_SENSITIVE, SEARCHABLE, FALSE UNSIGNED_ATTRIBUTE, FALSE FIXED_PREC_SCALE, AUTO_INCREMENT, TYPE_NAME LOCAL_TYPE_NAME, MINIMUM_SCALE, MAXIMUM_SCALE, DATA_TYPE SQL_DATA_TYPE, ZERO() SQL_DATETIME_SUB, RADIX NUM_PREC_RADIX FROM INFORMATION_SCHEMA.TYPE_INFO ORDER BY DATA_TYPE, POS;
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getStatement();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs3.close();
2020-06-17 21:55:36 jdbc[3]: 
/**/prep2.close();
2020-06-17 21:55:36 jdbc[3]: 
/**/DatabaseMetaData dbMeta2 = conn0.getMetaData();
2020-06-17 21:55:36 jdbc[3]: 
/**/dbMeta2.getJDBCMajorVersion();
2020-06-17 21:55:36 jdbc[3]: 
/**/Clob clob0 = conn0.createClob();
2020-06-17 21:55:36 jdbc[3]: 
/**/clob0.free();
2020-06-17 21:55:36 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:55:36 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:55:36 jdbc[3]: 
/**/Statement stat1 = conn0.createStatement();
2020-06-17 21:55:36 jdbc[3]: 
/**/stat1.execute("drop table if exists customer_tbl CASCADE ");
2020-06-17 21:55:36 jdbc[3]: 
/*SQL */drop table if exists customer_tbl CASCADE;
2020-06-17 21:55:36 jdbc[3]: 
/**/stat1.getWarnings();
2020-06-17 21:55:36 jdbc[3]: 
/**/stat1.execute("drop table if exists log_tbl CASCADE ");
2020-06-17 21:55:36 jdbc[3]: 
/*SQL */drop table if exists log_tbl CASCADE;
2020-06-17 21:55:36 jdbc[3]: 
/**/stat1.getWarnings();
2020-06-17 21:55:36 jdbc[3]: 
/**/stat1.close();
2020-06-17 21:55:36 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:55:36 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:55:36 jdbc[3]: 
/**/Statement stat2 = conn0.createStatement();
2020-06-17 21:55:36 jdbc[3]: 
/**/stat2.execute("create table customer_tbl (id bigint generated by default as identity, customer_email varchar(255), customer_firstname varchar(255), customer_lastname varchar(255), primary key (id))");
2020-06-17 21:55:36 lock: 3 exclusive write lock requesting for SYS 
2020-06-17 21:55:36 lock: 3 exclusive write lock added for SYS 
2020-06-17 21:55:36 lock: 3 exclusive write lock unlock SYS 
2020-06-17 21:55:36 lock: 3 exclusive write lock requesting for SYS 
2020-06-17 21:55:36 lock: 3 exclusive write lock added for SYS 
2020-06-17 21:55:36 lock: 3 exclusive write lock requesting for CUSTOMER_TBL 
2020-06-17 21:55:36 lock: 3 exclusive write lock added for CUSTOMER_TBL 
2020-06-17 21:55:36 jdbc[3]: 
/*SQL t:5*/create table customer_tbl (id bigint generated by default as identity, customer_email varchar(255), customer_firstname varchar(255), customer_lastname varchar(255), primary key (id));
2020-06-17 21:55:36 lock: 3 exclusive write lock unlock SYS 
2020-06-17 21:55:36 lock: 3 exclusive write lock unlock CUSTOMER_TBL 
2020-06-17 21:55:36 jdbc[3]: 
/**/stat2.getWarnings();
2020-06-17 21:55:36 jdbc[3]: 
/**/stat2.execute("create table log_tbl (id bigint generated by default as identity, application_name varchar(255), level varchar(255), parent_span_id varchar(255), request varchar(255), response varchar(255), span_id varchar(255), time varchar(255), trace_id varchar(255), primary key (id))");
2020-06-17 21:55:36 lock: 3 exclusive write lock requesting for SYS 
2020-06-17 21:55:36 lock: 3 exclusive write lock added for SYS 
2020-06-17 21:55:36 lock: 3 exclusive write lock unlock SYS 
2020-06-17 21:55:36 lock: 3 exclusive write lock requesting for SYS 
2020-06-17 21:55:36 lock: 3 exclusive write lock added for SYS 
2020-06-17 21:55:36 lock: 3 exclusive write lock requesting for LOG_TBL 
2020-06-17 21:55:36 lock: 3 exclusive write lock added for LOG_TBL 
2020-06-17 21:55:36 jdbc[3]: 
/*SQL t:1*/create table log_tbl (id bigint generated by default as identity, application_name varchar(255), level varchar(255), parent_span_id varchar(255), request varchar(255), response varchar(255), span_id varchar(255), time varchar(255), trace_id varchar(255), primary key (id));
2020-06-17 21:55:36 lock: 3 exclusive write lock unlock SYS 
2020-06-17 21:55:36 lock: 3 exclusive write lock unlock LOG_TBL 
2020-06-17 21:55:36 jdbc[3]: 
/**/stat2.getWarnings();
2020-06-17 21:55:36 jdbc[3]: 
/**/stat2.close();
2020-06-17 21:55:36 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:55:36 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:55:36 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:55:36 jdbc[3]: 
/**/PreparedStatement prep3 = conn0.prepareStatement("select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=?");
2020-06-17 21:55:36 jdbc[3]: Plan       : calculate cost for plan [CUSTOMER0_]
2020-06-17 21:55:36 jdbc[3]: Plan       :   for table filter CUSTOMER0_
2020-06-17 21:55:36 jdbc[3]: Table      :     potential plan item cost 10,200 index PUBLIC.CUSTOMER_TBL.tableScan
2020-06-17 21:55:36 jdbc[3]: Table      :     potential plan item cost 230 index PUBLIC.PRIMARY_KEY_B
2020-06-17 21:55:36 jdbc[3]: Plan       :   best plan item cost 227.7 index PUBLIC.PRIMARY_KEY_B
2020-06-17 21:55:36 jdbc[3]: Plan       : plan cost 228.7
2020-06-17 21:55:36 jdbc[3]: 
/**/prep3.setLong(1, 1L);
2020-06-17 21:55:36 jdbc[3]: 
/**/ResultSet rs8 = prep3.executeQuery();
2020-06-17 21:55:36 jdbc[3]: 
/*SQL l:225*/select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=? {1: 1};
2020-06-17 21:55:36 jdbc[3]: 
/**/rs8.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs8.close();
2020-06-17 21:55:36 jdbc[3]: 
/**/prep3.getMaxRows();
2020-06-17 21:55:36 jdbc[3]: 
/**/prep3.getQueryTimeout();
2020-06-17 21:55:36 jdbc[3]: Plan       : calculate cost for plan [SETTINGS:-7:org.h2.table.MetaTable@124ca49d]
2020-06-17 21:55:36 jdbc[3]: Plan       :   for table filter SETTINGS:-7:org.h2.table.MetaTable@124ca49d
2020-06-17 21:55:36 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:55:36 jdbc[3]: Plan       :   best plan item cost 9,900 index meta
2020-06-17 21:55:36 jdbc[3]: Plan       : plan cost 9,901
2020-06-17 21:55:36 jdbc[3]: 
/*SQL l:58 #:1*/SELECT VALUE FROM INFORMATION_SCHEMA.SETTINGS WHERE NAME=? {1: 'QUERY_TIMEOUT'};
2020-06-17 21:55:36 jdbc[3]: 
/**/prep3.close();
2020-06-17 21:55:36 jdbc[3]: 
/**/PreparedStatement prep4 = conn0.prepareStatement("insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?)", 1);;
2020-06-17 21:55:36 jdbc[3]: 
/**/prep4.setString(1, "ram@gmail.com");
2020-06-17 21:55:36 jdbc[3]: 
/**/prep4.setString(2, "Ram");
2020-06-17 21:55:36 jdbc[3]: 
/**/prep4.setString(3, "Thapa");
2020-06-17 21:55:36 jdbc[3]: 
/**/prep4.executeUpdate();
2020-06-17 21:55:36 lock: 1 exclusive write lock requesting for SYS 
2020-06-17 21:55:36 lock: 1 exclusive write lock added for SYS 
2020-06-17 21:55:36 lock: 1 exclusive write lock unlock SYS 
2020-06-17 21:55:36 lock: 3 shared read lock requesting for CUSTOMER_TBL 
2020-06-17 21:55:36 lock: 3 shared read lock ok CUSTOMER_TBL 
2020-06-17 21:55:36 jdbc[3]: 
/*SQL l:107 #:1 t:1*/insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?) {1: 'ram@gmail.com', 2: 'Ram', 3: 'Thapa'};
2020-06-17 21:55:36 jdbc[3]: 
/**/ResultSet rs9 = prep4.getGeneratedKeys();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs9.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/ResultSetMetaData rsMeta0 = rs9.getMetaData();
2020-06-17 21:55:36 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:55:36 jdbc[3]: 
/**/rsMeta0.getColumnCount();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs9.getLong(1);
2020-06-17 21:55:36 jdbc[3]: 
/**/rs9.close();
2020-06-17 21:55:36 jdbc[3]: 
/**/prep4.getMaxRows();
2020-06-17 21:55:36 jdbc[3]: 
/**/prep4.getQueryTimeout();
2020-06-17 21:55:36 jdbc[3]: 
/**/prep4.close();
2020-06-17 21:55:36 jdbc[3]: 
/**/PreparedStatement prep5 = conn0.prepareStatement("select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=?");
2020-06-17 21:55:36 jdbc[3]: 
/**/prep5.setLong(1, 2L);
2020-06-17 21:55:36 jdbc[3]: 
/**/ResultSet rs10 = prep5.executeQuery();
2020-06-17 21:55:36 jdbc[3]: 
/*SQL l:225*/select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=? {1: 2};
2020-06-17 21:55:36 jdbc[3]: 
/**/rs10.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs10.close();
2020-06-17 21:55:36 jdbc[3]: 
/**/prep5.getMaxRows();
2020-06-17 21:55:36 jdbc[3]: 
/**/prep5.getQueryTimeout();
2020-06-17 21:55:36 jdbc[3]: 
/**/prep5.close();
2020-06-17 21:55:36 jdbc[3]: 
/**/PreparedStatement prep6 = conn0.prepareStatement("insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?)", 1);;
2020-06-17 21:55:36 jdbc[3]: 
/**/prep6.setString(1, "hari@gmail.com");
2020-06-17 21:55:36 jdbc[3]: 
/**/prep6.setString(2, "Hari");
2020-06-17 21:55:36 jdbc[3]: 
/**/prep6.setString(3, "Neupane");
2020-06-17 21:55:36 jdbc[3]: 
/**/prep6.executeUpdate();
2020-06-17 21:55:36 jdbc[3]: 
/*SQL l:107 #:1*/insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?) {1: 'hari@gmail.com', 2: 'Hari', 3: 'Neupane'};
2020-06-17 21:55:36 jdbc[3]: 
/**/ResultSet rs11 = prep6.getGeneratedKeys();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs11.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/ResultSetMetaData rsMeta1 = rs11.getMetaData();
2020-06-17 21:55:36 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:55:36 jdbc[3]: 
/**/rsMeta1.getColumnCount();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs11.getLong(1);
2020-06-17 21:55:36 jdbc[3]: 
/**/rs11.close();
2020-06-17 21:55:36 jdbc[3]: 
/**/prep6.getMaxRows();
2020-06-17 21:55:36 jdbc[3]: 
/**/prep6.getQueryTimeout();
2020-06-17 21:55:36 jdbc[3]: 
/**/prep6.close();
2020-06-17 21:55:36 jdbc[3]: 
/**/PreparedStatement prep7 = conn0.prepareStatement("select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=?");
2020-06-17 21:55:36 jdbc[3]: 
/**/prep7.setLong(1, 3L);
2020-06-17 21:55:36 jdbc[3]: 
/**/ResultSet rs12 = prep7.executeQuery();
2020-06-17 21:55:36 jdbc[3]: 
/*SQL l:225*/select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=? {1: 3};
2020-06-17 21:55:36 jdbc[3]: 
/**/rs12.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs12.close();
2020-06-17 21:55:36 jdbc[3]: 
/**/prep7.getMaxRows();
2020-06-17 21:55:36 jdbc[3]: 
/**/prep7.getQueryTimeout();
2020-06-17 21:55:36 jdbc[3]: 
/**/prep7.close();
2020-06-17 21:55:36 jdbc[3]: 
/**/PreparedStatement prep8 = conn0.prepareStatement("insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?)", 1);;
2020-06-17 21:55:36 jdbc[3]: 
/**/prep8.setString(1, "ramila@gmail.com");
2020-06-17 21:55:36 jdbc[3]: 
/**/prep8.setString(2, "Ramila");
2020-06-17 21:55:36 jdbc[3]: 
/**/prep8.setString(3, "Karki");
2020-06-17 21:55:36 jdbc[3]: 
/**/prep8.executeUpdate();
2020-06-17 21:55:36 jdbc[3]: 
/*SQL l:107 #:1*/insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?) {1: 'ramila@gmail.com', 2: 'Ramila', 3: 'Karki'};
2020-06-17 21:55:36 jdbc[3]: 
/**/ResultSet rs13 = prep8.getGeneratedKeys();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs13.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/ResultSetMetaData rsMeta2 = rs13.getMetaData();
2020-06-17 21:55:36 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:55:36 jdbc[3]: 
/**/rsMeta2.getColumnCount();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs13.getLong(1);
2020-06-17 21:55:36 jdbc[3]: 
/**/rs13.close();
2020-06-17 21:55:36 jdbc[3]: 
/**/prep8.getMaxRows();
2020-06-17 21:55:36 jdbc[3]: 
/**/prep8.getQueryTimeout();
2020-06-17 21:55:36 jdbc[3]: 
/**/prep8.close();
2020-06-17 21:55:36 jdbc[3]: 
/**/PreparedStatement prep9 = conn0.prepareStatement("select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=?");
2020-06-17 21:55:36 jdbc[3]: 
/**/prep9.setLong(1, 4L);
2020-06-17 21:55:36 jdbc[3]: 
/**/ResultSet rs14 = prep9.executeQuery();
2020-06-17 21:55:36 jdbc[3]: 
/*SQL l:225*/select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=? {1: 4};
2020-06-17 21:55:36 jdbc[3]: 
/**/rs14.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs14.close();
2020-06-17 21:55:36 jdbc[3]: 
/**/prep9.getMaxRows();
2020-06-17 21:55:36 jdbc[3]: 
/**/prep9.getQueryTimeout();
2020-06-17 21:55:36 jdbc[3]: 
/**/prep9.close();
2020-06-17 21:55:36 jdbc[3]: 
/**/PreparedStatement prep10 = conn0.prepareStatement("insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?)", 1);;
2020-06-17 21:55:36 jdbc[3]: 
/**/prep10.setString(1, "david@gmail.com");
2020-06-17 21:55:36 jdbc[3]: 
/**/prep10.setString(2, "David");
2020-06-17 21:55:36 jdbc[3]: 
/**/prep10.setString(3, "Yonge");
2020-06-17 21:55:36 jdbc[3]: 
/**/prep10.executeUpdate();
2020-06-17 21:55:36 jdbc[3]: 
/*SQL l:107 #:1*/insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?) {1: 'david@gmail.com', 2: 'David', 3: 'Yonge'};
2020-06-17 21:55:36 jdbc[3]: 
/**/ResultSet rs15 = prep10.getGeneratedKeys();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs15.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/ResultSetMetaData rsMeta3 = rs15.getMetaData();
2020-06-17 21:55:36 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:55:36 jdbc[3]: 
/**/rsMeta3.getColumnCount();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs15.getLong(1);
2020-06-17 21:55:36 jdbc[3]: 
/**/rs15.close();
2020-06-17 21:55:36 jdbc[3]: 
/**/prep10.getMaxRows();
2020-06-17 21:55:36 jdbc[3]: 
/**/prep10.getQueryTimeout();
2020-06-17 21:55:36 jdbc[3]: 
/**/prep10.close();
2020-06-17 21:55:36 jdbc[3]: 
/**/PreparedStatement prep11 = conn0.prepareStatement("select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=?");
2020-06-17 21:55:36 jdbc[3]: 
/**/prep11.setLong(1, 5L);
2020-06-17 21:55:36 jdbc[3]: 
/**/ResultSet rs16 = prep11.executeQuery();
2020-06-17 21:55:36 jdbc[3]: 
/*SQL l:225*/select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=? {1: 5};
2020-06-17 21:55:36 jdbc[3]: 
/**/rs16.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs16.close();
2020-06-17 21:55:36 jdbc[3]: 
/**/prep11.getMaxRows();
2020-06-17 21:55:36 jdbc[3]: 
/**/prep11.getQueryTimeout();
2020-06-17 21:55:36 jdbc[3]: 
/**/prep11.close();
2020-06-17 21:55:36 jdbc[3]: 
/**/PreparedStatement prep12 = conn0.prepareStatement("insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?)", 1);;
2020-06-17 21:55:36 jdbc[3]: 
/**/prep12.setString(1, "peter@gmail.com");
2020-06-17 21:55:36 jdbc[3]: 
/**/prep12.setString(2, "Peter");
2020-06-17 21:55:36 jdbc[3]: 
/**/prep12.setString(3, "Parker");
2020-06-17 21:55:36 jdbc[3]: 
/**/prep12.executeUpdate();
2020-06-17 21:55:36 jdbc[3]: 
/*SQL l:107 #:1*/insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?) {1: 'peter@gmail.com', 2: 'Peter', 3: 'Parker'};
2020-06-17 21:55:36 jdbc[3]: 
/**/ResultSet rs17 = prep12.getGeneratedKeys();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs17.next();
2020-06-17 21:55:36 jdbc[3]: 
/**/ResultSetMetaData rsMeta4 = rs17.getMetaData();
2020-06-17 21:55:36 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:55:36 jdbc[3]: 
/**/rsMeta4.getColumnCount();
2020-06-17 21:55:36 jdbc[3]: 
/**/rs17.getLong(1);
2020-06-17 21:55:36 jdbc[3]: 
/**/rs17.close();
2020-06-17 21:55:36 jdbc[3]: 
/**/prep12.getMaxRows();
2020-06-17 21:55:36 jdbc[3]: 
/**/prep12.getQueryTimeout();
2020-06-17 21:55:36 jdbc[3]: 
/**/prep12.close();
2020-06-17 21:55:36 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:55:36 lock: 3 shared read lock unlock CUSTOMER_TBL 
2020-06-17 21:55:36 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:55:36 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:55:36 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:55:36 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:55:36 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:55:36 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:55:36 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:55:39 jdbc[3]: 
/**/PreparedStatement prep13 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 21:55:39 jdbc[3]: 
/**/prep13.setString(1, "CustomerMS");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep13.setString(2, "INFO");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep13.setNull(3, 12);
2020-06-17 21:55:39 jdbc[3]: 
/**/prep13.setString(4, "/api/customers/2");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep13.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep13.setString(6, "835c44c5407a860f");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep13.setString(7, "2020-06-17T20:43:48.395Z");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep13.setString(8, "835c44c5407a860f");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep13.executeUpdate();
2020-06-17 21:55:39 lock: 1 exclusive write lock requesting for SYS 
2020-06-17 21:55:39 lock: 1 exclusive write lock added for SYS 
2020-06-17 21:55:39 lock: 1 exclusive write lock unlock SYS 
2020-06-17 21:55:39 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 21:55:39 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 21:55:39 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/2', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: '835c44c5407a860f', 7: '2020-06-17T20:43:48.395Z', 8: '835c44c5407a860f'};
2020-06-17 21:55:39 jdbc[3]: 
/**/ResultSet rs18 = prep13.getGeneratedKeys();
2020-06-17 21:55:39 jdbc[3]: 
/**/rs18.next();
2020-06-17 21:55:39 jdbc[3]: 
/**/ResultSetMetaData rsMeta5 = rs18.getMetaData();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:55:39 jdbc[3]: 
/**/rsMeta5.getColumnCount();
2020-06-17 21:55:39 jdbc[3]: 
/**/rs18.getLong(1);
2020-06-17 21:55:39 jdbc[3]: 
/**/rs18.close();
2020-06-17 21:55:39 jdbc[3]: 
/**/prep13.getMaxRows();
2020-06-17 21:55:39 jdbc[3]: 
/**/prep13.getQueryTimeout();
2020-06-17 21:55:39 jdbc[3]: 
/**/prep13.close();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:55:39 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 21:55:39 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:55:39 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:55:39 jdbc[3]: 
/**/PreparedStatement prep14 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 21:55:39 jdbc[3]: 
/**/prep14.setString(1, "CustomerMS");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep14.setString(2, "INFO");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep14.setNull(3, 12);
2020-06-17 21:55:39 jdbc[3]: 
/**/prep14.setString(4, "/api/customers/2");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep14.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep14.setString(6, "ac4762af3b603bf9");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep14.setString(7, "2020-06-18T02:47:02.751Z");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep14.setString(8, "ac4762af3b603bf9");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep14.executeUpdate();
2020-06-17 21:55:39 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 21:55:39 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 21:55:39 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/2', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: 'ac4762af3b603bf9', 7: '2020-06-18T02:47:02.751Z', 8: 'ac4762af3b603bf9'};
2020-06-17 21:55:39 jdbc[3]: 
/**/ResultSet rs19 = prep14.getGeneratedKeys();
2020-06-17 21:55:39 jdbc[3]: 
/**/rs19.next();
2020-06-17 21:55:39 jdbc[3]: 
/**/ResultSetMetaData rsMeta6 = rs19.getMetaData();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:55:39 jdbc[3]: 
/**/rsMeta6.getColumnCount();
2020-06-17 21:55:39 jdbc[3]: 
/**/rs19.getLong(1);
2020-06-17 21:55:39 jdbc[3]: 
/**/rs19.close();
2020-06-17 21:55:39 jdbc[3]: 
/**/prep14.getMaxRows();
2020-06-17 21:55:39 jdbc[3]: 
/**/prep14.getQueryTimeout();
2020-06-17 21:55:39 jdbc[3]: 
/**/prep14.close();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:55:39 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 21:55:39 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:55:39 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:55:39 jdbc[3]: 
/**/PreparedStatement prep15 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 21:55:39 jdbc[3]: 
/**/prep15.setString(1, "CustomerMS");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep15.setString(2, "INFO");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep15.setNull(3, 12);
2020-06-17 21:55:39 jdbc[3]: 
/**/prep15.setString(4, "/api/customers/3");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep15.setString(5, "Customer(id=3, firstName=Ramila, lastName=Karki, email=ramila@gmail.com)");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep15.setString(6, "cda1008eb6f59b1a");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep15.setString(7, "2020-06-18T02:47:23.391Z");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep15.setString(8, "cda1008eb6f59b1a");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep15.executeUpdate();
2020-06-17 21:55:39 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 21:55:39 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 21:55:39 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/3', 5: 'Customer(id=3, firstName=Ramila, lastName=Karki, email=ramila@gmail.com)', 6: 'cda1008eb6f59b1a', 7: '2020-06-18T02:47:23.391Z', 8: 'cda1008eb6f59b1a'};
2020-06-17 21:55:39 jdbc[3]: 
/**/ResultSet rs20 = prep15.getGeneratedKeys();
2020-06-17 21:55:39 jdbc[3]: 
/**/rs20.next();
2020-06-17 21:55:39 jdbc[3]: 
/**/ResultSetMetaData rsMeta7 = rs20.getMetaData();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:55:39 jdbc[3]: 
/**/rsMeta7.getColumnCount();
2020-06-17 21:55:39 jdbc[3]: 
/**/rs20.getLong(1);
2020-06-17 21:55:39 jdbc[3]: 
/**/rs20.close();
2020-06-17 21:55:39 jdbc[3]: 
/**/prep15.getMaxRows();
2020-06-17 21:55:39 jdbc[3]: 
/**/prep15.getQueryTimeout();
2020-06-17 21:55:39 jdbc[3]: 
/**/prep15.close();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:55:39 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 21:55:39 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:55:39 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:55:39 jdbc[3]: 
/**/PreparedStatement prep16 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 21:55:39 jdbc[3]: 
/**/prep16.setString(1, "CustomerMS");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep16.setString(2, "INFO");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep16.setNull(3, 12);
2020-06-17 21:55:39 jdbc[3]: 
/**/prep16.setString(4, "/api/customers/4");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep16.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep16.setString(6, "93222afc6f639d33");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep16.setString(7, "2020-06-18T02:47:33.067Z");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep16.setString(8, "93222afc6f639d33");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep16.executeUpdate();
2020-06-17 21:55:39 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 21:55:39 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 21:55:39 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/4', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: '93222afc6f639d33', 7: '2020-06-18T02:47:33.067Z', 8: '93222afc6f639d33'};
2020-06-17 21:55:39 jdbc[3]: 
/**/ResultSet rs21 = prep16.getGeneratedKeys();
2020-06-17 21:55:39 jdbc[3]: 
/**/rs21.next();
2020-06-17 21:55:39 jdbc[3]: 
/**/ResultSetMetaData rsMeta8 = rs21.getMetaData();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:55:39 jdbc[3]: 
/**/rsMeta8.getColumnCount();
2020-06-17 21:55:39 jdbc[3]: 
/**/rs21.getLong(1);
2020-06-17 21:55:39 jdbc[3]: 
/**/rs21.close();
2020-06-17 21:55:39 jdbc[3]: 
/**/prep16.getMaxRows();
2020-06-17 21:55:39 jdbc[3]: 
/**/prep16.getQueryTimeout();
2020-06-17 21:55:39 jdbc[3]: 
/**/prep16.close();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:55:39 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 21:55:39 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:55:39 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:55:39 jdbc[3]: 
/**/PreparedStatement prep17 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 21:55:39 jdbc[3]: 
/**/prep17.setString(1, "CustomerMS");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep17.setString(2, "INFO");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep17.setNull(3, 12);
2020-06-17 21:55:39 jdbc[3]: 
/**/prep17.setString(4, "/api/customers/4");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep17.setString(5, "Customer(id=4, firstName=David, lastName=Yonge, email=david@gmail.com)");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep17.setString(6, "93222afc6f639d33");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep17.setString(7, "2020-06-18T02:47:33.071Z");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep17.setString(8, "93222afc6f639d33");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep17.executeUpdate();
2020-06-17 21:55:39 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 21:55:39 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 21:55:39 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/4', 5: 'Customer(id=4, firstName=David, lastName=Yonge, email=david@gmail.com)', 6: '93222afc6f639d33', 7: '2020-06-18T02:47:33.071Z', 8: '93222afc6f639d33'};
2020-06-17 21:55:39 jdbc[3]: 
/**/ResultSet rs22 = prep17.getGeneratedKeys();
2020-06-17 21:55:39 jdbc[3]: 
/**/rs22.next();
2020-06-17 21:55:39 jdbc[3]: 
/**/ResultSetMetaData rsMeta9 = rs22.getMetaData();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:55:39 jdbc[3]: 
/**/rsMeta9.getColumnCount();
2020-06-17 21:55:39 jdbc[3]: 
/**/rs22.getLong(1);
2020-06-17 21:55:39 jdbc[3]: 
/**/rs22.close();
2020-06-17 21:55:39 jdbc[3]: 
/**/prep17.getMaxRows();
2020-06-17 21:55:39 jdbc[3]: 
/**/prep17.getQueryTimeout();
2020-06-17 21:55:39 jdbc[3]: 
/**/prep17.close();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:55:39 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 21:55:39 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:55:39 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:55:39 jdbc[3]: 
/**/PreparedStatement prep18 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 21:55:39 jdbc[3]: 
/**/prep18.setString(1, "CustomerMS");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep18.setString(2, "INFO");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep18.setNull(3, 12);
2020-06-17 21:55:39 jdbc[3]: 
/**/prep18.setString(4, "/api/customers/5");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep18.setString(5, "Customer(id=5, firstName=Peter, lastName=Parker, email=peter@gmail.com)");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep18.setString(6, "66f1f3cca2518457");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep18.setString(7, "2020-06-18T02:48:04.745Z");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep18.setString(8, "66f1f3cca2518457");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep18.executeUpdate();
2020-06-17 21:55:39 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 21:55:39 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 21:55:39 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/5', 5: 'Customer(id=5, firstName=Peter, lastName=Parker, email=peter@gmail.com)', 6: '66f1f3cca2518457', 7: '2020-06-18T02:48:04.745Z', 8: '66f1f3cca2518457'};
2020-06-17 21:55:39 jdbc[3]: 
/**/ResultSet rs23 = prep18.getGeneratedKeys();
2020-06-17 21:55:39 jdbc[3]: 
/**/rs23.next();
2020-06-17 21:55:39 jdbc[3]: 
/**/ResultSetMetaData rsMeta10 = rs23.getMetaData();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:55:39 jdbc[3]: 
/**/rsMeta10.getColumnCount();
2020-06-17 21:55:39 jdbc[3]: 
/**/rs23.getLong(1);
2020-06-17 21:55:39 jdbc[3]: 
/**/rs23.close();
2020-06-17 21:55:39 jdbc[3]: 
/**/prep18.getMaxRows();
2020-06-17 21:55:39 jdbc[3]: 
/**/prep18.getQueryTimeout();
2020-06-17 21:55:39 jdbc[3]: 
/**/prep18.close();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:55:39 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 21:55:39 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:55:39 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:55:39 jdbc[3]: 
/**/PreparedStatement prep19 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 21:55:39 jdbc[3]: 
/**/prep19.setString(1, "CustomerMS");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep19.setString(2, "INFO");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep19.setNull(3, 12);
2020-06-17 21:55:39 jdbc[3]: 
/**/prep19.setString(4, "/api/customers/6");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep19.setString(5, "Customer(id=null, firstName=null, lastName=null, email=null)");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep19.setString(6, "e4ff784815173d28");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep19.setString(7, "2020-06-18T02:48:16.076Z");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep19.setString(8, "e4ff784815173d28");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep19.executeUpdate();
2020-06-17 21:55:39 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 21:55:39 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 21:55:39 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/6', 5: 'Customer(id=null, firstName=null, lastName=null, email=null)', 6: 'e4ff784815173d28', 7: '2020-06-18T02:48:16.076Z', 8: 'e4ff784815173d28'};
2020-06-17 21:55:39 jdbc[3]: 
/**/ResultSet rs24 = prep19.getGeneratedKeys();
2020-06-17 21:55:39 jdbc[3]: 
/**/rs24.next();
2020-06-17 21:55:39 jdbc[3]: 
/**/ResultSetMetaData rsMeta11 = rs24.getMetaData();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:55:39 jdbc[3]: 
/**/rsMeta11.getColumnCount();
2020-06-17 21:55:39 jdbc[3]: 
/**/rs24.getLong(1);
2020-06-17 21:55:39 jdbc[3]: 
/**/rs24.close();
2020-06-17 21:55:39 jdbc[3]: 
/**/prep19.getMaxRows();
2020-06-17 21:55:39 jdbc[3]: 
/**/prep19.getQueryTimeout();
2020-06-17 21:55:39 jdbc[3]: 
/**/prep19.close();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:55:39 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 21:55:39 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:55:39 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:55:39 jdbc[3]: 
/**/PreparedStatement prep20 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 21:55:39 jdbc[3]: 
/**/prep20.setString(1, "CustomerMS");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep20.setString(2, "INFO");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep20.setNull(3, 12);
2020-06-17 21:55:39 jdbc[3]: 
/**/prep20.setString(4, "/api/customers/2");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep20.setString(5, "Customer(id=3, firstName=Ramila, lastName=Karki, email=ramila@gmail.com)");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep20.setString(6, "543f683d787432fc");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep20.setString(7, "2020-06-18T02:48:30.897Z");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep20.setString(8, "543f683d787432fc");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep20.executeUpdate();
2020-06-17 21:55:39 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 21:55:39 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 21:55:39 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/2', 5: 'Customer(id=3, firstName=Ramila, lastName=Karki, email=ramila@gmail.com)', 6: '543f683d787432fc', 7: '2020-06-18T02:48:30.897Z', 8: '543f683d787432fc'};
2020-06-17 21:55:39 jdbc[3]: 
/**/ResultSet rs25 = prep20.getGeneratedKeys();
2020-06-17 21:55:39 jdbc[3]: 
/**/rs25.next();
2020-06-17 21:55:39 jdbc[3]: 
/**/ResultSetMetaData rsMeta12 = rs25.getMetaData();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:55:39 jdbc[3]: 
/**/rsMeta12.getColumnCount();
2020-06-17 21:55:39 jdbc[3]: 
/**/rs25.getLong(1);
2020-06-17 21:55:39 jdbc[3]: 
/**/rs25.close();
2020-06-17 21:55:39 jdbc[3]: 
/**/prep20.getMaxRows();
2020-06-17 21:55:39 jdbc[3]: 
/**/prep20.getQueryTimeout();
2020-06-17 21:55:39 jdbc[3]: 
/**/prep20.close();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:55:39 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 21:55:39 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:55:39 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:55:39 jdbc[3]: 
/**/PreparedStatement prep21 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 21:55:39 jdbc[3]: 
/**/prep21.setString(1, "CustomerMS");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep21.setString(2, "INFO");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep21.setNull(3, 12);
2020-06-17 21:55:39 jdbc[3]: 
/**/prep21.setString(4, "/api/customers/2");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep21.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep21.setString(6, "543f683d787432fc");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep21.setString(7, "2020-06-18T02:48:30.901Z");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep21.setString(8, "543f683d787432fc");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep21.executeUpdate();
2020-06-17 21:55:39 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 21:55:39 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 21:55:39 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/2', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: '543f683d787432fc', 7: '2020-06-18T02:48:30.901Z', 8: '543f683d787432fc'};
2020-06-17 21:55:39 jdbc[3]: 
/**/ResultSet rs26 = prep21.getGeneratedKeys();
2020-06-17 21:55:39 jdbc[3]: 
/**/rs26.next();
2020-06-17 21:55:39 jdbc[3]: 
/**/ResultSetMetaData rsMeta13 = rs26.getMetaData();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:55:39 jdbc[3]: 
/**/rsMeta13.getColumnCount();
2020-06-17 21:55:39 jdbc[3]: 
/**/rs26.getLong(1);
2020-06-17 21:55:39 jdbc[3]: 
/**/rs26.close();
2020-06-17 21:55:39 jdbc[3]: 
/**/prep21.getMaxRows();
2020-06-17 21:55:39 jdbc[3]: 
/**/prep21.getQueryTimeout();
2020-06-17 21:55:39 jdbc[3]: 
/**/prep21.close();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:55:39 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 21:55:39 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:55:39 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:55:39 jdbc[3]: 
/**/PreparedStatement prep22 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 21:55:39 jdbc[3]: 
/**/prep22.setString(1, "CustomerMS");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep22.setString(2, "INFO");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep22.setNull(3, 12);
2020-06-17 21:55:39 jdbc[3]: 
/**/prep22.setString(4, "/api/customers/2");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep22.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep22.setString(6, "dd81605f39be9222");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep22.setString(7, "2020-06-18T02:53:16.435Z");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep22.setString(8, "dd81605f39be9222");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep22.executeUpdate();
2020-06-17 21:55:39 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 21:55:39 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 21:55:39 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/2', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: 'dd81605f39be9222', 7: '2020-06-18T02:53:16.435Z', 8: 'dd81605f39be9222'};
2020-06-17 21:55:39 jdbc[3]: 
/**/ResultSet rs27 = prep22.getGeneratedKeys();
2020-06-17 21:55:39 jdbc[3]: 
/**/rs27.next();
2020-06-17 21:55:39 jdbc[3]: 
/**/ResultSetMetaData rsMeta14 = rs27.getMetaData();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:55:39 jdbc[3]: 
/**/rsMeta14.getColumnCount();
2020-06-17 21:55:39 jdbc[3]: 
/**/rs27.getLong(1);
2020-06-17 21:55:39 jdbc[3]: 
/**/rs27.close();
2020-06-17 21:55:39 jdbc[3]: 
/**/prep22.getMaxRows();
2020-06-17 21:55:39 jdbc[3]: 
/**/prep22.getQueryTimeout();
2020-06-17 21:55:39 jdbc[3]: 
/**/prep22.close();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:55:39 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 21:55:39 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:55:39 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:55:39 jdbc[3]: 
/**/PreparedStatement prep23 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 21:55:39 jdbc[3]: 
/**/prep23.setString(1, "CustomerMS");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep23.setString(2, "INFO");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep23.setNull(3, 12);
2020-06-17 21:55:39 jdbc[3]: 
/**/prep23.setString(4, "/api/customers/2");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep23.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep23.setString(6, "34ab3d102fb49096");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep23.setString(7, "2020-06-18T02:53:23.797Z");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep23.setString(8, "34ab3d102fb49096");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep23.executeUpdate();
2020-06-17 21:55:39 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 21:55:39 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 21:55:39 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/2', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: '34ab3d102fb49096', 7: '2020-06-18T02:53:23.797Z', 8: '34ab3d102fb49096'};
2020-06-17 21:55:39 jdbc[3]: 
/**/ResultSet rs28 = prep23.getGeneratedKeys();
2020-06-17 21:55:39 jdbc[3]: 
/**/rs28.next();
2020-06-17 21:55:39 jdbc[3]: 
/**/ResultSetMetaData rsMeta15 = rs28.getMetaData();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:55:39 jdbc[3]: 
/**/rsMeta15.getColumnCount();
2020-06-17 21:55:39 jdbc[3]: 
/**/rs28.getLong(1);
2020-06-17 21:55:39 jdbc[3]: 
/**/rs28.close();
2020-06-17 21:55:39 jdbc[3]: 
/**/prep23.getMaxRows();
2020-06-17 21:55:39 jdbc[3]: 
/**/prep23.getQueryTimeout();
2020-06-17 21:55:39 jdbc[3]: 
/**/prep23.close();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:55:39 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 21:55:39 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:55:39 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:55:39 jdbc[3]: 
/**/PreparedStatement prep24 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 21:55:39 jdbc[3]: 
/**/prep24.setString(1, "CustomerMS");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep24.setString(2, "INFO");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep24.setNull(3, 12);
2020-06-17 21:55:39 jdbc[3]: 
/**/prep24.setString(4, "/api/customers/2");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep24.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep24.setString(6, "19d2e4d621c50722");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep24.setString(7, "2020-06-18T02:53:35.082Z");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep24.setString(8, "19d2e4d621c50722");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep24.executeUpdate();
2020-06-17 21:55:39 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 21:55:39 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 21:55:39 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/2', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: '19d2e4d621c50722', 7: '2020-06-18T02:53:35.082Z', 8: '19d2e4d621c50722'};
2020-06-17 21:55:39 jdbc[3]: 
/**/ResultSet rs29 = prep24.getGeneratedKeys();
2020-06-17 21:55:39 jdbc[3]: 
/**/rs29.next();
2020-06-17 21:55:39 jdbc[3]: 
/**/ResultSetMetaData rsMeta16 = rs29.getMetaData();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:55:39 jdbc[3]: 
/**/rsMeta16.getColumnCount();
2020-06-17 21:55:39 jdbc[3]: 
/**/rs29.getLong(1);
2020-06-17 21:55:39 jdbc[3]: 
/**/rs29.close();
2020-06-17 21:55:39 jdbc[3]: 
/**/prep24.getMaxRows();
2020-06-17 21:55:39 jdbc[3]: 
/**/prep24.getQueryTimeout();
2020-06-17 21:55:39 jdbc[3]: 
/**/prep24.close();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:55:39 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 21:55:39 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:55:39 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:55:39 jdbc[3]: 
/**/PreparedStatement prep25 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 21:55:39 jdbc[3]: 
/**/prep25.setString(1, "CustomerMS");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep25.setString(2, "INFO");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep25.setNull(3, 12);
2020-06-17 21:55:39 jdbc[3]: 
/**/prep25.setString(4, "/api/customers/3");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep25.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep25.setString(6, "ab696d894d92b334");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep25.setString(7, "2020-06-18T02:53:42.252Z");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep25.setString(8, "ab696d894d92b334");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep25.executeUpdate();
2020-06-17 21:55:39 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 21:55:39 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 21:55:39 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/3', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: 'ab696d894d92b334', 7: '2020-06-18T02:53:42.252Z', 8: 'ab696d894d92b334'};
2020-06-17 21:55:39 jdbc[3]: 
/**/ResultSet rs30 = prep25.getGeneratedKeys();
2020-06-17 21:55:39 jdbc[3]: 
/**/rs30.next();
2020-06-17 21:55:39 jdbc[3]: 
/**/ResultSetMetaData rsMeta17 = rs30.getMetaData();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:55:39 jdbc[3]: 
/**/rsMeta17.getColumnCount();
2020-06-17 21:55:39 jdbc[3]: 
/**/rs30.getLong(1);
2020-06-17 21:55:39 jdbc[3]: 
/**/rs30.close();
2020-06-17 21:55:39 jdbc[3]: 
/**/prep25.getMaxRows();
2020-06-17 21:55:39 jdbc[3]: 
/**/prep25.getQueryTimeout();
2020-06-17 21:55:39 jdbc[3]: 
/**/prep25.close();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:55:39 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 21:55:39 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:55:39 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:55:39 jdbc[3]: 
/**/PreparedStatement prep26 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 21:55:39 jdbc[3]: 
/**/prep26.setString(1, "CustomerMS");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep26.setString(2, "INFO");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep26.setNull(3, 12);
2020-06-17 21:55:39 jdbc[3]: 
/**/prep26.setString(4, "/api/customers/3");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep26.setString(5, "Customer(id=3, firstName=Ramila, lastName=Karki, email=ramila@gmail.com)");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep26.setString(6, "ab696d894d92b334");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep26.setString(7, "2020-06-18T02:53:42.257Z");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep26.setString(8, "ab696d894d92b334");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep26.executeUpdate();
2020-06-17 21:55:39 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 21:55:39 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 21:55:39 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/3', 5: 'Customer(id=3, firstName=Ramila, lastName=Karki, email=ramila@gmail.com)', 6: 'ab696d894d92b334', 7: '2020-06-18T02:53:42.257Z', 8: 'ab696d894d92b334'};
2020-06-17 21:55:39 jdbc[3]: 
/**/ResultSet rs31 = prep26.getGeneratedKeys();
2020-06-17 21:55:39 jdbc[3]: 
/**/rs31.next();
2020-06-17 21:55:39 jdbc[3]: 
/**/ResultSetMetaData rsMeta18 = rs31.getMetaData();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:55:39 jdbc[3]: 
/**/rsMeta18.getColumnCount();
2020-06-17 21:55:39 jdbc[3]: 
/**/rs31.getLong(1);
2020-06-17 21:55:39 jdbc[3]: 
/**/rs31.close();
2020-06-17 21:55:39 jdbc[3]: 
/**/prep26.getMaxRows();
2020-06-17 21:55:39 jdbc[3]: 
/**/prep26.getQueryTimeout();
2020-06-17 21:55:39 jdbc[3]: 
/**/prep26.close();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:55:39 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 21:55:39 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:55:39 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:55:39 jdbc[3]: 
/**/PreparedStatement prep27 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 21:55:39 jdbc[3]: 
/**/prep27.setString(1, "CustomerMS");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep27.setString(2, "INFO");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep27.setNull(3, 12);
2020-06-17 21:55:39 jdbc[3]: 
/**/prep27.setString(4, "/api/customers/4");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep27.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep27.setString(6, "cc0b9a3859b08cfa");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep27.setString(7, "2020-06-18T02:53:58.878Z");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep27.setString(8, "cc0b9a3859b08cfa");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep27.executeUpdate();
2020-06-17 21:55:39 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 21:55:39 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 21:55:39 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/4', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: 'cc0b9a3859b08cfa', 7: '2020-06-18T02:53:58.878Z', 8: 'cc0b9a3859b08cfa'};
2020-06-17 21:55:39 jdbc[3]: 
/**/ResultSet rs32 = prep27.getGeneratedKeys();
2020-06-17 21:55:39 jdbc[3]: 
/**/rs32.next();
2020-06-17 21:55:39 jdbc[3]: 
/**/ResultSetMetaData rsMeta19 = rs32.getMetaData();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:55:39 jdbc[3]: 
/**/rsMeta19.getColumnCount();
2020-06-17 21:55:39 jdbc[3]: 
/**/rs32.getLong(1);
2020-06-17 21:55:39 jdbc[3]: 
/**/rs32.close();
2020-06-17 21:55:39 jdbc[3]: 
/**/prep27.getMaxRows();
2020-06-17 21:55:39 jdbc[3]: 
/**/prep27.getQueryTimeout();
2020-06-17 21:55:39 jdbc[3]: 
/**/prep27.close();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:55:39 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 21:55:39 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:55:39 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:55:39 jdbc[3]: 
/**/PreparedStatement prep28 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 21:55:39 jdbc[3]: 
/**/prep28.setString(1, "CustomerMS");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep28.setString(2, "INFO");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep28.setNull(3, 12);
2020-06-17 21:55:39 jdbc[3]: 
/**/prep28.setString(4, "/api/customers/4");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep28.setString(5, "Customer(id=4, firstName=David, lastName=Yonge, email=david@gmail.com)");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep28.setString(6, "cc0b9a3859b08cfa");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep28.setString(7, "2020-06-18T02:53:58.882Z");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep28.setString(8, "cc0b9a3859b08cfa");
2020-06-17 21:55:39 jdbc[3]: 
/**/prep28.executeUpdate();
2020-06-17 21:55:39 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 21:55:39 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 21:55:39 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/4', 5: 'Customer(id=4, firstName=David, lastName=Yonge, email=david@gmail.com)', 6: 'cc0b9a3859b08cfa', 7: '2020-06-18T02:53:58.882Z', 8: 'cc0b9a3859b08cfa'};
2020-06-17 21:55:39 jdbc[3]: 
/**/ResultSet rs33 = prep28.getGeneratedKeys();
2020-06-17 21:55:39 jdbc[3]: 
/**/rs33.next();
2020-06-17 21:55:39 jdbc[3]: 
/**/ResultSetMetaData rsMeta20 = rs33.getMetaData();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:55:39 jdbc[3]: 
/**/rsMeta20.getColumnCount();
2020-06-17 21:55:39 jdbc[3]: 
/**/rs33.getLong(1);
2020-06-17 21:55:39 jdbc[3]: 
/**/rs33.close();
2020-06-17 21:55:39 jdbc[3]: 
/**/prep28.getMaxRows();
2020-06-17 21:55:39 jdbc[3]: 
/**/prep28.getQueryTimeout();
2020-06-17 21:55:39 jdbc[3]: 
/**/prep28.close();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:55:39 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 21:55:39 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:55:39 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:55:39 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:55:47 database: connecting session #13 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 21:55:47 jdbc[13]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 21:55:47 jdbc[13]: 
/**/Connection conn10 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3;FORBID_CREATION=TRUE", "SA", "");
2020-06-17 21:55:47 jdbc[13]: 
/**/DatabaseMetaData dbMeta3 = conn10.getMetaData();
2020-06-17 21:55:47 jdbc[13]: 
/**/PreparedStatement prep29 = conn10.prepareStatement("SELECT NAME, VALUE FROM INFORMATION_SCHEMA.SETTINGS WHERE NAME IN (?, ?, ?, ?)");
2020-06-17 21:55:47 jdbc[13]: Plan       : calculate cost for plan [SETTINGS:-7:org.h2.table.MetaTable@124ca49d]
2020-06-17 21:55:47 jdbc[13]: Plan       :   for table filter SETTINGS:-7:org.h2.table.MetaTable@124ca49d
2020-06-17 21:55:47 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:55:47 jdbc[13]: Plan       :   best plan item cost 9,900 index meta
2020-06-17 21:55:47 jdbc[13]: Plan       : plan cost 9,901
2020-06-17 21:55:47 jdbc[13]: 
/**/prep29.setString(1, "MODE");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep29.setString(2, "DATABASE_TO_UPPER");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep29.setString(3, "DATABASE_TO_LOWER");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep29.setString(4, "CASE_INSENSITIVE_IDENTIFIERS");
2020-06-17 21:55:47 jdbc[13]: 
/**/ResultSet rs34 = prep29.executeQuery();
2020-06-17 21:55:47 jdbc[13]: 
/*SQL l:78 #:4*/SELECT NAME, VALUE FROM INFORMATION_SCHEMA.SETTINGS WHERE NAME IN (?, ?, ?, ?) {1: 'MODE', 2: 'DATABASE_TO_UPPER', 3: 'DATABASE_TO_LOWER', 4: 'CASE_INSENSITIVE_IDENTIFIERS'};
2020-06-17 21:55:47 jdbc[13]: 
/**/rs34.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs34.getString(2);
2020-06-17 21:55:47 jdbc[13]: 
/**/rs34.getString(1);
2020-06-17 21:55:47 jdbc[13]: 
/**/rs34.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs34.getString(2);
2020-06-17 21:55:47 jdbc[13]: 
/**/rs34.getString(1);
2020-06-17 21:55:47 jdbc[13]: 
/**/rs34.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs34.getString(2);
2020-06-17 21:55:47 jdbc[13]: 
/**/rs34.getString(1);
2020-06-17 21:55:47 jdbc[13]: 
/**/rs34.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs34.getString(2);
2020-06-17 21:55:47 jdbc[13]: 
/**/rs34.getString(1);
2020-06-17 21:55:47 jdbc[13]: 
/**/rs34.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/prep29.close();
2020-06-17 21:55:47 jdbc[13]: 
/**/DatabaseMetaData dbMeta4 = conn10.getMetaData();
2020-06-17 21:55:47 jdbc[13]: 
/**/dbMeta4.getSchemas();
2020-06-17 21:55:47 jdbc[13]: 
/**/PreparedStatement prep30 = conn10.prepareStatement("SELECT SCHEMA_NAME TABLE_SCHEM, CATALOG_NAME TABLE_CATALOG,  IS_DEFAULT FROM INFORMATION_SCHEMA.SCHEMATA ORDER BY SCHEMA_NAME");
2020-06-17 21:55:47 jdbc[13]: Plan       : calculate cost for plan [SCHEMATA:-14:org.h2.table.MetaTable@141a5278]
2020-06-17 21:55:47 jdbc[13]: Plan       :   for table filter SCHEMATA:-14:org.h2.table.MetaTable@141a5278
2020-06-17 21:55:47 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:55:47 jdbc[13]: Plan       :   best plan item cost 10,000 index meta
2020-06-17 21:55:47 jdbc[13]: Plan       : plan cost 10,001
2020-06-17 21:55:47 jdbc[13]: 
/**/ResultSet rs35 = prep30.executeQuery();
2020-06-17 21:55:47 jdbc[13]: 
/*SQL #:2*/SELECT SCHEMA_NAME TABLE_SCHEM, CATALOG_NAME TABLE_CATALOG,  IS_DEFAULT FROM INFORMATION_SCHEMA.SCHEMATA ORDER BY SCHEMA_NAME;
2020-06-17 21:55:47 jdbc[13]: 
/**/rs35.findColumn("IS_DEFAULT");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs35.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs35.getBoolean(3);
2020-06-17 21:55:47 jdbc[13]: 
/**/rs35.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs35.getBoolean(3);
2020-06-17 21:55:47 jdbc[13]: 
/**/rs35.getString("TABLE_SCHEM");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs35.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/dbMeta4.getSchemas();
2020-06-17 21:55:47 jdbc[13]: 
/**/PreparedStatement prep31 = conn10.prepareStatement("SELECT SCHEMA_NAME TABLE_SCHEM, CATALOG_NAME TABLE_CATALOG,  IS_DEFAULT FROM INFORMATION_SCHEMA.SCHEMATA ORDER BY SCHEMA_NAME");
2020-06-17 21:55:47 jdbc[13]: Plan       : calculate cost for plan [SCHEMATA:-14:org.h2.table.MetaTable@141a5278]
2020-06-17 21:55:47 jdbc[13]: Plan       :   for table filter SCHEMATA:-14:org.h2.table.MetaTable@141a5278
2020-06-17 21:55:47 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:55:47 jdbc[13]: Plan       :   best plan item cost 10,000 index meta
2020-06-17 21:55:47 jdbc[13]: Plan       : plan cost 10,001
2020-06-17 21:55:47 jdbc[13]: 
/**/ResultSet rs36 = prep31.executeQuery();
2020-06-17 21:55:47 jdbc[13]: 
/*SQL #:2*/SELECT SCHEMA_NAME TABLE_SCHEM, CATALOG_NAME TABLE_CATALOG,  IS_DEFAULT FROM INFORMATION_SCHEMA.SCHEMATA ORDER BY SCHEMA_NAME;
2020-06-17 21:55:47 jdbc[13]: 
/**/rs36.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs36.getString("TABLE_SCHEM");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs36.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs36.getString("TABLE_SCHEM");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs36.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs36.close();
2020-06-17 21:55:47 jdbc[13]: 
/**/prep31.close();
2020-06-17 21:55:47 jdbc[13]: 
/**/dbMeta4.getTables(null, "INFORMATION_SCHEMA", null, new String[]{"TABLE", "SYSTEM TABLE", "VIEW", "SYSTEM VIEW", "TABLE LINK", "SYNONYM", "EXTERNAL"});
2020-06-17 21:55:47 jdbc[13]: 
/**/PreparedStatement prep32 = conn10.prepareStatement("SELECT TABLE_CAT, TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_CAT, TYPE_SCHEM, TYPE_NAME, SELF_REFERENCING_COL_NAME, REF_GENERATION, SQL FROM (SELECT SYNONYM_CATALOG TABLE_CAT, SYNONYM_SCHEMA TABLE_SCHEM, SYNONYM_NAME as TABLE_NAME, TYPE_NAME AS TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME AS TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, NULL AS SQL FROM INFORMATION_SCHEMA.SYNONYMS WHERE SYNONYM_CATALOG LIKE ?1 ESCAPE ?4 AND SYNONYM_SCHEMA LIKE ?2 ESCAPE ?4 AND SYNONYM_NAME LIKE ?3 ESCAPE ?4 UNION SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5, ?6, ?7, ?8, ?9, ?10, ?11)) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME");
2020-06-17 21:55:47 jdbc[13]: Plan       : calculate cost for plan [_0]
2020-06-17 21:55:47 jdbc[13]: Plan       :   for table filter _0
2020-06-17 21:55:47 jdbc[13]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@27535fa]
2020-06-17 21:55:47 jdbc[13]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@27535fa
2020-06-17 21:55:47 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:55:47 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:55:47 jdbc[13]: Plan       :   best plan item cost 4,022 index meta
2020-06-17 21:55:47 jdbc[13]: Plan       : plan cost 4,023
2020-06-17 21:55:47 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@6b6eed0d]
2020-06-17 21:55:47 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@6b6eed0d
2020-06-17 21:55:47 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:55:47 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:55:47 jdbc[13]: Plan       :   best plan item cost 3,981.78 index meta
2020-06-17 21:55:47 jdbc[13]: Plan       : plan cost 3,982.78
2020-06-17 21:55:47 jdbc[13]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@27535fa]
2020-06-17 21:55:47 jdbc[13]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@27535fa
2020-06-17 21:55:47 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:55:47 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:55:47 jdbc[13]: Plan       :   best plan item cost 4,022 index meta
2020-06-17 21:55:47 jdbc[13]: Plan       : plan cost 4,023
2020-06-17 21:55:47 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@6b6eed0d]
2020-06-17 21:55:47 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@6b6eed0d
2020-06-17 21:55:47 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:55:47 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:55:47 jdbc[13]: Plan       :   best plan item cost 3,981.78 index meta
2020-06-17 21:55:47 jdbc[13]: Plan       : plan cost 3,982.78
2020-06-17 21:55:47 jdbc[13]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@27535fa]
2020-06-17 21:55:47 jdbc[13]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@27535fa
2020-06-17 21:55:47 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:55:47 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:55:47 jdbc[13]: Plan       :   best plan item cost 4,022 index meta
2020-06-17 21:55:47 jdbc[13]: Plan       : plan cost 4,023
2020-06-17 21:55:47 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@6b6eed0d]
2020-06-17 21:55:47 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@6b6eed0d
2020-06-17 21:55:47 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:55:47 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:55:47 jdbc[13]: Plan       :   best plan item cost 3,981.78 index meta
2020-06-17 21:55:47 jdbc[13]: Plan       : plan cost 3,982.78
2020-06-17 21:55:47 jdbc[13]: Plan       :   best plan item cost 8,005.78 index (SELECT
    SYNONYM_CATALOG AS TABLE_CAT,
    SYNONYM_SCHEMA AS TABLE_SCHEM,
    SYNONYM_NAME AS TABLE_NAME,
    TYPE_NAME AS TABLE_TYPE,
    REMARKS,
    TYPE_NAME AS TYPE_CAT,
    TYPE_NAME AS TYPE_SCHEM,
    TYPE_NAME AS TYPE_NAME,
    TYPE_NAME AS SELF_REFERENCING_COL_NAME,
    TYPE_NAME AS REF_GENERATION,
    NULL AS SQL
FROM INFORMATION_SCHEMA.SYNONYMS
    /* meta */
WHERE (SYNONYM_NAME LIKE ?3 ESCAPE ?4)
    AND ((SYNONYM_CATALOG LIKE ?1 ESCAPE ?4)
    AND (SYNONYM_SCHEMA LIKE ?2 ESCAPE ?4)))
UNION
(SELECT
    TABLE_CATALOG AS TABLE_CAT,
    TABLE_SCHEMA AS TABLE_SCHEM,
    TABLE_NAME,
    TABLE_TYPE,
    REMARKS,
    TYPE_NAME AS TYPE_CAT,
    TYPE_NAME AS TYPE_SCHEM,
    TYPE_NAME,
    TYPE_NAME AS SELF_REFERENCING_COL_NAME,
    TYPE_NAME AS REF_GENERATION,
    SQL
FROM INFORMATION_SCHEMA.TABLES
    /* meta */
WHERE (TABLE_TYPE IN(?5, ?6, ?7, ?8, ?9, ?10, ?11))
    AND ((TABLE_NAME LIKE ?3 ESCAPE ?4)
    AND ((TABLE_CATALOG LIKE ?1 ESCAPE ?4)
    AND (TABLE_SCHEMA LIKE ?2 ESCAPE ?4))))
2020-06-17 21:55:47 jdbc[13]: Plan       : plan cost 8,006.78
2020-06-17 21:55:47 jdbc[13]: 
/**/prep32.setString(1, "%");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep32.setString(2, "INFORMATION_SCHEMA");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep32.setString(3, "%");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep32.setString(4, "\\");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep32.setString(5, "TABLE");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep32.setString(6, "SYSTEM TABLE");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep32.setString(7, "VIEW");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep32.setString(8, "SYSTEM VIEW");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep32.setString(9, "TABLE LINK");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep32.setString(10, "SYNONYM");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep32.setString(11, "EXTERNAL");
2020-06-17 21:55:47 jdbc[13]: 
/**/ResultSet rs37 = prep32.executeQuery();
2020-06-17 21:55:47 jdbc[13]: Plan       : calculate cost for plan [_1]
2020-06-17 21:55:47 jdbc[13]: Plan       :   for table filter _1
2020-06-17 21:55:47 jdbc[13]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@27535fa]
2020-06-17 21:55:47 jdbc[13]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@27535fa
2020-06-17 21:55:47 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:55:47 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:55:47 jdbc[13]: Plan       :   best plan item cost 4,022 index meta
2020-06-17 21:55:47 jdbc[13]: Plan       : plan cost 4,023
2020-06-17 21:55:47 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@6b6eed0d]
2020-06-17 21:55:47 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@6b6eed0d
2020-06-17 21:55:47 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:55:47 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:55:47 jdbc[13]: Plan       :   best plan item cost 3,981.78 index meta
2020-06-17 21:55:47 jdbc[13]: Plan       : plan cost 3,982.78
2020-06-17 21:55:47 jdbc[13]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@27535fa]
2020-06-17 21:55:47 jdbc[13]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@27535fa
2020-06-17 21:55:47 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:55:47 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:55:47 jdbc[13]: Plan       :   best plan item cost 4,022 index meta
2020-06-17 21:55:47 jdbc[13]: Plan       : plan cost 4,023
2020-06-17 21:55:47 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@6b6eed0d]
2020-06-17 21:55:47 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@6b6eed0d
2020-06-17 21:55:47 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:55:47 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:55:47 jdbc[13]: Plan       :   best plan item cost 3,981.78 index meta
2020-06-17 21:55:47 jdbc[13]: Plan       : plan cost 3,982.78
2020-06-17 21:55:47 jdbc[13]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@27535fa]
2020-06-17 21:55:47 jdbc[13]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@27535fa
2020-06-17 21:55:47 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:55:47 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:55:47 jdbc[13]: Plan       :   best plan item cost 4,022 index meta
2020-06-17 21:55:47 jdbc[13]: Plan       : plan cost 4,023
2020-06-17 21:55:47 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@6b6eed0d]
2020-06-17 21:55:47 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@6b6eed0d
2020-06-17 21:55:47 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:55:47 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:55:47 jdbc[13]: Plan       :   best plan item cost 3,981.78 index meta
2020-06-17 21:55:47 jdbc[13]: Plan       : plan cost 3,982.78
2020-06-17 21:55:47 jdbc[13]: Plan       :   best plan item cost 8,005.78 index (SELECT
    SYNONYM_CATALOG AS TABLE_CAT,
    SYNONYM_SCHEMA AS TABLE_SCHEM,
    SYNONYM_NAME AS TABLE_NAME,
    TYPE_NAME AS TABLE_TYPE,
    REMARKS,
    TYPE_NAME AS TYPE_CAT,
    TYPE_NAME AS TYPE_SCHEM,
    TYPE_NAME AS TYPE_NAME,
    TYPE_NAME AS SELF_REFERENCING_COL_NAME,
    TYPE_NAME AS REF_GENERATION,
    NULL AS SQL
FROM INFORMATION_SCHEMA.SYNONYMS
    /* meta */
WHERE (SYNONYM_NAME LIKE ?3 ESCAPE ?4)
    AND ((SYNONYM_CATALOG LIKE ?1 ESCAPE ?4)
    AND (SYNONYM_SCHEMA LIKE ?2 ESCAPE ?4)))
UNION
(SELECT
    TABLE_CATALOG AS TABLE_CAT,
    TABLE_SCHEMA AS TABLE_SCHEM,
    TABLE_NAME,
    TABLE_TYPE,
    REMARKS,
    TYPE_NAME AS TYPE_CAT,
    TYPE_NAME AS TYPE_SCHEM,
    TYPE_NAME,
    TYPE_NAME AS SELF_REFERENCING_COL_NAME,
    TYPE_NAME AS REF_GENERATION,
    SQL
FROM INFORMATION_SCHEMA.TABLES
    /* meta */
WHERE (TABLE_TYPE IN(?5, ?6, ?7, ?8, ?9, ?10, ?11))
    AND ((TABLE_NAME LIKE ?3 ESCAPE ?4)
    AND ((TABLE_CATALOG LIKE ?1 ESCAPE ?4)
    AND (TABLE_SCHEMA LIKE ?2 ESCAPE ?4))))
2020-06-17 21:55:47 jdbc[13]: Plan       : plan cost 8,006.78
2020-06-17 21:55:47 jdbc[13]: 
/*SQL l:1007 #:33 t:2*/SELECT TABLE_CAT, TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_CAT, TYPE_SCHEM, TYPE_NAME, SELF_REFERENCING_COL_NAME, REF_GENERATION, SQL FROM (SELECT SYNONYM_CATALOG TABLE_CAT, SYNONYM_SCHEMA TABLE_SCHEM, SYNONYM_NAME as TABLE_NAME, TYPE_NAME AS TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME AS TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, NULL AS SQL FROM INFORMATION_SCHEMA.SYNONYMS WHERE SYNONYM_CATALOG LIKE ?1 ESCAPE ?4 AND SYNONYM_SCHEMA LIKE ?2 ESCAPE ?4 AND SYNONYM_NAME LIKE ?3 ESCAPE ?4 UNION SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5, ?6, ?7, ?8, ?9, ?10, ?11)) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME {1: '%', 2: 'INFORMATION_SCHEMA', 3: '%', 4: '\\', 5: 'TABLE', 6: 'SYSTEM TABLE', 7: 'VIEW', 8: 'SYSTEM VIEW', 9: 'TABLE LINK', 10: 'SYNONYM', 11: 'EXTERNAL'};
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.getString("TABLE_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.getString("TABLE_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.getString("TABLE_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.getString("TABLE_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.getString("TABLE_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.getString("TABLE_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.getString("TABLE_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.getString("TABLE_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.getString("TABLE_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.getString("TABLE_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.getString("TABLE_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.getString("TABLE_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.getString("TABLE_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.getString("TABLE_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.getString("TABLE_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.getString("TABLE_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.getString("TABLE_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.getString("TABLE_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.getString("TABLE_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.getString("TABLE_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.getString("TABLE_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.getString("TABLE_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.getString("TABLE_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.getString("TABLE_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.getString("TABLE_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.getString("TABLE_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.getString("TABLE_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.getString("TABLE_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.getString("TABLE_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.getString("TABLE_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.getString("TABLE_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.getString("TABLE_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.getString("TABLE_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.getString("TABLE_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.getString("TABLE_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.getString("TABLE_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.getString("TABLE_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.getString("TABLE_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.getString("TABLE_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.getString("TABLE_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.getString("TABLE_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.getString("TABLE_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.getString("TABLE_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.getString("TABLE_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.getString("TABLE_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.getString("TABLE_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.getString("TABLE_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.getString("TABLE_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.getString("TABLE_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.getString("TABLE_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.getString("TABLE_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.getString("TABLE_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.getString("TABLE_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.getString("TABLE_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.getString("TABLE_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.getString("TABLE_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.getString("TABLE_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.getString("TABLE_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.getString("TABLE_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.getString("TABLE_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.getString("TABLE_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.getString("TABLE_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.getString("TABLE_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.getString("TABLE_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.getString("TABLE_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.getString("TABLE_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs37.close();
2020-06-17 21:55:47 jdbc[13]: 
/**/prep32.close();
2020-06-17 21:55:47 jdbc[13]: 
/**/dbMeta4.getConnection();
2020-06-17 21:55:47 jdbc[13]: 
/**/PreparedStatement prep33 = conn10.prepareStatement("SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ?");
2020-06-17 21:55:47 jdbc[13]: Plan       : calculate cost for plan [COLUMNS:-2:org.h2.table.MetaTable@765f27db]
2020-06-17 21:55:47 jdbc[13]: Plan       :   for table filter COLUMNS:-2:org.h2.table.MetaTable@765f27db
2020-06-17 21:55:47 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:55:47 jdbc[13]: Table      :     potential plan item cost 28 index meta
2020-06-17 21:55:47 jdbc[13]: Plan       :   best plan item cost 27.44 index meta
2020-06-17 21:55:47 jdbc[13]: Plan       : plan cost 28.44
2020-06-17 21:55:47 jdbc[13]: 
/**/prep33.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep33.setString(2, "CATALOGS");
2020-06-17 21:55:47 jdbc[13]: 
/**/ResultSet rs38 = prep33.executeQuery();
2020-06-17 21:55:47 jdbc[13]: 
/*SQL l:123 #:1*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'CATALOGS'};
2020-06-17 21:55:47 jdbc[13]: 
/**/rs38.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs38.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs38.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs38.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs38.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs38.close();
2020-06-17 21:55:47 jdbc[13]: 
/**/prep33.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep33.setString(2, "COLLATIONS");
2020-06-17 21:55:47 jdbc[13]: 
/**/ResultSet rs39 = prep33.executeQuery();
2020-06-17 21:55:47 jdbc[13]: 
/*SQL l:123 #:2*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'COLLATIONS'};
2020-06-17 21:55:47 jdbc[13]: 
/**/rs39.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs39.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs39.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs39.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs39.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs39.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs39.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs39.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs39.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs39.close();
2020-06-17 21:55:47 jdbc[13]: 
/**/prep33.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep33.setString(2, "COLUMNS");
2020-06-17 21:55:47 jdbc[13]: 
/**/ResultSet rs40 = prep33.executeQuery();
2020-06-17 21:55:47 jdbc[13]: 
/*SQL l:123 #:32*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'COLUMNS'};
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs40.close();
2020-06-17 21:55:47 jdbc[13]: 
/**/prep33.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep33.setString(2, "COLUMN_PRIVILEGES");
2020-06-17 21:55:47 jdbc[13]: 
/**/ResultSet rs41 = prep33.executeQuery();
2020-06-17 21:55:47 jdbc[13]: 
/*SQL l:123 #:8*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'COLUMN_PRIVILEGES'};
2020-06-17 21:55:47 jdbc[13]: 
/**/rs41.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs41.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs41.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs41.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs41.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs41.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs41.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs41.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs41.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs41.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs41.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs41.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs41.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs41.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs41.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs41.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs41.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs41.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs41.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs41.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs41.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs41.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs41.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs41.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs41.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs41.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs41.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs41.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs41.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs41.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs41.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs41.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs41.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs41.close();
2020-06-17 21:55:47 jdbc[13]: 
/**/prep33.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep33.setString(2, "CONSTANTS");
2020-06-17 21:55:47 jdbc[13]: 
/**/ResultSet rs42 = prep33.executeQuery();
2020-06-17 21:55:47 jdbc[13]: 
/*SQL l:123 #:7*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'CONSTANTS'};
2020-06-17 21:55:47 jdbc[13]: 
/**/rs42.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs42.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs42.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs42.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs42.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs42.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs42.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs42.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs42.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs42.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs42.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs42.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs42.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs42.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs42.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs42.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs42.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs42.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs42.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs42.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs42.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs42.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs42.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs42.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs42.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs42.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs42.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs42.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs42.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs42.close();
2020-06-17 21:55:47 jdbc[13]: 
/**/prep33.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep33.setString(2, "CONSTRAINTS");
2020-06-17 21:55:47 jdbc[13]: 
/**/ResultSet rs43 = prep33.executeQuery();
2020-06-17 21:55:47 jdbc[13]: 
/*SQL l:123 #:13*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'CONSTRAINTS'};
2020-06-17 21:55:47 jdbc[13]: 
/**/rs43.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs43.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs43.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs43.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs43.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs43.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs43.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs43.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs43.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs43.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs43.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs43.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs43.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs43.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs43.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs43.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs43.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs43.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs43.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs43.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs43.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs43.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs43.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs43.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs43.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs43.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs43.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs43.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs43.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs43.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs43.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs43.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs43.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs43.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs43.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs43.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs43.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs43.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs43.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs43.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs43.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs43.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs43.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs43.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs43.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs43.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs43.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs43.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs43.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs43.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs43.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs43.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs43.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs43.close();
2020-06-17 21:55:47 jdbc[13]: 
/**/prep33.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep33.setString(2, "CROSS_REFERENCES");
2020-06-17 21:55:47 jdbc[13]: 
/**/ResultSet rs44 = prep33.executeQuery();
2020-06-17 21:55:47 jdbc[13]: 
/*SQL l:123 #:14*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'CROSS_REFERENCES'};
2020-06-17 21:55:47 jdbc[13]: 
/**/rs44.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs44.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs44.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs44.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs44.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs44.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs44.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs44.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs44.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs44.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs44.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs44.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs44.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs44.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs44.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs44.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs44.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs44.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs44.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs44.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs44.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs44.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs44.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs44.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs44.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs44.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs44.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs44.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs44.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs44.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs44.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs44.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs44.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs44.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs44.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs44.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs44.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs44.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs44.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs44.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs44.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs44.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs44.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs44.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs44.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs44.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs44.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs44.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs44.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs44.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs44.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs44.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs44.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs44.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs44.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs44.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs44.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs44.close();
2020-06-17 21:55:47 jdbc[13]: 
/**/prep33.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep33.setString(2, "DOMAINS");
2020-06-17 21:55:47 jdbc[13]: 
/**/ResultSet rs45 = prep33.executeQuery();
2020-06-17 21:55:47 jdbc[13]: 
/*SQL l:123 #:14*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'DOMAINS'};
2020-06-17 21:55:47 jdbc[13]: 
/**/rs45.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs45.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs45.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs45.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs45.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs45.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs45.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs45.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs45.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs45.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs45.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs45.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs45.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs45.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs45.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs45.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs45.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs45.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs45.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs45.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs45.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs45.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs45.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs45.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs45.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs45.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs45.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs45.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs45.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs45.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs45.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs45.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs45.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs45.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs45.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs45.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs45.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs45.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs45.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs45.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs45.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs45.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs45.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs45.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs45.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs45.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs45.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs45.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs45.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs45.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs45.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs45.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs45.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs45.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs45.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs45.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs45.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs45.close();
2020-06-17 21:55:47 jdbc[13]: 
/**/prep33.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep33.setString(2, "FUNCTION_ALIASES");
2020-06-17 21:55:47 jdbc[13]: 
/**/ResultSet rs46 = prep33.executeQuery();
2020-06-17 21:55:47 jdbc[13]: 
/*SQL l:123 #:12*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'FUNCTION_ALIASES'};
2020-06-17 21:55:47 jdbc[13]: 
/**/rs46.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs46.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs46.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs46.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs46.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs46.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs46.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs46.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs46.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs46.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs46.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs46.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs46.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs46.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs46.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs46.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs46.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs46.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs46.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs46.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs46.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs46.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs46.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs46.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs46.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs46.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs46.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs46.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs46.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs46.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs46.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs46.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs46.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs46.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs46.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs46.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs46.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs46.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs46.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs46.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs46.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs46.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs46.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs46.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs46.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs46.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs46.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs46.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs46.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs46.close();
2020-06-17 21:55:47 jdbc[13]: 
/**/prep33.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep33.setString(2, "FUNCTION_COLUMNS");
2020-06-17 21:55:47 jdbc[13]: 
/**/ResultSet rs47 = prep33.executeQuery();
2020-06-17 21:55:47 jdbc[13]: 
/*SQL l:123 #:17 t:7*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'FUNCTION_COLUMNS'};
2020-06-17 21:55:47 jdbc[13]: 
/**/rs47.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs47.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs47.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs47.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs47.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs47.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs47.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs47.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs47.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs47.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs47.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs47.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs47.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs47.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs47.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs47.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs47.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs47.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs47.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs47.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs47.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs47.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs47.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs47.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs47.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs47.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs47.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs47.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs47.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs47.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs47.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs47.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs47.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs47.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs47.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs47.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs47.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs47.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs47.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs47.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs47.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs47.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs47.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs47.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs47.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs47.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs47.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs47.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs47.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs47.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs47.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs47.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs47.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs47.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs47.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs47.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs47.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs47.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs47.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs47.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs47.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs47.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs47.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs47.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs47.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs47.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs47.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs47.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs47.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs47.close();
2020-06-17 21:55:47 jdbc[13]: 
/**/prep33.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep33.setString(2, "HELP");
2020-06-17 21:55:47 jdbc[13]: 
/**/ResultSet rs48 = prep33.executeQuery();
2020-06-17 21:55:47 jdbc[13]: 
/*SQL l:123 #:5*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'HELP'};
2020-06-17 21:55:47 jdbc[13]: 
/**/rs48.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs48.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs48.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs48.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs48.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs48.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs48.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs48.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs48.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs48.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs48.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs48.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs48.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs48.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs48.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs48.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs48.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs48.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs48.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs48.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs48.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs48.close();
2020-06-17 21:55:47 jdbc[13]: 
/**/prep33.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep33.setString(2, "INDEXES");
2020-06-17 21:55:47 jdbc[13]: 
/**/ResultSet rs49 = prep33.executeQuery();
2020-06-17 21:55:47 jdbc[13]: 
/*SQL l:123 #:22*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'INDEXES'};
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs49.close();
2020-06-17 21:55:47 jdbc[13]: 
/**/prep33.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep33.setString(2, "IN_DOUBT");
2020-06-17 21:55:47 jdbc[13]: 
/**/ResultSet rs50 = prep33.executeQuery();
2020-06-17 21:55:47 jdbc[13]: 
/*SQL l:123 #:2*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'IN_DOUBT'};
2020-06-17 21:55:47 jdbc[13]: 
/**/rs50.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs50.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs50.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs50.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs50.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs50.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs50.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs50.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs50.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs50.close();
2020-06-17 21:55:47 jdbc[13]: 
/**/prep33.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep33.setString(2, "KEY_COLUMN_USAGE");
2020-06-17 21:55:47 jdbc[13]: 
/**/ResultSet rs51 = prep33.executeQuery();
2020-06-17 21:55:47 jdbc[13]: 
/*SQL l:123 #:9*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'KEY_COLUMN_USAGE'};
2020-06-17 21:55:47 jdbc[13]: 
/**/rs51.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs51.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs51.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs51.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs51.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs51.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs51.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs51.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs51.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs51.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs51.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs51.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs51.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs51.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs51.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs51.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs51.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs51.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs51.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs51.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs51.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs51.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs51.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs51.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs51.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs51.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs51.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs51.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs51.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs51.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs51.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs51.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs51.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs51.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs51.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs51.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs51.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs51.close();
2020-06-17 21:55:47 jdbc[13]: 
/**/prep33.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep33.setString(2, "LOCKS");
2020-06-17 21:55:47 jdbc[13]: 
/**/ResultSet rs52 = prep33.executeQuery();
2020-06-17 21:55:47 jdbc[13]: 
/*SQL l:123 #:4*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'LOCKS'};
2020-06-17 21:55:47 jdbc[13]: 
/**/rs52.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs52.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs52.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs52.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs52.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs52.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs52.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs52.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs52.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs52.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs52.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs52.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs52.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs52.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs52.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs52.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs52.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs52.close();
2020-06-17 21:55:47 jdbc[13]: 
/**/prep33.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep33.setString(2, "QUERY_STATISTICS");
2020-06-17 21:55:47 jdbc[13]: 
/**/ResultSet rs53 = prep33.executeQuery();
2020-06-17 21:55:47 jdbc[13]: 
/*SQL l:123 #:12*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'QUERY_STATISTICS'};
2020-06-17 21:55:47 jdbc[13]: 
/**/rs53.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs53.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs53.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs53.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs53.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs53.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs53.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs53.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs53.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs53.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs53.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs53.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs53.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs53.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs53.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs53.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs53.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs53.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs53.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs53.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs53.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs53.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs53.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs53.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs53.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs53.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs53.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs53.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs53.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs53.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs53.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs53.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs53.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs53.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs53.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs53.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs53.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs53.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs53.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs53.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs53.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs53.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs53.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs53.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs53.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs53.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs53.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs53.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs53.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs53.close();
2020-06-17 21:55:47 jdbc[13]: 
/**/prep33.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep33.setString(2, "REFERENTIAL_CONSTRAINTS");
2020-06-17 21:55:47 jdbc[13]: 
/**/ResultSet rs54 = prep33.executeQuery();
2020-06-17 21:55:47 jdbc[13]: 
/*SQL l:123 #:9*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'REFERENTIAL_CONSTRAINTS'};
2020-06-17 21:55:47 jdbc[13]: 
/**/rs54.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs54.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs54.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs54.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs54.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs54.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs54.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs54.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs54.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs54.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs54.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs54.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs54.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs54.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs54.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs54.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs54.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs54.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs54.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs54.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs54.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs54.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs54.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs54.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs54.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs54.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs54.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs54.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs54.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs54.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs54.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs54.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs54.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs54.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs54.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs54.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs54.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs54.close();
2020-06-17 21:55:47 jdbc[13]: 
/**/prep33.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep33.setString(2, "RIGHTS");
2020-06-17 21:55:47 jdbc[13]: 
/**/ResultSet rs55 = prep33.executeQuery();
2020-06-17 21:55:47 jdbc[13]: 
/*SQL l:123 #:7*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'RIGHTS'};
2020-06-17 21:55:47 jdbc[13]: 
/**/rs55.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs55.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs55.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs55.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs55.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs55.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs55.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs55.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs55.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs55.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs55.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs55.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs55.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs55.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs55.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs55.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs55.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs55.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs55.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs55.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs55.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs55.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs55.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs55.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs55.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs55.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs55.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs55.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs55.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs55.close();
2020-06-17 21:55:47 jdbc[13]: 
/**/prep33.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep33.setString(2, "ROLES");
2020-06-17 21:55:47 jdbc[13]: 
/**/ResultSet rs56 = prep33.executeQuery();
2020-06-17 21:55:47 jdbc[13]: 
/*SQL l:123 #:3*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'ROLES'};
2020-06-17 21:55:47 jdbc[13]: 
/**/rs56.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs56.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs56.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs56.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs56.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs56.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs56.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs56.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs56.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs56.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs56.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs56.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs56.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs56.close();
2020-06-17 21:55:47 jdbc[13]: 
/**/prep33.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep33.setString(2, "SCHEMATA");
2020-06-17 21:55:47 jdbc[13]: 
/**/ResultSet rs57 = prep33.executeQuery();
2020-06-17 21:55:47 jdbc[13]: 
/*SQL l:123 #:8*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'SCHEMATA'};
2020-06-17 21:55:47 jdbc[13]: 
/**/rs57.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs57.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs57.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs57.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs57.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs57.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs57.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs57.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs57.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs57.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs57.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs57.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs57.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs57.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs57.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs57.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs57.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs57.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs57.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs57.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs57.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs57.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs57.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs57.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs57.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs57.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs57.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs57.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs57.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs57.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs57.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs57.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs57.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs57.close();
2020-06-17 21:55:47 jdbc[13]: 
/**/prep33.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep33.setString(2, "SEQUENCES");
2020-06-17 21:55:47 jdbc[13]: 
/**/ResultSet rs58 = prep33.executeQuery();
2020-06-17 21:55:47 jdbc[13]: 
/*SQL l:123 #:12*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'SEQUENCES'};
2020-06-17 21:55:47 jdbc[13]: 
/**/rs58.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs58.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs58.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs58.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs58.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs58.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs58.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs58.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs58.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs58.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs58.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs58.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs58.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs58.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs58.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs58.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs58.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs58.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs58.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs58.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs58.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs58.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs58.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs58.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs58.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs58.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs58.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs58.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs58.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs58.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs58.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs58.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs58.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs58.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs58.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs58.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs58.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs58.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs58.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs58.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs58.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs58.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs58.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs58.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs58.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs58.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs58.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs58.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs58.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs58.close();
2020-06-17 21:55:47 jdbc[13]: 
/**/prep33.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep33.setString(2, "SESSIONS");
2020-06-17 21:55:47 jdbc[13]: 
/**/ResultSet rs59 = prep33.executeQuery();
2020-06-17 21:55:47 jdbc[13]: 
/*SQL l:123 #:12*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'SESSIONS'};
2020-06-17 21:55:47 jdbc[13]: 
/**/rs59.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs59.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs59.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs59.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs59.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs59.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs59.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs59.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs59.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs59.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs59.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs59.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs59.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs59.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs59.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs59.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs59.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs59.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs59.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs59.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs59.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs59.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs59.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs59.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs59.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs59.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs59.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs59.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs59.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs59.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs59.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs59.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs59.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs59.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs59.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs59.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs59.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs59.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs59.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs59.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs59.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs59.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs59.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs59.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs59.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs59.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs59.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs59.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs59.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs59.close();
2020-06-17 21:55:47 jdbc[13]: 
/**/prep33.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep33.setString(2, "SESSION_STATE");
2020-06-17 21:55:47 jdbc[13]: 
/**/ResultSet rs60 = prep33.executeQuery();
2020-06-17 21:55:47 jdbc[13]: 
/*SQL l:123 #:2*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'SESSION_STATE'};
2020-06-17 21:55:47 jdbc[13]: 
/**/rs60.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs60.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs60.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs60.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs60.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs60.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs60.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs60.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs60.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs60.close();
2020-06-17 21:55:47 jdbc[13]: 
/**/prep33.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep33.setString(2, "SETTINGS");
2020-06-17 21:55:47 jdbc[13]: 
/**/ResultSet rs61 = prep33.executeQuery();
2020-06-17 21:55:47 jdbc[13]: 
/*SQL l:123 #:2*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'SETTINGS'};
2020-06-17 21:55:47 jdbc[13]: 
/**/rs61.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs61.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs61.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs61.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs61.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs61.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs61.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs61.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs61.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs61.close();
2020-06-17 21:55:47 jdbc[13]: 
/**/prep33.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep33.setString(2, "SYNONYMS");
2020-06-17 21:55:47 jdbc[13]: 
/**/ResultSet rs62 = prep33.executeQuery();
2020-06-17 21:55:47 jdbc[13]: 
/*SQL l:123 #:9*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'SYNONYMS'};
2020-06-17 21:55:47 jdbc[13]: 
/**/rs62.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs62.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs62.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs62.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs62.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs62.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs62.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs62.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs62.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs62.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs62.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs62.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs62.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs62.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs62.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs62.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs62.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs62.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs62.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs62.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs62.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs62.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs62.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs62.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs62.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs62.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs62.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs62.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs62.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs62.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs62.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs62.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs62.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs62.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs62.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs62.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs62.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs62.close();
2020-06-17 21:55:47 jdbc[13]: 
/**/prep33.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep33.setString(2, "TABLES");
2020-06-17 21:55:47 jdbc[13]: 
/**/ResultSet rs63 = prep33.executeQuery();
2020-06-17 21:55:47 jdbc[13]: 
/*SQL l:123 #:12*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'TABLES'};
2020-06-17 21:55:47 jdbc[13]: 
/**/rs63.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs63.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs63.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs63.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs63.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs63.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs63.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs63.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs63.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs63.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs63.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs63.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs63.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs63.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs63.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs63.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs63.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs63.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs63.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs63.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs63.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs63.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs63.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs63.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs63.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs63.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs63.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs63.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs63.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs63.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs63.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs63.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs63.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs63.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs63.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs63.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs63.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs63.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs63.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs63.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs63.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs63.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs63.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs63.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs63.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs63.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs63.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs63.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs63.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs63.close();
2020-06-17 21:55:47 jdbc[13]: 
/**/prep33.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep33.setString(2, "TABLE_CONSTRAINTS");
2020-06-17 21:55:47 jdbc[13]: 
/**/ResultSet rs64 = prep33.executeQuery();
2020-06-17 21:55:47 jdbc[13]: 
/*SQL l:123 #:9*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'TABLE_CONSTRAINTS'};
2020-06-17 21:55:47 jdbc[13]: 
/**/rs64.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs64.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs64.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs64.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs64.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs64.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs64.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs64.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs64.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs64.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs64.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs64.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs64.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs64.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs64.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs64.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs64.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs64.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs64.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs64.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs64.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs64.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs64.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs64.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs64.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs64.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs64.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs64.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs64.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs64.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs64.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs64.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs64.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs64.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs64.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs64.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs64.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs64.close();
2020-06-17 21:55:47 jdbc[13]: 
/**/prep33.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep33.setString(2, "TABLE_PRIVILEGES");
2020-06-17 21:55:47 jdbc[13]: 
/**/ResultSet rs65 = prep33.executeQuery();
2020-06-17 21:55:47 jdbc[13]: 
/*SQL l:123 #:7*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'TABLE_PRIVILEGES'};
2020-06-17 21:55:47 jdbc[13]: 
/**/rs65.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs65.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs65.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs65.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs65.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs65.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs65.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs65.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs65.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs65.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs65.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs65.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs65.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs65.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs65.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs65.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs65.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs65.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs65.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs65.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs65.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs65.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs65.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs65.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs65.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs65.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs65.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs65.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs65.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs65.close();
2020-06-17 21:55:47 jdbc[13]: 
/**/prep33.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep33.setString(2, "TABLE_TYPES");
2020-06-17 21:55:47 jdbc[13]: 
/**/ResultSet rs66 = prep33.executeQuery();
2020-06-17 21:55:47 jdbc[13]: 
/*SQL l:123 #:1*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'TABLE_TYPES'};
2020-06-17 21:55:47 jdbc[13]: 
/**/rs66.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs66.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs66.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs66.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs66.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs66.close();
2020-06-17 21:55:47 jdbc[13]: 
/**/prep33.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep33.setString(2, "TRIGGERS");
2020-06-17 21:55:47 jdbc[13]: 
/**/ResultSet rs67 = prep33.executeQuery();
2020-06-17 21:55:47 jdbc[13]: 
/*SQL l:123 #:14*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'TRIGGERS'};
2020-06-17 21:55:47 jdbc[13]: 
/**/rs67.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs67.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs67.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs67.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs67.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs67.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs67.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs67.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs67.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs67.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs67.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs67.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs67.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs67.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs67.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs67.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs67.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs67.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs67.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs67.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs67.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs67.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs67.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs67.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs67.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs67.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs67.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs67.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs67.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs67.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs67.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs67.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs67.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs67.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs67.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs67.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs67.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs67.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs67.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs67.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs67.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs67.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs67.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs67.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs67.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs67.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs67.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs67.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs67.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs67.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs67.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs67.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs67.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs67.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs67.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs67.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs67.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs67.close();
2020-06-17 21:55:47 jdbc[13]: 
/**/prep33.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep33.setString(2, "TYPE_INFO");
2020-06-17 21:55:47 jdbc[13]: 
/**/ResultSet rs68 = prep33.executeQuery();
2020-06-17 21:55:47 jdbc[13]: 
/*SQL l:123 #:14*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'TYPE_INFO'};
2020-06-17 21:55:47 jdbc[13]: 
/**/rs68.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs68.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs68.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs68.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs68.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs68.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs68.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs68.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs68.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs68.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs68.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs68.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs68.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs68.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs68.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs68.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs68.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs68.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs68.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs68.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs68.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs68.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs68.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs68.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs68.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs68.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs68.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs68.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs68.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs68.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs68.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs68.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs68.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs68.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs68.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs68.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs68.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs68.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs68.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs68.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs68.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs68.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs68.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs68.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs68.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs68.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs68.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs68.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs68.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs68.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs68.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs68.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs68.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs68.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs68.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs68.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs68.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs68.close();
2020-06-17 21:55:47 jdbc[13]: 
/**/prep33.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep33.setString(2, "USERS");
2020-06-17 21:55:47 jdbc[13]: 
/**/ResultSet rs69 = prep33.executeQuery();
2020-06-17 21:55:47 jdbc[13]: 
/*SQL l:123 #:4*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'USERS'};
2020-06-17 21:55:47 jdbc[13]: 
/**/rs69.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs69.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs69.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs69.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs69.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs69.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs69.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs69.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs69.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs69.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs69.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs69.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs69.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs69.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs69.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs69.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs69.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs69.close();
2020-06-17 21:55:47 jdbc[13]: 
/**/prep33.setString(1, "INFORMATION_SCHEMA");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep33.setString(2, "VIEWS");
2020-06-17 21:55:47 jdbc[13]: 
/**/ResultSet rs70 = prep33.executeQuery();
2020-06-17 21:55:47 jdbc[13]: 
/*SQL l:123 #:9*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'VIEWS'};
2020-06-17 21:55:47 jdbc[13]: 
/**/rs70.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs70.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs70.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs70.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs70.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs70.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs70.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs70.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs70.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs70.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs70.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs70.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs70.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs70.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs70.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs70.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs70.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs70.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs70.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs70.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs70.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs70.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs70.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs70.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs70.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs70.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs70.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs70.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs70.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs70.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs70.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs70.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs70.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs70.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs70.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs70.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs70.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs70.close();
2020-06-17 21:55:47 jdbc[13]: 
/**/prep33.close();
2020-06-17 21:55:47 jdbc[13]: 
/**/dbMeta4.getProcedures(null, "INFORMATION_SCHEMA", null);
2020-06-17 21:55:47 jdbc[13]: 
/**/PreparedStatement prep34 = conn10.prepareStatement("SELECT ALIAS_CATALOG PROCEDURE_CAT, ALIAS_SCHEMA PROCEDURE_SCHEM, ALIAS_NAME PROCEDURE_NAME, COLUMN_COUNT NUM_INPUT_PARAMS, ZERO() NUM_OUTPUT_PARAMS, ZERO() NUM_RESULT_SETS, REMARKS, RETURNS_RESULT PROCEDURE_TYPE, ALIAS_NAME SPECIFIC_NAME FROM INFORMATION_SCHEMA.FUNCTION_ALIASES WHERE ALIAS_CATALOG LIKE ? ESCAPE ? AND ALIAS_SCHEMA LIKE ? ESCAPE ? AND ALIAS_NAME LIKE ? ESCAPE ? ORDER BY PROCEDURE_SCHEM, PROCEDURE_NAME, NUM_INPUT_PARAMS");
2020-06-17 21:55:47 jdbc[13]: Plan       : calculate cost for plan [FUNCTION_ALIASES:-13:org.h2.table.MetaTable@4d16d6e2]
2020-06-17 21:55:47 jdbc[13]: Plan       :   for table filter FUNCTION_ALIASES:-13:org.h2.table.MetaTable@4d16d6e2
2020-06-17 21:55:47 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:55:47 jdbc[13]: Plan       :   best plan item cost 10,000 index meta
2020-06-17 21:55:47 jdbc[13]: Plan       : plan cost 10,001
2020-06-17 21:55:47 jdbc[13]: 
/**/prep34.setString(1, "%");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep34.setString(2, "\\");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep34.setString(3, "INFORMATION_SCHEMA");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep34.setString(4, "\\");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep34.setString(5, "%");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep34.setString(6, "\\");
2020-06-17 21:55:47 jdbc[13]: 
/**/ResultSet rs71 = prep34.executeQuery();
2020-06-17 21:55:47 jdbc[13]: Plan       : calculate cost for plan [FUNCTION_ALIASES:-13:org.h2.table.MetaTable@4d16d6e2]
2020-06-17 21:55:47 jdbc[13]: Plan       :   for table filter FUNCTION_ALIASES:-13:org.h2.table.MetaTable@4d16d6e2
2020-06-17 21:55:47 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:55:47 jdbc[13]: Plan       :   best plan item cost 9,800 index meta
2020-06-17 21:55:47 jdbc[13]: Plan       : plan cost 9,801
2020-06-17 21:55:47 jdbc[13]: 
/*SQL l:438*/SELECT ALIAS_CATALOG PROCEDURE_CAT, ALIAS_SCHEMA PROCEDURE_SCHEM, ALIAS_NAME PROCEDURE_NAME, COLUMN_COUNT NUM_INPUT_PARAMS, ZERO() NUM_OUTPUT_PARAMS, ZERO() NUM_RESULT_SETS, REMARKS, RETURNS_RESULT PROCEDURE_TYPE, ALIAS_NAME SPECIFIC_NAME FROM INFORMATION_SCHEMA.FUNCTION_ALIASES WHERE ALIAS_CATALOG LIKE ? ESCAPE ? AND ALIAS_SCHEMA LIKE ? ESCAPE ? AND ALIAS_NAME LIKE ? ESCAPE ? ORDER BY PROCEDURE_SCHEM, PROCEDURE_NAME, NUM_INPUT_PARAMS {1: '%', 2: '\\', 3: 'INFORMATION_SCHEMA', 4: '\\', 5: '%', 6: '\\'};
2020-06-17 21:55:47 jdbc[13]: 
/**/rs71.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs71.close();
2020-06-17 21:55:47 jdbc[13]: 
/**/prep34.close();
2020-06-17 21:55:47 jdbc[13]: 
/**/dbMeta4.getTables(null, "PUBLIC", null, new String[]{"TABLE", "SYSTEM TABLE", "VIEW", "SYSTEM VIEW", "TABLE LINK", "SYNONYM", "EXTERNAL"});
2020-06-17 21:55:47 jdbc[13]: 
/**/PreparedStatement prep35 = conn10.prepareStatement("SELECT TABLE_CAT, TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_CAT, TYPE_SCHEM, TYPE_NAME, SELF_REFERENCING_COL_NAME, REF_GENERATION, SQL FROM (SELECT SYNONYM_CATALOG TABLE_CAT, SYNONYM_SCHEMA TABLE_SCHEM, SYNONYM_NAME as TABLE_NAME, TYPE_NAME AS TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME AS TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, NULL AS SQL FROM INFORMATION_SCHEMA.SYNONYMS WHERE SYNONYM_CATALOG LIKE ?1 ESCAPE ?4 AND SYNONYM_SCHEMA LIKE ?2 ESCAPE ?4 AND SYNONYM_NAME LIKE ?3 ESCAPE ?4 UNION SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5, ?6, ?7, ?8, ?9, ?10, ?11)) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep35.setString(1, "%");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep35.setString(2, "PUBLIC");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep35.setString(3, "%");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep35.setString(4, "\\");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep35.setString(5, "TABLE");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep35.setString(6, "SYSTEM TABLE");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep35.setString(7, "VIEW");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep35.setString(8, "SYSTEM VIEW");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep35.setString(9, "TABLE LINK");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep35.setString(10, "SYNONYM");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep35.setString(11, "EXTERNAL");
2020-06-17 21:55:47 jdbc[13]: 
/**/ResultSet rs72 = prep35.executeQuery();
2020-06-17 21:55:47 jdbc[13]: Plan       : calculate cost for plan [_2]
2020-06-17 21:55:47 jdbc[13]: Plan       :   for table filter _2
2020-06-17 21:55:47 jdbc[13]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@27535fa]
2020-06-17 21:55:47 jdbc[13]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@27535fa
2020-06-17 21:55:47 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:55:47 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:55:47 jdbc[13]: Plan       :   best plan item cost 4,022 index meta
2020-06-17 21:55:47 jdbc[13]: Plan       : plan cost 4,023
2020-06-17 21:55:47 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@6b6eed0d]
2020-06-17 21:55:47 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@6b6eed0d
2020-06-17 21:55:47 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:55:47 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:55:47 jdbc[13]: Plan       :   best plan item cost 3,981.78 index meta
2020-06-17 21:55:47 jdbc[13]: Plan       : plan cost 3,982.78
2020-06-17 21:55:47 jdbc[13]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@27535fa]
2020-06-17 21:55:47 jdbc[13]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@27535fa
2020-06-17 21:55:47 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:55:47 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:55:47 jdbc[13]: Plan       :   best plan item cost 4,022 index meta
2020-06-17 21:55:47 jdbc[13]: Plan       : plan cost 4,023
2020-06-17 21:55:47 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@6b6eed0d]
2020-06-17 21:55:47 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@6b6eed0d
2020-06-17 21:55:47 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:55:47 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:55:47 jdbc[13]: Plan       :   best plan item cost 3,981.78 index meta
2020-06-17 21:55:47 jdbc[13]: Plan       : plan cost 3,982.78
2020-06-17 21:55:47 jdbc[13]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@27535fa]
2020-06-17 21:55:47 jdbc[13]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@27535fa
2020-06-17 21:55:47 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:55:47 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:55:47 jdbc[13]: Plan       :   best plan item cost 4,022 index meta
2020-06-17 21:55:47 jdbc[13]: Plan       : plan cost 4,023
2020-06-17 21:55:47 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@6b6eed0d]
2020-06-17 21:55:47 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@6b6eed0d
2020-06-17 21:55:47 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:55:47 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 21:55:47 jdbc[13]: Plan       :   best plan item cost 3,981.78 index meta
2020-06-17 21:55:47 jdbc[13]: Plan       : plan cost 3,982.78
2020-06-17 21:55:47 jdbc[13]: Plan       :   best plan item cost 8,005.78 index (SELECT
    SYNONYM_CATALOG AS TABLE_CAT,
    SYNONYM_SCHEMA AS TABLE_SCHEM,
    SYNONYM_NAME AS TABLE_NAME,
    TYPE_NAME AS TABLE_TYPE,
    REMARKS,
    TYPE_NAME AS TYPE_CAT,
    TYPE_NAME AS TYPE_SCHEM,
    TYPE_NAME AS TYPE_NAME,
    TYPE_NAME AS SELF_REFERENCING_COL_NAME,
    TYPE_NAME AS REF_GENERATION,
    NULL AS SQL
FROM INFORMATION_SCHEMA.SYNONYMS
    /* meta */
WHERE (SYNONYM_NAME LIKE ?3 ESCAPE ?4)
    AND ((SYNONYM_CATALOG LIKE ?1 ESCAPE ?4)
    AND (SYNONYM_SCHEMA LIKE ?2 ESCAPE ?4)))
UNION
(SELECT
    TABLE_CATALOG AS TABLE_CAT,
    TABLE_SCHEMA AS TABLE_SCHEM,
    TABLE_NAME,
    TABLE_TYPE,
    REMARKS,
    TYPE_NAME AS TYPE_CAT,
    TYPE_NAME AS TYPE_SCHEM,
    TYPE_NAME,
    TYPE_NAME AS SELF_REFERENCING_COL_NAME,
    TYPE_NAME AS REF_GENERATION,
    SQL
FROM INFORMATION_SCHEMA.TABLES
    /* meta */
WHERE (TABLE_TYPE IN(?5, ?6, ?7, ?8, ?9, ?10, ?11))
    AND ((TABLE_NAME LIKE ?3 ESCAPE ?4)
    AND ((TABLE_CATALOG LIKE ?1 ESCAPE ?4)
    AND (TABLE_SCHEMA LIKE ?2 ESCAPE ?4))))
2020-06-17 21:55:47 jdbc[13]: Plan       : plan cost 8,006.78
2020-06-17 21:55:47 jdbc[13]: 
/*SQL l:1007 #:2*/SELECT TABLE_CAT, TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_CAT, TYPE_SCHEM, TYPE_NAME, SELF_REFERENCING_COL_NAME, REF_GENERATION, SQL FROM (SELECT SYNONYM_CATALOG TABLE_CAT, SYNONYM_SCHEMA TABLE_SCHEM, SYNONYM_NAME as TABLE_NAME, TYPE_NAME AS TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME AS TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, NULL AS SQL FROM INFORMATION_SCHEMA.SYNONYMS WHERE SYNONYM_CATALOG LIKE ?1 ESCAPE ?4 AND SYNONYM_SCHEMA LIKE ?2 ESCAPE ?4 AND SYNONYM_NAME LIKE ?3 ESCAPE ?4 UNION SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5, ?6, ?7, ?8, ?9, ?10, ?11)) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME {1: '%', 2: 'PUBLIC', 3: '%', 4: '\\', 5: 'TABLE', 6: 'SYSTEM TABLE', 7: 'VIEW', 8: 'SYSTEM VIEW', 9: 'TABLE LINK', 10: 'SYNONYM', 11: 'EXTERNAL'};
2020-06-17 21:55:47 jdbc[13]: 
/**/rs72.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs72.getString("TABLE_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs72.getString("TABLE_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs72.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs72.getString("TABLE_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs72.getString("TABLE_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs72.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs72.close();
2020-06-17 21:55:47 jdbc[13]: 
/**/prep35.close();
2020-06-17 21:55:47 jdbc[13]: 
/**/dbMeta4.getConnection();
2020-06-17 21:55:47 jdbc[13]: 
/**/PreparedStatement prep36 = conn10.prepareStatement("SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ?");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep36.setString(1, "PUBLIC");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep36.setString(2, "CUSTOMER_TBL");
2020-06-17 21:55:47 jdbc[13]: 
/**/ResultSet rs73 = prep36.executeQuery();
2020-06-17 21:55:47 jdbc[13]: 
/*SQL l:123 #:4*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'PUBLIC', 2: 'CUSTOMER_TBL'};
2020-06-17 21:55:47 jdbc[13]: 
/**/rs73.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs73.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs73.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs73.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs73.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs73.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs73.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs73.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs73.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs73.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs73.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs73.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs73.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs73.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs73.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs73.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs73.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs73.close();
2020-06-17 21:55:47 jdbc[13]: 
/**/prep36.setString(1, "PUBLIC");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep36.setString(2, "LOG_TBL");
2020-06-17 21:55:47 jdbc[13]: 
/**/ResultSet rs74 = prep36.executeQuery();
2020-06-17 21:55:47 jdbc[13]: 
/*SQL l:123 #:9*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'PUBLIC', 2: 'LOG_TBL'};
2020-06-17 21:55:47 jdbc[13]: 
/**/rs74.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs74.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs74.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs74.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs74.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs74.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs74.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs74.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs74.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs74.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs74.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs74.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs74.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs74.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs74.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs74.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs74.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs74.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs74.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs74.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs74.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs74.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs74.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs74.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs74.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs74.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs74.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs74.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs74.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs74.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs74.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs74.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs74.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs74.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs74.getInt("ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs74.getString("COLUMN_TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs74.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs74.close();
2020-06-17 21:55:47 jdbc[13]: 
/**/prep36.close();
2020-06-17 21:55:47 jdbc[13]: 
/**/dbMeta4.getProcedures(null, "PUBLIC", null);
2020-06-17 21:55:47 jdbc[13]: 
/**/PreparedStatement prep37 = conn10.prepareStatement("SELECT ALIAS_CATALOG PROCEDURE_CAT, ALIAS_SCHEMA PROCEDURE_SCHEM, ALIAS_NAME PROCEDURE_NAME, COLUMN_COUNT NUM_INPUT_PARAMS, ZERO() NUM_OUTPUT_PARAMS, ZERO() NUM_RESULT_SETS, REMARKS, RETURNS_RESULT PROCEDURE_TYPE, ALIAS_NAME SPECIFIC_NAME FROM INFORMATION_SCHEMA.FUNCTION_ALIASES WHERE ALIAS_CATALOG LIKE ? ESCAPE ? AND ALIAS_SCHEMA LIKE ? ESCAPE ? AND ALIAS_NAME LIKE ? ESCAPE ? ORDER BY PROCEDURE_SCHEM, PROCEDURE_NAME, NUM_INPUT_PARAMS");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep37.setString(1, "%");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep37.setString(2, "\\");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep37.setString(3, "PUBLIC");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep37.setString(4, "\\");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep37.setString(5, "%");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep37.setString(6, "\\");
2020-06-17 21:55:47 jdbc[13]: 
/**/ResultSet rs75 = prep37.executeQuery();
2020-06-17 21:55:47 jdbc[13]: Plan       : calculate cost for plan [FUNCTION_ALIASES:-13:org.h2.table.MetaTable@4d16d6e2]
2020-06-17 21:55:47 jdbc[13]: Plan       :   for table filter FUNCTION_ALIASES:-13:org.h2.table.MetaTable@4d16d6e2
2020-06-17 21:55:47 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:55:47 jdbc[13]: Plan       :   best plan item cost 9,900 index meta
2020-06-17 21:55:47 jdbc[13]: Plan       : plan cost 9,901
2020-06-17 21:55:47 jdbc[13]: 
/*SQL l:438*/SELECT ALIAS_CATALOG PROCEDURE_CAT, ALIAS_SCHEMA PROCEDURE_SCHEM, ALIAS_NAME PROCEDURE_NAME, COLUMN_COUNT NUM_INPUT_PARAMS, ZERO() NUM_OUTPUT_PARAMS, ZERO() NUM_RESULT_SETS, REMARKS, RETURNS_RESULT PROCEDURE_TYPE, ALIAS_NAME SPECIFIC_NAME FROM INFORMATION_SCHEMA.FUNCTION_ALIASES WHERE ALIAS_CATALOG LIKE ? ESCAPE ? AND ALIAS_SCHEMA LIKE ? ESCAPE ? AND ALIAS_NAME LIKE ? ESCAPE ? ORDER BY PROCEDURE_SCHEM, PROCEDURE_NAME, NUM_INPUT_PARAMS {1: '%', 2: '\\', 3: 'PUBLIC', 4: '\\', 5: '%', 6: '\\'};
2020-06-17 21:55:47 jdbc[13]: 
/**/rs75.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs75.close();
2020-06-17 21:55:47 jdbc[13]: 
/**/prep37.close();
2020-06-17 21:55:47 jdbc[13]: 
/**/dbMeta3.getIndexInfo(null, "PUBLIC", "CUSTOMER_TBL", false, true);
2020-06-17 21:55:47 jdbc[13]: 
/**/PreparedStatement prep38 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, NON_UNIQUE, TABLE_CATALOG INDEX_QUALIFIER, INDEX_NAME, INDEX_TYPE TYPE, ORDINAL_POSITION, COLUMN_NAME, ASC_OR_DESC, CARDINALITY, PAGES, FILTER_CONDITION, SORT_TYPE FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND (TRUE) AND TABLE_NAME = ? ORDER BY NON_UNIQUE, TYPE, TABLE_SCHEM, INDEX_NAME, ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@39ff129a]
2020-06-17 21:55:47 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@39ff129a
2020-06-17 21:55:47 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:55:47 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-17 21:55:47 jdbc[13]: Plan       :   best plan item cost 324.72 index meta
2020-06-17 21:55:47 jdbc[13]: Plan       : plan cost 325.72
2020-06-17 21:55:47 jdbc[13]: 
/**/prep38.setString(1, "%");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep38.setString(2, "\\");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep38.setString(3, "PUBLIC");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep38.setString(4, "\\");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep38.setString(5, "CUSTOMER_TBL");
2020-06-17 21:55:47 jdbc[13]: 
/**/ResultSet rs76 = prep38.executeQuery();
2020-06-17 21:55:47 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@39ff129a]
2020-06-17 21:55:47 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@39ff129a
2020-06-17 21:55:47 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:55:47 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-17 21:55:47 jdbc[13]: Plan       :   best plan item cost 321.44 index meta
2020-06-17 21:55:47 jdbc[13]: Plan       : plan cost 322.44
2020-06-17 21:55:47 jdbc[13]: 
/*SQL l:433 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, NON_UNIQUE, TABLE_CATALOG INDEX_QUALIFIER, INDEX_NAME, INDEX_TYPE TYPE, ORDINAL_POSITION, COLUMN_NAME, ASC_OR_DESC, CARDINALITY, PAGES, FILTER_CONDITION, SORT_TYPE FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND (TRUE) AND TABLE_NAME = ? ORDER BY NON_UNIQUE, TYPE, TABLE_SCHEM, INDEX_NAME, ORDINAL_POSITION {1: '%', 2: '\\', 3: 'PUBLIC', 4: '\\', 5: 'CUSTOMER_TBL'};
2020-06-17 21:55:47 jdbc[13]: 
/**/rs76.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs76.getString("INDEX_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs76.getInt("TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs76.getBoolean("NON_UNIQUE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs76.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs76.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs76.close();
2020-06-17 21:55:47 jdbc[13]: 
/**/prep38.close();
2020-06-17 21:55:47 jdbc[13]: 
/**/dbMeta3.getIndexInfo(null, "PUBLIC", "LOG_TBL", false, true);
2020-06-17 21:55:47 jdbc[13]: 
/**/PreparedStatement prep39 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, NON_UNIQUE, TABLE_CATALOG INDEX_QUALIFIER, INDEX_NAME, INDEX_TYPE TYPE, ORDINAL_POSITION, COLUMN_NAME, ASC_OR_DESC, CARDINALITY, PAGES, FILTER_CONDITION, SORT_TYPE FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND (TRUE) AND TABLE_NAME = ? ORDER BY NON_UNIQUE, TYPE, TABLE_SCHEM, INDEX_NAME, ORDINAL_POSITION");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep39.setString(1, "%");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep39.setString(2, "\\");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep39.setString(3, "PUBLIC");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep39.setString(4, "\\");
2020-06-17 21:55:47 jdbc[13]: 
/**/prep39.setString(5, "LOG_TBL");
2020-06-17 21:55:47 jdbc[13]: 
/**/ResultSet rs77 = prep39.executeQuery();
2020-06-17 21:55:47 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@39ff129a]
2020-06-17 21:55:47 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@39ff129a
2020-06-17 21:55:47 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:55:47 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-17 21:55:47 jdbc[13]: Plan       :   best plan item cost 321.44 index meta
2020-06-17 21:55:47 jdbc[13]: Plan       : plan cost 322.44
2020-06-17 21:55:47 jdbc[13]: 
/*SQL l:433 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, NON_UNIQUE, TABLE_CATALOG INDEX_QUALIFIER, INDEX_NAME, INDEX_TYPE TYPE, ORDINAL_POSITION, COLUMN_NAME, ASC_OR_DESC, CARDINALITY, PAGES, FILTER_CONDITION, SORT_TYPE FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND (TRUE) AND TABLE_NAME = ? ORDER BY NON_UNIQUE, TYPE, TABLE_SCHEM, INDEX_NAME, ORDINAL_POSITION {1: '%', 2: '\\', 3: 'PUBLIC', 4: '\\', 5: 'LOG_TBL'};
2020-06-17 21:55:47 jdbc[13]: 
/**/rs77.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs77.getString("INDEX_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs77.getInt("TYPE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs77.getBoolean("NON_UNIQUE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs77.getString("COLUMN_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs77.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs77.close();
2020-06-17 21:55:47 jdbc[13]: 
/**/prep39.close();
2020-06-17 21:55:47 jdbc[13]: 
/**/Statement stat3 = conn10.createStatement();
2020-06-17 21:55:47 jdbc[13]: 
/**/ResultSet rs78 = stat3.executeQuery("SELECT * FROM INFORMATION_SCHEMA.SEQUENCES ORDER BY SEQUENCE_NAME");
2020-06-17 21:55:47 jdbc[13]: Plan       : calculate cost for plan [SEQUENCES:-9:org.h2.table.MetaTable@4270d505]
2020-06-17 21:55:47 jdbc[13]: Plan       :   for table filter SEQUENCES:-9:org.h2.table.MetaTable@4270d505
2020-06-17 21:55:47 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:55:47 jdbc[13]: Plan       :   best plan item cost 10,000 index meta
2020-06-17 21:55:47 jdbc[13]: Plan       : plan cost 10,001
2020-06-17 21:55:47 jdbc[13]: 
/*SQL #:2*/SELECT * FROM INFORMATION_SCHEMA.SEQUENCES ORDER BY SEQUENCE_NAME;
2020-06-17 21:55:47 jdbc[13]: 
/**/rs78.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs78.getString("SEQUENCE_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs78.getString("CURRENT_VALUE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs78.getString("INCREMENT");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs78.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs78.getString("SEQUENCE_NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs78.getString("CURRENT_VALUE");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs78.getString("INCREMENT");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs78.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs78.close();
2020-06-17 21:55:47 jdbc[13]: 
/**/ResultSet rs79 = stat3.executeQuery("SELECT * FROM INFORMATION_SCHEMA.USERS ORDER BY NAME");
2020-06-17 21:55:47 jdbc[13]: Plan       : calculate cost for plan [USERS:-10:org.h2.table.MetaTable@6a24adea]
2020-06-17 21:55:47 jdbc[13]: Plan       :   for table filter USERS:-10:org.h2.table.MetaTable@6a24adea
2020-06-17 21:55:47 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:55:47 jdbc[13]: Plan       :   best plan item cost 10,000 index meta
2020-06-17 21:55:47 jdbc[13]: Plan       : plan cost 10,001
2020-06-17 21:55:47 jdbc[13]: 
/*SQL #:1*/SELECT * FROM INFORMATION_SCHEMA.USERS ORDER BY NAME;
2020-06-17 21:55:47 jdbc[13]: 
/**/rs79.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs79.getString("NAME");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs79.getString("ADMIN");
2020-06-17 21:55:47 jdbc[13]: 
/**/rs79.next();
2020-06-17 21:55:47 jdbc[13]: 
/**/rs79.close();
2020-06-17 21:55:47 jdbc[13]: 
/**/stat3.close();
2020-06-17 21:55:47 jdbc[13]: 
/**/dbMeta3.getDatabaseProductName();
2020-06-17 21:55:47 jdbc[13]: 
/**/dbMeta3.getDatabaseProductVersion();
2020-06-17 21:55:51 jdbc[13]: 
/**/Statement stat4 = conn10.createStatement(1004, 1008);
2020-06-17 21:55:51 jdbc[13]: 
/**/stat4.setMaxRows(1000);
2020-06-17 21:55:51 jdbc[13]: 
/**/stat4.execute("SELECT * FROM LOG_TBL");
2020-06-17 21:55:51 jdbc[13]: Plan       : calculate cost for plan [PUBLIC.LOG_TBL]
2020-06-17 21:55:51 jdbc[13]: Plan       :   for table filter PUBLIC.LOG_TBL
2020-06-17 21:55:51 jdbc[13]: Table      :     potential plan item cost 10,360 index PUBLIC.LOG_TBL.tableScan
2020-06-17 21:55:51 jdbc[13]: Table      :     potential plan item cost 10,370 index PUBLIC.PRIMARY_KEY_3
2020-06-17 21:55:51 jdbc[13]: Plan       :   best plan item cost 10,360 index PUBLIC.LOG_TBL.tableScan
2020-06-17 21:55:51 jdbc[13]: Plan       : plan cost 10,361
2020-06-17 21:55:51 jdbc[13]: 
/*SQL #:16*/SELECT * FROM LOG_TBL;
2020-06-17 21:55:51 jdbc[13]: 
/**/ResultSet rs80 = stat4.getResultSet();
2020-06-17 21:55:51 jdbc[13]: 
/**/ResultSetMetaData rsMeta21 = rs80.getMetaData();
2020-06-17 21:55:51 jdbc[13]: 
/**/conn10.getCatalog();
2020-06-17 21:55:51 jdbc[13]: 
/*SQL #:1*/CALL DATABASE();
2020-06-17 21:55:51 jdbc[13]: 
/**/rsMeta21.getColumnCount();
2020-06-17 21:55:51 jdbc[13]: 
/**/rsMeta21.getColumnLabel(1);
2020-06-17 21:55:51 jdbc[13]: 
/**/rsMeta21.getColumnLabel(2);
2020-06-17 21:55:51 jdbc[13]: 
/**/rsMeta21.getColumnLabel(3);
2020-06-17 21:55:51 jdbc[13]: 
/**/rsMeta21.getColumnLabel(4);
2020-06-17 21:55:51 jdbc[13]: 
/**/rsMeta21.getColumnLabel(5);
2020-06-17 21:55:51 jdbc[13]: 
/**/rsMeta21.getColumnLabel(6);
2020-06-17 21:55:51 jdbc[13]: 
/**/rsMeta21.getColumnLabel(7);
2020-06-17 21:55:51 jdbc[13]: 
/**/rsMeta21.getColumnLabel(8);
2020-06-17 21:55:51 jdbc[13]: 
/**/rsMeta21.getColumnLabel(9);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.next();
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(1);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(2);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(3);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(4);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(5);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(6);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(7);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(8);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(9);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.next();
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(1);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(2);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(3);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(4);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(5);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(6);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(7);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(8);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(9);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.next();
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(1);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(2);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(3);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(4);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(5);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(6);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(7);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(8);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(9);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.next();
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(1);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(2);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(3);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(4);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(5);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(6);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(7);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(8);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(9);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.next();
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(1);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(2);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(3);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(4);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(5);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(6);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(7);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(8);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(9);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.next();
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(1);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(2);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(3);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(4);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(5);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(6);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(7);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(8);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(9);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.next();
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(1);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(2);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(3);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(4);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(5);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(6);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(7);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(8);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(9);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.next();
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(1);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(2);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(3);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(4);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(5);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(6);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(7);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(8);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(9);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.next();
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(1);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(2);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(3);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(4);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(5);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(6);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(7);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(8);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(9);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.next();
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(1);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(2);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(3);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(4);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(5);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(6);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(7);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(8);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(9);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.next();
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(1);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(2);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(3);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(4);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(5);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(6);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(7);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(8);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(9);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.next();
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(1);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(2);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(3);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(4);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(5);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(6);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(7);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(8);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(9);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.next();
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(1);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(2);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(3);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(4);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(5);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(6);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(7);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(8);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(9);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.next();
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(1);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(2);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(3);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(4);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(5);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(6);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(7);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(8);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(9);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.next();
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(1);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(2);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(3);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(4);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(5);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(6);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(7);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(8);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(9);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.next();
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(1);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(2);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(3);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(4);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(5);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(6);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(7);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(8);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getString(9);
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.next();
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getConcurrency();
2020-06-17 21:55:51 jdbc[13]: 
/**/DatabaseMetaData dbMeta5 = conn10.getMetaData();
2020-06-17 21:55:51 jdbc[13]: 
/**/dbMeta5.getTables(null, "PUBLIC", "LOG_TBL", new String[]{"TABLE"});
2020-06-17 21:55:51 jdbc[13]: 
/**/PreparedStatement prep40 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME");
2020-06-17 21:55:51 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@6b6eed0d]
2020-06-17 21:55:51 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@6b6eed0d
2020-06-17 21:55:51 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:55:51 jdbc[13]: Table      :     potential plan item cost 4,322 index meta
2020-06-17 21:55:51 jdbc[13]: Plan       :   best plan item cost 4,278.78 index meta
2020-06-17 21:55:51 jdbc[13]: Plan       : plan cost 4,279.78
2020-06-17 21:55:51 jdbc[13]: 
/**/prep40.setString(1, "%");
2020-06-17 21:55:51 jdbc[13]: 
/**/prep40.setString(2, "PUBLIC");
2020-06-17 21:55:51 jdbc[13]: 
/**/prep40.setString(3, "LOG_TBL");
2020-06-17 21:55:51 jdbc[13]: 
/**/prep40.setString(4, "\\");
2020-06-17 21:55:51 jdbc[13]: 
/**/prep40.setString(5, "TABLE");
2020-06-17 21:55:51 jdbc[13]: 
/**/ResultSet rs81 = prep40.executeQuery();
2020-06-17 21:55:51 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@6b6eed0d]
2020-06-17 21:55:51 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@6b6eed0d
2020-06-17 21:55:51 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:55:51 jdbc[13]: Table      :     potential plan item cost 1,324 index meta
2020-06-17 21:55:51 jdbc[13]: Plan       :   best plan item cost 1,271.04 index meta
2020-06-17 21:55:51 jdbc[13]: Plan       : plan cost 1,272.04
2020-06-17 21:55:51 jdbc[13]: 
/*SQL l:414 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME {1: '%', 2: 'PUBLIC', 3: 'LOG_TBL', 4: '\\', 5: 'TABLE'};
2020-06-17 21:55:51 jdbc[13]: 
/**/rs81.next();
2020-06-17 21:55:51 jdbc[13]: 
/**/rs81.getString("SQL");
2020-06-17 21:55:51 jdbc[13]: 
/**/rs81.getString("TABLE_NAME");
2020-06-17 21:55:51 jdbc[13]: 
/**/dbMeta5.getPrimaryKeys(null, "PUBLIC", "LOG_TBL");
2020-06-17 21:55:51 jdbc[13]: 
/**/PreparedStatement prep41 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME");
2020-06-17 21:55:51 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@39ff129a]
2020-06-17 21:55:51 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@39ff129a
2020-06-17 21:55:51 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:55:51 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-17 21:55:51 jdbc[13]: Plan       :   best plan item cost 321.44 index meta
2020-06-17 21:55:51 jdbc[13]: Plan       : plan cost 322.44
2020-06-17 21:55:51 jdbc[13]: 
/**/prep41.setString(1, "%");
2020-06-17 21:55:51 jdbc[13]: 
/**/prep41.setString(2, "\\");
2020-06-17 21:55:51 jdbc[13]: 
/**/prep41.setString(3, "PUBLIC");
2020-06-17 21:55:51 jdbc[13]: 
/**/prep41.setString(4, "\\");
2020-06-17 21:55:51 jdbc[13]: 
/**/prep41.setString(5, "LOG_TBL");
2020-06-17 21:55:51 jdbc[13]: 
/**/ResultSet rs82 = prep41.executeQuery();
2020-06-17 21:55:51 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@39ff129a]
2020-06-17 21:55:51 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@39ff129a
2020-06-17 21:55:51 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:55:51 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-17 21:55:51 jdbc[13]: Plan       :   best plan item cost 318.16 index meta
2020-06-17 21:55:51 jdbc[13]: Plan       : plan cost 319.16
2020-06-17 21:55:51 jdbc[13]: 
/*SQL l:316 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME {1: '%', 2: '\\', 3: 'PUBLIC', 4: '\\', 5: 'LOG_TBL'};
2020-06-17 21:55:51 jdbc[13]: 
/**/rs82.next();
2020-06-17 21:55:51 jdbc[13]: 
/**/rs82.getString("COLUMN_NAME");
2020-06-17 21:55:51 jdbc[13]: 
/**/rs82.next();
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.getType();
2020-06-17 21:55:51 jdbc[13]: 
/**/rs80.close();
2020-06-17 21:55:51 jdbc[13]: 
/**/stat4.close();
2020-06-17 21:55:56 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-17 21:55:56 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 21:55:56 jdbc[3]: 
/**/conn0.setReadOnly(true);
2020-06-17 21:55:56 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:55:56 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:55:56 jdbc[3]: 
/**/PreparedStatement prep42 = conn0.prepareStatement("select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=?");
2020-06-17 21:55:56 jdbc[3]: Plan       : calculate cost for plan [CUSTOMER0_]
2020-06-17 21:55:56 jdbc[3]: Plan       :   for table filter CUSTOMER0_
2020-06-17 21:55:56 jdbc[3]: Table      :     potential plan item cost 10,250 index PUBLIC.CUSTOMER_TBL.tableScan
2020-06-17 21:55:56 jdbc[3]: Table      :     potential plan item cost 230 index PUBLIC.PRIMARY_KEY_B
2020-06-17 21:55:56 jdbc[3]: Plan       :   best plan item cost 227.7 index PUBLIC.PRIMARY_KEY_B
2020-06-17 21:55:56 jdbc[3]: Plan       : plan cost 228.7
2020-06-17 21:55:56 jdbc[3]: 
/**/prep42.setLong(1, 2L);
2020-06-17 21:55:56 jdbc[3]: 
/**/ResultSet rs83 = prep42.executeQuery();
2020-06-17 21:55:56 jdbc[3]: 
/*SQL l:225 #:1*/select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=? {1: 2};
2020-06-17 21:55:56 jdbc[3]: 
/**/rs83.next();
2020-06-17 21:55:56 jdbc[3]: 
/**/rs83.getString("customer2_0_0_");
2020-06-17 21:55:56 jdbc[3]: 
/**/rs83.wasNull();
2020-06-17 21:55:56 jdbc[3]: 
/**/rs83.getString("customer3_0_0_");
2020-06-17 21:55:56 jdbc[3]: 
/**/rs83.wasNull();
2020-06-17 21:55:56 jdbc[3]: 
/**/rs83.getString("customer4_0_0_");
2020-06-17 21:55:56 jdbc[3]: 
/**/rs83.wasNull();
2020-06-17 21:55:56 jdbc[3]: 
/**/rs83.next();
2020-06-17 21:55:56 jdbc[3]: 
/**/rs83.close();
2020-06-17 21:55:56 jdbc[3]: 
/**/prep42.getMaxRows();
2020-06-17 21:55:56 jdbc[3]: 
/**/prep42.getQueryTimeout();
2020-06-17 21:55:56 jdbc[3]: 
/**/prep42.close();
2020-06-17 21:55:56 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:55:56 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:55:56 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:55:56 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:55:56 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:55:56 jdbc[3]: 
/**/conn0.setReadOnly(false);
2020-06-17 21:55:56 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:55:56 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:55:56 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:55:57 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:55:57 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:55:57 jdbc[3]: 
/**/PreparedStatement prep43 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 21:55:57 jdbc[3]: 
/**/prep43.setString(1, "CustomerMS");
2020-06-17 21:55:57 jdbc[3]: 
/**/prep43.setString(2, "INFO");
2020-06-17 21:55:57 jdbc[3]: 
/**/prep43.setNull(3, 12);
2020-06-17 21:55:57 jdbc[3]: 
/**/prep43.setString(4, "/api/customers/2");
2020-06-17 21:55:57 jdbc[3]: 
/**/prep43.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 21:55:57 jdbc[3]: 
/**/prep43.setString(6, "06670eac012d24ee");
2020-06-17 21:55:57 jdbc[3]: 
/**/prep43.setString(7, "2020-06-18T02:55:56.769Z");
2020-06-17 21:55:57 jdbc[3]: 
/**/prep43.setString(8, "06670eac012d24ee");
2020-06-17 21:55:57 jdbc[3]: 
/**/prep43.executeUpdate();
2020-06-17 21:55:57 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 21:55:57 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 21:55:57 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/2', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: '06670eac012d24ee', 7: '2020-06-18T02:55:56.769Z', 8: '06670eac012d24ee'};
2020-06-17 21:55:57 jdbc[3]: 
/**/ResultSet rs84 = prep43.getGeneratedKeys();
2020-06-17 21:55:57 jdbc[3]: 
/**/rs84.next();
2020-06-17 21:55:57 jdbc[3]: 
/**/ResultSetMetaData rsMeta22 = rs84.getMetaData();
2020-06-17 21:55:57 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:55:57 jdbc[3]: 
/**/rsMeta22.getColumnCount();
2020-06-17 21:55:57 jdbc[3]: 
/**/rs84.getLong(1);
2020-06-17 21:55:57 jdbc[3]: 
/**/rs84.close();
2020-06-17 21:55:57 jdbc[3]: 
/**/prep43.getMaxRows();
2020-06-17 21:55:57 jdbc[3]: 
/**/prep43.getQueryTimeout();
2020-06-17 21:55:57 jdbc[3]: 
/**/prep43.close();
2020-06-17 21:55:57 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:55:57 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 21:55:57 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:55:57 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:55:57 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:55:57 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:55:57 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:55:57 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:55:57 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:55:59 jdbc[13]: 
/**/Statement stat5 = conn10.createStatement(1004, 1008);
2020-06-17 21:55:59 jdbc[13]: 
/**/stat5.setMaxRows(1000);
2020-06-17 21:55:59 jdbc[13]: 
/**/stat5.execute("SELECT * FROM LOG_TBL");
2020-06-17 21:55:59 jdbc[13]: 
/*SQL #:17*/SELECT * FROM LOG_TBL;
2020-06-17 21:55:59 jdbc[13]: 
/**/ResultSet rs85 = stat5.getResultSet();
2020-06-17 21:55:59 jdbc[13]: 
/**/ResultSetMetaData rsMeta23 = rs85.getMetaData();
2020-06-17 21:55:59 jdbc[13]: 
/**/conn10.getCatalog();
2020-06-17 21:55:59 jdbc[13]: 
/**/rsMeta23.getColumnCount();
2020-06-17 21:55:59 jdbc[13]: 
/**/rsMeta23.getColumnLabel(1);
2020-06-17 21:55:59 jdbc[13]: 
/**/rsMeta23.getColumnLabel(2);
2020-06-17 21:55:59 jdbc[13]: 
/**/rsMeta23.getColumnLabel(3);
2020-06-17 21:55:59 jdbc[13]: 
/**/rsMeta23.getColumnLabel(4);
2020-06-17 21:55:59 jdbc[13]: 
/**/rsMeta23.getColumnLabel(5);
2020-06-17 21:55:59 jdbc[13]: 
/**/rsMeta23.getColumnLabel(6);
2020-06-17 21:55:59 jdbc[13]: 
/**/rsMeta23.getColumnLabel(7);
2020-06-17 21:55:59 jdbc[13]: 
/**/rsMeta23.getColumnLabel(8);
2020-06-17 21:55:59 jdbc[13]: 
/**/rsMeta23.getColumnLabel(9);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.next();
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(1);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(2);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(3);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(4);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(5);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(6);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(7);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(8);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(9);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.next();
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(1);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(2);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(3);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(4);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(5);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(6);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(7);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(8);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(9);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.next();
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(1);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(2);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(3);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(4);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(5);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(6);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(7);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(8);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(9);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.next();
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(1);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(2);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(3);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(4);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(5);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(6);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(7);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(8);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(9);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.next();
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(1);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(2);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(3);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(4);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(5);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(6);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(7);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(8);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(9);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.next();
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(1);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(2);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(3);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(4);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(5);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(6);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(7);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(8);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(9);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.next();
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(1);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(2);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(3);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(4);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(5);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(6);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(7);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(8);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(9);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.next();
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(1);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(2);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(3);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(4);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(5);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(6);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(7);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(8);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(9);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.next();
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(1);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(2);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(3);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(4);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(5);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(6);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(7);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(8);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(9);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.next();
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(1);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(2);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(3);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(4);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(5);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(6);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(7);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(8);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(9);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.next();
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(1);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(2);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(3);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(4);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(5);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(6);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(7);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(8);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(9);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.next();
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(1);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(2);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(3);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(4);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(5);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(6);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(7);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(8);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(9);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.next();
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(1);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(2);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(3);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(4);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(5);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(6);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(7);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(8);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(9);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.next();
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(1);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(2);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(3);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(4);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(5);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(6);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(7);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(8);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(9);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.next();
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(1);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(2);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(3);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(4);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(5);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(6);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(7);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(8);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(9);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.next();
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(1);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(2);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(3);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(4);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(5);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(6);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(7);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(8);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(9);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.next();
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(1);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(2);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(3);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(4);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(5);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(6);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(7);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(8);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getString(9);
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.next();
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getConcurrency();
2020-06-17 21:55:59 jdbc[13]: 
/**/DatabaseMetaData dbMeta6 = conn10.getMetaData();
2020-06-17 21:55:59 jdbc[13]: 
/**/dbMeta6.getTables(null, "PUBLIC", "LOG_TBL", new String[]{"TABLE"});
2020-06-17 21:55:59 jdbc[13]: 
/**/PreparedStatement prep44 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME");
2020-06-17 21:55:59 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@6b6eed0d]
2020-06-17 21:55:59 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@6b6eed0d
2020-06-17 21:55:59 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:55:59 jdbc[13]: Table      :     potential plan item cost 4,322 index meta
2020-06-17 21:55:59 jdbc[13]: Plan       :   best plan item cost 4,278.78 index meta
2020-06-17 21:55:59 jdbc[13]: Plan       : plan cost 4,279.78
2020-06-17 21:55:59 jdbc[13]: 
/**/prep44.setString(1, "%");
2020-06-17 21:55:59 jdbc[13]: 
/**/prep44.setString(2, "PUBLIC");
2020-06-17 21:55:59 jdbc[13]: 
/**/prep44.setString(3, "LOG_TBL");
2020-06-17 21:55:59 jdbc[13]: 
/**/prep44.setString(4, "\\");
2020-06-17 21:55:59 jdbc[13]: 
/**/prep44.setString(5, "TABLE");
2020-06-17 21:55:59 jdbc[13]: 
/**/ResultSet rs86 = prep44.executeQuery();
2020-06-17 21:55:59 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@6b6eed0d]
2020-06-17 21:55:59 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@6b6eed0d
2020-06-17 21:55:59 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:55:59 jdbc[13]: Table      :     potential plan item cost 1,324 index meta
2020-06-17 21:55:59 jdbc[13]: Plan       :   best plan item cost 1,271.04 index meta
2020-06-17 21:55:59 jdbc[13]: Plan       : plan cost 1,272.04
2020-06-17 21:55:59 jdbc[13]: 
/*SQL l:414 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME {1: '%', 2: 'PUBLIC', 3: 'LOG_TBL', 4: '\\', 5: 'TABLE'};
2020-06-17 21:55:59 jdbc[13]: 
/**/rs86.next();
2020-06-17 21:55:59 jdbc[13]: 
/**/rs86.getString("SQL");
2020-06-17 21:55:59 jdbc[13]: 
/**/rs86.getString("TABLE_NAME");
2020-06-17 21:55:59 jdbc[13]: 
/**/dbMeta6.getPrimaryKeys(null, "PUBLIC", "LOG_TBL");
2020-06-17 21:55:59 jdbc[13]: 
/**/PreparedStatement prep45 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME");
2020-06-17 21:55:59 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@39ff129a]
2020-06-17 21:55:59 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@39ff129a
2020-06-17 21:55:59 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:55:59 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-17 21:55:59 jdbc[13]: Plan       :   best plan item cost 321.44 index meta
2020-06-17 21:55:59 jdbc[13]: Plan       : plan cost 322.44
2020-06-17 21:55:59 jdbc[13]: 
/**/prep45.setString(1, "%");
2020-06-17 21:55:59 jdbc[13]: 
/**/prep45.setString(2, "\\");
2020-06-17 21:55:59 jdbc[13]: 
/**/prep45.setString(3, "PUBLIC");
2020-06-17 21:55:59 jdbc[13]: 
/**/prep45.setString(4, "\\");
2020-06-17 21:55:59 jdbc[13]: 
/**/prep45.setString(5, "LOG_TBL");
2020-06-17 21:55:59 jdbc[13]: 
/**/ResultSet rs87 = prep45.executeQuery();
2020-06-17 21:55:59 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@39ff129a]
2020-06-17 21:55:59 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@39ff129a
2020-06-17 21:55:59 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:55:59 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-17 21:55:59 jdbc[13]: Plan       :   best plan item cost 318.16 index meta
2020-06-17 21:55:59 jdbc[13]: Plan       : plan cost 319.16
2020-06-17 21:55:59 jdbc[13]: 
/*SQL l:316 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME {1: '%', 2: '\\', 3: 'PUBLIC', 4: '\\', 5: 'LOG_TBL'};
2020-06-17 21:55:59 jdbc[13]: 
/**/rs87.next();
2020-06-17 21:55:59 jdbc[13]: 
/**/rs87.getString("COLUMN_NAME");
2020-06-17 21:55:59 jdbc[13]: 
/**/rs87.next();
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.getType();
2020-06-17 21:55:59 jdbc[13]: 
/**/rs85.close();
2020-06-17 21:55:59 jdbc[13]: 
/**/stat5.close();
2020-06-17 21:56:04 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-17 21:56:04 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 21:56:04 jdbc[3]: 
/**/conn0.setReadOnly(true);
2020-06-17 21:56:04 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:56:04 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:56:04 jdbc[3]: 
/**/PreparedStatement prep46 = conn0.prepareStatement("select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=?");
2020-06-17 21:56:04 jdbc[3]: 
/**/prep46.setLong(1, 3L);
2020-06-17 21:56:04 jdbc[3]: 
/**/ResultSet rs88 = prep46.executeQuery();
2020-06-17 21:56:04 jdbc[3]: 
/*SQL l:225 #:1*/select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=? {1: 3};
2020-06-17 21:56:04 jdbc[3]: 
/**/rs88.next();
2020-06-17 21:56:04 jdbc[3]: 
/**/rs88.getString("customer2_0_0_");
2020-06-17 21:56:04 jdbc[3]: 
/**/rs88.wasNull();
2020-06-17 21:56:04 jdbc[3]: 
/**/rs88.getString("customer3_0_0_");
2020-06-17 21:56:04 jdbc[3]: 
/**/rs88.wasNull();
2020-06-17 21:56:04 jdbc[3]: 
/**/rs88.getString("customer4_0_0_");
2020-06-17 21:56:04 jdbc[3]: 
/**/rs88.wasNull();
2020-06-17 21:56:04 jdbc[3]: 
/**/rs88.next();
2020-06-17 21:56:04 jdbc[3]: 
/**/rs88.close();
2020-06-17 21:56:04 jdbc[3]: 
/**/prep46.getMaxRows();
2020-06-17 21:56:04 jdbc[3]: 
/**/prep46.getQueryTimeout();
2020-06-17 21:56:04 jdbc[3]: 
/**/prep46.close();
2020-06-17 21:56:04 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:56:04 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:56:04 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:56:04 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:56:04 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:56:04 jdbc[3]: 
/**/conn0.setReadOnly(false);
2020-06-17 21:56:04 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:56:04 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:56:04 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:56:05 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-17 21:56:05 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 21:56:05 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:56:05 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:56:05 jdbc[3]: 
/**/PreparedStatement prep47 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 21:56:05 jdbc[3]: 
/**/prep47.setString(1, "CustomerMS");
2020-06-17 21:56:05 jdbc[3]: 
/**/prep47.setString(2, "INFO");
2020-06-17 21:56:05 jdbc[3]: 
/**/prep47.setNull(3, 12);
2020-06-17 21:56:05 jdbc[3]: 
/**/prep47.setString(4, "/api/customers/3");
2020-06-17 21:56:05 jdbc[3]: 
/**/prep47.setString(5, "Customer(id=3, firstName=Ramila, lastName=Karki, email=ramila@gmail.com)");
2020-06-17 21:56:05 jdbc[3]: 
/**/prep47.setString(6, "8f964dcc036a839b");
2020-06-17 21:56:05 jdbc[3]: 
/**/prep47.setString(7, "2020-06-18T02:56:04.268Z");
2020-06-17 21:56:05 jdbc[3]: 
/**/prep47.setString(8, "8f964dcc036a839b");
2020-06-17 21:56:05 jdbc[3]: 
/**/prep47.executeUpdate();
2020-06-17 21:56:05 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 21:56:05 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 21:56:05 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/3', 5: 'Customer(id=3, firstName=Ramila, lastName=Karki, email=ramila@gmail.com)', 6: '8f964dcc036a839b', 7: '2020-06-18T02:56:04.268Z', 8: '8f964dcc036a839b'};
2020-06-17 21:56:05 jdbc[3]: 
/**/ResultSet rs89 = prep47.getGeneratedKeys();
2020-06-17 21:56:05 jdbc[3]: 
/**/rs89.next();
2020-06-17 21:56:05 jdbc[3]: 
/**/ResultSetMetaData rsMeta24 = rs89.getMetaData();
2020-06-17 21:56:05 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:56:05 jdbc[3]: 
/**/rsMeta24.getColumnCount();
2020-06-17 21:56:05 jdbc[3]: 
/**/rs89.getLong(1);
2020-06-17 21:56:05 jdbc[3]: 
/**/rs89.close();
2020-06-17 21:56:05 jdbc[3]: 
/**/prep47.getMaxRows();
2020-06-17 21:56:05 jdbc[3]: 
/**/prep47.getQueryTimeout();
2020-06-17 21:56:05 jdbc[3]: 
/**/prep47.close();
2020-06-17 21:56:05 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:56:05 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 21:56:05 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:56:05 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:56:05 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:56:05 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:56:05 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:56:05 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:56:05 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:56:08 jdbc[13]: 
/**/Statement stat6 = conn10.createStatement(1004, 1008);
2020-06-17 21:56:08 jdbc[13]: 
/**/stat6.setMaxRows(1000);
2020-06-17 21:56:08 jdbc[13]: 
/**/stat6.execute("SELECT * FROM LOG_TBL");
2020-06-17 21:56:08 jdbc[13]: 
/*SQL #:18*/SELECT * FROM LOG_TBL;
2020-06-17 21:56:08 jdbc[13]: 
/**/ResultSet rs90 = stat6.getResultSet();
2020-06-17 21:56:08 jdbc[13]: 
/**/ResultSetMetaData rsMeta25 = rs90.getMetaData();
2020-06-17 21:56:08 jdbc[13]: 
/**/conn10.getCatalog();
2020-06-17 21:56:08 jdbc[13]: 
/**/rsMeta25.getColumnCount();
2020-06-17 21:56:08 jdbc[13]: 
/**/rsMeta25.getColumnLabel(1);
2020-06-17 21:56:08 jdbc[13]: 
/**/rsMeta25.getColumnLabel(2);
2020-06-17 21:56:08 jdbc[13]: 
/**/rsMeta25.getColumnLabel(3);
2020-06-17 21:56:08 jdbc[13]: 
/**/rsMeta25.getColumnLabel(4);
2020-06-17 21:56:08 jdbc[13]: 
/**/rsMeta25.getColumnLabel(5);
2020-06-17 21:56:08 jdbc[13]: 
/**/rsMeta25.getColumnLabel(6);
2020-06-17 21:56:08 jdbc[13]: 
/**/rsMeta25.getColumnLabel(7);
2020-06-17 21:56:08 jdbc[13]: 
/**/rsMeta25.getColumnLabel(8);
2020-06-17 21:56:08 jdbc[13]: 
/**/rsMeta25.getColumnLabel(9);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.next();
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(1);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(2);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(3);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(4);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(5);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(6);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(7);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(8);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(9);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.next();
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(1);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(2);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(3);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(4);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(5);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(6);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(7);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(8);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(9);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.next();
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(1);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(2);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(3);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(4);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(5);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(6);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(7);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(8);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(9);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.next();
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(1);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(2);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(3);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(4);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(5);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(6);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(7);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(8);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(9);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.next();
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(1);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(2);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(3);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(4);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(5);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(6);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(7);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(8);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(9);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.next();
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(1);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(2);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(3);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(4);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(5);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(6);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(7);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(8);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(9);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.next();
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(1);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(2);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(3);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(4);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(5);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(6);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(7);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(8);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(9);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.next();
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(1);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(2);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(3);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(4);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(5);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(6);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(7);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(8);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(9);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.next();
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(1);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(2);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(3);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(4);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(5);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(6);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(7);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(8);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(9);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.next();
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(1);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(2);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(3);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(4);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(5);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(6);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(7);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(8);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(9);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.next();
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(1);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(2);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(3);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(4);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(5);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(6);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(7);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(8);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(9);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.next();
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(1);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(2);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(3);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(4);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(5);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(6);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(7);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(8);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(9);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.next();
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(1);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(2);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(3);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(4);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(5);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(6);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(7);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(8);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(9);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.next();
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(1);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(2);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(3);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(4);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(5);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(6);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(7);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(8);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(9);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.next();
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(1);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(2);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(3);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(4);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(5);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(6);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(7);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(8);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(9);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.next();
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(1);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(2);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(3);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(4);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(5);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(6);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(7);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(8);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(9);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.next();
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(1);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(2);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(3);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(4);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(5);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(6);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(7);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(8);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(9);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.next();
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(1);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(2);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(3);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(4);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(5);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(6);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(7);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(8);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getString(9);
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.next();
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getConcurrency();
2020-06-17 21:56:08 jdbc[13]: 
/**/DatabaseMetaData dbMeta7 = conn10.getMetaData();
2020-06-17 21:56:08 jdbc[13]: 
/**/dbMeta7.getTables(null, "PUBLIC", "LOG_TBL", new String[]{"TABLE"});
2020-06-17 21:56:08 jdbc[13]: 
/**/PreparedStatement prep48 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME");
2020-06-17 21:56:08 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@6b6eed0d]
2020-06-17 21:56:08 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@6b6eed0d
2020-06-17 21:56:08 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:56:08 jdbc[13]: Table      :     potential plan item cost 4,322 index meta
2020-06-17 21:56:08 jdbc[13]: Plan       :   best plan item cost 4,278.78 index meta
2020-06-17 21:56:08 jdbc[13]: Plan       : plan cost 4,279.78
2020-06-17 21:56:08 jdbc[13]: 
/**/prep48.setString(1, "%");
2020-06-17 21:56:08 jdbc[13]: 
/**/prep48.setString(2, "PUBLIC");
2020-06-17 21:56:08 jdbc[13]: 
/**/prep48.setString(3, "LOG_TBL");
2020-06-17 21:56:08 jdbc[13]: 
/**/prep48.setString(4, "\\");
2020-06-17 21:56:08 jdbc[13]: 
/**/prep48.setString(5, "TABLE");
2020-06-17 21:56:08 jdbc[13]: 
/**/ResultSet rs91 = prep48.executeQuery();
2020-06-17 21:56:08 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@6b6eed0d]
2020-06-17 21:56:08 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@6b6eed0d
2020-06-17 21:56:08 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:56:08 jdbc[13]: Table      :     potential plan item cost 1,324 index meta
2020-06-17 21:56:08 jdbc[13]: Plan       :   best plan item cost 1,271.04 index meta
2020-06-17 21:56:08 jdbc[13]: Plan       : plan cost 1,272.04
2020-06-17 21:56:08 jdbc[13]: 
/*SQL l:414 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME {1: '%', 2: 'PUBLIC', 3: 'LOG_TBL', 4: '\\', 5: 'TABLE'};
2020-06-17 21:56:08 jdbc[13]: 
/**/rs91.next();
2020-06-17 21:56:08 jdbc[13]: 
/**/rs91.getString("SQL");
2020-06-17 21:56:08 jdbc[13]: 
/**/rs91.getString("TABLE_NAME");
2020-06-17 21:56:08 jdbc[13]: 
/**/dbMeta7.getPrimaryKeys(null, "PUBLIC", "LOG_TBL");
2020-06-17 21:56:08 jdbc[13]: 
/**/PreparedStatement prep49 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME");
2020-06-17 21:56:08 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@39ff129a]
2020-06-17 21:56:08 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@39ff129a
2020-06-17 21:56:08 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:56:08 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-17 21:56:08 jdbc[13]: Plan       :   best plan item cost 321.44 index meta
2020-06-17 21:56:08 jdbc[13]: Plan       : plan cost 322.44
2020-06-17 21:56:08 jdbc[13]: 
/**/prep49.setString(1, "%");
2020-06-17 21:56:08 jdbc[13]: 
/**/prep49.setString(2, "\\");
2020-06-17 21:56:08 jdbc[13]: 
/**/prep49.setString(3, "PUBLIC");
2020-06-17 21:56:08 jdbc[13]: 
/**/prep49.setString(4, "\\");
2020-06-17 21:56:08 jdbc[13]: 
/**/prep49.setString(5, "LOG_TBL");
2020-06-17 21:56:08 jdbc[13]: 
/**/ResultSet rs92 = prep49.executeQuery();
2020-06-17 21:56:08 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@39ff129a]
2020-06-17 21:56:08 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@39ff129a
2020-06-17 21:56:08 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:56:08 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-17 21:56:08 jdbc[13]: Plan       :   best plan item cost 318.16 index meta
2020-06-17 21:56:08 jdbc[13]: Plan       : plan cost 319.16
2020-06-17 21:56:08 jdbc[13]: 
/*SQL l:316 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME {1: '%', 2: '\\', 3: 'PUBLIC', 4: '\\', 5: 'LOG_TBL'};
2020-06-17 21:56:08 jdbc[13]: 
/**/rs92.next();
2020-06-17 21:56:08 jdbc[13]: 
/**/rs92.getString("COLUMN_NAME");
2020-06-17 21:56:08 jdbc[13]: 
/**/rs92.next();
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.getType();
2020-06-17 21:56:08 jdbc[13]: 
/**/rs90.close();
2020-06-17 21:56:08 jdbc[13]: 
/**/stat6.close();
2020-06-17 21:56:12 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-17 21:56:12 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 21:56:12 jdbc[3]: 
/**/conn0.setReadOnly(true);
2020-06-17 21:56:12 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:56:12 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:56:12 jdbc[3]: 
/**/PreparedStatement prep50 = conn0.prepareStatement("select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=?");
2020-06-17 21:56:12 jdbc[3]: 
/**/prep50.setLong(1, 2L);
2020-06-17 21:56:12 jdbc[3]: 
/**/ResultSet rs93 = prep50.executeQuery();
2020-06-17 21:56:12 jdbc[3]: 
/*SQL l:225 #:1*/select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=? {1: 2};
2020-06-17 21:56:12 jdbc[3]: 
/**/rs93.next();
2020-06-17 21:56:12 jdbc[3]: 
/**/rs93.getString("customer2_0_0_");
2020-06-17 21:56:12 jdbc[3]: 
/**/rs93.wasNull();
2020-06-17 21:56:12 jdbc[3]: 
/**/rs93.getString("customer3_0_0_");
2020-06-17 21:56:12 jdbc[3]: 
/**/rs93.wasNull();
2020-06-17 21:56:12 jdbc[3]: 
/**/rs93.getString("customer4_0_0_");
2020-06-17 21:56:12 jdbc[3]: 
/**/rs93.wasNull();
2020-06-17 21:56:12 jdbc[3]: 
/**/rs93.next();
2020-06-17 21:56:12 jdbc[3]: 
/**/rs93.close();
2020-06-17 21:56:12 jdbc[3]: 
/**/prep50.getMaxRows();
2020-06-17 21:56:12 jdbc[3]: 
/**/prep50.getQueryTimeout();
2020-06-17 21:56:12 jdbc[3]: 
/**/prep50.close();
2020-06-17 21:56:12 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:56:12 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:56:12 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:56:12 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:56:12 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:56:12 jdbc[3]: 
/**/conn0.setReadOnly(false);
2020-06-17 21:56:12 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:56:12 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:56:12 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:56:13 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:56:13 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:56:13 jdbc[3]: 
/**/PreparedStatement prep51 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 21:56:13 jdbc[3]: 
/**/prep51.setString(1, "CustomerMS");
2020-06-17 21:56:13 jdbc[3]: 
/**/prep51.setString(2, "INFO");
2020-06-17 21:56:13 jdbc[3]: 
/**/prep51.setNull(3, 12);
2020-06-17 21:56:13 jdbc[3]: 
/**/prep51.setString(4, "/api/customers/2");
2020-06-17 21:56:13 jdbc[3]: 
/**/prep51.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 21:56:13 jdbc[3]: 
/**/prep51.setString(6, "93153296296c724e");
2020-06-17 21:56:13 jdbc[3]: 
/**/prep51.setString(7, "2020-06-18T02:56:12.997Z");
2020-06-17 21:56:13 jdbc[3]: 
/**/prep51.setString(8, "93153296296c724e");
2020-06-17 21:56:13 jdbc[3]: 
/**/prep51.executeUpdate();
2020-06-17 21:56:13 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 21:56:13 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 21:56:13 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/2', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: '93153296296c724e', 7: '2020-06-18T02:56:12.997Z', 8: '93153296296c724e'};
2020-06-17 21:56:13 jdbc[3]: 
/**/ResultSet rs94 = prep51.getGeneratedKeys();
2020-06-17 21:56:13 jdbc[3]: 
/**/rs94.next();
2020-06-17 21:56:13 jdbc[3]: 
/**/ResultSetMetaData rsMeta26 = rs94.getMetaData();
2020-06-17 21:56:13 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:56:13 jdbc[3]: 
/**/rsMeta26.getColumnCount();
2020-06-17 21:56:13 jdbc[3]: 
/**/rs94.getLong(1);
2020-06-17 21:56:13 jdbc[3]: 
/**/rs94.close();
2020-06-17 21:56:13 jdbc[3]: 
/**/prep51.getMaxRows();
2020-06-17 21:56:13 jdbc[3]: 
/**/prep51.getQueryTimeout();
2020-06-17 21:56:13 jdbc[3]: 
/**/prep51.close();
2020-06-17 21:56:13 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:56:13 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 21:56:13 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:56:13 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:56:13 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:56:13 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:56:13 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:56:13 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:56:13 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:56:15 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-17 21:56:15 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 21:56:15 jdbc[3]: 
/**/conn0.setReadOnly(true);
2020-06-17 21:56:15 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:56:15 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:56:15 jdbc[3]: 
/**/PreparedStatement prep52 = conn0.prepareStatement("select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=?");
2020-06-17 21:56:15 jdbc[3]: 
/**/prep52.setLong(1, 2L);
2020-06-17 21:56:15 jdbc[3]: 
/**/ResultSet rs95 = prep52.executeQuery();
2020-06-17 21:56:15 jdbc[3]: 
/*SQL l:225 #:1*/select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=? {1: 2};
2020-06-17 21:56:15 jdbc[3]: 
/**/rs95.next();
2020-06-17 21:56:15 jdbc[3]: 
/**/rs95.getString("customer2_0_0_");
2020-06-17 21:56:15 jdbc[3]: 
/**/rs95.wasNull();
2020-06-17 21:56:15 jdbc[3]: 
/**/rs95.getString("customer3_0_0_");
2020-06-17 21:56:15 jdbc[3]: 
/**/rs95.wasNull();
2020-06-17 21:56:15 jdbc[3]: 
/**/rs95.getString("customer4_0_0_");
2020-06-17 21:56:15 jdbc[3]: 
/**/rs95.wasNull();
2020-06-17 21:56:15 jdbc[3]: 
/**/rs95.next();
2020-06-17 21:56:15 jdbc[3]: 
/**/rs95.close();
2020-06-17 21:56:15 jdbc[3]: 
/**/prep52.getMaxRows();
2020-06-17 21:56:15 jdbc[3]: 
/**/prep52.getQueryTimeout();
2020-06-17 21:56:15 jdbc[3]: 
/**/prep52.close();
2020-06-17 21:56:15 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:56:15 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:56:15 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:56:15 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:56:15 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:56:15 jdbc[3]: 
/**/conn0.setReadOnly(false);
2020-06-17 21:56:15 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:56:15 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:56:15 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:56:16 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-17 21:56:16 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 21:56:16 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:56:16 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:56:16 jdbc[3]: 
/**/PreparedStatement prep53 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 21:56:16 jdbc[3]: 
/**/prep53.setString(1, "CustomerMS");
2020-06-17 21:56:16 jdbc[3]: 
/**/prep53.setString(2, "INFO");
2020-06-17 21:56:16 jdbc[3]: 
/**/prep53.setNull(3, 12);
2020-06-17 21:56:16 jdbc[3]: 
/**/prep53.setString(4, "/api/customers/2");
2020-06-17 21:56:16 jdbc[3]: 
/**/prep53.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 21:56:16 jdbc[3]: 
/**/prep53.setString(6, "20eb60e1e2a5f223");
2020-06-17 21:56:16 jdbc[3]: 
/**/prep53.setString(7, "2020-06-18T02:56:15.134Z");
2020-06-17 21:56:16 jdbc[3]: 
/**/prep53.setString(8, "20eb60e1e2a5f223");
2020-06-17 21:56:16 jdbc[3]: 
/**/prep53.executeUpdate();
2020-06-17 21:56:16 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 21:56:16 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 21:56:16 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/2', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: '20eb60e1e2a5f223', 7: '2020-06-18T02:56:15.134Z', 8: '20eb60e1e2a5f223'};
2020-06-17 21:56:16 jdbc[3]: 
/**/ResultSet rs96 = prep53.getGeneratedKeys();
2020-06-17 21:56:16 jdbc[3]: 
/**/rs96.next();
2020-06-17 21:56:16 jdbc[3]: 
/**/ResultSetMetaData rsMeta27 = rs96.getMetaData();
2020-06-17 21:56:16 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:56:16 jdbc[3]: 
/**/rsMeta27.getColumnCount();
2020-06-17 21:56:16 jdbc[3]: 
/**/rs96.getLong(1);
2020-06-17 21:56:16 jdbc[3]: 
/**/rs96.close();
2020-06-17 21:56:16 jdbc[3]: 
/**/prep53.getMaxRows();
2020-06-17 21:56:16 jdbc[3]: 
/**/prep53.getQueryTimeout();
2020-06-17 21:56:16 jdbc[3]: 
/**/prep53.close();
2020-06-17 21:56:16 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:56:16 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 21:56:16 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:56:16 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:56:16 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:56:16 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:56:16 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:56:16 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:56:16 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:56:16 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-17 21:56:16 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 21:56:16 jdbc[3]: 
/**/conn0.setReadOnly(true);
2020-06-17 21:56:16 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:56:16 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:56:16 jdbc[3]: 
/**/PreparedStatement prep54 = conn0.prepareStatement("select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=?");
2020-06-17 21:56:16 jdbc[3]: 
/**/prep54.setLong(1, 2L);
2020-06-17 21:56:16 jdbc[3]: 
/**/ResultSet rs97 = prep54.executeQuery();
2020-06-17 21:56:16 jdbc[3]: 
/*SQL l:225 #:1*/select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=? {1: 2};
2020-06-17 21:56:16 jdbc[3]: 
/**/rs97.next();
2020-06-17 21:56:16 jdbc[3]: 
/**/rs97.getString("customer2_0_0_");
2020-06-17 21:56:16 jdbc[3]: 
/**/rs97.wasNull();
2020-06-17 21:56:16 jdbc[3]: 
/**/rs97.getString("customer3_0_0_");
2020-06-17 21:56:16 jdbc[3]: 
/**/rs97.wasNull();
2020-06-17 21:56:16 jdbc[3]: 
/**/rs97.getString("customer4_0_0_");
2020-06-17 21:56:16 jdbc[3]: 
/**/rs97.wasNull();
2020-06-17 21:56:16 jdbc[3]: 
/**/rs97.next();
2020-06-17 21:56:16 jdbc[3]: 
/**/rs97.close();
2020-06-17 21:56:16 jdbc[3]: 
/**/prep54.getMaxRows();
2020-06-17 21:56:16 jdbc[3]: 
/**/prep54.getQueryTimeout();
2020-06-17 21:56:16 jdbc[3]: 
/**/prep54.close();
2020-06-17 21:56:16 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:56:16 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:56:16 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:56:16 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:56:16 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:56:16 jdbc[3]: 
/**/conn0.setReadOnly(false);
2020-06-17 21:56:16 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:56:16 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:56:16 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:56:17 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:56:17 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:56:17 jdbc[3]: 
/**/PreparedStatement prep55 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 21:56:17 jdbc[3]: 
/**/prep55.setString(1, "CustomerMS");
2020-06-17 21:56:17 jdbc[3]: 
/**/prep55.setString(2, "INFO");
2020-06-17 21:56:17 jdbc[3]: 
/**/prep55.setNull(3, 12);
2020-06-17 21:56:17 jdbc[3]: 
/**/prep55.setString(4, "/api/customers/2");
2020-06-17 21:56:17 jdbc[3]: 
/**/prep55.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 21:56:17 jdbc[3]: 
/**/prep55.setString(6, "43d42dc852862595");
2020-06-17 21:56:17 jdbc[3]: 
/**/prep55.setString(7, "2020-06-18T02:56:16.890Z");
2020-06-17 21:56:17 jdbc[3]: 
/**/prep55.setString(8, "43d42dc852862595");
2020-06-17 21:56:17 jdbc[3]: 
/**/prep55.executeUpdate();
2020-06-17 21:56:17 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 21:56:17 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 21:56:17 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/2', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: '43d42dc852862595', 7: '2020-06-18T02:56:16.890Z', 8: '43d42dc852862595'};
2020-06-17 21:56:17 jdbc[3]: 
/**/ResultSet rs98 = prep55.getGeneratedKeys();
2020-06-17 21:56:17 jdbc[3]: 
/**/rs98.next();
2020-06-17 21:56:17 jdbc[3]: 
/**/ResultSetMetaData rsMeta28 = rs98.getMetaData();
2020-06-17 21:56:17 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:56:17 jdbc[3]: 
/**/rsMeta28.getColumnCount();
2020-06-17 21:56:17 jdbc[3]: 
/**/rs98.getLong(1);
2020-06-17 21:56:17 jdbc[3]: 
/**/rs98.close();
2020-06-17 21:56:17 jdbc[3]: 
/**/prep55.getMaxRows();
2020-06-17 21:56:17 jdbc[3]: 
/**/prep55.getQueryTimeout();
2020-06-17 21:56:17 jdbc[3]: 
/**/prep55.close();
2020-06-17 21:56:17 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:56:17 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 21:56:17 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:56:17 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:56:17 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:56:17 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:56:17 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:56:17 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:56:17 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:56:18 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-17 21:56:18 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 21:56:18 jdbc[3]: 
/**/conn0.setReadOnly(true);
2020-06-17 21:56:18 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:56:18 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:56:18 jdbc[3]: 
/**/PreparedStatement prep56 = conn0.prepareStatement("select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=?");
2020-06-17 21:56:18 jdbc[3]: 
/**/prep56.setLong(1, 2L);
2020-06-17 21:56:18 jdbc[3]: 
/**/ResultSet rs99 = prep56.executeQuery();
2020-06-17 21:56:18 jdbc[3]: 
/*SQL l:225 #:1*/select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=? {1: 2};
2020-06-17 21:56:18 jdbc[3]: 
/**/rs99.next();
2020-06-17 21:56:18 jdbc[3]: 
/**/rs99.getString("customer2_0_0_");
2020-06-17 21:56:18 jdbc[3]: 
/**/rs99.wasNull();
2020-06-17 21:56:18 jdbc[3]: 
/**/rs99.getString("customer3_0_0_");
2020-06-17 21:56:18 jdbc[3]: 
/**/rs99.wasNull();
2020-06-17 21:56:18 jdbc[3]: 
/**/rs99.getString("customer4_0_0_");
2020-06-17 21:56:18 jdbc[3]: 
/**/rs99.wasNull();
2020-06-17 21:56:18 jdbc[3]: 
/**/rs99.next();
2020-06-17 21:56:18 jdbc[3]: 
/**/rs99.close();
2020-06-17 21:56:18 jdbc[3]: 
/**/prep56.getMaxRows();
2020-06-17 21:56:18 jdbc[3]: 
/**/prep56.getQueryTimeout();
2020-06-17 21:56:18 jdbc[3]: 
/**/prep56.close();
2020-06-17 21:56:18 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:56:18 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:56:18 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:56:18 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:56:18 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:56:18 jdbc[3]: 
/**/conn0.setReadOnly(false);
2020-06-17 21:56:18 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:56:18 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:56:18 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:56:19 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-17 21:56:19 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 21:56:19 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:56:19 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:56:19 jdbc[3]: 
/**/PreparedStatement prep57 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 21:56:19 jdbc[3]: 
/**/prep57.setString(1, "CustomerMS");
2020-06-17 21:56:19 jdbc[3]: 
/**/prep57.setString(2, "INFO");
2020-06-17 21:56:19 jdbc[3]: 
/**/prep57.setNull(3, 12);
2020-06-17 21:56:19 jdbc[3]: 
/**/prep57.setString(4, "/api/customers/2");
2020-06-17 21:56:19 jdbc[3]: 
/**/prep57.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 21:56:19 jdbc[3]: 
/**/prep57.setString(6, "6e58df6ecc92c2a9");
2020-06-17 21:56:19 jdbc[3]: 
/**/prep57.setString(7, "2020-06-18T02:56:18.068Z");
2020-06-17 21:56:19 jdbc[3]: 
/**/prep57.setString(8, "6e58df6ecc92c2a9");
2020-06-17 21:56:19 jdbc[3]: 
/**/prep57.executeUpdate();
2020-06-17 21:56:19 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 21:56:19 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 21:56:19 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/2', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: '6e58df6ecc92c2a9', 7: '2020-06-18T02:56:18.068Z', 8: '6e58df6ecc92c2a9'};
2020-06-17 21:56:19 jdbc[3]: 
/**/ResultSet rs100 = prep57.getGeneratedKeys();
2020-06-17 21:56:19 jdbc[3]: 
/**/rs100.next();
2020-06-17 21:56:19 jdbc[3]: 
/**/ResultSetMetaData rsMeta29 = rs100.getMetaData();
2020-06-17 21:56:19 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:56:19 jdbc[3]: 
/**/rsMeta29.getColumnCount();
2020-06-17 21:56:19 jdbc[3]: 
/**/rs100.getLong(1);
2020-06-17 21:56:19 jdbc[3]: 
/**/rs100.close();
2020-06-17 21:56:19 jdbc[3]: 
/**/prep57.getMaxRows();
2020-06-17 21:56:19 jdbc[3]: 
/**/prep57.getQueryTimeout();
2020-06-17 21:56:19 jdbc[3]: 
/**/prep57.close();
2020-06-17 21:56:19 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:56:19 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 21:56:19 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:56:19 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:56:19 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:56:19 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:56:19 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:56:19 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:56:19 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:56:20 jdbc[13]: 
/**/Statement stat7 = conn10.createStatement(1004, 1008);
2020-06-17 21:56:20 jdbc[13]: 
/**/stat7.setMaxRows(1000);
2020-06-17 21:56:20 jdbc[13]: 
/**/stat7.execute("SELECT * FROM LOG_TBL");
2020-06-17 21:56:20 jdbc[13]: 
/*SQL #:22*/SELECT * FROM LOG_TBL;
2020-06-17 21:56:20 jdbc[13]: 
/**/ResultSet rs101 = stat7.getResultSet();
2020-06-17 21:56:20 jdbc[13]: 
/**/ResultSetMetaData rsMeta30 = rs101.getMetaData();
2020-06-17 21:56:20 jdbc[13]: 
/**/conn10.getCatalog();
2020-06-17 21:56:20 jdbc[13]: 
/**/rsMeta30.getColumnCount();
2020-06-17 21:56:20 jdbc[13]: 
/**/rsMeta30.getColumnLabel(1);
2020-06-17 21:56:20 jdbc[13]: 
/**/rsMeta30.getColumnLabel(2);
2020-06-17 21:56:20 jdbc[13]: 
/**/rsMeta30.getColumnLabel(3);
2020-06-17 21:56:20 jdbc[13]: 
/**/rsMeta30.getColumnLabel(4);
2020-06-17 21:56:20 jdbc[13]: 
/**/rsMeta30.getColumnLabel(5);
2020-06-17 21:56:20 jdbc[13]: 
/**/rsMeta30.getColumnLabel(6);
2020-06-17 21:56:20 jdbc[13]: 
/**/rsMeta30.getColumnLabel(7);
2020-06-17 21:56:20 jdbc[13]: 
/**/rsMeta30.getColumnLabel(8);
2020-06-17 21:56:20 jdbc[13]: 
/**/rsMeta30.getColumnLabel(9);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.next();
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(1);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(2);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(3);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(4);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(5);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(6);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(7);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(8);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(9);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.next();
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(1);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(2);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(3);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(4);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(5);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(6);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(7);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(8);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(9);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.next();
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(1);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(2);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(3);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(4);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(5);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(6);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(7);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(8);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(9);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.next();
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(1);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(2);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(3);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(4);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(5);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(6);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(7);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(8);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(9);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.next();
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(1);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(2);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(3);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(4);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(5);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(6);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(7);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(8);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(9);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.next();
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(1);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(2);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(3);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(4);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(5);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(6);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(7);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(8);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(9);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.next();
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(1);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(2);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(3);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(4);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(5);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(6);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(7);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(8);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(9);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.next();
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(1);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(2);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(3);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(4);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(5);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(6);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(7);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(8);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(9);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.next();
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(1);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(2);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(3);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(4);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(5);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(6);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(7);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(8);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(9);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.next();
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(1);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(2);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(3);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(4);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(5);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(6);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(7);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(8);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(9);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.next();
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(1);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(2);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(3);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(4);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(5);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(6);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(7);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(8);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(9);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.next();
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(1);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(2);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(3);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(4);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(5);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(6);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(7);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(8);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(9);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.next();
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(1);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(2);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(3);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(4);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(5);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(6);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(7);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(8);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(9);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.next();
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(1);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(2);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(3);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(4);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(5);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(6);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(7);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(8);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(9);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.next();
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(1);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(2);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(3);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(4);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(5);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(6);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(7);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(8);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(9);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.next();
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(1);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(2);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(3);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(4);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(5);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(6);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(7);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(8);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(9);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.next();
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(1);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(2);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(3);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(4);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(5);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(6);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(7);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(8);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(9);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.next();
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(1);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(2);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(3);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(4);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(5);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(6);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(7);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(8);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(9);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.next();
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(1);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(2);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(3);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(4);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(5);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(6);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(7);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(8);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(9);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.next();
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(1);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(2);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(3);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(4);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(5);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(6);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(7);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(8);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(9);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.next();
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(1);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(2);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(3);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(4);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(5);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(6);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(7);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(8);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(9);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.next();
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(1);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(2);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(3);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(4);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(5);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(6);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(7);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(8);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getString(9);
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.next();
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getConcurrency();
2020-06-17 21:56:20 jdbc[13]: 
/**/DatabaseMetaData dbMeta8 = conn10.getMetaData();
2020-06-17 21:56:20 jdbc[13]: 
/**/dbMeta8.getTables(null, "PUBLIC", "LOG_TBL", new String[]{"TABLE"});
2020-06-17 21:56:20 jdbc[13]: 
/**/PreparedStatement prep58 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME");
2020-06-17 21:56:20 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@6b6eed0d]
2020-06-17 21:56:20 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@6b6eed0d
2020-06-17 21:56:20 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:56:20 jdbc[13]: Table      :     potential plan item cost 4,322 index meta
2020-06-17 21:56:20 jdbc[13]: Plan       :   best plan item cost 4,278.78 index meta
2020-06-17 21:56:20 jdbc[13]: Plan       : plan cost 4,279.78
2020-06-17 21:56:20 jdbc[13]: 
/**/prep58.setString(1, "%");
2020-06-17 21:56:20 jdbc[13]: 
/**/prep58.setString(2, "PUBLIC");
2020-06-17 21:56:20 jdbc[13]: 
/**/prep58.setString(3, "LOG_TBL");
2020-06-17 21:56:20 jdbc[13]: 
/**/prep58.setString(4, "\\");
2020-06-17 21:56:20 jdbc[13]: 
/**/prep58.setString(5, "TABLE");
2020-06-17 21:56:20 jdbc[13]: 
/**/ResultSet rs102 = prep58.executeQuery();
2020-06-17 21:56:20 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@6b6eed0d]
2020-06-17 21:56:20 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@6b6eed0d
2020-06-17 21:56:20 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:56:20 jdbc[13]: Table      :     potential plan item cost 1,324 index meta
2020-06-17 21:56:20 jdbc[13]: Plan       :   best plan item cost 1,271.04 index meta
2020-06-17 21:56:20 jdbc[13]: Plan       : plan cost 1,272.04
2020-06-17 21:56:20 jdbc[13]: 
/*SQL l:414 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME {1: '%', 2: 'PUBLIC', 3: 'LOG_TBL', 4: '\\', 5: 'TABLE'};
2020-06-17 21:56:20 jdbc[13]: 
/**/rs102.next();
2020-06-17 21:56:20 jdbc[13]: 
/**/rs102.getString("SQL");
2020-06-17 21:56:20 jdbc[13]: 
/**/rs102.getString("TABLE_NAME");
2020-06-17 21:56:20 jdbc[13]: 
/**/dbMeta8.getPrimaryKeys(null, "PUBLIC", "LOG_TBL");
2020-06-17 21:56:20 jdbc[13]: 
/**/PreparedStatement prep59 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME");
2020-06-17 21:56:20 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@39ff129a]
2020-06-17 21:56:20 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@39ff129a
2020-06-17 21:56:20 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:56:20 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-17 21:56:20 jdbc[13]: Plan       :   best plan item cost 321.44 index meta
2020-06-17 21:56:20 jdbc[13]: Plan       : plan cost 322.44
2020-06-17 21:56:20 jdbc[13]: 
/**/prep59.setString(1, "%");
2020-06-17 21:56:20 jdbc[13]: 
/**/prep59.setString(2, "\\");
2020-06-17 21:56:20 jdbc[13]: 
/**/prep59.setString(3, "PUBLIC");
2020-06-17 21:56:20 jdbc[13]: 
/**/prep59.setString(4, "\\");
2020-06-17 21:56:20 jdbc[13]: 
/**/prep59.setString(5, "LOG_TBL");
2020-06-17 21:56:20 jdbc[13]: 
/**/ResultSet rs103 = prep59.executeQuery();
2020-06-17 21:56:20 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@39ff129a]
2020-06-17 21:56:20 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@39ff129a
2020-06-17 21:56:20 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:56:20 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-17 21:56:20 jdbc[13]: Plan       :   best plan item cost 318.16 index meta
2020-06-17 21:56:20 jdbc[13]: Plan       : plan cost 319.16
2020-06-17 21:56:20 jdbc[13]: 
/*SQL l:316 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME {1: '%', 2: '\\', 3: 'PUBLIC', 4: '\\', 5: 'LOG_TBL'};
2020-06-17 21:56:20 jdbc[13]: 
/**/rs103.next();
2020-06-17 21:56:20 jdbc[13]: 
/**/rs103.getString("COLUMN_NAME");
2020-06-17 21:56:20 jdbc[13]: 
/**/rs103.next();
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.getType();
2020-06-17 21:56:20 jdbc[13]: 
/**/rs101.close();
2020-06-17 21:56:20 jdbc[13]: 
/**/stat7.close();
2020-06-17 21:56:24 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-17 21:56:24 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 21:56:24 jdbc[3]: 
/**/conn0.setReadOnly(true);
2020-06-17 21:56:24 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:56:24 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:56:24 jdbc[3]: 
/**/PreparedStatement prep60 = conn0.prepareStatement("select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=?");
2020-06-17 21:56:24 jdbc[3]: 
/**/prep60.setLong(1, 3L);
2020-06-17 21:56:24 jdbc[3]: 
/**/ResultSet rs104 = prep60.executeQuery();
2020-06-17 21:56:24 jdbc[3]: 
/*SQL l:225 #:1*/select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=? {1: 3};
2020-06-17 21:56:24 jdbc[3]: 
/**/rs104.next();
2020-06-17 21:56:24 jdbc[3]: 
/**/rs104.getString("customer2_0_0_");
2020-06-17 21:56:24 jdbc[3]: 
/**/rs104.wasNull();
2020-06-17 21:56:24 jdbc[3]: 
/**/rs104.getString("customer3_0_0_");
2020-06-17 21:56:24 jdbc[3]: 
/**/rs104.wasNull();
2020-06-17 21:56:24 jdbc[3]: 
/**/rs104.getString("customer4_0_0_");
2020-06-17 21:56:24 jdbc[3]: 
/**/rs104.wasNull();
2020-06-17 21:56:24 jdbc[3]: 
/**/rs104.next();
2020-06-17 21:56:24 jdbc[3]: 
/**/rs104.close();
2020-06-17 21:56:24 jdbc[3]: 
/**/prep60.getMaxRows();
2020-06-17 21:56:24 jdbc[3]: 
/**/prep60.getQueryTimeout();
2020-06-17 21:56:24 jdbc[3]: 
/**/prep60.close();
2020-06-17 21:56:24 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:56:24 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:56:24 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:56:24 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:56:24 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:56:24 jdbc[3]: 
/**/conn0.setReadOnly(false);
2020-06-17 21:56:24 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:56:24 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:56:24 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:56:25 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:56:25 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:56:25 jdbc[3]: 
/**/PreparedStatement prep61 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 21:56:25 jdbc[3]: 
/**/prep61.setString(1, "CustomerMS");
2020-06-17 21:56:25 jdbc[3]: 
/**/prep61.setString(2, "INFO");
2020-06-17 21:56:25 jdbc[3]: 
/**/prep61.setNull(3, 12);
2020-06-17 21:56:25 jdbc[3]: 
/**/prep61.setString(4, "/api/customers/3");
2020-06-17 21:56:25 jdbc[3]: 
/**/prep61.setString(5, "Customer(id=3, firstName=Ramila, lastName=Karki, email=ramila@gmail.com)");
2020-06-17 21:56:25 jdbc[3]: 
/**/prep61.setString(6, "2e6641836c179162");
2020-06-17 21:56:25 jdbc[3]: 
/**/prep61.setString(7, "2020-06-18T02:56:24.656Z");
2020-06-17 21:56:25 jdbc[3]: 
/**/prep61.setString(8, "2e6641836c179162");
2020-06-17 21:56:25 jdbc[3]: 
/**/prep61.executeUpdate();
2020-06-17 21:56:25 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 21:56:25 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 21:56:25 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/3', 5: 'Customer(id=3, firstName=Ramila, lastName=Karki, email=ramila@gmail.com)', 6: '2e6641836c179162', 7: '2020-06-18T02:56:24.656Z', 8: '2e6641836c179162'};
2020-06-17 21:56:25 jdbc[3]: 
/**/ResultSet rs105 = prep61.getGeneratedKeys();
2020-06-17 21:56:25 jdbc[3]: 
/**/rs105.next();
2020-06-17 21:56:25 jdbc[3]: 
/**/ResultSetMetaData rsMeta31 = rs105.getMetaData();
2020-06-17 21:56:25 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:56:25 jdbc[3]: 
/**/rsMeta31.getColumnCount();
2020-06-17 21:56:25 jdbc[3]: 
/**/rs105.getLong(1);
2020-06-17 21:56:25 jdbc[3]: 
/**/rs105.close();
2020-06-17 21:56:25 jdbc[3]: 
/**/prep61.getMaxRows();
2020-06-17 21:56:25 jdbc[3]: 
/**/prep61.getQueryTimeout();
2020-06-17 21:56:25 jdbc[3]: 
/**/prep61.close();
2020-06-17 21:56:25 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:56:25 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 21:56:25 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:56:25 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:56:25 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:56:25 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:56:25 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:56:25 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:56:25 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:56:26 jdbc[13]: 
/**/Statement stat8 = conn10.createStatement(1004, 1008);
2020-06-17 21:56:26 jdbc[13]: 
/**/stat8.setMaxRows(1000);
2020-06-17 21:56:26 jdbc[13]: 
/**/stat8.execute("SELECT * FROM LOG_TBL");
2020-06-17 21:56:26 jdbc[13]: 
/*SQL #:23*/SELECT * FROM LOG_TBL;
2020-06-17 21:56:26 jdbc[13]: 
/**/ResultSet rs106 = stat8.getResultSet();
2020-06-17 21:56:26 jdbc[13]: 
/**/ResultSetMetaData rsMeta32 = rs106.getMetaData();
2020-06-17 21:56:26 jdbc[13]: 
/**/conn10.getCatalog();
2020-06-17 21:56:26 jdbc[13]: 
/**/rsMeta32.getColumnCount();
2020-06-17 21:56:26 jdbc[13]: 
/**/rsMeta32.getColumnLabel(1);
2020-06-17 21:56:26 jdbc[13]: 
/**/rsMeta32.getColumnLabel(2);
2020-06-17 21:56:26 jdbc[13]: 
/**/rsMeta32.getColumnLabel(3);
2020-06-17 21:56:26 jdbc[13]: 
/**/rsMeta32.getColumnLabel(4);
2020-06-17 21:56:26 jdbc[13]: 
/**/rsMeta32.getColumnLabel(5);
2020-06-17 21:56:26 jdbc[13]: 
/**/rsMeta32.getColumnLabel(6);
2020-06-17 21:56:26 jdbc[13]: 
/**/rsMeta32.getColumnLabel(7);
2020-06-17 21:56:26 jdbc[13]: 
/**/rsMeta32.getColumnLabel(8);
2020-06-17 21:56:26 jdbc[13]: 
/**/rsMeta32.getColumnLabel(9);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.next();
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(1);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(2);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(3);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(4);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(5);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(6);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(7);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(8);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(9);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.next();
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(1);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(2);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(3);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(4);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(5);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(6);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(7);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(8);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(9);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.next();
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(1);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(2);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(3);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(4);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(5);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(6);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(7);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(8);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(9);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.next();
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(1);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(2);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(3);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(4);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(5);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(6);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(7);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(8);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(9);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.next();
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(1);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(2);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(3);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(4);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(5);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(6);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(7);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(8);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(9);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.next();
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(1);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(2);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(3);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(4);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(5);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(6);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(7);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(8);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(9);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.next();
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(1);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(2);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(3);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(4);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(5);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(6);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(7);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(8);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(9);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.next();
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(1);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(2);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(3);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(4);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(5);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(6);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(7);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(8);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(9);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.next();
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(1);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(2);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(3);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(4);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(5);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(6);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(7);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(8);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(9);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.next();
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(1);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(2);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(3);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(4);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(5);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(6);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(7);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(8);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(9);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.next();
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(1);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(2);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(3);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(4);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(5);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(6);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(7);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(8);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(9);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.next();
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(1);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(2);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(3);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(4);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(5);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(6);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(7);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(8);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(9);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.next();
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(1);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(2);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(3);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(4);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(5);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(6);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(7);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(8);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(9);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.next();
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(1);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(2);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(3);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(4);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(5);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(6);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(7);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(8);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(9);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.next();
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(1);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(2);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(3);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(4);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(5);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(6);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(7);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(8);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(9);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.next();
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(1);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(2);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(3);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(4);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(5);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(6);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(7);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(8);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(9);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.next();
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(1);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(2);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(3);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(4);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(5);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(6);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(7);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(8);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(9);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.next();
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(1);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(2);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(3);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(4);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(5);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(6);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(7);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(8);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(9);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.next();
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(1);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(2);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(3);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(4);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(5);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(6);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(7);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(8);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(9);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.next();
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(1);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(2);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(3);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(4);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(5);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(6);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(7);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(8);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(9);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.next();
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(1);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(2);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(3);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(4);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(5);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(6);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(7);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(8);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(9);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.next();
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(1);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(2);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(3);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(4);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(5);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(6);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(7);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(8);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(9);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.next();
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(1);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(2);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(3);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(4);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(5);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(6);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(7);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(8);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getString(9);
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.next();
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getConcurrency();
2020-06-17 21:56:26 jdbc[13]: 
/**/DatabaseMetaData dbMeta9 = conn10.getMetaData();
2020-06-17 21:56:26 jdbc[13]: 
/**/dbMeta9.getTables(null, "PUBLIC", "LOG_TBL", new String[]{"TABLE"});
2020-06-17 21:56:26 jdbc[13]: 
/**/PreparedStatement prep62 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME");
2020-06-17 21:56:26 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@6b6eed0d]
2020-06-17 21:56:26 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@6b6eed0d
2020-06-17 21:56:26 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:56:26 jdbc[13]: Table      :     potential plan item cost 4,322 index meta
2020-06-17 21:56:26 jdbc[13]: Plan       :   best plan item cost 4,278.78 index meta
2020-06-17 21:56:26 jdbc[13]: Plan       : plan cost 4,279.78
2020-06-17 21:56:26 jdbc[13]: 
/**/prep62.setString(1, "%");
2020-06-17 21:56:26 jdbc[13]: 
/**/prep62.setString(2, "PUBLIC");
2020-06-17 21:56:26 jdbc[13]: 
/**/prep62.setString(3, "LOG_TBL");
2020-06-17 21:56:26 jdbc[13]: 
/**/prep62.setString(4, "\\");
2020-06-17 21:56:26 jdbc[13]: 
/**/prep62.setString(5, "TABLE");
2020-06-17 21:56:26 jdbc[13]: 
/**/ResultSet rs107 = prep62.executeQuery();
2020-06-17 21:56:26 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@6b6eed0d]
2020-06-17 21:56:26 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@6b6eed0d
2020-06-17 21:56:26 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:56:26 jdbc[13]: Table      :     potential plan item cost 1,324 index meta
2020-06-17 21:56:26 jdbc[13]: Plan       :   best plan item cost 1,271.04 index meta
2020-06-17 21:56:26 jdbc[13]: Plan       : plan cost 1,272.04
2020-06-17 21:56:26 jdbc[13]: 
/*SQL l:414 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME {1: '%', 2: 'PUBLIC', 3: 'LOG_TBL', 4: '\\', 5: 'TABLE'};
2020-06-17 21:56:26 jdbc[13]: 
/**/rs107.next();
2020-06-17 21:56:26 jdbc[13]: 
/**/rs107.getString("SQL");
2020-06-17 21:56:26 jdbc[13]: 
/**/rs107.getString("TABLE_NAME");
2020-06-17 21:56:26 jdbc[13]: 
/**/dbMeta9.getPrimaryKeys(null, "PUBLIC", "LOG_TBL");
2020-06-17 21:56:26 jdbc[13]: 
/**/PreparedStatement prep63 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME");
2020-06-17 21:56:26 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@39ff129a]
2020-06-17 21:56:26 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@39ff129a
2020-06-17 21:56:26 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:56:26 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-17 21:56:26 jdbc[13]: Plan       :   best plan item cost 321.44 index meta
2020-06-17 21:56:26 jdbc[13]: Plan       : plan cost 322.44
2020-06-17 21:56:26 jdbc[13]: 
/**/prep63.setString(1, "%");
2020-06-17 21:56:26 jdbc[13]: 
/**/prep63.setString(2, "\\");
2020-06-17 21:56:26 jdbc[13]: 
/**/prep63.setString(3, "PUBLIC");
2020-06-17 21:56:26 jdbc[13]: 
/**/prep63.setString(4, "\\");
2020-06-17 21:56:26 jdbc[13]: 
/**/prep63.setString(5, "LOG_TBL");
2020-06-17 21:56:26 jdbc[13]: 
/**/ResultSet rs108 = prep63.executeQuery();
2020-06-17 21:56:26 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@39ff129a]
2020-06-17 21:56:26 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@39ff129a
2020-06-17 21:56:26 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:56:26 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-17 21:56:26 jdbc[13]: Plan       :   best plan item cost 318.16 index meta
2020-06-17 21:56:26 jdbc[13]: Plan       : plan cost 319.16
2020-06-17 21:56:26 jdbc[13]: 
/*SQL l:316 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME {1: '%', 2: '\\', 3: 'PUBLIC', 4: '\\', 5: 'LOG_TBL'};
2020-06-17 21:56:26 jdbc[13]: 
/**/rs108.next();
2020-06-17 21:56:26 jdbc[13]: 
/**/rs108.getString("COLUMN_NAME");
2020-06-17 21:56:26 jdbc[13]: 
/**/rs108.next();
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.getType();
2020-06-17 21:56:26 jdbc[13]: 
/**/rs106.close();
2020-06-17 21:56:26 jdbc[13]: 
/**/stat8.close();
2020-06-17 21:56:42 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-17 21:56:42 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 21:56:42 jdbc[3]: 
/**/conn0.setReadOnly(true);
2020-06-17 21:56:42 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:56:42 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:56:42 jdbc[3]: 
/**/PreparedStatement prep64 = conn0.prepareStatement("select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=?");
2020-06-17 21:56:42 jdbc[3]: 
/**/prep64.setLong(1, 4L);
2020-06-17 21:56:42 jdbc[3]: 
/**/ResultSet rs109 = prep64.executeQuery();
2020-06-17 21:56:42 jdbc[3]: 
/*SQL l:225 #:1*/select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=? {1: 4};
2020-06-17 21:56:42 jdbc[3]: 
/**/rs109.next();
2020-06-17 21:56:42 jdbc[3]: 
/**/rs109.getString("customer2_0_0_");
2020-06-17 21:56:42 jdbc[3]: 
/**/rs109.wasNull();
2020-06-17 21:56:42 jdbc[3]: 
/**/rs109.getString("customer3_0_0_");
2020-06-17 21:56:42 jdbc[3]: 
/**/rs109.wasNull();
2020-06-17 21:56:42 jdbc[3]: 
/**/rs109.getString("customer4_0_0_");
2020-06-17 21:56:42 jdbc[3]: 
/**/rs109.wasNull();
2020-06-17 21:56:42 jdbc[3]: 
/**/rs109.next();
2020-06-17 21:56:42 jdbc[3]: 
/**/rs109.close();
2020-06-17 21:56:42 jdbc[3]: 
/**/prep64.getMaxRows();
2020-06-17 21:56:42 jdbc[3]: 
/**/prep64.getQueryTimeout();
2020-06-17 21:56:42 jdbc[3]: 
/**/prep64.close();
2020-06-17 21:56:42 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:56:42 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:56:42 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:56:42 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:56:42 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:56:42 jdbc[3]: 
/**/conn0.setReadOnly(false);
2020-06-17 21:56:42 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:56:42 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:56:42 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:56:43 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-17 21:56:43 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 21:56:43 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:56:43 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:56:43 jdbc[3]: 
/**/PreparedStatement prep65 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 21:56:43 jdbc[3]: 
/**/prep65.setString(1, "CustomerMS");
2020-06-17 21:56:43 jdbc[3]: 
/**/prep65.setString(2, "INFO");
2020-06-17 21:56:43 jdbc[3]: 
/**/prep65.setNull(3, 12);
2020-06-17 21:56:43 jdbc[3]: 
/**/prep65.setString(4, "/api/customers/4");
2020-06-17 21:56:43 jdbc[3]: 
/**/prep65.setString(5, "Customer(id=4, firstName=David, lastName=Yonge, email=david@gmail.com)");
2020-06-17 21:56:43 jdbc[3]: 
/**/prep65.setString(6, "6cc53148f46f5151");
2020-06-17 21:56:43 jdbc[3]: 
/**/prep65.setString(7, "2020-06-18T02:56:42.193Z");
2020-06-17 21:56:43 jdbc[3]: 
/**/prep65.setString(8, "6cc53148f46f5151");
2020-06-17 21:56:43 jdbc[3]: 
/**/prep65.executeUpdate();
2020-06-17 21:56:43 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 21:56:43 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 21:56:43 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/4', 5: 'Customer(id=4, firstName=David, lastName=Yonge, email=david@gmail.com)', 6: '6cc53148f46f5151', 7: '2020-06-18T02:56:42.193Z', 8: '6cc53148f46f5151'};
2020-06-17 21:56:43 jdbc[3]: 
/**/ResultSet rs110 = prep65.getGeneratedKeys();
2020-06-17 21:56:43 jdbc[3]: 
/**/rs110.next();
2020-06-17 21:56:43 jdbc[3]: 
/**/ResultSetMetaData rsMeta33 = rs110.getMetaData();
2020-06-17 21:56:43 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:56:43 jdbc[3]: 
/**/rsMeta33.getColumnCount();
2020-06-17 21:56:43 jdbc[3]: 
/**/rs110.getLong(1);
2020-06-17 21:56:43 jdbc[3]: 
/**/rs110.close();
2020-06-17 21:56:43 jdbc[3]: 
/**/prep65.getMaxRows();
2020-06-17 21:56:43 jdbc[3]: 
/**/prep65.getQueryTimeout();
2020-06-17 21:56:43 jdbc[3]: 
/**/prep65.close();
2020-06-17 21:56:43 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:56:43 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 21:56:43 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:56:43 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:56:43 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:56:43 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:56:43 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:56:43 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:56:43 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:56:45 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-17 21:56:45 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 21:56:45 jdbc[3]: 
/**/conn0.setReadOnly(true);
2020-06-17 21:56:45 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:56:45 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:56:45 jdbc[3]: 
/**/PreparedStatement prep66 = conn0.prepareStatement("select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=?");
2020-06-17 21:56:45 jdbc[3]: 
/**/prep66.setLong(1, 5L);
2020-06-17 21:56:45 jdbc[3]: 
/**/ResultSet rs111 = prep66.executeQuery();
2020-06-17 21:56:45 jdbc[3]: 
/*SQL l:225 #:1*/select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=? {1: 5};
2020-06-17 21:56:45 jdbc[3]: 
/**/rs111.next();
2020-06-17 21:56:45 jdbc[3]: 
/**/rs111.getString("customer2_0_0_");
2020-06-17 21:56:45 jdbc[3]: 
/**/rs111.wasNull();
2020-06-17 21:56:45 jdbc[3]: 
/**/rs111.getString("customer3_0_0_");
2020-06-17 21:56:45 jdbc[3]: 
/**/rs111.wasNull();
2020-06-17 21:56:45 jdbc[3]: 
/**/rs111.getString("customer4_0_0_");
2020-06-17 21:56:45 jdbc[3]: 
/**/rs111.wasNull();
2020-06-17 21:56:45 jdbc[3]: 
/**/rs111.next();
2020-06-17 21:56:45 jdbc[3]: 
/**/rs111.close();
2020-06-17 21:56:45 jdbc[3]: 
/**/prep66.getMaxRows();
2020-06-17 21:56:45 jdbc[3]: 
/**/prep66.getQueryTimeout();
2020-06-17 21:56:45 jdbc[3]: 
/**/prep66.close();
2020-06-17 21:56:45 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:56:45 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:56:45 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:56:45 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:56:45 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:56:45 jdbc[3]: 
/**/conn0.setReadOnly(false);
2020-06-17 21:56:45 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:56:45 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:56:45 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:56:46 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-17 21:56:46 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 21:56:46 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 21:56:46 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 21:56:46 jdbc[3]: 
/**/PreparedStatement prep67 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 21:56:46 jdbc[3]: 
/**/prep67.setString(1, "CustomerMS");
2020-06-17 21:56:46 jdbc[3]: 
/**/prep67.setString(2, "INFO");
2020-06-17 21:56:46 jdbc[3]: 
/**/prep67.setNull(3, 12);
2020-06-17 21:56:46 jdbc[3]: 
/**/prep67.setString(4, "/api/customers/5");
2020-06-17 21:56:46 jdbc[3]: 
/**/prep67.setString(5, "Customer(id=5, firstName=Peter, lastName=Parker, email=peter@gmail.com)");
2020-06-17 21:56:46 jdbc[3]: 
/**/prep67.setString(6, "7f2851bfe57d4c73");
2020-06-17 21:56:46 jdbc[3]: 
/**/prep67.setString(7, "2020-06-18T02:56:45.275Z");
2020-06-17 21:56:46 jdbc[3]: 
/**/prep67.setString(8, "7f2851bfe57d4c73");
2020-06-17 21:56:46 jdbc[3]: 
/**/prep67.executeUpdate();
2020-06-17 21:56:46 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 21:56:46 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 21:56:46 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/5', 5: 'Customer(id=5, firstName=Peter, lastName=Parker, email=peter@gmail.com)', 6: '7f2851bfe57d4c73', 7: '2020-06-18T02:56:45.275Z', 8: '7f2851bfe57d4c73'};
2020-06-17 21:56:46 jdbc[3]: 
/**/ResultSet rs112 = prep67.getGeneratedKeys();
2020-06-17 21:56:46 jdbc[3]: 
/**/rs112.next();
2020-06-17 21:56:46 jdbc[3]: 
/**/ResultSetMetaData rsMeta34 = rs112.getMetaData();
2020-06-17 21:56:46 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 21:56:46 jdbc[3]: 
/**/rsMeta34.getColumnCount();
2020-06-17 21:56:46 jdbc[3]: 
/**/rs112.getLong(1);
2020-06-17 21:56:46 jdbc[3]: 
/**/rs112.close();
2020-06-17 21:56:46 jdbc[3]: 
/**/prep67.getMaxRows();
2020-06-17 21:56:46 jdbc[3]: 
/**/prep67.getQueryTimeout();
2020-06-17 21:56:46 jdbc[3]: 
/**/prep67.close();
2020-06-17 21:56:46 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:56:46 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 21:56:46 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:56:46 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 21:56:46 jdbc[3]: 
/**/conn0.commit();
2020-06-17 21:56:46 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 21:56:46 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 21:56:46 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:56:46 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 21:56:47 jdbc[13]: 
/**/Statement stat9 = conn10.createStatement(1004, 1008);
2020-06-17 21:56:47 jdbc[13]: 
/**/stat9.setMaxRows(1000);
2020-06-17 21:56:47 jdbc[13]: 
/**/stat9.execute("SELECT * FROM LOG_TBL");
2020-06-17 21:56:47 jdbc[13]: 
/*SQL #:25*/SELECT * FROM LOG_TBL;
2020-06-17 21:56:47 jdbc[13]: 
/**/ResultSet rs113 = stat9.getResultSet();
2020-06-17 21:56:47 jdbc[13]: 
/**/ResultSetMetaData rsMeta35 = rs113.getMetaData();
2020-06-17 21:56:47 jdbc[13]: 
/**/conn10.getCatalog();
2020-06-17 21:56:47 jdbc[13]: 
/**/rsMeta35.getColumnCount();
2020-06-17 21:56:47 jdbc[13]: 
/**/rsMeta35.getColumnLabel(1);
2020-06-17 21:56:47 jdbc[13]: 
/**/rsMeta35.getColumnLabel(2);
2020-06-17 21:56:47 jdbc[13]: 
/**/rsMeta35.getColumnLabel(3);
2020-06-17 21:56:47 jdbc[13]: 
/**/rsMeta35.getColumnLabel(4);
2020-06-17 21:56:47 jdbc[13]: 
/**/rsMeta35.getColumnLabel(5);
2020-06-17 21:56:47 jdbc[13]: 
/**/rsMeta35.getColumnLabel(6);
2020-06-17 21:56:47 jdbc[13]: 
/**/rsMeta35.getColumnLabel(7);
2020-06-17 21:56:47 jdbc[13]: 
/**/rsMeta35.getColumnLabel(8);
2020-06-17 21:56:47 jdbc[13]: 
/**/rsMeta35.getColumnLabel(9);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.next();
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(1);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(2);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(3);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(4);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(5);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(6);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(7);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(8);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(9);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.next();
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(1);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(2);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(3);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(4);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(5);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(6);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(7);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(8);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(9);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.next();
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(1);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(2);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(3);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(4);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(5);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(6);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(7);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(8);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(9);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.next();
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(1);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(2);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(3);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(4);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(5);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(6);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(7);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(8);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(9);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.next();
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(1);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(2);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(3);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(4);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(5);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(6);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(7);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(8);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(9);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.next();
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(1);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(2);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(3);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(4);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(5);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(6);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(7);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(8);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(9);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.next();
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(1);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(2);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(3);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(4);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(5);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(6);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(7);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(8);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(9);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.next();
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(1);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(2);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(3);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(4);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(5);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(6);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(7);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(8);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(9);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.next();
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(1);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(2);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(3);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(4);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(5);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(6);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(7);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(8);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(9);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.next();
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(1);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(2);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(3);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(4);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(5);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(6);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(7);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(8);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(9);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.next();
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(1);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(2);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(3);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(4);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(5);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(6);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(7);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(8);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(9);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.next();
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(1);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(2);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(3);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(4);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(5);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(6);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(7);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(8);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(9);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.next();
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(1);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(2);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(3);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(4);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(5);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(6);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(7);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(8);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(9);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.next();
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(1);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(2);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(3);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(4);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(5);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(6);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(7);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(8);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(9);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.next();
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(1);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(2);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(3);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(4);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(5);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(6);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(7);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(8);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(9);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.next();
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(1);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(2);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(3);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(4);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(5);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(6);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(7);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(8);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(9);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.next();
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(1);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(2);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(3);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(4);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(5);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(6);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(7);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(8);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(9);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.next();
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(1);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(2);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(3);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(4);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(5);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(6);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(7);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(8);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(9);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.next();
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(1);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(2);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(3);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(4);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(5);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(6);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(7);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(8);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(9);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.next();
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(1);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(2);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(3);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(4);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(5);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(6);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(7);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(8);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(9);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.next();
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(1);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(2);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(3);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(4);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(5);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(6);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(7);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(8);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(9);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.next();
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(1);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(2);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(3);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(4);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(5);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(6);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(7);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(8);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(9);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.next();
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(1);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(2);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(3);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(4);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(5);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(6);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(7);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(8);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(9);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.next();
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(1);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(2);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(3);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(4);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(5);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(6);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(7);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(8);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(9);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.next();
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(1);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(2);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(3);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(4);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(5);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(6);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(7);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(8);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getString(9);
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.next();
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getConcurrency();
2020-06-17 21:56:47 jdbc[13]: 
/**/DatabaseMetaData dbMeta10 = conn10.getMetaData();
2020-06-17 21:56:47 jdbc[13]: 
/**/dbMeta10.getTables(null, "PUBLIC", "LOG_TBL", new String[]{"TABLE"});
2020-06-17 21:56:47 jdbc[13]: 
/**/PreparedStatement prep68 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME");
2020-06-17 21:56:47 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@6b6eed0d]
2020-06-17 21:56:47 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@6b6eed0d
2020-06-17 21:56:47 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:56:47 jdbc[13]: Table      :     potential plan item cost 4,322 index meta
2020-06-17 21:56:47 jdbc[13]: Plan       :   best plan item cost 4,278.78 index meta
2020-06-17 21:56:47 jdbc[13]: Plan       : plan cost 4,279.78
2020-06-17 21:56:47 jdbc[13]: 
/**/prep68.setString(1, "%");
2020-06-17 21:56:47 jdbc[13]: 
/**/prep68.setString(2, "PUBLIC");
2020-06-17 21:56:47 jdbc[13]: 
/**/prep68.setString(3, "LOG_TBL");
2020-06-17 21:56:47 jdbc[13]: 
/**/prep68.setString(4, "\\");
2020-06-17 21:56:47 jdbc[13]: 
/**/prep68.setString(5, "TABLE");
2020-06-17 21:56:47 jdbc[13]: 
/**/ResultSet rs114 = prep68.executeQuery();
2020-06-17 21:56:47 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@6b6eed0d]
2020-06-17 21:56:47 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@6b6eed0d
2020-06-17 21:56:47 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:56:47 jdbc[13]: Table      :     potential plan item cost 1,324 index meta
2020-06-17 21:56:47 jdbc[13]: Plan       :   best plan item cost 1,271.04 index meta
2020-06-17 21:56:47 jdbc[13]: Plan       : plan cost 1,272.04
2020-06-17 21:56:47 jdbc[13]: 
/*SQL l:414 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME {1: '%', 2: 'PUBLIC', 3: 'LOG_TBL', 4: '\\', 5: 'TABLE'};
2020-06-17 21:56:47 jdbc[13]: 
/**/rs114.next();
2020-06-17 21:56:47 jdbc[13]: 
/**/rs114.getString("SQL");
2020-06-17 21:56:47 jdbc[13]: 
/**/rs114.getString("TABLE_NAME");
2020-06-17 21:56:47 jdbc[13]: 
/**/dbMeta10.getPrimaryKeys(null, "PUBLIC", "LOG_TBL");
2020-06-17 21:56:47 jdbc[13]: 
/**/PreparedStatement prep69 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME");
2020-06-17 21:56:47 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@39ff129a]
2020-06-17 21:56:47 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@39ff129a
2020-06-17 21:56:47 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:56:47 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-17 21:56:47 jdbc[13]: Plan       :   best plan item cost 321.44 index meta
2020-06-17 21:56:47 jdbc[13]: Plan       : plan cost 322.44
2020-06-17 21:56:47 jdbc[13]: 
/**/prep69.setString(1, "%");
2020-06-17 21:56:47 jdbc[13]: 
/**/prep69.setString(2, "\\");
2020-06-17 21:56:47 jdbc[13]: 
/**/prep69.setString(3, "PUBLIC");
2020-06-17 21:56:47 jdbc[13]: 
/**/prep69.setString(4, "\\");
2020-06-17 21:56:47 jdbc[13]: 
/**/prep69.setString(5, "LOG_TBL");
2020-06-17 21:56:47 jdbc[13]: 
/**/ResultSet rs115 = prep69.executeQuery();
2020-06-17 21:56:47 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@39ff129a]
2020-06-17 21:56:47 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@39ff129a
2020-06-17 21:56:47 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 21:56:47 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-17 21:56:47 jdbc[13]: Plan       :   best plan item cost 318.16 index meta
2020-06-17 21:56:47 jdbc[13]: Plan       : plan cost 319.16
2020-06-17 21:56:47 jdbc[13]: 
/*SQL l:316 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME {1: '%', 2: '\\', 3: 'PUBLIC', 4: '\\', 5: 'LOG_TBL'};
2020-06-17 21:56:47 jdbc[13]: 
/**/rs115.next();
2020-06-17 21:56:47 jdbc[13]: 
/**/rs115.getString("COLUMN_NAME");
2020-06-17 21:56:47 jdbc[13]: 
/**/rs115.next();
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.getType();
2020-06-17 21:56:47 jdbc[13]: 
/**/rs113.close();
2020-06-17 21:56:47 jdbc[13]: 
/**/stat9.close();
2020-06-17 22:02:55 jdbc[13]: 
/**/conn10.close();
2020-06-17 22:02:55 lock: 13 shared read lock unlock SYS 
2020-06-17 22:02:55 database: disconnecting session #13
2020-06-17 22:02:55 database: disconnected session #13
2020-06-17 22:02:55 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-17 22:02:55 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 22:02:55 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:02:55 jdbc[3]: 
/**/Statement stat10 = conn0.createStatement();
2020-06-17 22:02:55 jdbc[3]: 
/**/stat10.execute("drop table if exists customer_tbl CASCADE ");
2020-06-17 22:02:55 lock: 3 exclusive write lock requesting for CUSTOMER_TBL 
2020-06-17 22:02:55 lock: 3 exclusive write lock added for CUSTOMER_TBL 
2020-06-17 22:02:55 lock: 3 exclusive write lock requesting for SYS 
2020-06-17 22:02:55 lock: 3 exclusive write lock added for SYS 
2020-06-17 22:02:55 jdbc[3]: 
/*SQL t:2*/drop table if exists customer_tbl CASCADE;
2020-06-17 22:02:55 lock: 3 exclusive write lock unlock SYS 
2020-06-17 22:02:55 jdbc[3]: 
/**/stat10.getWarnings();
2020-06-17 22:02:55 jdbc[3]: 
/**/stat10.execute("drop table if exists log_tbl CASCADE ");
2020-06-17 22:02:55 lock: 3 exclusive write lock requesting for LOG_TBL 
2020-06-17 22:02:55 lock: 3 exclusive write lock added for LOG_TBL 
2020-06-17 22:02:55 lock: 3 exclusive write lock requesting for SYS 
2020-06-17 22:02:55 lock: 3 exclusive write lock added for SYS 
2020-06-17 22:02:55 jdbc[3]: 
/*SQL */drop table if exists log_tbl CASCADE;
2020-06-17 22:02:55 lock: 3 exclusive write lock unlock SYS 
2020-06-17 22:02:55 jdbc[3]: 
/**/stat10.getWarnings();
2020-06-17 22:02:55 jdbc[3]: 
/**/stat10.close();
2020-06-17 22:02:55 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:02:55 database: closing /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb from shutdown hook
2020-06-17 22:02:55 lock: 3 shared read lock unlock SYS 
2020-06-17 22:02:55 database: disconnecting session #3
2020-06-17 22:02:55 database: disconnected session #3
2020-06-17 22:02:55 lock: 4 shared read lock unlock SYS 
2020-06-17 22:02:55 database: disconnecting session #4
2020-06-17 22:02:55 database: disconnected session #4
2020-06-17 22:02:55 lock: 5 shared read lock unlock SYS 
2020-06-17 22:02:55 database: disconnecting session #5
2020-06-17 22:02:55 database: disconnected session #5
2020-06-17 22:02:55 lock: 6 shared read lock unlock SYS 
2020-06-17 22:02:55 database: disconnecting session #6
2020-06-17 22:02:55 database: disconnected session #6
2020-06-17 22:02:55 lock: 7 shared read lock unlock SYS 
2020-06-17 22:02:55 database: disconnecting session #7
2020-06-17 22:02:55 database: disconnected session #7
2020-06-17 22:02:55 lock: 8 shared read lock unlock SYS 
2020-06-17 22:02:55 database: disconnecting session #8
2020-06-17 22:02:55 database: disconnected session #8
2020-06-17 22:02:55 lock: 9 shared read lock unlock SYS 
2020-06-17 22:02:55 database: disconnecting session #9
2020-06-17 22:02:55 database: disconnected session #9
2020-06-17 22:02:55 lock: 10 shared read lock unlock SYS 
2020-06-17 22:02:55 database: disconnecting session #10
2020-06-17 22:02:55 database: disconnected session #10
2020-06-17 22:02:55 lock: 11 shared read lock unlock SYS 
2020-06-17 22:02:55 database: disconnecting session #11
2020-06-17 22:02:55 database: disconnected session #11
2020-06-17 22:02:55 lock: 12 shared read lock unlock SYS 
2020-06-17 22:02:55 database: disconnecting session #12
2020-06-17 22:02:55 database: disconnected session #12
2020-06-17 22:02:55 jdbc[3]: 
/**/conn0.close();
2020-06-17 22:02:55 jdbc[4]: 
/**/conn1.close();
2020-06-17 22:02:55 jdbc[5]: 
/**/conn2.close();
2020-06-17 22:02:55 jdbc[6]: 
/**/conn3.close();
2020-06-17 22:02:55 jdbc[7]: 
/**/conn4.close();
2020-06-17 22:02:55 jdbc[8]: 
/**/conn5.close();
2020-06-17 22:02:55 jdbc[9]: 
/**/conn6.close();
2020-06-17 22:02:55 jdbc[10]: 
/**/conn7.close();
2020-06-17 22:02:55 jdbc[11]: 
/**/conn8.close();
2020-06-17 22:02:55 jdbc[12]: 
/**/conn9.close();
2020-06-17 22:02:56 database: closing /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 22:02:56 lock: 1 shared read lock unlock SYS 
2020-06-17 22:02:56 lock: 2 shared read lock unlock SYS 
2020-06-17 22:02:56 database: closed
2020-06-17 22:04:38 database: opening /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb (build 200)
2020-06-17 22:04:38 lock: 1 exclusive write lock requesting for SYS 
2020-06-17 22:04:38 lock: 1 exclusive write lock added for SYS 
2020-06-17 22:04:38 lock: 1 exclusive write lock unlock SYS 
2020-06-17 22:04:38 lock: 1 exclusive write lock requesting for SYS 
2020-06-17 22:04:38 lock: 1 exclusive write lock added for SYS 
2020-06-17 22:04:38 lock: 1 exclusive write lock unlock SYS 
2020-06-17 22:04:38 lock: 1 exclusive write lock requesting for SYS 
2020-06-17 22:04:38 lock: 1 exclusive write lock added for SYS 
2020-06-17 22:04:38 lock: 1 exclusive write lock unlock SYS 
2020-06-17 22:04:38 database: opened /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 22:04:38 database: connecting session #3 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 22:04:38 jdbc[3]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 22:04:38 jdbc[3]: 
/**/Connection conn0 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 22:04:38 jdbc[3]: 
/**/conn0.isReadOnly();
2020-06-17 22:04:38 jdbc[3]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 22:04:38 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:04:38 jdbc[3]: 
/**/conn0.isValid(1);
2020-06-17 22:04:38 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 22:04:38 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 22:04:38 jdbc[3]: 
/**/DatabaseMetaData dbMeta0 = conn0.getMetaData();
2020-06-17 22:04:38 jdbc[3]: 
/**/dbMeta0.getURL();
2020-06-17 22:04:38 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:04:38 database: connecting session #4 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 22:04:38 jdbc[4]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 22:04:38 jdbc[4]: 
/**/Connection conn1 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 22:04:38 jdbc[4]: 
/**/conn1.isReadOnly();
2020-06-17 22:04:38 jdbc[4]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 22:04:38 jdbc[4]: 
/**/conn1.getAutoCommit();
2020-06-17 22:04:38 database: connecting session #5 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 22:04:38 jdbc[5]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 22:04:38 jdbc[5]: 
/**/Connection conn2 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 22:04:38 jdbc[5]: 
/**/conn2.isReadOnly();
2020-06-17 22:04:38 jdbc[5]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 22:04:38 jdbc[5]: 
/**/conn2.getAutoCommit();
2020-06-17 22:04:38 database: connecting session #6 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 22:04:38 jdbc[6]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 22:04:38 jdbc[6]: 
/**/Connection conn3 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 22:04:38 jdbc[6]: 
/**/conn3.isReadOnly();
2020-06-17 22:04:38 jdbc[6]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 22:04:38 jdbc[6]: 
/**/conn3.getAutoCommit();
2020-06-17 22:04:38 database: connecting session #7 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 22:04:38 jdbc[7]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 22:04:38 jdbc[7]: 
/**/Connection conn4 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 22:04:38 jdbc[7]: 
/**/conn4.isReadOnly();
2020-06-17 22:04:38 jdbc[7]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 22:04:38 jdbc[7]: 
/**/conn4.getAutoCommit();
2020-06-17 22:04:38 database: connecting session #8 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 22:04:38 jdbc[8]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 22:04:38 jdbc[8]: 
/**/Connection conn5 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 22:04:38 jdbc[8]: 
/**/conn5.isReadOnly();
2020-06-17 22:04:38 jdbc[8]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 22:04:38 jdbc[8]: 
/**/conn5.getAutoCommit();
2020-06-17 22:04:38 database: connecting session #9 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 22:04:38 jdbc[9]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 22:04:38 jdbc[9]: 
/**/Connection conn6 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 22:04:38 jdbc[9]: 
/**/conn6.isReadOnly();
2020-06-17 22:04:38 jdbc[9]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 22:04:38 jdbc[9]: 
/**/conn6.getAutoCommit();
2020-06-17 22:04:38 database: connecting session #10 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 22:04:38 jdbc[10]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 22:04:38 jdbc[10]: 
/**/Connection conn7 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 22:04:38 jdbc[10]: 
/**/conn7.isReadOnly();
2020-06-17 22:04:38 jdbc[10]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 22:04:38 jdbc[10]: 
/**/conn7.getAutoCommit();
2020-06-17 22:04:38 database: connecting session #11 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 22:04:38 jdbc[11]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 22:04:38 jdbc[11]: 
/**/Connection conn8 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 22:04:38 jdbc[11]: 
/**/conn8.isReadOnly();
2020-06-17 22:04:38 jdbc[11]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 22:04:38 jdbc[11]: 
/**/conn8.getAutoCommit();
2020-06-17 22:04:38 database: connecting session #12 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 22:04:38 jdbc[12]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 22:04:38 jdbc[12]: 
/**/Connection conn9 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 22:04:38 jdbc[12]: 
/**/conn9.isReadOnly();
2020-06-17 22:04:38 jdbc[12]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 22:04:38 jdbc[12]: 
/**/conn9.getAutoCommit();
2020-06-17 22:04:38 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-17 22:04:38 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 22:04:38 jdbc[3]: 
/**/DatabaseMetaData dbMeta1 = conn0.getMetaData();
2020-06-17 22:04:38 jdbc[3]: 
/**/dbMeta1.getDatabaseProductName();
2020-06-17 22:04:38 jdbc[3]: 
/**/dbMeta1.getDatabaseProductVersion();
2020-06-17 22:04:38 jdbc[3]: 
/**/dbMeta1.getDatabaseMajorVersion();
2020-06-17 22:04:38 jdbc[3]: 
/**/dbMeta1.getDatabaseMinorVersion();
2020-06-17 22:04:38 jdbc[3]: 
/**/dbMeta1.getDriverName();
2020-06-17 22:04:38 jdbc[3]: 
/**/dbMeta1.getDriverVersion();
2020-06-17 22:04:38 jdbc[3]: 
/**/dbMeta1.getDriverMajorVersion();
2020-06-17 22:04:38 jdbc[3]: 
/**/dbMeta1.getDriverMinorVersion();
2020-06-17 22:04:38 jdbc[3]: 
/**/dbMeta1.getJDBCMajorVersion();
2020-06-17 22:04:38 jdbc[3]: 
/**/dbMeta1.getJDBCMinorVersion();
2020-06-17 22:04:38 jdbc[3]: 
/**/dbMeta1.supportsCatalogsInTableDefinitions();
2020-06-17 22:04:38 jdbc[3]: 
/**/dbMeta1.supportsSchemasInTableDefinitions();
2020-06-17 22:04:38 jdbc[3]: 
/**/dbMeta1.storesLowerCaseIdentifiers();
2020-06-17 22:04:38 jdbc[3]: 
/**/PreparedStatement prep0 = conn0.prepareStatement("SELECT NAME, VALUE FROM INFORMATION_SCHEMA.SETTINGS WHERE NAME IN (?, ?, ?, ?)");
2020-06-17 22:04:38 jdbc[3]: Plan       : calculate cost for plan [SETTINGS:-7:org.h2.table.MetaTable@4c825966]
2020-06-17 22:04:38 jdbc[3]: Plan       :   for table filter SETTINGS:-7:org.h2.table.MetaTable@4c825966
2020-06-17 22:04:38 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 22:04:38 jdbc[3]: Plan       :   best plan item cost 9,900 index meta
2020-06-17 22:04:38 jdbc[3]: Plan       : plan cost 9,901
2020-06-17 22:04:38 jdbc[3]: 
/**/prep0.setString(1, "MODE");
2020-06-17 22:04:38 jdbc[3]: 
/**/prep0.setString(2, "DATABASE_TO_UPPER");
2020-06-17 22:04:38 jdbc[3]: 
/**/prep0.setString(3, "DATABASE_TO_LOWER");
2020-06-17 22:04:38 jdbc[3]: 
/**/prep0.setString(4, "CASE_INSENSITIVE_IDENTIFIERS");
2020-06-17 22:04:38 jdbc[3]: 
/**/ResultSet rs0 = prep0.executeQuery();
2020-06-17 22:04:38 jdbc[3]: 
/*SQL l:78 #:4 t:2*/SELECT NAME, VALUE FROM INFORMATION_SCHEMA.SETTINGS WHERE NAME IN (?, ?, ?, ?) {1: 'MODE', 2: 'DATABASE_TO_UPPER', 3: 'DATABASE_TO_LOWER', 4: 'CASE_INSENSITIVE_IDENTIFIERS'};
2020-06-17 22:04:38 jdbc[3]: 
/**/rs0.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs0.getString(2);
2020-06-17 22:04:38 jdbc[3]: 
/**/rs0.getString(1);
2020-06-17 22:04:38 jdbc[3]: 
/**/rs0.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs0.getString(2);
2020-06-17 22:04:38 jdbc[3]: 
/**/rs0.getString(1);
2020-06-17 22:04:38 jdbc[3]: 
/**/rs0.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs0.getString(2);
2020-06-17 22:04:38 jdbc[3]: 
/**/rs0.getString(1);
2020-06-17 22:04:38 jdbc[3]: 
/**/rs0.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs0.getString(2);
2020-06-17 22:04:38 jdbc[3]: 
/**/rs0.getString(1);
2020-06-17 22:04:38 jdbc[3]: 
/**/rs0.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/prep0.close();
2020-06-17 22:04:38 jdbc[3]: 
/**/dbMeta1.storesUpperCaseIdentifiers();
2020-06-17 22:04:38 jdbc[3]: 
/**/dbMeta1.storesMixedCaseIdentifiers();
2020-06-17 22:04:38 jdbc[3]: 
/**/dbMeta1.storesUpperCaseIdentifiers();
2020-06-17 22:04:38 jdbc[3]: 
/**/dbMeta1.storesLowerCaseQuotedIdentifiers();
2020-06-17 22:04:38 jdbc[3]: 
/**/dbMeta1.storesUpperCaseQuotedIdentifiers();
2020-06-17 22:04:38 jdbc[3]: 
/**/dbMeta1.storesMixedCaseQuotedIdentifiers();
2020-06-17 22:04:38 jdbc[3]: 
/**/dbMeta1.getSQLKeywords();
2020-06-17 22:04:38 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:04:38 jdbc[3]: 
/*SQL #:1*/CALL DATABASE();
2020-06-17 22:04:38 jdbc[3]: 
/**/dbMeta1.supportsNamedParameters();
2020-06-17 22:04:38 jdbc[3]: 
/**/dbMeta1.supportsResultSetType(1004);
2020-06-17 22:04:38 jdbc[3]: 
/**/dbMeta1.supportsGetGeneratedKeys();
2020-06-17 22:04:38 jdbc[3]: 
/**/dbMeta1.supportsBatchUpdates();
2020-06-17 22:04:38 jdbc[3]: 
/**/dbMeta1.dataDefinitionIgnoredInTransactions();
2020-06-17 22:04:38 jdbc[3]: 
/**/dbMeta1.dataDefinitionCausesTransactionCommit();
2020-06-17 22:04:38 jdbc[3]: 
/**/dbMeta1.getSQLKeywords();
2020-06-17 22:04:38 jdbc[3]: 
/**/dbMeta1.getSQLStateType();
2020-06-17 22:04:38 jdbc[3]: 
/**/dbMeta1.locatorsUpdateCopy();
2020-06-17 22:04:38 jdbc[3]: 
/**/dbMeta1.getTypeInfo();
2020-06-17 22:04:38 jdbc[3]: 
/**/PreparedStatement prep1 = conn0.prepareStatement("SELECT TYPE_NAME, DATA_TYPE, PRECISION, PREFIX LITERAL_PREFIX, SUFFIX LITERAL_SUFFIX, PARAMS CREATE_PARAMS, NULLABLE, CASE_SENSITIVE, SEARCHABLE, FALSE UNSIGNED_ATTRIBUTE, FALSE FIXED_PREC_SCALE, AUTO_INCREMENT, TYPE_NAME LOCAL_TYPE_NAME, MINIMUM_SCALE, MAXIMUM_SCALE, DATA_TYPE SQL_DATA_TYPE, ZERO() SQL_DATETIME_SUB, RADIX NUM_PREC_RADIX FROM INFORMATION_SCHEMA.TYPE_INFO ORDER BY DATA_TYPE, POS");
2020-06-17 22:04:38 jdbc[3]: Plan       : calculate cost for plan [TYPE_INFO:-5:org.h2.table.MetaTable@578c28d9]
2020-06-17 22:04:38 jdbc[3]: Plan       :   for table filter TYPE_INFO:-5:org.h2.table.MetaTable@578c28d9
2020-06-17 22:04:38 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 22:04:38 jdbc[3]: Plan       :   best plan item cost 10,000 index meta
2020-06-17 22:04:38 jdbc[3]: Plan       : plan cost 10,001
2020-06-17 22:04:38 jdbc[3]: 
/**/ResultSet rs1 = prep1.executeQuery();
2020-06-17 22:04:38 jdbc[3]: 
/*SQL #:46 t:1*/SELECT TYPE_NAME, DATA_TYPE, PRECISION, PREFIX LITERAL_PREFIX, SUFFIX LITERAL_SUFFIX, PARAMS CREATE_PARAMS, NULLABLE, CASE_SENSITIVE, SEARCHABLE, FALSE UNSIGNED_ATTRIBUTE, FALSE FIXED_PREC_SCALE, AUTO_INCREMENT, TYPE_NAME LOCAL_TYPE_NAME, MINIMUM_SCALE, MAXIMUM_SCALE, DATA_TYPE SQL_DATA_TYPE, ZERO() SQL_DATETIME_SUB, RADIX NUM_PREC_RADIX FROM INFORMATION_SCHEMA.TYPE_INFO ORDER BY DATA_TYPE, POS;
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getStatement();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs1.close();
2020-06-17 22:04:38 jdbc[3]: 
/**/prep1.close();
2020-06-17 22:04:38 jdbc[3]: 
/**/conn0.getSchema();
2020-06-17 22:04:38 jdbc[3]: 
/**/conn0.getSchema();
2020-06-17 22:04:38 jdbc[3]: 
/**/dbMeta1.supportsNamedParameters();
2020-06-17 22:04:38 jdbc[3]: 
/**/Statement stat0 = conn0.createStatement();
2020-06-17 22:04:38 jdbc[3]: 
/**/ResultSet rs2 = stat0.executeQuery("select * from INFORMATION_SCHEMA.SEQUENCES");
2020-06-17 22:04:38 jdbc[3]: Plan       : calculate cost for plan [SEQUENCES:-9:org.h2.table.MetaTable@2f0cc043]
2020-06-17 22:04:38 jdbc[3]: Plan       :   for table filter SEQUENCES:-9:org.h2.table.MetaTable@2f0cc043
2020-06-17 22:04:38 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 22:04:38 jdbc[3]: Plan       :   best plan item cost 10,000 index meta
2020-06-17 22:04:38 jdbc[3]: Plan       : plan cost 10,001
2020-06-17 22:04:38 jdbc[3]: 
/*SQL */select * from INFORMATION_SCHEMA.SEQUENCES;
2020-06-17 22:04:38 jdbc[3]: 
/**/rs2.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs2.close();
2020-06-17 22:04:38 jdbc[3]: 
/**/stat0.close();
2020-06-17 22:04:38 jdbc[3]: 
/**/dbMeta1.getCatalogSeparator();
2020-06-17 22:04:38 jdbc[3]: 
/**/dbMeta1.isCatalogAtStart();
2020-06-17 22:04:38 jdbc[3]: 
/**/dbMeta1.getTypeInfo();
2020-06-17 22:04:38 jdbc[3]: 
/**/PreparedStatement prep2 = conn0.prepareStatement("SELECT TYPE_NAME, DATA_TYPE, PRECISION, PREFIX LITERAL_PREFIX, SUFFIX LITERAL_SUFFIX, PARAMS CREATE_PARAMS, NULLABLE, CASE_SENSITIVE, SEARCHABLE, FALSE UNSIGNED_ATTRIBUTE, FALSE FIXED_PREC_SCALE, AUTO_INCREMENT, TYPE_NAME LOCAL_TYPE_NAME, MINIMUM_SCALE, MAXIMUM_SCALE, DATA_TYPE SQL_DATA_TYPE, ZERO() SQL_DATETIME_SUB, RADIX NUM_PREC_RADIX FROM INFORMATION_SCHEMA.TYPE_INFO ORDER BY DATA_TYPE, POS");
2020-06-17 22:04:38 jdbc[3]: 
/**/ResultSet rs3 = prep2.executeQuery();
2020-06-17 22:04:38 jdbc[3]: 
/*SQL #:46*/SELECT TYPE_NAME, DATA_TYPE, PRECISION, PREFIX LITERAL_PREFIX, SUFFIX LITERAL_SUFFIX, PARAMS CREATE_PARAMS, NULLABLE, CASE_SENSITIVE, SEARCHABLE, FALSE UNSIGNED_ATTRIBUTE, FALSE FIXED_PREC_SCALE, AUTO_INCREMENT, TYPE_NAME LOCAL_TYPE_NAME, MINIMUM_SCALE, MAXIMUM_SCALE, DATA_TYPE SQL_DATA_TYPE, ZERO() SQL_DATETIME_SUB, RADIX NUM_PREC_RADIX FROM INFORMATION_SCHEMA.TYPE_INFO ORDER BY DATA_TYPE, POS;
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getStatement();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:04:38 jdbc[3]: 
/**/rs3.close();
2020-06-17 22:04:38 jdbc[3]: 
/**/prep2.close();
2020-06-17 22:04:38 jdbc[3]: 
/**/DatabaseMetaData dbMeta2 = conn0.getMetaData();
2020-06-17 22:04:38 jdbc[3]: 
/**/dbMeta2.getJDBCMajorVersion();
2020-06-17 22:04:38 jdbc[3]: 
/**/Clob clob0 = conn0.createClob();
2020-06-17 22:04:38 jdbc[3]: 
/**/clob0.free();
2020-06-17 22:04:38 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:04:39 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:04:39 jdbc[3]: 
/**/Statement stat1 = conn0.createStatement();
2020-06-17 22:04:39 jdbc[3]: 
/**/stat1.execute("drop table if exists customer_tbl CASCADE ");
2020-06-17 22:04:39 jdbc[3]: 
/*SQL */drop table if exists customer_tbl CASCADE;
2020-06-17 22:04:39 jdbc[3]: 
/**/stat1.getWarnings();
2020-06-17 22:04:39 jdbc[3]: 
/**/stat1.execute("drop table if exists log_tbl CASCADE ");
2020-06-17 22:04:39 jdbc[3]: 
/*SQL */drop table if exists log_tbl CASCADE;
2020-06-17 22:04:39 jdbc[3]: 
/**/stat1.getWarnings();
2020-06-17 22:04:39 jdbc[3]: 
/**/stat1.close();
2020-06-17 22:04:39 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:04:39 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:04:39 jdbc[3]: 
/**/Statement stat2 = conn0.createStatement();
2020-06-17 22:04:39 jdbc[3]: 
/**/stat2.execute("create table customer_tbl (id bigint generated by default as identity, customer_email varchar(255), customer_firstname varchar(255), customer_lastname varchar(255), primary key (id))");
2020-06-17 22:04:39 lock: 3 exclusive write lock requesting for SYS 
2020-06-17 22:04:39 lock: 3 exclusive write lock added for SYS 
2020-06-17 22:04:39 lock: 3 exclusive write lock unlock SYS 
2020-06-17 22:04:39 lock: 3 exclusive write lock requesting for SYS 
2020-06-17 22:04:39 lock: 3 exclusive write lock added for SYS 
2020-06-17 22:04:39 lock: 3 exclusive write lock requesting for CUSTOMER_TBL 
2020-06-17 22:04:39 lock: 3 exclusive write lock added for CUSTOMER_TBL 
2020-06-17 22:04:39 jdbc[3]: 
/*SQL t:5*/create table customer_tbl (id bigint generated by default as identity, customer_email varchar(255), customer_firstname varchar(255), customer_lastname varchar(255), primary key (id));
2020-06-17 22:04:39 lock: 3 exclusive write lock unlock SYS 
2020-06-17 22:04:39 lock: 3 exclusive write lock unlock CUSTOMER_TBL 
2020-06-17 22:04:39 jdbc[3]: 
/**/stat2.getWarnings();
2020-06-17 22:04:39 jdbc[3]: 
/**/stat2.execute("create table log_tbl (id bigint generated by default as identity, application_name varchar(255), level varchar(255), parent_span_id varchar(255), request varchar(255), response varchar(255), span_id varchar(255), time varchar(255), trace_id varchar(255), primary key (id))");
2020-06-17 22:04:39 lock: 3 exclusive write lock requesting for SYS 
2020-06-17 22:04:39 lock: 3 exclusive write lock added for SYS 
2020-06-17 22:04:39 lock: 3 exclusive write lock unlock SYS 
2020-06-17 22:04:39 lock: 3 exclusive write lock requesting for SYS 
2020-06-17 22:04:39 lock: 3 exclusive write lock added for SYS 
2020-06-17 22:04:39 lock: 3 exclusive write lock requesting for LOG_TBL 
2020-06-17 22:04:39 lock: 3 exclusive write lock added for LOG_TBL 
2020-06-17 22:04:39 jdbc[3]: 
/*SQL t:1*/create table log_tbl (id bigint generated by default as identity, application_name varchar(255), level varchar(255), parent_span_id varchar(255), request varchar(255), response varchar(255), span_id varchar(255), time varchar(255), trace_id varchar(255), primary key (id));
2020-06-17 22:04:39 lock: 3 exclusive write lock unlock SYS 
2020-06-17 22:04:39 lock: 3 exclusive write lock unlock LOG_TBL 
2020-06-17 22:04:39 jdbc[3]: 
/**/stat2.getWarnings();
2020-06-17 22:04:39 jdbc[3]: 
/**/stat2.close();
2020-06-17 22:04:39 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:04:39 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:04:39 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:04:39 jdbc[3]: 
/**/PreparedStatement prep3 = conn0.prepareStatement("select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=?");
2020-06-17 22:04:39 jdbc[3]: Plan       : calculate cost for plan [CUSTOMER0_]
2020-06-17 22:04:39 jdbc[3]: Plan       :   for table filter CUSTOMER0_
2020-06-17 22:04:39 jdbc[3]: Table      :     potential plan item cost 10,200 index PUBLIC.CUSTOMER_TBL.tableScan
2020-06-17 22:04:39 jdbc[3]: Table      :     potential plan item cost 230 index PUBLIC.PRIMARY_KEY_B
2020-06-17 22:04:39 jdbc[3]: Plan       :   best plan item cost 227.7 index PUBLIC.PRIMARY_KEY_B
2020-06-17 22:04:39 jdbc[3]: Plan       : plan cost 228.7
2020-06-17 22:04:39 jdbc[3]: 
/**/prep3.setLong(1, 1L);
2020-06-17 22:04:39 jdbc[3]: 
/**/ResultSet rs8 = prep3.executeQuery();
2020-06-17 22:04:39 jdbc[3]: 
/*SQL l:225*/select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=? {1: 1};
2020-06-17 22:04:39 jdbc[3]: 
/**/rs8.next();
2020-06-17 22:04:39 jdbc[3]: 
/**/rs8.close();
2020-06-17 22:04:39 jdbc[3]: 
/**/prep3.getMaxRows();
2020-06-17 22:04:39 jdbc[3]: 
/**/prep3.getQueryTimeout();
2020-06-17 22:04:39 jdbc[3]: Plan       : calculate cost for plan [SETTINGS:-7:org.h2.table.MetaTable@4c825966]
2020-06-17 22:04:39 jdbc[3]: Plan       :   for table filter SETTINGS:-7:org.h2.table.MetaTable@4c825966
2020-06-17 22:04:39 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 22:04:39 jdbc[3]: Plan       :   best plan item cost 9,900 index meta
2020-06-17 22:04:39 jdbc[3]: Plan       : plan cost 9,901
2020-06-17 22:04:39 jdbc[3]: 
/*SQL l:58 #:1*/SELECT VALUE FROM INFORMATION_SCHEMA.SETTINGS WHERE NAME=? {1: 'QUERY_TIMEOUT'};
2020-06-17 22:04:39 jdbc[3]: 
/**/prep3.close();
2020-06-17 22:04:39 jdbc[3]: 
/**/PreparedStatement prep4 = conn0.prepareStatement("insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?)", 1);;
2020-06-17 22:04:39 jdbc[3]: 
/**/prep4.setString(1, "ram@gmail.com");
2020-06-17 22:04:39 jdbc[3]: 
/**/prep4.setString(2, "Ram");
2020-06-17 22:04:39 jdbc[3]: 
/**/prep4.setString(3, "Thapa");
2020-06-17 22:04:39 jdbc[3]: 
/**/prep4.executeUpdate();
2020-06-17 22:04:39 lock: 1 exclusive write lock requesting for SYS 
2020-06-17 22:04:39 lock: 1 exclusive write lock added for SYS 
2020-06-17 22:04:39 lock: 1 exclusive write lock unlock SYS 
2020-06-17 22:04:39 lock: 3 shared read lock requesting for CUSTOMER_TBL 
2020-06-17 22:04:39 lock: 3 shared read lock ok CUSTOMER_TBL 
2020-06-17 22:04:39 jdbc[3]: 
/*SQL l:107 #:1 t:1*/insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?) {1: 'ram@gmail.com', 2: 'Ram', 3: 'Thapa'};
2020-06-17 22:04:39 jdbc[3]: 
/**/ResultSet rs9 = prep4.getGeneratedKeys();
2020-06-17 22:04:39 jdbc[3]: 
/**/rs9.next();
2020-06-17 22:04:39 jdbc[3]: 
/**/ResultSetMetaData rsMeta0 = rs9.getMetaData();
2020-06-17 22:04:39 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:04:39 jdbc[3]: 
/**/rsMeta0.getColumnCount();
2020-06-17 22:04:39 jdbc[3]: 
/**/rs9.getLong(1);
2020-06-17 22:04:39 jdbc[3]: 
/**/rs9.close();
2020-06-17 22:04:39 jdbc[3]: 
/**/prep4.getMaxRows();
2020-06-17 22:04:39 jdbc[3]: 
/**/prep4.getQueryTimeout();
2020-06-17 22:04:39 jdbc[3]: 
/**/prep4.close();
2020-06-17 22:04:39 jdbc[3]: 
/**/PreparedStatement prep5 = conn0.prepareStatement("select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=?");
2020-06-17 22:04:39 jdbc[3]: 
/**/prep5.setLong(1, 2L);
2020-06-17 22:04:39 jdbc[3]: 
/**/ResultSet rs10 = prep5.executeQuery();
2020-06-17 22:04:39 jdbc[3]: 
/*SQL l:225*/select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=? {1: 2};
2020-06-17 22:04:39 jdbc[3]: 
/**/rs10.next();
2020-06-17 22:04:39 jdbc[3]: 
/**/rs10.close();
2020-06-17 22:04:39 jdbc[3]: 
/**/prep5.getMaxRows();
2020-06-17 22:04:39 jdbc[3]: 
/**/prep5.getQueryTimeout();
2020-06-17 22:04:39 jdbc[3]: 
/**/prep5.close();
2020-06-17 22:04:39 jdbc[3]: 
/**/PreparedStatement prep6 = conn0.prepareStatement("insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?)", 1);;
2020-06-17 22:04:39 jdbc[3]: 
/**/prep6.setString(1, "hari@gmail.com");
2020-06-17 22:04:39 jdbc[3]: 
/**/prep6.setString(2, "Hari");
2020-06-17 22:04:39 jdbc[3]: 
/**/prep6.setString(3, "Neupane");
2020-06-17 22:04:39 jdbc[3]: 
/**/prep6.executeUpdate();
2020-06-17 22:04:39 jdbc[3]: 
/*SQL l:107 #:1*/insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?) {1: 'hari@gmail.com', 2: 'Hari', 3: 'Neupane'};
2020-06-17 22:04:39 jdbc[3]: 
/**/ResultSet rs11 = prep6.getGeneratedKeys();
2020-06-17 22:04:39 jdbc[3]: 
/**/rs11.next();
2020-06-17 22:04:39 jdbc[3]: 
/**/ResultSetMetaData rsMeta1 = rs11.getMetaData();
2020-06-17 22:04:39 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:04:39 jdbc[3]: 
/**/rsMeta1.getColumnCount();
2020-06-17 22:04:39 jdbc[3]: 
/**/rs11.getLong(1);
2020-06-17 22:04:39 jdbc[3]: 
/**/rs11.close();
2020-06-17 22:04:39 jdbc[3]: 
/**/prep6.getMaxRows();
2020-06-17 22:04:39 jdbc[3]: 
/**/prep6.getQueryTimeout();
2020-06-17 22:04:39 jdbc[3]: 
/**/prep6.close();
2020-06-17 22:04:39 jdbc[3]: 
/**/PreparedStatement prep7 = conn0.prepareStatement("select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=?");
2020-06-17 22:04:39 jdbc[3]: 
/**/prep7.setLong(1, 3L);
2020-06-17 22:04:39 jdbc[3]: 
/**/ResultSet rs12 = prep7.executeQuery();
2020-06-17 22:04:39 jdbc[3]: 
/*SQL l:225*/select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=? {1: 3};
2020-06-17 22:04:39 jdbc[3]: 
/**/rs12.next();
2020-06-17 22:04:39 jdbc[3]: 
/**/rs12.close();
2020-06-17 22:04:39 jdbc[3]: 
/**/prep7.getMaxRows();
2020-06-17 22:04:39 jdbc[3]: 
/**/prep7.getQueryTimeout();
2020-06-17 22:04:39 jdbc[3]: 
/**/prep7.close();
2020-06-17 22:04:39 jdbc[3]: 
/**/PreparedStatement prep8 = conn0.prepareStatement("insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?)", 1);;
2020-06-17 22:04:39 jdbc[3]: 
/**/prep8.setString(1, "ramila@gmail.com");
2020-06-17 22:04:39 jdbc[3]: 
/**/prep8.setString(2, "Ramila");
2020-06-17 22:04:39 jdbc[3]: 
/**/prep8.setString(3, "Karki");
2020-06-17 22:04:39 jdbc[3]: 
/**/prep8.executeUpdate();
2020-06-17 22:04:39 jdbc[3]: 
/*SQL l:107 #:1*/insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?) {1: 'ramila@gmail.com', 2: 'Ramila', 3: 'Karki'};
2020-06-17 22:04:39 jdbc[3]: 
/**/ResultSet rs13 = prep8.getGeneratedKeys();
2020-06-17 22:04:39 jdbc[3]: 
/**/rs13.next();
2020-06-17 22:04:39 jdbc[3]: 
/**/ResultSetMetaData rsMeta2 = rs13.getMetaData();
2020-06-17 22:04:39 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:04:39 jdbc[3]: 
/**/rsMeta2.getColumnCount();
2020-06-17 22:04:39 jdbc[3]: 
/**/rs13.getLong(1);
2020-06-17 22:04:39 jdbc[3]: 
/**/rs13.close();
2020-06-17 22:04:39 jdbc[3]: 
/**/prep8.getMaxRows();
2020-06-17 22:04:39 jdbc[3]: 
/**/prep8.getQueryTimeout();
2020-06-17 22:04:39 jdbc[3]: 
/**/prep8.close();
2020-06-17 22:04:39 jdbc[3]: 
/**/PreparedStatement prep9 = conn0.prepareStatement("select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=?");
2020-06-17 22:04:39 jdbc[3]: 
/**/prep9.setLong(1, 4L);
2020-06-17 22:04:39 jdbc[3]: 
/**/ResultSet rs14 = prep9.executeQuery();
2020-06-17 22:04:39 jdbc[3]: 
/*SQL l:225*/select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=? {1: 4};
2020-06-17 22:04:39 jdbc[3]: 
/**/rs14.next();
2020-06-17 22:04:39 jdbc[3]: 
/**/rs14.close();
2020-06-17 22:04:39 jdbc[3]: 
/**/prep9.getMaxRows();
2020-06-17 22:04:39 jdbc[3]: 
/**/prep9.getQueryTimeout();
2020-06-17 22:04:39 jdbc[3]: 
/**/prep9.close();
2020-06-17 22:04:39 jdbc[3]: 
/**/PreparedStatement prep10 = conn0.prepareStatement("insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?)", 1);;
2020-06-17 22:04:39 jdbc[3]: 
/**/prep10.setString(1, "david@gmail.com");
2020-06-17 22:04:39 jdbc[3]: 
/**/prep10.setString(2, "David");
2020-06-17 22:04:39 jdbc[3]: 
/**/prep10.setString(3, "Yonge");
2020-06-17 22:04:39 jdbc[3]: 
/**/prep10.executeUpdate();
2020-06-17 22:04:39 jdbc[3]: 
/*SQL l:107 #:1*/insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?) {1: 'david@gmail.com', 2: 'David', 3: 'Yonge'};
2020-06-17 22:04:39 jdbc[3]: 
/**/ResultSet rs15 = prep10.getGeneratedKeys();
2020-06-17 22:04:39 jdbc[3]: 
/**/rs15.next();
2020-06-17 22:04:39 jdbc[3]: 
/**/ResultSetMetaData rsMeta3 = rs15.getMetaData();
2020-06-17 22:04:39 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:04:39 jdbc[3]: 
/**/rsMeta3.getColumnCount();
2020-06-17 22:04:39 jdbc[3]: 
/**/rs15.getLong(1);
2020-06-17 22:04:39 jdbc[3]: 
/**/rs15.close();
2020-06-17 22:04:39 jdbc[3]: 
/**/prep10.getMaxRows();
2020-06-17 22:04:39 jdbc[3]: 
/**/prep10.getQueryTimeout();
2020-06-17 22:04:39 jdbc[3]: 
/**/prep10.close();
2020-06-17 22:04:39 jdbc[3]: 
/**/PreparedStatement prep11 = conn0.prepareStatement("select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=?");
2020-06-17 22:04:39 jdbc[3]: 
/**/prep11.setLong(1, 5L);
2020-06-17 22:04:39 jdbc[3]: 
/**/ResultSet rs16 = prep11.executeQuery();
2020-06-17 22:04:39 jdbc[3]: 
/*SQL l:225*/select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=? {1: 5};
2020-06-17 22:04:39 jdbc[3]: 
/**/rs16.next();
2020-06-17 22:04:39 jdbc[3]: 
/**/rs16.close();
2020-06-17 22:04:39 jdbc[3]: 
/**/prep11.getMaxRows();
2020-06-17 22:04:39 jdbc[3]: 
/**/prep11.getQueryTimeout();
2020-06-17 22:04:39 jdbc[3]: 
/**/prep11.close();
2020-06-17 22:04:39 jdbc[3]: 
/**/PreparedStatement prep12 = conn0.prepareStatement("insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?)", 1);;
2020-06-17 22:04:39 jdbc[3]: 
/**/prep12.setString(1, "peter@gmail.com");
2020-06-17 22:04:39 jdbc[3]: 
/**/prep12.setString(2, "Peter");
2020-06-17 22:04:39 jdbc[3]: 
/**/prep12.setString(3, "Parker");
2020-06-17 22:04:39 jdbc[3]: 
/**/prep12.executeUpdate();
2020-06-17 22:04:39 jdbc[3]: 
/*SQL l:107 #:1*/insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?) {1: 'peter@gmail.com', 2: 'Peter', 3: 'Parker'};
2020-06-17 22:04:39 jdbc[3]: 
/**/ResultSet rs17 = prep12.getGeneratedKeys();
2020-06-17 22:04:39 jdbc[3]: 
/**/rs17.next();
2020-06-17 22:04:39 jdbc[3]: 
/**/ResultSetMetaData rsMeta4 = rs17.getMetaData();
2020-06-17 22:04:39 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:04:39 jdbc[3]: 
/**/rsMeta4.getColumnCount();
2020-06-17 22:04:39 jdbc[3]: 
/**/rs17.getLong(1);
2020-06-17 22:04:39 jdbc[3]: 
/**/rs17.close();
2020-06-17 22:04:39 jdbc[3]: 
/**/prep12.getMaxRows();
2020-06-17 22:04:39 jdbc[3]: 
/**/prep12.getQueryTimeout();
2020-06-17 22:04:39 jdbc[3]: 
/**/prep12.close();
2020-06-17 22:04:39 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:04:39 lock: 3 shared read lock unlock CUSTOMER_TBL 
2020-06-17 22:04:39 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:04:39 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:04:39 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:04:39 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:04:39 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:04:39 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:04:39 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:04:42 jdbc[3]: 
/**/PreparedStatement prep13 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:04:42 jdbc[3]: 
/**/prep13.setString(1, "CustomerMS");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep13.setString(2, "INFO");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep13.setNull(3, 12);
2020-06-17 22:04:42 jdbc[3]: 
/**/prep13.setString(4, "/api/customers/2");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep13.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep13.setString(6, "835c44c5407a860f");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep13.setString(7, "2020-06-17T20:43:48.395Z");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep13.setString(8, "835c44c5407a860f");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep13.executeUpdate();
2020-06-17 22:04:42 lock: 1 exclusive write lock requesting for SYS 
2020-06-17 22:04:42 lock: 1 exclusive write lock added for SYS 
2020-06-17 22:04:42 lock: 1 exclusive write lock unlock SYS 
2020-06-17 22:04:42 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:04:42 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:04:42 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/2', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: '835c44c5407a860f', 7: '2020-06-17T20:43:48.395Z', 8: '835c44c5407a860f'};
2020-06-17 22:04:42 jdbc[3]: 
/**/ResultSet rs18 = prep13.getGeneratedKeys();
2020-06-17 22:04:42 jdbc[3]: 
/**/rs18.next();
2020-06-17 22:04:42 jdbc[3]: 
/**/ResultSetMetaData rsMeta5 = rs18.getMetaData();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:04:42 jdbc[3]: 
/**/rsMeta5.getColumnCount();
2020-06-17 22:04:42 jdbc[3]: 
/**/rs18.getLong(1);
2020-06-17 22:04:42 jdbc[3]: 
/**/rs18.close();
2020-06-17 22:04:42 jdbc[3]: 
/**/prep13.getMaxRows();
2020-06-17 22:04:42 jdbc[3]: 
/**/prep13.getQueryTimeout();
2020-06-17 22:04:42 jdbc[3]: 
/**/prep13.close();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:04:42 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:04:42 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:04:42 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:04:42 jdbc[3]: 
/**/PreparedStatement prep14 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:04:42 jdbc[3]: 
/**/prep14.setString(1, "CustomerMS");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep14.setString(2, "INFO");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep14.setNull(3, 12);
2020-06-17 22:04:42 jdbc[3]: 
/**/prep14.setString(4, "/api/customers/2");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep14.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep14.setString(6, "ac4762af3b603bf9");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep14.setString(7, "2020-06-18T02:47:02.751Z");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep14.setString(8, "ac4762af3b603bf9");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep14.executeUpdate();
2020-06-17 22:04:42 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:04:42 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:04:42 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/2', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: 'ac4762af3b603bf9', 7: '2020-06-18T02:47:02.751Z', 8: 'ac4762af3b603bf9'};
2020-06-17 22:04:42 jdbc[3]: 
/**/ResultSet rs19 = prep14.getGeneratedKeys();
2020-06-17 22:04:42 jdbc[3]: 
/**/rs19.next();
2020-06-17 22:04:42 jdbc[3]: 
/**/ResultSetMetaData rsMeta6 = rs19.getMetaData();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:04:42 jdbc[3]: 
/**/rsMeta6.getColumnCount();
2020-06-17 22:04:42 jdbc[3]: 
/**/rs19.getLong(1);
2020-06-17 22:04:42 jdbc[3]: 
/**/rs19.close();
2020-06-17 22:04:42 jdbc[3]: 
/**/prep14.getMaxRows();
2020-06-17 22:04:42 jdbc[3]: 
/**/prep14.getQueryTimeout();
2020-06-17 22:04:42 jdbc[3]: 
/**/prep14.close();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:04:42 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:04:42 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:04:42 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:04:42 jdbc[3]: 
/**/PreparedStatement prep15 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:04:42 jdbc[3]: 
/**/prep15.setString(1, "CustomerMS");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep15.setString(2, "INFO");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep15.setNull(3, 12);
2020-06-17 22:04:42 jdbc[3]: 
/**/prep15.setString(4, "/api/customers/3");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep15.setString(5, "Customer(id=3, firstName=Ramila, lastName=Karki, email=ramila@gmail.com)");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep15.setString(6, "cda1008eb6f59b1a");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep15.setString(7, "2020-06-18T02:47:23.391Z");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep15.setString(8, "cda1008eb6f59b1a");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep15.executeUpdate();
2020-06-17 22:04:42 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:04:42 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:04:42 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/3', 5: 'Customer(id=3, firstName=Ramila, lastName=Karki, email=ramila@gmail.com)', 6: 'cda1008eb6f59b1a', 7: '2020-06-18T02:47:23.391Z', 8: 'cda1008eb6f59b1a'};
2020-06-17 22:04:42 jdbc[3]: 
/**/ResultSet rs20 = prep15.getGeneratedKeys();
2020-06-17 22:04:42 jdbc[3]: 
/**/rs20.next();
2020-06-17 22:04:42 jdbc[3]: 
/**/ResultSetMetaData rsMeta7 = rs20.getMetaData();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:04:42 jdbc[3]: 
/**/rsMeta7.getColumnCount();
2020-06-17 22:04:42 jdbc[3]: 
/**/rs20.getLong(1);
2020-06-17 22:04:42 jdbc[3]: 
/**/rs20.close();
2020-06-17 22:04:42 jdbc[3]: 
/**/prep15.getMaxRows();
2020-06-17 22:04:42 jdbc[3]: 
/**/prep15.getQueryTimeout();
2020-06-17 22:04:42 jdbc[3]: 
/**/prep15.close();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:04:42 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:04:42 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:04:42 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:04:42 jdbc[3]: 
/**/PreparedStatement prep16 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:04:42 jdbc[3]: 
/**/prep16.setString(1, "CustomerMS");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep16.setString(2, "INFO");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep16.setNull(3, 12);
2020-06-17 22:04:42 jdbc[3]: 
/**/prep16.setString(4, "/api/customers/4");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep16.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep16.setString(6, "93222afc6f639d33");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep16.setString(7, "2020-06-18T02:47:33.067Z");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep16.setString(8, "93222afc6f639d33");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep16.executeUpdate();
2020-06-17 22:04:42 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:04:42 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:04:42 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/4', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: '93222afc6f639d33', 7: '2020-06-18T02:47:33.067Z', 8: '93222afc6f639d33'};
2020-06-17 22:04:42 jdbc[3]: 
/**/ResultSet rs21 = prep16.getGeneratedKeys();
2020-06-17 22:04:42 jdbc[3]: 
/**/rs21.next();
2020-06-17 22:04:42 jdbc[3]: 
/**/ResultSetMetaData rsMeta8 = rs21.getMetaData();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:04:42 jdbc[3]: 
/**/rsMeta8.getColumnCount();
2020-06-17 22:04:42 jdbc[3]: 
/**/rs21.getLong(1);
2020-06-17 22:04:42 jdbc[3]: 
/**/rs21.close();
2020-06-17 22:04:42 jdbc[3]: 
/**/prep16.getMaxRows();
2020-06-17 22:04:42 jdbc[3]: 
/**/prep16.getQueryTimeout();
2020-06-17 22:04:42 jdbc[3]: 
/**/prep16.close();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:04:42 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:04:42 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:04:42 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:04:42 jdbc[3]: 
/**/PreparedStatement prep17 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:04:42 jdbc[3]: 
/**/prep17.setString(1, "CustomerMS");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep17.setString(2, "INFO");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep17.setNull(3, 12);
2020-06-17 22:04:42 jdbc[3]: 
/**/prep17.setString(4, "/api/customers/4");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep17.setString(5, "Customer(id=4, firstName=David, lastName=Yonge, email=david@gmail.com)");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep17.setString(6, "93222afc6f639d33");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep17.setString(7, "2020-06-18T02:47:33.071Z");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep17.setString(8, "93222afc6f639d33");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep17.executeUpdate();
2020-06-17 22:04:42 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:04:42 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:04:42 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/4', 5: 'Customer(id=4, firstName=David, lastName=Yonge, email=david@gmail.com)', 6: '93222afc6f639d33', 7: '2020-06-18T02:47:33.071Z', 8: '93222afc6f639d33'};
2020-06-17 22:04:42 jdbc[3]: 
/**/ResultSet rs22 = prep17.getGeneratedKeys();
2020-06-17 22:04:42 jdbc[3]: 
/**/rs22.next();
2020-06-17 22:04:42 jdbc[3]: 
/**/ResultSetMetaData rsMeta9 = rs22.getMetaData();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:04:42 jdbc[3]: 
/**/rsMeta9.getColumnCount();
2020-06-17 22:04:42 jdbc[3]: 
/**/rs22.getLong(1);
2020-06-17 22:04:42 jdbc[3]: 
/**/rs22.close();
2020-06-17 22:04:42 jdbc[3]: 
/**/prep17.getMaxRows();
2020-06-17 22:04:42 jdbc[3]: 
/**/prep17.getQueryTimeout();
2020-06-17 22:04:42 jdbc[3]: 
/**/prep17.close();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:04:42 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:04:42 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:04:42 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:04:42 jdbc[3]: 
/**/PreparedStatement prep18 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:04:42 jdbc[3]: 
/**/prep18.setString(1, "CustomerMS");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep18.setString(2, "INFO");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep18.setNull(3, 12);
2020-06-17 22:04:42 jdbc[3]: 
/**/prep18.setString(4, "/api/customers/5");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep18.setString(5, "Customer(id=5, firstName=Peter, lastName=Parker, email=peter@gmail.com)");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep18.setString(6, "66f1f3cca2518457");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep18.setString(7, "2020-06-18T02:48:04.745Z");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep18.setString(8, "66f1f3cca2518457");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep18.executeUpdate();
2020-06-17 22:04:42 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:04:42 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:04:42 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/5', 5: 'Customer(id=5, firstName=Peter, lastName=Parker, email=peter@gmail.com)', 6: '66f1f3cca2518457', 7: '2020-06-18T02:48:04.745Z', 8: '66f1f3cca2518457'};
2020-06-17 22:04:42 jdbc[3]: 
/**/ResultSet rs23 = prep18.getGeneratedKeys();
2020-06-17 22:04:42 jdbc[3]: 
/**/rs23.next();
2020-06-17 22:04:42 jdbc[3]: 
/**/ResultSetMetaData rsMeta10 = rs23.getMetaData();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:04:42 jdbc[3]: 
/**/rsMeta10.getColumnCount();
2020-06-17 22:04:42 jdbc[3]: 
/**/rs23.getLong(1);
2020-06-17 22:04:42 jdbc[3]: 
/**/rs23.close();
2020-06-17 22:04:42 jdbc[3]: 
/**/prep18.getMaxRows();
2020-06-17 22:04:42 jdbc[3]: 
/**/prep18.getQueryTimeout();
2020-06-17 22:04:42 jdbc[3]: 
/**/prep18.close();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:04:42 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:04:42 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:04:42 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:04:42 jdbc[3]: 
/**/PreparedStatement prep19 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:04:42 jdbc[3]: 
/**/prep19.setString(1, "CustomerMS");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep19.setString(2, "INFO");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep19.setNull(3, 12);
2020-06-17 22:04:42 jdbc[3]: 
/**/prep19.setString(4, "/api/customers/6");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep19.setString(5, "Customer(id=null, firstName=null, lastName=null, email=null)");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep19.setString(6, "e4ff784815173d28");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep19.setString(7, "2020-06-18T02:48:16.076Z");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep19.setString(8, "e4ff784815173d28");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep19.executeUpdate();
2020-06-17 22:04:42 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:04:42 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:04:42 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/6', 5: 'Customer(id=null, firstName=null, lastName=null, email=null)', 6: 'e4ff784815173d28', 7: '2020-06-18T02:48:16.076Z', 8: 'e4ff784815173d28'};
2020-06-17 22:04:42 jdbc[3]: 
/**/ResultSet rs24 = prep19.getGeneratedKeys();
2020-06-17 22:04:42 jdbc[3]: 
/**/rs24.next();
2020-06-17 22:04:42 jdbc[3]: 
/**/ResultSetMetaData rsMeta11 = rs24.getMetaData();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:04:42 jdbc[3]: 
/**/rsMeta11.getColumnCount();
2020-06-17 22:04:42 jdbc[3]: 
/**/rs24.getLong(1);
2020-06-17 22:04:42 jdbc[3]: 
/**/rs24.close();
2020-06-17 22:04:42 jdbc[3]: 
/**/prep19.getMaxRows();
2020-06-17 22:04:42 jdbc[3]: 
/**/prep19.getQueryTimeout();
2020-06-17 22:04:42 jdbc[3]: 
/**/prep19.close();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:04:42 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:04:42 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:04:42 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:04:42 jdbc[3]: 
/**/PreparedStatement prep20 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:04:42 jdbc[3]: 
/**/prep20.setString(1, "CustomerMS");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep20.setString(2, "INFO");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep20.setNull(3, 12);
2020-06-17 22:04:42 jdbc[3]: 
/**/prep20.setString(4, "/api/customers/2");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep20.setString(5, "Customer(id=3, firstName=Ramila, lastName=Karki, email=ramila@gmail.com)");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep20.setString(6, "543f683d787432fc");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep20.setString(7, "2020-06-18T02:48:30.897Z");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep20.setString(8, "543f683d787432fc");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep20.executeUpdate();
2020-06-17 22:04:42 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:04:42 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:04:42 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/2', 5: 'Customer(id=3, firstName=Ramila, lastName=Karki, email=ramila@gmail.com)', 6: '543f683d787432fc', 7: '2020-06-18T02:48:30.897Z', 8: '543f683d787432fc'};
2020-06-17 22:04:42 jdbc[3]: 
/**/ResultSet rs25 = prep20.getGeneratedKeys();
2020-06-17 22:04:42 jdbc[3]: 
/**/rs25.next();
2020-06-17 22:04:42 jdbc[3]: 
/**/ResultSetMetaData rsMeta12 = rs25.getMetaData();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:04:42 jdbc[3]: 
/**/rsMeta12.getColumnCount();
2020-06-17 22:04:42 jdbc[3]: 
/**/rs25.getLong(1);
2020-06-17 22:04:42 jdbc[3]: 
/**/rs25.close();
2020-06-17 22:04:42 jdbc[3]: 
/**/prep20.getMaxRows();
2020-06-17 22:04:42 jdbc[3]: 
/**/prep20.getQueryTimeout();
2020-06-17 22:04:42 jdbc[3]: 
/**/prep20.close();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:04:42 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:04:42 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:04:42 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:04:42 jdbc[3]: 
/**/PreparedStatement prep21 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:04:42 jdbc[3]: 
/**/prep21.setString(1, "CustomerMS");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep21.setString(2, "INFO");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep21.setNull(3, 12);
2020-06-17 22:04:42 jdbc[3]: 
/**/prep21.setString(4, "/api/customers/2");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep21.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep21.setString(6, "543f683d787432fc");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep21.setString(7, "2020-06-18T02:48:30.901Z");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep21.setString(8, "543f683d787432fc");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep21.executeUpdate();
2020-06-17 22:04:42 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:04:42 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:04:42 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/2', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: '543f683d787432fc', 7: '2020-06-18T02:48:30.901Z', 8: '543f683d787432fc'};
2020-06-17 22:04:42 jdbc[3]: 
/**/ResultSet rs26 = prep21.getGeneratedKeys();
2020-06-17 22:04:42 jdbc[3]: 
/**/rs26.next();
2020-06-17 22:04:42 jdbc[3]: 
/**/ResultSetMetaData rsMeta13 = rs26.getMetaData();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:04:42 jdbc[3]: 
/**/rsMeta13.getColumnCount();
2020-06-17 22:04:42 jdbc[3]: 
/**/rs26.getLong(1);
2020-06-17 22:04:42 jdbc[3]: 
/**/rs26.close();
2020-06-17 22:04:42 jdbc[3]: 
/**/prep21.getMaxRows();
2020-06-17 22:04:42 jdbc[3]: 
/**/prep21.getQueryTimeout();
2020-06-17 22:04:42 jdbc[3]: 
/**/prep21.close();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:04:42 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:04:42 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:04:42 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:04:42 jdbc[3]: 
/**/PreparedStatement prep22 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:04:42 jdbc[3]: 
/**/prep22.setString(1, "CustomerMS");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep22.setString(2, "INFO");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep22.setNull(3, 12);
2020-06-17 22:04:42 jdbc[3]: 
/**/prep22.setString(4, "/api/customers/2");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep22.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep22.setString(6, "dd81605f39be9222");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep22.setString(7, "2020-06-18T02:53:16.435Z");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep22.setString(8, "dd81605f39be9222");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep22.executeUpdate();
2020-06-17 22:04:42 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:04:42 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:04:42 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/2', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: 'dd81605f39be9222', 7: '2020-06-18T02:53:16.435Z', 8: 'dd81605f39be9222'};
2020-06-17 22:04:42 jdbc[3]: 
/**/ResultSet rs27 = prep22.getGeneratedKeys();
2020-06-17 22:04:42 jdbc[3]: 
/**/rs27.next();
2020-06-17 22:04:42 jdbc[3]: 
/**/ResultSetMetaData rsMeta14 = rs27.getMetaData();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:04:42 jdbc[3]: 
/**/rsMeta14.getColumnCount();
2020-06-17 22:04:42 jdbc[3]: 
/**/rs27.getLong(1);
2020-06-17 22:04:42 jdbc[3]: 
/**/rs27.close();
2020-06-17 22:04:42 jdbc[3]: 
/**/prep22.getMaxRows();
2020-06-17 22:04:42 jdbc[3]: 
/**/prep22.getQueryTimeout();
2020-06-17 22:04:42 jdbc[3]: 
/**/prep22.close();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:04:42 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:04:42 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:04:42 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:04:42 jdbc[3]: 
/**/PreparedStatement prep23 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:04:42 jdbc[3]: 
/**/prep23.setString(1, "CustomerMS");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep23.setString(2, "INFO");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep23.setNull(3, 12);
2020-06-17 22:04:42 jdbc[3]: 
/**/prep23.setString(4, "/api/customers/2");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep23.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep23.setString(6, "34ab3d102fb49096");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep23.setString(7, "2020-06-18T02:53:23.797Z");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep23.setString(8, "34ab3d102fb49096");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep23.executeUpdate();
2020-06-17 22:04:42 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:04:42 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:04:42 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/2', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: '34ab3d102fb49096', 7: '2020-06-18T02:53:23.797Z', 8: '34ab3d102fb49096'};
2020-06-17 22:04:42 jdbc[3]: 
/**/ResultSet rs28 = prep23.getGeneratedKeys();
2020-06-17 22:04:42 jdbc[3]: 
/**/rs28.next();
2020-06-17 22:04:42 jdbc[3]: 
/**/ResultSetMetaData rsMeta15 = rs28.getMetaData();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:04:42 jdbc[3]: 
/**/rsMeta15.getColumnCount();
2020-06-17 22:04:42 jdbc[3]: 
/**/rs28.getLong(1);
2020-06-17 22:04:42 jdbc[3]: 
/**/rs28.close();
2020-06-17 22:04:42 jdbc[3]: 
/**/prep23.getMaxRows();
2020-06-17 22:04:42 jdbc[3]: 
/**/prep23.getQueryTimeout();
2020-06-17 22:04:42 jdbc[3]: 
/**/prep23.close();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:04:42 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:04:42 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:04:42 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:04:42 jdbc[3]: 
/**/PreparedStatement prep24 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:04:42 jdbc[3]: 
/**/prep24.setString(1, "CustomerMS");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep24.setString(2, "INFO");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep24.setNull(3, 12);
2020-06-17 22:04:42 jdbc[3]: 
/**/prep24.setString(4, "/api/customers/2");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep24.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep24.setString(6, "19d2e4d621c50722");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep24.setString(7, "2020-06-18T02:53:35.082Z");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep24.setString(8, "19d2e4d621c50722");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep24.executeUpdate();
2020-06-17 22:04:42 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:04:42 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:04:42 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/2', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: '19d2e4d621c50722', 7: '2020-06-18T02:53:35.082Z', 8: '19d2e4d621c50722'};
2020-06-17 22:04:42 jdbc[3]: 
/**/ResultSet rs29 = prep24.getGeneratedKeys();
2020-06-17 22:04:42 jdbc[3]: 
/**/rs29.next();
2020-06-17 22:04:42 jdbc[3]: 
/**/ResultSetMetaData rsMeta16 = rs29.getMetaData();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:04:42 jdbc[3]: 
/**/rsMeta16.getColumnCount();
2020-06-17 22:04:42 jdbc[3]: 
/**/rs29.getLong(1);
2020-06-17 22:04:42 jdbc[3]: 
/**/rs29.close();
2020-06-17 22:04:42 jdbc[3]: 
/**/prep24.getMaxRows();
2020-06-17 22:04:42 jdbc[3]: 
/**/prep24.getQueryTimeout();
2020-06-17 22:04:42 jdbc[3]: 
/**/prep24.close();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:04:42 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:04:42 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:04:42 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:04:42 jdbc[3]: 
/**/PreparedStatement prep25 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:04:42 jdbc[3]: 
/**/prep25.setString(1, "CustomerMS");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep25.setString(2, "INFO");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep25.setNull(3, 12);
2020-06-17 22:04:42 jdbc[3]: 
/**/prep25.setString(4, "/api/customers/3");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep25.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep25.setString(6, "ab696d894d92b334");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep25.setString(7, "2020-06-18T02:53:42.252Z");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep25.setString(8, "ab696d894d92b334");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep25.executeUpdate();
2020-06-17 22:04:42 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:04:42 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:04:42 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/3', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: 'ab696d894d92b334', 7: '2020-06-18T02:53:42.252Z', 8: 'ab696d894d92b334'};
2020-06-17 22:04:42 jdbc[3]: 
/**/ResultSet rs30 = prep25.getGeneratedKeys();
2020-06-17 22:04:42 jdbc[3]: 
/**/rs30.next();
2020-06-17 22:04:42 jdbc[3]: 
/**/ResultSetMetaData rsMeta17 = rs30.getMetaData();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:04:42 jdbc[3]: 
/**/rsMeta17.getColumnCount();
2020-06-17 22:04:42 jdbc[3]: 
/**/rs30.getLong(1);
2020-06-17 22:04:42 jdbc[3]: 
/**/rs30.close();
2020-06-17 22:04:42 jdbc[3]: 
/**/prep25.getMaxRows();
2020-06-17 22:04:42 jdbc[3]: 
/**/prep25.getQueryTimeout();
2020-06-17 22:04:42 jdbc[3]: 
/**/prep25.close();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:04:42 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:04:42 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:04:42 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:04:42 jdbc[3]: 
/**/PreparedStatement prep26 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:04:42 jdbc[3]: 
/**/prep26.setString(1, "CustomerMS");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep26.setString(2, "INFO");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep26.setNull(3, 12);
2020-06-17 22:04:42 jdbc[3]: 
/**/prep26.setString(4, "/api/customers/3");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep26.setString(5, "Customer(id=3, firstName=Ramila, lastName=Karki, email=ramila@gmail.com)");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep26.setString(6, "ab696d894d92b334");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep26.setString(7, "2020-06-18T02:53:42.257Z");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep26.setString(8, "ab696d894d92b334");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep26.executeUpdate();
2020-06-17 22:04:42 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:04:42 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:04:42 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/3', 5: 'Customer(id=3, firstName=Ramila, lastName=Karki, email=ramila@gmail.com)', 6: 'ab696d894d92b334', 7: '2020-06-18T02:53:42.257Z', 8: 'ab696d894d92b334'};
2020-06-17 22:04:42 jdbc[3]: 
/**/ResultSet rs31 = prep26.getGeneratedKeys();
2020-06-17 22:04:42 jdbc[3]: 
/**/rs31.next();
2020-06-17 22:04:42 jdbc[3]: 
/**/ResultSetMetaData rsMeta18 = rs31.getMetaData();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:04:42 jdbc[3]: 
/**/rsMeta18.getColumnCount();
2020-06-17 22:04:42 jdbc[3]: 
/**/rs31.getLong(1);
2020-06-17 22:04:42 jdbc[3]: 
/**/rs31.close();
2020-06-17 22:04:42 jdbc[3]: 
/**/prep26.getMaxRows();
2020-06-17 22:04:42 jdbc[3]: 
/**/prep26.getQueryTimeout();
2020-06-17 22:04:42 jdbc[3]: 
/**/prep26.close();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:04:42 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:04:42 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:04:42 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:04:42 jdbc[3]: 
/**/PreparedStatement prep27 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:04:42 jdbc[3]: 
/**/prep27.setString(1, "CustomerMS");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep27.setString(2, "INFO");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep27.setNull(3, 12);
2020-06-17 22:04:42 jdbc[3]: 
/**/prep27.setString(4, "/api/customers/4");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep27.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep27.setString(6, "cc0b9a3859b08cfa");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep27.setString(7, "2020-06-18T02:53:58.878Z");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep27.setString(8, "cc0b9a3859b08cfa");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep27.executeUpdate();
2020-06-17 22:04:42 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:04:42 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:04:42 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/4', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: 'cc0b9a3859b08cfa', 7: '2020-06-18T02:53:58.878Z', 8: 'cc0b9a3859b08cfa'};
2020-06-17 22:04:42 jdbc[3]: 
/**/ResultSet rs32 = prep27.getGeneratedKeys();
2020-06-17 22:04:42 jdbc[3]: 
/**/rs32.next();
2020-06-17 22:04:42 jdbc[3]: 
/**/ResultSetMetaData rsMeta19 = rs32.getMetaData();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:04:42 jdbc[3]: 
/**/rsMeta19.getColumnCount();
2020-06-17 22:04:42 jdbc[3]: 
/**/rs32.getLong(1);
2020-06-17 22:04:42 jdbc[3]: 
/**/rs32.close();
2020-06-17 22:04:42 jdbc[3]: 
/**/prep27.getMaxRows();
2020-06-17 22:04:42 jdbc[3]: 
/**/prep27.getQueryTimeout();
2020-06-17 22:04:42 jdbc[3]: 
/**/prep27.close();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:04:42 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:04:42 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:04:42 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:04:42 jdbc[3]: 
/**/PreparedStatement prep28 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:04:42 jdbc[3]: 
/**/prep28.setString(1, "CustomerMS");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep28.setString(2, "INFO");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep28.setNull(3, 12);
2020-06-17 22:04:42 jdbc[3]: 
/**/prep28.setString(4, "/api/customers/4");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep28.setString(5, "Customer(id=4, firstName=David, lastName=Yonge, email=david@gmail.com)");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep28.setString(6, "cc0b9a3859b08cfa");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep28.setString(7, "2020-06-18T02:53:58.882Z");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep28.setString(8, "cc0b9a3859b08cfa");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep28.executeUpdate();
2020-06-17 22:04:42 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:04:42 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:04:42 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/4', 5: 'Customer(id=4, firstName=David, lastName=Yonge, email=david@gmail.com)', 6: 'cc0b9a3859b08cfa', 7: '2020-06-18T02:53:58.882Z', 8: 'cc0b9a3859b08cfa'};
2020-06-17 22:04:42 jdbc[3]: 
/**/ResultSet rs33 = prep28.getGeneratedKeys();
2020-06-17 22:04:42 jdbc[3]: 
/**/rs33.next();
2020-06-17 22:04:42 jdbc[3]: 
/**/ResultSetMetaData rsMeta20 = rs33.getMetaData();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:04:42 jdbc[3]: 
/**/rsMeta20.getColumnCount();
2020-06-17 22:04:42 jdbc[3]: 
/**/rs33.getLong(1);
2020-06-17 22:04:42 jdbc[3]: 
/**/rs33.close();
2020-06-17 22:04:42 jdbc[3]: 
/**/prep28.getMaxRows();
2020-06-17 22:04:42 jdbc[3]: 
/**/prep28.getQueryTimeout();
2020-06-17 22:04:42 jdbc[3]: 
/**/prep28.close();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:04:42 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:04:42 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:04:42 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:04:42 jdbc[3]: 
/**/PreparedStatement prep29 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:04:42 jdbc[3]: 
/**/prep29.setString(1, "CustomerMS");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep29.setString(2, "INFO");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep29.setNull(3, 12);
2020-06-17 22:04:42 jdbc[3]: 
/**/prep29.setString(4, "/api/customers/2");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep29.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep29.setString(6, "06670eac012d24ee");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep29.setString(7, "2020-06-18T02:55:56.769Z");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep29.setString(8, "06670eac012d24ee");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep29.executeUpdate();
2020-06-17 22:04:42 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:04:42 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:04:42 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/2', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: '06670eac012d24ee', 7: '2020-06-18T02:55:56.769Z', 8: '06670eac012d24ee'};
2020-06-17 22:04:42 jdbc[3]: 
/**/ResultSet rs34 = prep29.getGeneratedKeys();
2020-06-17 22:04:42 jdbc[3]: 
/**/rs34.next();
2020-06-17 22:04:42 jdbc[3]: 
/**/ResultSetMetaData rsMeta21 = rs34.getMetaData();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:04:42 jdbc[3]: 
/**/rsMeta21.getColumnCount();
2020-06-17 22:04:42 jdbc[3]: 
/**/rs34.getLong(1);
2020-06-17 22:04:42 jdbc[3]: 
/**/rs34.close();
2020-06-17 22:04:42 jdbc[3]: 
/**/prep29.getMaxRows();
2020-06-17 22:04:42 jdbc[3]: 
/**/prep29.getQueryTimeout();
2020-06-17 22:04:42 jdbc[3]: 
/**/prep29.close();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:04:42 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:04:42 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:04:42 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:04:42 jdbc[3]: 
/**/PreparedStatement prep30 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:04:42 jdbc[3]: 
/**/prep30.setString(1, "CustomerMS");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep30.setString(2, "INFO");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep30.setNull(3, 12);
2020-06-17 22:04:42 jdbc[3]: 
/**/prep30.setString(4, "/api/customers/3");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep30.setString(5, "Customer(id=3, firstName=Ramila, lastName=Karki, email=ramila@gmail.com)");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep30.setString(6, "8f964dcc036a839b");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep30.setString(7, "2020-06-18T02:56:04.268Z");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep30.setString(8, "8f964dcc036a839b");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep30.executeUpdate();
2020-06-17 22:04:42 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:04:42 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:04:42 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/3', 5: 'Customer(id=3, firstName=Ramila, lastName=Karki, email=ramila@gmail.com)', 6: '8f964dcc036a839b', 7: '2020-06-18T02:56:04.268Z', 8: '8f964dcc036a839b'};
2020-06-17 22:04:42 jdbc[3]: 
/**/ResultSet rs35 = prep30.getGeneratedKeys();
2020-06-17 22:04:42 jdbc[3]: 
/**/rs35.next();
2020-06-17 22:04:42 jdbc[3]: 
/**/ResultSetMetaData rsMeta22 = rs35.getMetaData();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:04:42 jdbc[3]: 
/**/rsMeta22.getColumnCount();
2020-06-17 22:04:42 jdbc[3]: 
/**/rs35.getLong(1);
2020-06-17 22:04:42 jdbc[3]: 
/**/rs35.close();
2020-06-17 22:04:42 jdbc[3]: 
/**/prep30.getMaxRows();
2020-06-17 22:04:42 jdbc[3]: 
/**/prep30.getQueryTimeout();
2020-06-17 22:04:42 jdbc[3]: 
/**/prep30.close();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:04:42 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:04:42 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:04:42 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:04:42 jdbc[3]: 
/**/PreparedStatement prep31 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:04:42 jdbc[3]: 
/**/prep31.setString(1, "CustomerMS");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep31.setString(2, "INFO");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep31.setNull(3, 12);
2020-06-17 22:04:42 jdbc[3]: 
/**/prep31.setString(4, "/api/customers/2");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep31.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep31.setString(6, "93153296296c724e");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep31.setString(7, "2020-06-18T02:56:12.997Z");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep31.setString(8, "93153296296c724e");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep31.executeUpdate();
2020-06-17 22:04:42 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:04:42 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:04:42 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/2', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: '93153296296c724e', 7: '2020-06-18T02:56:12.997Z', 8: '93153296296c724e'};
2020-06-17 22:04:42 jdbc[3]: 
/**/ResultSet rs36 = prep31.getGeneratedKeys();
2020-06-17 22:04:42 jdbc[3]: 
/**/rs36.next();
2020-06-17 22:04:42 jdbc[3]: 
/**/ResultSetMetaData rsMeta23 = rs36.getMetaData();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:04:42 jdbc[3]: 
/**/rsMeta23.getColumnCount();
2020-06-17 22:04:42 jdbc[3]: 
/**/rs36.getLong(1);
2020-06-17 22:04:42 jdbc[3]: 
/**/rs36.close();
2020-06-17 22:04:42 jdbc[3]: 
/**/prep31.getMaxRows();
2020-06-17 22:04:42 jdbc[3]: 
/**/prep31.getQueryTimeout();
2020-06-17 22:04:42 jdbc[3]: 
/**/prep31.close();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:04:42 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:04:42 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:04:42 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:04:42 jdbc[3]: 
/**/PreparedStatement prep32 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:04:42 jdbc[3]: 
/**/prep32.setString(1, "CustomerMS");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep32.setString(2, "INFO");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep32.setNull(3, 12);
2020-06-17 22:04:42 jdbc[3]: 
/**/prep32.setString(4, "/api/customers/2");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep32.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep32.setString(6, "20eb60e1e2a5f223");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep32.setString(7, "2020-06-18T02:56:15.134Z");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep32.setString(8, "20eb60e1e2a5f223");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep32.executeUpdate();
2020-06-17 22:04:42 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:04:42 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:04:42 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/2', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: '20eb60e1e2a5f223', 7: '2020-06-18T02:56:15.134Z', 8: '20eb60e1e2a5f223'};
2020-06-17 22:04:42 jdbc[3]: 
/**/ResultSet rs37 = prep32.getGeneratedKeys();
2020-06-17 22:04:42 jdbc[3]: 
/**/rs37.next();
2020-06-17 22:04:42 jdbc[3]: 
/**/ResultSetMetaData rsMeta24 = rs37.getMetaData();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:04:42 jdbc[3]: 
/**/rsMeta24.getColumnCount();
2020-06-17 22:04:42 jdbc[3]: 
/**/rs37.getLong(1);
2020-06-17 22:04:42 jdbc[3]: 
/**/rs37.close();
2020-06-17 22:04:42 jdbc[3]: 
/**/prep32.getMaxRows();
2020-06-17 22:04:42 jdbc[3]: 
/**/prep32.getQueryTimeout();
2020-06-17 22:04:42 jdbc[3]: 
/**/prep32.close();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:04:42 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:04:42 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:04:42 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:04:42 jdbc[3]: 
/**/PreparedStatement prep33 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:04:42 jdbc[3]: 
/**/prep33.setString(1, "CustomerMS");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep33.setString(2, "INFO");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep33.setNull(3, 12);
2020-06-17 22:04:42 jdbc[3]: 
/**/prep33.setString(4, "/api/customers/2");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep33.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep33.setString(6, "43d42dc852862595");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep33.setString(7, "2020-06-18T02:56:16.890Z");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep33.setString(8, "43d42dc852862595");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep33.executeUpdate();
2020-06-17 22:04:42 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:04:42 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:04:42 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/2', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: '43d42dc852862595', 7: '2020-06-18T02:56:16.890Z', 8: '43d42dc852862595'};
2020-06-17 22:04:42 jdbc[3]: 
/**/ResultSet rs38 = prep33.getGeneratedKeys();
2020-06-17 22:04:42 jdbc[3]: 
/**/rs38.next();
2020-06-17 22:04:42 jdbc[3]: 
/**/ResultSetMetaData rsMeta25 = rs38.getMetaData();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:04:42 jdbc[3]: 
/**/rsMeta25.getColumnCount();
2020-06-17 22:04:42 jdbc[3]: 
/**/rs38.getLong(1);
2020-06-17 22:04:42 jdbc[3]: 
/**/rs38.close();
2020-06-17 22:04:42 jdbc[3]: 
/**/prep33.getMaxRows();
2020-06-17 22:04:42 jdbc[3]: 
/**/prep33.getQueryTimeout();
2020-06-17 22:04:42 jdbc[3]: 
/**/prep33.close();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:04:42 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:04:42 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:04:42 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:04:42 jdbc[3]: 
/**/PreparedStatement prep34 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:04:42 jdbc[3]: 
/**/prep34.setString(1, "CustomerMS");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep34.setString(2, "INFO");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep34.setNull(3, 12);
2020-06-17 22:04:42 jdbc[3]: 
/**/prep34.setString(4, "/api/customers/2");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep34.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep34.setString(6, "6e58df6ecc92c2a9");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep34.setString(7, "2020-06-18T02:56:18.068Z");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep34.setString(8, "6e58df6ecc92c2a9");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep34.executeUpdate();
2020-06-17 22:04:42 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:04:42 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:04:42 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/2', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: '6e58df6ecc92c2a9', 7: '2020-06-18T02:56:18.068Z', 8: '6e58df6ecc92c2a9'};
2020-06-17 22:04:42 jdbc[3]: 
/**/ResultSet rs39 = prep34.getGeneratedKeys();
2020-06-17 22:04:42 jdbc[3]: 
/**/rs39.next();
2020-06-17 22:04:42 jdbc[3]: 
/**/ResultSetMetaData rsMeta26 = rs39.getMetaData();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:04:42 jdbc[3]: 
/**/rsMeta26.getColumnCount();
2020-06-17 22:04:42 jdbc[3]: 
/**/rs39.getLong(1);
2020-06-17 22:04:42 jdbc[3]: 
/**/rs39.close();
2020-06-17 22:04:42 jdbc[3]: 
/**/prep34.getMaxRows();
2020-06-17 22:04:42 jdbc[3]: 
/**/prep34.getQueryTimeout();
2020-06-17 22:04:42 jdbc[3]: 
/**/prep34.close();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:04:42 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:04:42 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:04:42 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:04:42 jdbc[3]: 
/**/PreparedStatement prep35 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:04:42 jdbc[3]: 
/**/prep35.setString(1, "CustomerMS");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep35.setString(2, "INFO");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep35.setNull(3, 12);
2020-06-17 22:04:42 jdbc[3]: 
/**/prep35.setString(4, "/api/customers/3");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep35.setString(5, "Customer(id=3, firstName=Ramila, lastName=Karki, email=ramila@gmail.com)");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep35.setString(6, "2e6641836c179162");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep35.setString(7, "2020-06-18T02:56:24.656Z");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep35.setString(8, "2e6641836c179162");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep35.executeUpdate();
2020-06-17 22:04:42 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:04:42 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:04:42 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/3', 5: 'Customer(id=3, firstName=Ramila, lastName=Karki, email=ramila@gmail.com)', 6: '2e6641836c179162', 7: '2020-06-18T02:56:24.656Z', 8: '2e6641836c179162'};
2020-06-17 22:04:42 jdbc[3]: 
/**/ResultSet rs40 = prep35.getGeneratedKeys();
2020-06-17 22:04:42 jdbc[3]: 
/**/rs40.next();
2020-06-17 22:04:42 jdbc[3]: 
/**/ResultSetMetaData rsMeta27 = rs40.getMetaData();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:04:42 jdbc[3]: 
/**/rsMeta27.getColumnCount();
2020-06-17 22:04:42 jdbc[3]: 
/**/rs40.getLong(1);
2020-06-17 22:04:42 jdbc[3]: 
/**/rs40.close();
2020-06-17 22:04:42 jdbc[3]: 
/**/prep35.getMaxRows();
2020-06-17 22:04:42 jdbc[3]: 
/**/prep35.getQueryTimeout();
2020-06-17 22:04:42 jdbc[3]: 
/**/prep35.close();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:04:42 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:04:42 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:04:42 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:04:42 jdbc[3]: 
/**/PreparedStatement prep36 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:04:42 jdbc[3]: 
/**/prep36.setString(1, "CustomerMS");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep36.setString(2, "INFO");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep36.setNull(3, 12);
2020-06-17 22:04:42 jdbc[3]: 
/**/prep36.setString(4, "/api/customers/4");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep36.setString(5, "Customer(id=4, firstName=David, lastName=Yonge, email=david@gmail.com)");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep36.setString(6, "6cc53148f46f5151");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep36.setString(7, "2020-06-18T02:56:42.193Z");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep36.setString(8, "6cc53148f46f5151");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep36.executeUpdate();
2020-06-17 22:04:42 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:04:42 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:04:42 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/4', 5: 'Customer(id=4, firstName=David, lastName=Yonge, email=david@gmail.com)', 6: '6cc53148f46f5151', 7: '2020-06-18T02:56:42.193Z', 8: '6cc53148f46f5151'};
2020-06-17 22:04:42 jdbc[3]: 
/**/ResultSet rs41 = prep36.getGeneratedKeys();
2020-06-17 22:04:42 jdbc[3]: 
/**/rs41.next();
2020-06-17 22:04:42 jdbc[3]: 
/**/ResultSetMetaData rsMeta28 = rs41.getMetaData();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:04:42 jdbc[3]: 
/**/rsMeta28.getColumnCount();
2020-06-17 22:04:42 jdbc[3]: 
/**/rs41.getLong(1);
2020-06-17 22:04:42 jdbc[3]: 
/**/rs41.close();
2020-06-17 22:04:42 jdbc[3]: 
/**/prep36.getMaxRows();
2020-06-17 22:04:42 jdbc[3]: 
/**/prep36.getQueryTimeout();
2020-06-17 22:04:42 jdbc[3]: 
/**/prep36.close();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:04:42 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:04:42 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:04:42 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:04:42 jdbc[3]: 
/**/PreparedStatement prep37 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:04:42 jdbc[3]: 
/**/prep37.setString(1, "CustomerMS");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep37.setString(2, "INFO");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep37.setNull(3, 12);
2020-06-17 22:04:42 jdbc[3]: 
/**/prep37.setString(4, "/api/customers/5");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep37.setString(5, "Customer(id=5, firstName=Peter, lastName=Parker, email=peter@gmail.com)");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep37.setString(6, "7f2851bfe57d4c73");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep37.setString(7, "2020-06-18T02:56:45.275Z");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep37.setString(8, "7f2851bfe57d4c73");
2020-06-17 22:04:42 jdbc[3]: 
/**/prep37.executeUpdate();
2020-06-17 22:04:42 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:04:42 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:04:42 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/5', 5: 'Customer(id=5, firstName=Peter, lastName=Parker, email=peter@gmail.com)', 6: '7f2851bfe57d4c73', 7: '2020-06-18T02:56:45.275Z', 8: '7f2851bfe57d4c73'};
2020-06-17 22:04:42 jdbc[3]: 
/**/ResultSet rs42 = prep37.getGeneratedKeys();
2020-06-17 22:04:42 jdbc[3]: 
/**/rs42.next();
2020-06-17 22:04:42 jdbc[3]: 
/**/ResultSetMetaData rsMeta29 = rs42.getMetaData();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:04:42 jdbc[3]: 
/**/rsMeta29.getColumnCount();
2020-06-17 22:04:42 jdbc[3]: 
/**/rs42.getLong(1);
2020-06-17 22:04:42 jdbc[3]: 
/**/rs42.close();
2020-06-17 22:04:42 jdbc[3]: 
/**/prep37.getMaxRows();
2020-06-17 22:04:42 jdbc[3]: 
/**/prep37.getQueryTimeout();
2020-06-17 22:04:42 jdbc[3]: 
/**/prep37.close();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:04:42 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:04:42 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:04:42 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:04:42 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:05:32 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-17 22:05:32 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 22:05:32 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:05:32 jdbc[3]: 
/**/Statement stat3 = conn0.createStatement();
2020-06-17 22:05:32 jdbc[3]: 
/**/stat3.execute("drop table if exists customer_tbl CASCADE ");
2020-06-17 22:05:32 lock: 3 exclusive write lock requesting for CUSTOMER_TBL 
2020-06-17 22:05:32 lock: 3 exclusive write lock added for CUSTOMER_TBL 
2020-06-17 22:05:32 lock: 3 exclusive write lock requesting for SYS 
2020-06-17 22:05:32 lock: 3 exclusive write lock added for SYS 
2020-06-17 22:05:32 jdbc[3]: 
/*SQL t:3*/drop table if exists customer_tbl CASCADE;
2020-06-17 22:05:32 lock: 3 exclusive write lock unlock SYS 
2020-06-17 22:05:32 jdbc[3]: 
/**/stat3.getWarnings();
2020-06-17 22:05:32 jdbc[3]: 
/**/stat3.execute("drop table if exists log_tbl CASCADE ");
2020-06-17 22:05:32 lock: 3 exclusive write lock requesting for LOG_TBL 
2020-06-17 22:05:32 lock: 3 exclusive write lock added for LOG_TBL 
2020-06-17 22:05:32 lock: 3 exclusive write lock requesting for SYS 
2020-06-17 22:05:32 lock: 3 exclusive write lock added for SYS 
2020-06-17 22:05:32 jdbc[3]: 
/*SQL */drop table if exists log_tbl CASCADE;
2020-06-17 22:05:32 lock: 3 exclusive write lock unlock SYS 
2020-06-17 22:05:32 jdbc[3]: 
/**/stat3.getWarnings();
2020-06-17 22:05:32 jdbc[3]: 
/**/stat3.close();
2020-06-17 22:05:32 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:05:32 database: closing /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb from shutdown hook
2020-06-17 22:05:32 lock: 3 shared read lock unlock SYS 
2020-06-17 22:05:32 database: disconnecting session #3
2020-06-17 22:05:32 database: disconnected session #3
2020-06-17 22:05:32 lock: 4 shared read lock unlock SYS 
2020-06-17 22:05:32 database: disconnecting session #4
2020-06-17 22:05:32 database: disconnected session #4
2020-06-17 22:05:32 lock: 5 shared read lock unlock SYS 
2020-06-17 22:05:32 database: disconnecting session #5
2020-06-17 22:05:32 database: disconnected session #5
2020-06-17 22:05:32 lock: 6 shared read lock unlock SYS 
2020-06-17 22:05:32 database: disconnecting session #6
2020-06-17 22:05:32 database: disconnected session #6
2020-06-17 22:05:32 lock: 7 shared read lock unlock SYS 
2020-06-17 22:05:32 database: disconnecting session #7
2020-06-17 22:05:32 database: disconnected session #7
2020-06-17 22:05:32 lock: 8 shared read lock unlock SYS 
2020-06-17 22:05:32 database: disconnecting session #8
2020-06-17 22:05:32 database: disconnected session #8
2020-06-17 22:05:32 lock: 9 shared read lock unlock SYS 
2020-06-17 22:05:32 database: disconnecting session #9
2020-06-17 22:05:32 database: disconnected session #9
2020-06-17 22:05:32 lock: 10 shared read lock unlock SYS 
2020-06-17 22:05:32 jdbc[3]: 
/**/conn0.close();
2020-06-17 22:05:32 database: disconnecting session #10
2020-06-17 22:05:32 jdbc[4]: 
/**/conn1.close();
2020-06-17 22:05:32 database: disconnected session #10
2020-06-17 22:05:32 jdbc[5]: 
/**/conn2.close();
2020-06-17 22:05:32 lock: 11 shared read lock unlock SYS 
2020-06-17 22:05:32 jdbc[6]: 
/**/conn3.close();
2020-06-17 22:05:32 database: disconnecting session #11
2020-06-17 22:05:32 jdbc[7]: 
/**/conn4.close();
2020-06-17 22:05:32 database: disconnected session #11
2020-06-17 22:05:32 jdbc[8]: 
/**/conn5.close();
2020-06-17 22:05:32 lock: 12 shared read lock unlock SYS 
2020-06-17 22:05:32 jdbc[9]: 
/**/conn6.close();
2020-06-17 22:05:32 database: disconnecting session #12
2020-06-17 22:05:32 jdbc[10]: 
/**/conn7.close();
2020-06-17 22:05:32 database: disconnected session #12
2020-06-17 22:05:32 jdbc[11]: 
/**/conn8.close();
2020-06-17 22:05:32 jdbc[12]: 
/**/conn9.close();
2020-06-17 22:05:32 database: closing /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 22:05:32 lock: 1 shared read lock unlock SYS 
2020-06-17 22:05:32 lock: 2 shared read lock unlock SYS 
2020-06-17 22:05:32 database: closed
2020-06-17 22:06:22 database: opening /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb (build 200)
2020-06-17 22:06:22 lock: 1 exclusive write lock requesting for SYS 
2020-06-17 22:06:22 lock: 1 exclusive write lock added for SYS 
2020-06-17 22:06:22 lock: 1 exclusive write lock unlock SYS 
2020-06-17 22:06:22 lock: 1 exclusive write lock requesting for SYS 
2020-06-17 22:06:22 lock: 1 exclusive write lock added for SYS 
2020-06-17 22:06:22 lock: 1 exclusive write lock unlock SYS 
2020-06-17 22:06:22 lock: 1 exclusive write lock requesting for SYS 
2020-06-17 22:06:22 lock: 1 exclusive write lock added for SYS 
2020-06-17 22:06:22 lock: 1 exclusive write lock unlock SYS 
2020-06-17 22:06:22 database: opened /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 22:06:22 database: connecting session #3 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 22:06:22 jdbc[3]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 22:06:22 jdbc[3]: 
/**/Connection conn0 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 22:06:22 jdbc[3]: 
/**/conn0.isReadOnly();
2020-06-17 22:06:22 jdbc[3]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 22:06:22 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:06:22 jdbc[3]: 
/**/conn0.isValid(1);
2020-06-17 22:06:22 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 22:06:22 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 22:06:22 jdbc[3]: 
/**/DatabaseMetaData dbMeta0 = conn0.getMetaData();
2020-06-17 22:06:22 jdbc[3]: 
/**/dbMeta0.getURL();
2020-06-17 22:06:22 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:06:22 database: connecting session #4 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 22:06:22 jdbc[4]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 22:06:22 jdbc[4]: 
/**/Connection conn1 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 22:06:22 jdbc[4]: 
/**/conn1.isReadOnly();
2020-06-17 22:06:22 jdbc[4]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 22:06:22 jdbc[4]: 
/**/conn1.getAutoCommit();
2020-06-17 22:06:22 database: connecting session #5 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 22:06:22 jdbc[5]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 22:06:22 jdbc[5]: 
/**/Connection conn2 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 22:06:22 jdbc[5]: 
/**/conn2.isReadOnly();
2020-06-17 22:06:22 jdbc[5]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 22:06:22 jdbc[5]: 
/**/conn2.getAutoCommit();
2020-06-17 22:06:22 database: connecting session #6 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 22:06:22 jdbc[6]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 22:06:22 jdbc[6]: 
/**/Connection conn3 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 22:06:22 jdbc[6]: 
/**/conn3.isReadOnly();
2020-06-17 22:06:22 jdbc[6]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 22:06:22 jdbc[6]: 
/**/conn3.getAutoCommit();
2020-06-17 22:06:22 database: connecting session #7 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 22:06:22 jdbc[7]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 22:06:22 jdbc[7]: 
/**/Connection conn4 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 22:06:22 jdbc[7]: 
/**/conn4.isReadOnly();
2020-06-17 22:06:22 jdbc[7]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 22:06:22 jdbc[7]: 
/**/conn4.getAutoCommit();
2020-06-17 22:06:22 database: connecting session #8 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 22:06:22 jdbc[8]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 22:06:22 jdbc[8]: 
/**/Connection conn5 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 22:06:22 jdbc[8]: 
/**/conn5.isReadOnly();
2020-06-17 22:06:22 jdbc[8]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 22:06:22 jdbc[8]: 
/**/conn5.getAutoCommit();
2020-06-17 22:06:22 database: connecting session #9 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 22:06:22 jdbc[9]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 22:06:22 jdbc[9]: 
/**/Connection conn6 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 22:06:22 jdbc[9]: 
/**/conn6.isReadOnly();
2020-06-17 22:06:22 jdbc[9]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 22:06:22 jdbc[9]: 
/**/conn6.getAutoCommit();
2020-06-17 22:06:22 database: connecting session #10 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 22:06:22 jdbc[10]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 22:06:22 jdbc[10]: 
/**/Connection conn7 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 22:06:22 jdbc[10]: 
/**/conn7.isReadOnly();
2020-06-17 22:06:22 jdbc[10]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 22:06:22 jdbc[10]: 
/**/conn7.getAutoCommit();
2020-06-17 22:06:22 database: connecting session #11 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 22:06:22 jdbc[11]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 22:06:22 jdbc[11]: 
/**/Connection conn8 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 22:06:22 jdbc[11]: 
/**/conn8.isReadOnly();
2020-06-17 22:06:22 jdbc[11]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 22:06:22 jdbc[11]: 
/**/conn8.getAutoCommit();
2020-06-17 22:06:22 database: connecting session #12 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 22:06:22 jdbc[12]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 22:06:22 jdbc[12]: 
/**/Connection conn9 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 22:06:22 jdbc[12]: 
/**/conn9.isReadOnly();
2020-06-17 22:06:22 jdbc[12]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 22:06:22 jdbc[12]: 
/**/conn9.getAutoCommit();
2020-06-17 22:06:23 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-17 22:06:23 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 22:06:23 jdbc[3]: 
/**/DatabaseMetaData dbMeta1 = conn0.getMetaData();
2020-06-17 22:06:23 jdbc[3]: 
/**/dbMeta1.getDatabaseProductName();
2020-06-17 22:06:23 jdbc[3]: 
/**/dbMeta1.getDatabaseProductVersion();
2020-06-17 22:06:23 jdbc[3]: 
/**/dbMeta1.getDatabaseMajorVersion();
2020-06-17 22:06:23 jdbc[3]: 
/**/dbMeta1.getDatabaseMinorVersion();
2020-06-17 22:06:23 jdbc[3]: 
/**/dbMeta1.getDriverName();
2020-06-17 22:06:23 jdbc[3]: 
/**/dbMeta1.getDriverVersion();
2020-06-17 22:06:23 jdbc[3]: 
/**/dbMeta1.getDriverMajorVersion();
2020-06-17 22:06:23 jdbc[3]: 
/**/dbMeta1.getDriverMinorVersion();
2020-06-17 22:06:23 jdbc[3]: 
/**/dbMeta1.getJDBCMajorVersion();
2020-06-17 22:06:23 jdbc[3]: 
/**/dbMeta1.getJDBCMinorVersion();
2020-06-17 22:06:23 jdbc[3]: 
/**/dbMeta1.supportsCatalogsInTableDefinitions();
2020-06-17 22:06:23 jdbc[3]: 
/**/dbMeta1.supportsSchemasInTableDefinitions();
2020-06-17 22:06:23 jdbc[3]: 
/**/dbMeta1.storesLowerCaseIdentifiers();
2020-06-17 22:06:23 jdbc[3]: 
/**/PreparedStatement prep0 = conn0.prepareStatement("SELECT NAME, VALUE FROM INFORMATION_SCHEMA.SETTINGS WHERE NAME IN (?, ?, ?, ?)");
2020-06-17 22:06:23 jdbc[3]: Plan       : calculate cost for plan [SETTINGS:-7:org.h2.table.MetaTable@6c5ea1a]
2020-06-17 22:06:23 jdbc[3]: Plan       :   for table filter SETTINGS:-7:org.h2.table.MetaTable@6c5ea1a
2020-06-17 22:06:23 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 22:06:23 jdbc[3]: Plan       :   best plan item cost 9,900 index meta
2020-06-17 22:06:23 jdbc[3]: Plan       : plan cost 9,901
2020-06-17 22:06:23 jdbc[3]: 
/**/prep0.setString(1, "MODE");
2020-06-17 22:06:23 jdbc[3]: 
/**/prep0.setString(2, "DATABASE_TO_UPPER");
2020-06-17 22:06:23 jdbc[3]: 
/**/prep0.setString(3, "DATABASE_TO_LOWER");
2020-06-17 22:06:23 jdbc[3]: 
/**/prep0.setString(4, "CASE_INSENSITIVE_IDENTIFIERS");
2020-06-17 22:06:23 jdbc[3]: 
/**/ResultSet rs0 = prep0.executeQuery();
2020-06-17 22:06:23 jdbc[3]: 
/*SQL l:78 #:4 t:2*/SELECT NAME, VALUE FROM INFORMATION_SCHEMA.SETTINGS WHERE NAME IN (?, ?, ?, ?) {1: 'MODE', 2: 'DATABASE_TO_UPPER', 3: 'DATABASE_TO_LOWER', 4: 'CASE_INSENSITIVE_IDENTIFIERS'};
2020-06-17 22:06:23 jdbc[3]: 
/**/rs0.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs0.getString(2);
2020-06-17 22:06:23 jdbc[3]: 
/**/rs0.getString(1);
2020-06-17 22:06:23 jdbc[3]: 
/**/rs0.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs0.getString(2);
2020-06-17 22:06:23 jdbc[3]: 
/**/rs0.getString(1);
2020-06-17 22:06:23 jdbc[3]: 
/**/rs0.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs0.getString(2);
2020-06-17 22:06:23 jdbc[3]: 
/**/rs0.getString(1);
2020-06-17 22:06:23 jdbc[3]: 
/**/rs0.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs0.getString(2);
2020-06-17 22:06:23 jdbc[3]: 
/**/rs0.getString(1);
2020-06-17 22:06:23 jdbc[3]: 
/**/rs0.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/prep0.close();
2020-06-17 22:06:23 jdbc[3]: 
/**/dbMeta1.storesUpperCaseIdentifiers();
2020-06-17 22:06:23 jdbc[3]: 
/**/dbMeta1.storesMixedCaseIdentifiers();
2020-06-17 22:06:23 jdbc[3]: 
/**/dbMeta1.storesUpperCaseIdentifiers();
2020-06-17 22:06:23 jdbc[3]: 
/**/dbMeta1.storesLowerCaseQuotedIdentifiers();
2020-06-17 22:06:23 jdbc[3]: 
/**/dbMeta1.storesUpperCaseQuotedIdentifiers();
2020-06-17 22:06:23 jdbc[3]: 
/**/dbMeta1.storesMixedCaseQuotedIdentifiers();
2020-06-17 22:06:23 jdbc[3]: 
/**/dbMeta1.getSQLKeywords();
2020-06-17 22:06:23 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:06:23 jdbc[3]: 
/*SQL #:1*/CALL DATABASE();
2020-06-17 22:06:23 jdbc[3]: 
/**/dbMeta1.supportsNamedParameters();
2020-06-17 22:06:23 jdbc[3]: 
/**/dbMeta1.supportsResultSetType(1004);
2020-06-17 22:06:23 jdbc[3]: 
/**/dbMeta1.supportsGetGeneratedKeys();
2020-06-17 22:06:23 jdbc[3]: 
/**/dbMeta1.supportsBatchUpdates();
2020-06-17 22:06:23 jdbc[3]: 
/**/dbMeta1.dataDefinitionIgnoredInTransactions();
2020-06-17 22:06:23 jdbc[3]: 
/**/dbMeta1.dataDefinitionCausesTransactionCommit();
2020-06-17 22:06:23 jdbc[3]: 
/**/dbMeta1.getSQLKeywords();
2020-06-17 22:06:23 jdbc[3]: 
/**/dbMeta1.getSQLStateType();
2020-06-17 22:06:23 jdbc[3]: 
/**/dbMeta1.locatorsUpdateCopy();
2020-06-17 22:06:23 jdbc[3]: 
/**/dbMeta1.getTypeInfo();
2020-06-17 22:06:23 jdbc[3]: 
/**/PreparedStatement prep1 = conn0.prepareStatement("SELECT TYPE_NAME, DATA_TYPE, PRECISION, PREFIX LITERAL_PREFIX, SUFFIX LITERAL_SUFFIX, PARAMS CREATE_PARAMS, NULLABLE, CASE_SENSITIVE, SEARCHABLE, FALSE UNSIGNED_ATTRIBUTE, FALSE FIXED_PREC_SCALE, AUTO_INCREMENT, TYPE_NAME LOCAL_TYPE_NAME, MINIMUM_SCALE, MAXIMUM_SCALE, DATA_TYPE SQL_DATA_TYPE, ZERO() SQL_DATETIME_SUB, RADIX NUM_PREC_RADIX FROM INFORMATION_SCHEMA.TYPE_INFO ORDER BY DATA_TYPE, POS");
2020-06-17 22:06:23 jdbc[3]: Plan       : calculate cost for plan [TYPE_INFO:-5:org.h2.table.MetaTable@6d9ab0e7]
2020-06-17 22:06:23 jdbc[3]: Plan       :   for table filter TYPE_INFO:-5:org.h2.table.MetaTable@6d9ab0e7
2020-06-17 22:06:23 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 22:06:23 jdbc[3]: Plan       :   best plan item cost 10,000 index meta
2020-06-17 22:06:23 jdbc[3]: Plan       : plan cost 10,001
2020-06-17 22:06:23 jdbc[3]: 
/**/ResultSet rs1 = prep1.executeQuery();
2020-06-17 22:06:23 jdbc[3]: 
/*SQL #:46 t:1*/SELECT TYPE_NAME, DATA_TYPE, PRECISION, PREFIX LITERAL_PREFIX, SUFFIX LITERAL_SUFFIX, PARAMS CREATE_PARAMS, NULLABLE, CASE_SENSITIVE, SEARCHABLE, FALSE UNSIGNED_ATTRIBUTE, FALSE FIXED_PREC_SCALE, AUTO_INCREMENT, TYPE_NAME LOCAL_TYPE_NAME, MINIMUM_SCALE, MAXIMUM_SCALE, DATA_TYPE SQL_DATA_TYPE, ZERO() SQL_DATETIME_SUB, RADIX NUM_PREC_RADIX FROM INFORMATION_SCHEMA.TYPE_INFO ORDER BY DATA_TYPE, POS;
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getStatement();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs1.close();
2020-06-17 22:06:23 jdbc[3]: 
/**/prep1.close();
2020-06-17 22:06:23 jdbc[3]: 
/**/conn0.getSchema();
2020-06-17 22:06:23 jdbc[3]: 
/**/conn0.getSchema();
2020-06-17 22:06:23 jdbc[3]: 
/**/dbMeta1.supportsNamedParameters();
2020-06-17 22:06:23 jdbc[3]: 
/**/Statement stat0 = conn0.createStatement();
2020-06-17 22:06:23 jdbc[3]: 
/**/ResultSet rs2 = stat0.executeQuery("select * from INFORMATION_SCHEMA.SEQUENCES");
2020-06-17 22:06:23 jdbc[3]: Plan       : calculate cost for plan [SEQUENCES:-9:org.h2.table.MetaTable@44cab838]
2020-06-17 22:06:23 jdbc[3]: Plan       :   for table filter SEQUENCES:-9:org.h2.table.MetaTable@44cab838
2020-06-17 22:06:23 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 22:06:23 jdbc[3]: Plan       :   best plan item cost 10,000 index meta
2020-06-17 22:06:23 jdbc[3]: Plan       : plan cost 10,001
2020-06-17 22:06:23 jdbc[3]: 
/*SQL */select * from INFORMATION_SCHEMA.SEQUENCES;
2020-06-17 22:06:23 jdbc[3]: 
/**/rs2.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs2.close();
2020-06-17 22:06:23 jdbc[3]: 
/**/stat0.close();
2020-06-17 22:06:23 jdbc[3]: 
/**/dbMeta1.getCatalogSeparator();
2020-06-17 22:06:23 jdbc[3]: 
/**/dbMeta1.isCatalogAtStart();
2020-06-17 22:06:23 jdbc[3]: 
/**/dbMeta1.getTypeInfo();
2020-06-17 22:06:23 jdbc[3]: 
/**/PreparedStatement prep2 = conn0.prepareStatement("SELECT TYPE_NAME, DATA_TYPE, PRECISION, PREFIX LITERAL_PREFIX, SUFFIX LITERAL_SUFFIX, PARAMS CREATE_PARAMS, NULLABLE, CASE_SENSITIVE, SEARCHABLE, FALSE UNSIGNED_ATTRIBUTE, FALSE FIXED_PREC_SCALE, AUTO_INCREMENT, TYPE_NAME LOCAL_TYPE_NAME, MINIMUM_SCALE, MAXIMUM_SCALE, DATA_TYPE SQL_DATA_TYPE, ZERO() SQL_DATETIME_SUB, RADIX NUM_PREC_RADIX FROM INFORMATION_SCHEMA.TYPE_INFO ORDER BY DATA_TYPE, POS");
2020-06-17 22:06:23 jdbc[3]: 
/**/ResultSet rs3 = prep2.executeQuery();
2020-06-17 22:06:23 jdbc[3]: 
/*SQL #:46*/SELECT TYPE_NAME, DATA_TYPE, PRECISION, PREFIX LITERAL_PREFIX, SUFFIX LITERAL_SUFFIX, PARAMS CREATE_PARAMS, NULLABLE, CASE_SENSITIVE, SEARCHABLE, FALSE UNSIGNED_ATTRIBUTE, FALSE FIXED_PREC_SCALE, AUTO_INCREMENT, TYPE_NAME LOCAL_TYPE_NAME, MINIMUM_SCALE, MAXIMUM_SCALE, DATA_TYPE SQL_DATA_TYPE, ZERO() SQL_DATETIME_SUB, RADIX NUM_PREC_RADIX FROM INFORMATION_SCHEMA.TYPE_INFO ORDER BY DATA_TYPE, POS;
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getStatement();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:06:23 jdbc[3]: 
/**/rs3.close();
2020-06-17 22:06:23 jdbc[3]: 
/**/prep2.close();
2020-06-17 22:06:23 jdbc[3]: 
/**/DatabaseMetaData dbMeta2 = conn0.getMetaData();
2020-06-17 22:06:23 jdbc[3]: 
/**/dbMeta2.getJDBCMajorVersion();
2020-06-17 22:06:23 jdbc[3]: 
/**/Clob clob0 = conn0.createClob();
2020-06-17 22:06:23 jdbc[3]: 
/**/clob0.free();
2020-06-17 22:06:23 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:06:23 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:06:23 jdbc[3]: 
/**/Statement stat1 = conn0.createStatement();
2020-06-17 22:06:23 jdbc[3]: 
/**/stat1.execute("drop table if exists customer_tbl CASCADE ");
2020-06-17 22:06:23 jdbc[3]: 
/*SQL */drop table if exists customer_tbl CASCADE;
2020-06-17 22:06:23 jdbc[3]: 
/**/stat1.getWarnings();
2020-06-17 22:06:23 jdbc[3]: 
/**/stat1.execute("drop table if exists log_tbl CASCADE ");
2020-06-17 22:06:23 jdbc[3]: 
/*SQL */drop table if exists log_tbl CASCADE;
2020-06-17 22:06:23 jdbc[3]: 
/**/stat1.getWarnings();
2020-06-17 22:06:23 jdbc[3]: 
/**/stat1.close();
2020-06-17 22:06:23 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:06:23 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:06:23 jdbc[3]: 
/**/Statement stat2 = conn0.createStatement();
2020-06-17 22:06:23 jdbc[3]: 
/**/stat2.execute("create table customer_tbl (id bigint generated by default as identity, customer_email varchar(255), customer_firstname varchar(255), customer_lastname varchar(255), primary key (id))");
2020-06-17 22:06:23 lock: 3 exclusive write lock requesting for SYS 
2020-06-17 22:06:23 lock: 3 exclusive write lock added for SYS 
2020-06-17 22:06:23 lock: 3 exclusive write lock unlock SYS 
2020-06-17 22:06:23 lock: 3 exclusive write lock requesting for SYS 
2020-06-17 22:06:23 lock: 3 exclusive write lock added for SYS 
2020-06-17 22:06:23 lock: 3 exclusive write lock requesting for CUSTOMER_TBL 
2020-06-17 22:06:23 lock: 3 exclusive write lock added for CUSTOMER_TBL 
2020-06-17 22:06:23 jdbc[3]: 
/*SQL t:5*/create table customer_tbl (id bigint generated by default as identity, customer_email varchar(255), customer_firstname varchar(255), customer_lastname varchar(255), primary key (id));
2020-06-17 22:06:23 lock: 3 exclusive write lock unlock SYS 
2020-06-17 22:06:23 lock: 3 exclusive write lock unlock CUSTOMER_TBL 
2020-06-17 22:06:23 jdbc[3]: 
/**/stat2.getWarnings();
2020-06-17 22:06:23 jdbc[3]: 
/**/stat2.execute("create table log_tbl (id bigint generated by default as identity, application_name varchar(255), level varchar(255), parent_span_id varchar(255), request varchar(255), response varchar(255), span_id varchar(255), time varchar(255), trace_id varchar(255), primary key (id))");
2020-06-17 22:06:23 lock: 3 exclusive write lock requesting for SYS 
2020-06-17 22:06:23 lock: 3 exclusive write lock added for SYS 
2020-06-17 22:06:23 lock: 3 exclusive write lock unlock SYS 
2020-06-17 22:06:23 lock: 3 exclusive write lock requesting for SYS 
2020-06-17 22:06:23 lock: 3 exclusive write lock added for SYS 
2020-06-17 22:06:23 lock: 3 exclusive write lock requesting for LOG_TBL 
2020-06-17 22:06:23 lock: 3 exclusive write lock added for LOG_TBL 
2020-06-17 22:06:23 jdbc[3]: 
/*SQL t:1*/create table log_tbl (id bigint generated by default as identity, application_name varchar(255), level varchar(255), parent_span_id varchar(255), request varchar(255), response varchar(255), span_id varchar(255), time varchar(255), trace_id varchar(255), primary key (id));
2020-06-17 22:06:23 lock: 3 exclusive write lock unlock SYS 
2020-06-17 22:06:23 lock: 3 exclusive write lock unlock LOG_TBL 
2020-06-17 22:06:23 jdbc[3]: 
/**/stat2.getWarnings();
2020-06-17 22:06:23 jdbc[3]: 
/**/stat2.close();
2020-06-17 22:06:23 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:06:24 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:06:24 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:06:24 jdbc[3]: 
/**/PreparedStatement prep3 = conn0.prepareStatement("select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=?");
2020-06-17 22:06:24 jdbc[3]: Plan       : calculate cost for plan [CUSTOMER0_]
2020-06-17 22:06:24 jdbc[3]: Plan       :   for table filter CUSTOMER0_
2020-06-17 22:06:24 jdbc[3]: Table      :     potential plan item cost 10,200 index PUBLIC.CUSTOMER_TBL.tableScan
2020-06-17 22:06:24 jdbc[3]: Table      :     potential plan item cost 230 index PUBLIC.PRIMARY_KEY_B
2020-06-17 22:06:24 jdbc[3]: Plan       :   best plan item cost 227.7 index PUBLIC.PRIMARY_KEY_B
2020-06-17 22:06:24 jdbc[3]: Plan       : plan cost 228.7
2020-06-17 22:06:24 jdbc[3]: 
/**/prep3.setLong(1, 1L);
2020-06-17 22:06:24 jdbc[3]: 
/**/ResultSet rs8 = prep3.executeQuery();
2020-06-17 22:06:24 jdbc[3]: 
/*SQL l:225*/select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=? {1: 1};
2020-06-17 22:06:24 jdbc[3]: 
/**/rs8.next();
2020-06-17 22:06:24 jdbc[3]: 
/**/rs8.close();
2020-06-17 22:06:24 jdbc[3]: 
/**/prep3.getMaxRows();
2020-06-17 22:06:24 jdbc[3]: 
/**/prep3.getQueryTimeout();
2020-06-17 22:06:24 jdbc[3]: Plan       : calculate cost for plan [SETTINGS:-7:org.h2.table.MetaTable@6c5ea1a]
2020-06-17 22:06:24 jdbc[3]: Plan       :   for table filter SETTINGS:-7:org.h2.table.MetaTable@6c5ea1a
2020-06-17 22:06:24 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 22:06:24 jdbc[3]: Plan       :   best plan item cost 9,900 index meta
2020-06-17 22:06:24 jdbc[3]: Plan       : plan cost 9,901
2020-06-17 22:06:24 jdbc[3]: 
/*SQL l:58 #:1*/SELECT VALUE FROM INFORMATION_SCHEMA.SETTINGS WHERE NAME=? {1: 'QUERY_TIMEOUT'};
2020-06-17 22:06:24 jdbc[3]: 
/**/prep3.close();
2020-06-17 22:06:24 jdbc[3]: 
/**/PreparedStatement prep4 = conn0.prepareStatement("insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?)", 1);;
2020-06-17 22:06:24 jdbc[3]: 
/**/prep4.setString(1, "ram@gmail.com");
2020-06-17 22:06:24 jdbc[3]: 
/**/prep4.setString(2, "Ram");
2020-06-17 22:06:24 jdbc[3]: 
/**/prep4.setString(3, "Thapa");
2020-06-17 22:06:24 jdbc[3]: 
/**/prep4.executeUpdate();
2020-06-17 22:06:24 lock: 1 exclusive write lock requesting for SYS 
2020-06-17 22:06:24 lock: 1 exclusive write lock added for SYS 
2020-06-17 22:06:24 lock: 1 exclusive write lock unlock SYS 
2020-06-17 22:06:24 lock: 3 shared read lock requesting for CUSTOMER_TBL 
2020-06-17 22:06:24 lock: 3 shared read lock ok CUSTOMER_TBL 
2020-06-17 22:06:24 jdbc[3]: 
/*SQL l:107 #:1 t:1*/insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?) {1: 'ram@gmail.com', 2: 'Ram', 3: 'Thapa'};
2020-06-17 22:06:24 jdbc[3]: 
/**/ResultSet rs9 = prep4.getGeneratedKeys();
2020-06-17 22:06:24 jdbc[3]: 
/**/rs9.next();
2020-06-17 22:06:24 jdbc[3]: 
/**/ResultSetMetaData rsMeta0 = rs9.getMetaData();
2020-06-17 22:06:24 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:06:24 jdbc[3]: 
/**/rsMeta0.getColumnCount();
2020-06-17 22:06:24 jdbc[3]: 
/**/rs9.getLong(1);
2020-06-17 22:06:24 jdbc[3]: 
/**/rs9.close();
2020-06-17 22:06:24 jdbc[3]: 
/**/prep4.getMaxRows();
2020-06-17 22:06:24 jdbc[3]: 
/**/prep4.getQueryTimeout();
2020-06-17 22:06:24 jdbc[3]: 
/**/prep4.close();
2020-06-17 22:06:24 jdbc[3]: 
/**/PreparedStatement prep5 = conn0.prepareStatement("select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=?");
2020-06-17 22:06:24 jdbc[3]: 
/**/prep5.setLong(1, 2L);
2020-06-17 22:06:24 jdbc[3]: 
/**/ResultSet rs10 = prep5.executeQuery();
2020-06-17 22:06:24 jdbc[3]: 
/*SQL l:225*/select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=? {1: 2};
2020-06-17 22:06:24 jdbc[3]: 
/**/rs10.next();
2020-06-17 22:06:24 jdbc[3]: 
/**/rs10.close();
2020-06-17 22:06:24 jdbc[3]: 
/**/prep5.getMaxRows();
2020-06-17 22:06:24 jdbc[3]: 
/**/prep5.getQueryTimeout();
2020-06-17 22:06:24 jdbc[3]: 
/**/prep5.close();
2020-06-17 22:06:24 jdbc[3]: 
/**/PreparedStatement prep6 = conn0.prepareStatement("insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?)", 1);;
2020-06-17 22:06:24 jdbc[3]: 
/**/prep6.setString(1, "hari@gmail.com");
2020-06-17 22:06:24 jdbc[3]: 
/**/prep6.setString(2, "Hari");
2020-06-17 22:06:24 jdbc[3]: 
/**/prep6.setString(3, "Neupane");
2020-06-17 22:06:24 jdbc[3]: 
/**/prep6.executeUpdate();
2020-06-17 22:06:24 jdbc[3]: 
/*SQL l:107 #:1*/insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?) {1: 'hari@gmail.com', 2: 'Hari', 3: 'Neupane'};
2020-06-17 22:06:24 jdbc[3]: 
/**/ResultSet rs11 = prep6.getGeneratedKeys();
2020-06-17 22:06:24 jdbc[3]: 
/**/rs11.next();
2020-06-17 22:06:24 jdbc[3]: 
/**/ResultSetMetaData rsMeta1 = rs11.getMetaData();
2020-06-17 22:06:24 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:06:24 jdbc[3]: 
/**/rsMeta1.getColumnCount();
2020-06-17 22:06:24 jdbc[3]: 
/**/rs11.getLong(1);
2020-06-17 22:06:24 jdbc[3]: 
/**/rs11.close();
2020-06-17 22:06:24 jdbc[3]: 
/**/prep6.getMaxRows();
2020-06-17 22:06:24 jdbc[3]: 
/**/prep6.getQueryTimeout();
2020-06-17 22:06:24 jdbc[3]: 
/**/prep6.close();
2020-06-17 22:06:24 jdbc[3]: 
/**/PreparedStatement prep7 = conn0.prepareStatement("select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=?");
2020-06-17 22:06:24 jdbc[3]: 
/**/prep7.setLong(1, 3L);
2020-06-17 22:06:24 jdbc[3]: 
/**/ResultSet rs12 = prep7.executeQuery();
2020-06-17 22:06:24 jdbc[3]: 
/*SQL l:225*/select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=? {1: 3};
2020-06-17 22:06:24 jdbc[3]: 
/**/rs12.next();
2020-06-17 22:06:24 jdbc[3]: 
/**/rs12.close();
2020-06-17 22:06:24 jdbc[3]: 
/**/prep7.getMaxRows();
2020-06-17 22:06:24 jdbc[3]: 
/**/prep7.getQueryTimeout();
2020-06-17 22:06:24 jdbc[3]: 
/**/prep7.close();
2020-06-17 22:06:24 jdbc[3]: 
/**/PreparedStatement prep8 = conn0.prepareStatement("insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?)", 1);;
2020-06-17 22:06:24 jdbc[3]: 
/**/prep8.setString(1, "ramila@gmail.com");
2020-06-17 22:06:24 jdbc[3]: 
/**/prep8.setString(2, "Ramila");
2020-06-17 22:06:24 jdbc[3]: 
/**/prep8.setString(3, "Karki");
2020-06-17 22:06:24 jdbc[3]: 
/**/prep8.executeUpdate();
2020-06-17 22:06:24 jdbc[3]: 
/*SQL l:107 #:1*/insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?) {1: 'ramila@gmail.com', 2: 'Ramila', 3: 'Karki'};
2020-06-17 22:06:24 jdbc[3]: 
/**/ResultSet rs13 = prep8.getGeneratedKeys();
2020-06-17 22:06:24 jdbc[3]: 
/**/rs13.next();
2020-06-17 22:06:24 jdbc[3]: 
/**/ResultSetMetaData rsMeta2 = rs13.getMetaData();
2020-06-17 22:06:24 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:06:24 jdbc[3]: 
/**/rsMeta2.getColumnCount();
2020-06-17 22:06:24 jdbc[3]: 
/**/rs13.getLong(1);
2020-06-17 22:06:24 jdbc[3]: 
/**/rs13.close();
2020-06-17 22:06:24 jdbc[3]: 
/**/prep8.getMaxRows();
2020-06-17 22:06:24 jdbc[3]: 
/**/prep8.getQueryTimeout();
2020-06-17 22:06:24 jdbc[3]: 
/**/prep8.close();
2020-06-17 22:06:24 jdbc[3]: 
/**/PreparedStatement prep9 = conn0.prepareStatement("select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=?");
2020-06-17 22:06:24 jdbc[3]: 
/**/prep9.setLong(1, 4L);
2020-06-17 22:06:24 jdbc[3]: 
/**/ResultSet rs14 = prep9.executeQuery();
2020-06-17 22:06:24 jdbc[3]: 
/*SQL l:225*/select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=? {1: 4};
2020-06-17 22:06:24 jdbc[3]: 
/**/rs14.next();
2020-06-17 22:06:24 jdbc[3]: 
/**/rs14.close();
2020-06-17 22:06:24 jdbc[3]: 
/**/prep9.getMaxRows();
2020-06-17 22:06:24 jdbc[3]: 
/**/prep9.getQueryTimeout();
2020-06-17 22:06:24 jdbc[3]: 
/**/prep9.close();
2020-06-17 22:06:24 jdbc[3]: 
/**/PreparedStatement prep10 = conn0.prepareStatement("insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?)", 1);;
2020-06-17 22:06:24 jdbc[3]: 
/**/prep10.setString(1, "david@gmail.com");
2020-06-17 22:06:24 jdbc[3]: 
/**/prep10.setString(2, "David");
2020-06-17 22:06:24 jdbc[3]: 
/**/prep10.setString(3, "Yonge");
2020-06-17 22:06:24 jdbc[3]: 
/**/prep10.executeUpdate();
2020-06-17 22:06:24 jdbc[3]: 
/*SQL l:107 #:1*/insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?) {1: 'david@gmail.com', 2: 'David', 3: 'Yonge'};
2020-06-17 22:06:24 jdbc[3]: 
/**/ResultSet rs15 = prep10.getGeneratedKeys();
2020-06-17 22:06:24 jdbc[3]: 
/**/rs15.next();
2020-06-17 22:06:24 jdbc[3]: 
/**/ResultSetMetaData rsMeta3 = rs15.getMetaData();
2020-06-17 22:06:24 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:06:24 jdbc[3]: 
/**/rsMeta3.getColumnCount();
2020-06-17 22:06:24 jdbc[3]: 
/**/rs15.getLong(1);
2020-06-17 22:06:24 jdbc[3]: 
/**/rs15.close();
2020-06-17 22:06:24 jdbc[3]: 
/**/prep10.getMaxRows();
2020-06-17 22:06:24 jdbc[3]: 
/**/prep10.getQueryTimeout();
2020-06-17 22:06:24 jdbc[3]: 
/**/prep10.close();
2020-06-17 22:06:24 jdbc[3]: 
/**/PreparedStatement prep11 = conn0.prepareStatement("select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=?");
2020-06-17 22:06:24 jdbc[3]: 
/**/prep11.setLong(1, 5L);
2020-06-17 22:06:24 jdbc[3]: 
/**/ResultSet rs16 = prep11.executeQuery();
2020-06-17 22:06:24 jdbc[3]: 
/*SQL l:225*/select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=? {1: 5};
2020-06-17 22:06:24 jdbc[3]: 
/**/rs16.next();
2020-06-17 22:06:24 jdbc[3]: 
/**/rs16.close();
2020-06-17 22:06:24 jdbc[3]: 
/**/prep11.getMaxRows();
2020-06-17 22:06:24 jdbc[3]: 
/**/prep11.getQueryTimeout();
2020-06-17 22:06:24 jdbc[3]: 
/**/prep11.close();
2020-06-17 22:06:24 jdbc[3]: 
/**/PreparedStatement prep12 = conn0.prepareStatement("insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?)", 1);;
2020-06-17 22:06:24 jdbc[3]: 
/**/prep12.setString(1, "peter@gmail.com");
2020-06-17 22:06:24 jdbc[3]: 
/**/prep12.setString(2, "Peter");
2020-06-17 22:06:24 jdbc[3]: 
/**/prep12.setString(3, "Parker");
2020-06-17 22:06:24 jdbc[3]: 
/**/prep12.executeUpdate();
2020-06-17 22:06:24 jdbc[3]: 
/*SQL l:107 #:1*/insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?) {1: 'peter@gmail.com', 2: 'Peter', 3: 'Parker'};
2020-06-17 22:06:24 jdbc[3]: 
/**/ResultSet rs17 = prep12.getGeneratedKeys();
2020-06-17 22:06:24 jdbc[3]: 
/**/rs17.next();
2020-06-17 22:06:24 jdbc[3]: 
/**/ResultSetMetaData rsMeta4 = rs17.getMetaData();
2020-06-17 22:06:24 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:06:24 jdbc[3]: 
/**/rsMeta4.getColumnCount();
2020-06-17 22:06:24 jdbc[3]: 
/**/rs17.getLong(1);
2020-06-17 22:06:24 jdbc[3]: 
/**/rs17.close();
2020-06-17 22:06:24 jdbc[3]: 
/**/prep12.getMaxRows();
2020-06-17 22:06:24 jdbc[3]: 
/**/prep12.getQueryTimeout();
2020-06-17 22:06:24 jdbc[3]: 
/**/prep12.close();
2020-06-17 22:06:24 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:06:24 lock: 3 shared read lock unlock CUSTOMER_TBL 
2020-06-17 22:06:24 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:06:24 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:06:24 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:06:24 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:06:24 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:06:24 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:06:24 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:06:27 jdbc[3]: 
/**/PreparedStatement prep13 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:06:27 jdbc[3]: 
/**/prep13.setString(1, "CustomerMS");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep13.setString(2, "INFO");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep13.setNull(3, 12);
2020-06-17 22:06:27 jdbc[3]: 
/**/prep13.setString(4, "/api/customers/2");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep13.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep13.setString(6, "835c44c5407a860f");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep13.setString(7, "2020-06-17T20:43:48.395Z");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep13.setString(8, "835c44c5407a860f");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep13.executeUpdate();
2020-06-17 22:06:27 lock: 1 exclusive write lock requesting for SYS 
2020-06-17 22:06:27 lock: 1 exclusive write lock added for SYS 
2020-06-17 22:06:27 lock: 1 exclusive write lock unlock SYS 
2020-06-17 22:06:27 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:06:27 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:06:27 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/2', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: '835c44c5407a860f', 7: '2020-06-17T20:43:48.395Z', 8: '835c44c5407a860f'};
2020-06-17 22:06:27 jdbc[3]: 
/**/ResultSet rs18 = prep13.getGeneratedKeys();
2020-06-17 22:06:27 jdbc[3]: 
/**/rs18.next();
2020-06-17 22:06:27 jdbc[3]: 
/**/ResultSetMetaData rsMeta5 = rs18.getMetaData();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:06:27 jdbc[3]: 
/**/rsMeta5.getColumnCount();
2020-06-17 22:06:27 jdbc[3]: 
/**/rs18.getLong(1);
2020-06-17 22:06:27 jdbc[3]: 
/**/rs18.close();
2020-06-17 22:06:27 jdbc[3]: 
/**/prep13.getMaxRows();
2020-06-17 22:06:27 jdbc[3]: 
/**/prep13.getQueryTimeout();
2020-06-17 22:06:27 jdbc[3]: 
/**/prep13.close();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:06:27 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:06:27 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:06:27 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:06:27 jdbc[3]: 
/**/PreparedStatement prep14 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:06:27 jdbc[3]: 
/**/prep14.setString(1, "CustomerMS");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep14.setString(2, "INFO");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep14.setNull(3, 12);
2020-06-17 22:06:27 jdbc[3]: 
/**/prep14.setString(4, "/api/customers/2");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep14.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep14.setString(6, "ac4762af3b603bf9");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep14.setString(7, "2020-06-18T02:47:02.751Z");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep14.setString(8, "ac4762af3b603bf9");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep14.executeUpdate();
2020-06-17 22:06:27 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:06:27 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:06:27 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/2', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: 'ac4762af3b603bf9', 7: '2020-06-18T02:47:02.751Z', 8: 'ac4762af3b603bf9'};
2020-06-17 22:06:27 jdbc[3]: 
/**/ResultSet rs19 = prep14.getGeneratedKeys();
2020-06-17 22:06:27 jdbc[3]: 
/**/rs19.next();
2020-06-17 22:06:27 jdbc[3]: 
/**/ResultSetMetaData rsMeta6 = rs19.getMetaData();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:06:27 jdbc[3]: 
/**/rsMeta6.getColumnCount();
2020-06-17 22:06:27 jdbc[3]: 
/**/rs19.getLong(1);
2020-06-17 22:06:27 jdbc[3]: 
/**/rs19.close();
2020-06-17 22:06:27 jdbc[3]: 
/**/prep14.getMaxRows();
2020-06-17 22:06:27 jdbc[3]: 
/**/prep14.getQueryTimeout();
2020-06-17 22:06:27 jdbc[3]: 
/**/prep14.close();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:06:27 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:06:27 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:06:27 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:06:27 jdbc[3]: 
/**/PreparedStatement prep15 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:06:27 jdbc[3]: 
/**/prep15.setString(1, "CustomerMS");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep15.setString(2, "INFO");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep15.setNull(3, 12);
2020-06-17 22:06:27 jdbc[3]: 
/**/prep15.setString(4, "/api/customers/3");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep15.setString(5, "Customer(id=3, firstName=Ramila, lastName=Karki, email=ramila@gmail.com)");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep15.setString(6, "cda1008eb6f59b1a");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep15.setString(7, "2020-06-18T02:47:23.391Z");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep15.setString(8, "cda1008eb6f59b1a");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep15.executeUpdate();
2020-06-17 22:06:27 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:06:27 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:06:27 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/3', 5: 'Customer(id=3, firstName=Ramila, lastName=Karki, email=ramila@gmail.com)', 6: 'cda1008eb6f59b1a', 7: '2020-06-18T02:47:23.391Z', 8: 'cda1008eb6f59b1a'};
2020-06-17 22:06:27 jdbc[3]: 
/**/ResultSet rs20 = prep15.getGeneratedKeys();
2020-06-17 22:06:27 jdbc[3]: 
/**/rs20.next();
2020-06-17 22:06:27 jdbc[3]: 
/**/ResultSetMetaData rsMeta7 = rs20.getMetaData();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:06:27 jdbc[3]: 
/**/rsMeta7.getColumnCount();
2020-06-17 22:06:27 jdbc[3]: 
/**/rs20.getLong(1);
2020-06-17 22:06:27 jdbc[3]: 
/**/rs20.close();
2020-06-17 22:06:27 jdbc[3]: 
/**/prep15.getMaxRows();
2020-06-17 22:06:27 jdbc[3]: 
/**/prep15.getQueryTimeout();
2020-06-17 22:06:27 jdbc[3]: 
/**/prep15.close();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:06:27 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:06:27 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:06:27 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:06:27 jdbc[3]: 
/**/PreparedStatement prep16 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:06:27 jdbc[3]: 
/**/prep16.setString(1, "CustomerMS");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep16.setString(2, "INFO");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep16.setNull(3, 12);
2020-06-17 22:06:27 jdbc[3]: 
/**/prep16.setString(4, "/api/customers/4");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep16.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep16.setString(6, "93222afc6f639d33");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep16.setString(7, "2020-06-18T02:47:33.067Z");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep16.setString(8, "93222afc6f639d33");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep16.executeUpdate();
2020-06-17 22:06:27 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:06:27 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:06:27 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/4', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: '93222afc6f639d33', 7: '2020-06-18T02:47:33.067Z', 8: '93222afc6f639d33'};
2020-06-17 22:06:27 jdbc[3]: 
/**/ResultSet rs21 = prep16.getGeneratedKeys();
2020-06-17 22:06:27 jdbc[3]: 
/**/rs21.next();
2020-06-17 22:06:27 jdbc[3]: 
/**/ResultSetMetaData rsMeta8 = rs21.getMetaData();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:06:27 jdbc[3]: 
/**/rsMeta8.getColumnCount();
2020-06-17 22:06:27 jdbc[3]: 
/**/rs21.getLong(1);
2020-06-17 22:06:27 jdbc[3]: 
/**/rs21.close();
2020-06-17 22:06:27 jdbc[3]: 
/**/prep16.getMaxRows();
2020-06-17 22:06:27 jdbc[3]: 
/**/prep16.getQueryTimeout();
2020-06-17 22:06:27 jdbc[3]: 
/**/prep16.close();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:06:27 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:06:27 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:06:27 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:06:27 jdbc[3]: 
/**/PreparedStatement prep17 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:06:27 jdbc[3]: 
/**/prep17.setString(1, "CustomerMS");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep17.setString(2, "INFO");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep17.setNull(3, 12);
2020-06-17 22:06:27 jdbc[3]: 
/**/prep17.setString(4, "/api/customers/4");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep17.setString(5, "Customer(id=4, firstName=David, lastName=Yonge, email=david@gmail.com)");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep17.setString(6, "93222afc6f639d33");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep17.setString(7, "2020-06-18T02:47:33.071Z");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep17.setString(8, "93222afc6f639d33");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep17.executeUpdate();
2020-06-17 22:06:27 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:06:27 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:06:27 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/4', 5: 'Customer(id=4, firstName=David, lastName=Yonge, email=david@gmail.com)', 6: '93222afc6f639d33', 7: '2020-06-18T02:47:33.071Z', 8: '93222afc6f639d33'};
2020-06-17 22:06:27 jdbc[3]: 
/**/ResultSet rs22 = prep17.getGeneratedKeys();
2020-06-17 22:06:27 jdbc[3]: 
/**/rs22.next();
2020-06-17 22:06:27 jdbc[3]: 
/**/ResultSetMetaData rsMeta9 = rs22.getMetaData();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:06:27 jdbc[3]: 
/**/rsMeta9.getColumnCount();
2020-06-17 22:06:27 jdbc[3]: 
/**/rs22.getLong(1);
2020-06-17 22:06:27 jdbc[3]: 
/**/rs22.close();
2020-06-17 22:06:27 jdbc[3]: 
/**/prep17.getMaxRows();
2020-06-17 22:06:27 jdbc[3]: 
/**/prep17.getQueryTimeout();
2020-06-17 22:06:27 jdbc[3]: 
/**/prep17.close();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:06:27 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:06:27 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:06:27 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:06:27 jdbc[3]: 
/**/PreparedStatement prep18 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:06:27 jdbc[3]: 
/**/prep18.setString(1, "CustomerMS");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep18.setString(2, "INFO");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep18.setNull(3, 12);
2020-06-17 22:06:27 jdbc[3]: 
/**/prep18.setString(4, "/api/customers/5");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep18.setString(5, "Customer(id=5, firstName=Peter, lastName=Parker, email=peter@gmail.com)");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep18.setString(6, "66f1f3cca2518457");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep18.setString(7, "2020-06-18T02:48:04.745Z");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep18.setString(8, "66f1f3cca2518457");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep18.executeUpdate();
2020-06-17 22:06:27 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:06:27 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:06:27 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/5', 5: 'Customer(id=5, firstName=Peter, lastName=Parker, email=peter@gmail.com)', 6: '66f1f3cca2518457', 7: '2020-06-18T02:48:04.745Z', 8: '66f1f3cca2518457'};
2020-06-17 22:06:27 jdbc[3]: 
/**/ResultSet rs23 = prep18.getGeneratedKeys();
2020-06-17 22:06:27 jdbc[3]: 
/**/rs23.next();
2020-06-17 22:06:27 jdbc[3]: 
/**/ResultSetMetaData rsMeta10 = rs23.getMetaData();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:06:27 jdbc[3]: 
/**/rsMeta10.getColumnCount();
2020-06-17 22:06:27 jdbc[3]: 
/**/rs23.getLong(1);
2020-06-17 22:06:27 jdbc[3]: 
/**/rs23.close();
2020-06-17 22:06:27 jdbc[3]: 
/**/prep18.getMaxRows();
2020-06-17 22:06:27 jdbc[3]: 
/**/prep18.getQueryTimeout();
2020-06-17 22:06:27 jdbc[3]: 
/**/prep18.close();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:06:27 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:06:27 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:06:27 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:06:27 jdbc[3]: 
/**/PreparedStatement prep19 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:06:27 jdbc[3]: 
/**/prep19.setString(1, "CustomerMS");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep19.setString(2, "INFO");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep19.setNull(3, 12);
2020-06-17 22:06:27 jdbc[3]: 
/**/prep19.setString(4, "/api/customers/6");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep19.setString(5, "Customer(id=null, firstName=null, lastName=null, email=null)");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep19.setString(6, "e4ff784815173d28");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep19.setString(7, "2020-06-18T02:48:16.076Z");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep19.setString(8, "e4ff784815173d28");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep19.executeUpdate();
2020-06-17 22:06:27 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:06:27 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:06:27 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/6', 5: 'Customer(id=null, firstName=null, lastName=null, email=null)', 6: 'e4ff784815173d28', 7: '2020-06-18T02:48:16.076Z', 8: 'e4ff784815173d28'};
2020-06-17 22:06:27 jdbc[3]: 
/**/ResultSet rs24 = prep19.getGeneratedKeys();
2020-06-17 22:06:27 jdbc[3]: 
/**/rs24.next();
2020-06-17 22:06:27 jdbc[3]: 
/**/ResultSetMetaData rsMeta11 = rs24.getMetaData();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:06:27 jdbc[3]: 
/**/rsMeta11.getColumnCount();
2020-06-17 22:06:27 jdbc[3]: 
/**/rs24.getLong(1);
2020-06-17 22:06:27 jdbc[3]: 
/**/rs24.close();
2020-06-17 22:06:27 jdbc[3]: 
/**/prep19.getMaxRows();
2020-06-17 22:06:27 jdbc[3]: 
/**/prep19.getQueryTimeout();
2020-06-17 22:06:27 jdbc[3]: 
/**/prep19.close();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:06:27 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:06:27 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:06:27 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:06:27 jdbc[3]: 
/**/PreparedStatement prep20 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:06:27 jdbc[3]: 
/**/prep20.setString(1, "CustomerMS");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep20.setString(2, "INFO");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep20.setNull(3, 12);
2020-06-17 22:06:27 jdbc[3]: 
/**/prep20.setString(4, "/api/customers/2");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep20.setString(5, "Customer(id=3, firstName=Ramila, lastName=Karki, email=ramila@gmail.com)");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep20.setString(6, "543f683d787432fc");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep20.setString(7, "2020-06-18T02:48:30.897Z");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep20.setString(8, "543f683d787432fc");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep20.executeUpdate();
2020-06-17 22:06:27 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:06:27 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:06:27 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/2', 5: 'Customer(id=3, firstName=Ramila, lastName=Karki, email=ramila@gmail.com)', 6: '543f683d787432fc', 7: '2020-06-18T02:48:30.897Z', 8: '543f683d787432fc'};
2020-06-17 22:06:27 jdbc[3]: 
/**/ResultSet rs25 = prep20.getGeneratedKeys();
2020-06-17 22:06:27 jdbc[3]: 
/**/rs25.next();
2020-06-17 22:06:27 jdbc[3]: 
/**/ResultSetMetaData rsMeta12 = rs25.getMetaData();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:06:27 jdbc[3]: 
/**/rsMeta12.getColumnCount();
2020-06-17 22:06:27 jdbc[3]: 
/**/rs25.getLong(1);
2020-06-17 22:06:27 jdbc[3]: 
/**/rs25.close();
2020-06-17 22:06:27 jdbc[3]: 
/**/prep20.getMaxRows();
2020-06-17 22:06:27 jdbc[3]: 
/**/prep20.getQueryTimeout();
2020-06-17 22:06:27 jdbc[3]: 
/**/prep20.close();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:06:27 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:06:27 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:06:27 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:06:27 jdbc[3]: 
/**/PreparedStatement prep21 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:06:27 jdbc[3]: 
/**/prep21.setString(1, "CustomerMS");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep21.setString(2, "INFO");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep21.setNull(3, 12);
2020-06-17 22:06:27 jdbc[3]: 
/**/prep21.setString(4, "/api/customers/2");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep21.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep21.setString(6, "543f683d787432fc");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep21.setString(7, "2020-06-18T02:48:30.901Z");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep21.setString(8, "543f683d787432fc");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep21.executeUpdate();
2020-06-17 22:06:27 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:06:27 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:06:27 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/2', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: '543f683d787432fc', 7: '2020-06-18T02:48:30.901Z', 8: '543f683d787432fc'};
2020-06-17 22:06:27 jdbc[3]: 
/**/ResultSet rs26 = prep21.getGeneratedKeys();
2020-06-17 22:06:27 jdbc[3]: 
/**/rs26.next();
2020-06-17 22:06:27 jdbc[3]: 
/**/ResultSetMetaData rsMeta13 = rs26.getMetaData();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:06:27 jdbc[3]: 
/**/rsMeta13.getColumnCount();
2020-06-17 22:06:27 jdbc[3]: 
/**/rs26.getLong(1);
2020-06-17 22:06:27 jdbc[3]: 
/**/rs26.close();
2020-06-17 22:06:27 jdbc[3]: 
/**/prep21.getMaxRows();
2020-06-17 22:06:27 jdbc[3]: 
/**/prep21.getQueryTimeout();
2020-06-17 22:06:27 jdbc[3]: 
/**/prep21.close();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:06:27 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:06:27 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:06:27 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:06:27 jdbc[3]: 
/**/PreparedStatement prep22 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:06:27 jdbc[3]: 
/**/prep22.setString(1, "CustomerMS");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep22.setString(2, "INFO");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep22.setNull(3, 12);
2020-06-17 22:06:27 jdbc[3]: 
/**/prep22.setString(4, "/api/customers/2");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep22.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep22.setString(6, "dd81605f39be9222");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep22.setString(7, "2020-06-18T02:53:16.435Z");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep22.setString(8, "dd81605f39be9222");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep22.executeUpdate();
2020-06-17 22:06:27 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:06:27 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:06:27 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/2', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: 'dd81605f39be9222', 7: '2020-06-18T02:53:16.435Z', 8: 'dd81605f39be9222'};
2020-06-17 22:06:27 jdbc[3]: 
/**/ResultSet rs27 = prep22.getGeneratedKeys();
2020-06-17 22:06:27 jdbc[3]: 
/**/rs27.next();
2020-06-17 22:06:27 jdbc[3]: 
/**/ResultSetMetaData rsMeta14 = rs27.getMetaData();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:06:27 jdbc[3]: 
/**/rsMeta14.getColumnCount();
2020-06-17 22:06:27 jdbc[3]: 
/**/rs27.getLong(1);
2020-06-17 22:06:27 jdbc[3]: 
/**/rs27.close();
2020-06-17 22:06:27 jdbc[3]: 
/**/prep22.getMaxRows();
2020-06-17 22:06:27 jdbc[3]: 
/**/prep22.getQueryTimeout();
2020-06-17 22:06:27 jdbc[3]: 
/**/prep22.close();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:06:27 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:06:27 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:06:27 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:06:27 jdbc[3]: 
/**/PreparedStatement prep23 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:06:27 jdbc[3]: 
/**/prep23.setString(1, "CustomerMS");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep23.setString(2, "INFO");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep23.setNull(3, 12);
2020-06-17 22:06:27 jdbc[3]: 
/**/prep23.setString(4, "/api/customers/2");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep23.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep23.setString(6, "34ab3d102fb49096");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep23.setString(7, "2020-06-18T02:53:23.797Z");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep23.setString(8, "34ab3d102fb49096");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep23.executeUpdate();
2020-06-17 22:06:27 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:06:27 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:06:27 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/2', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: '34ab3d102fb49096', 7: '2020-06-18T02:53:23.797Z', 8: '34ab3d102fb49096'};
2020-06-17 22:06:27 jdbc[3]: 
/**/ResultSet rs28 = prep23.getGeneratedKeys();
2020-06-17 22:06:27 jdbc[3]: 
/**/rs28.next();
2020-06-17 22:06:27 jdbc[3]: 
/**/ResultSetMetaData rsMeta15 = rs28.getMetaData();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:06:27 jdbc[3]: 
/**/rsMeta15.getColumnCount();
2020-06-17 22:06:27 jdbc[3]: 
/**/rs28.getLong(1);
2020-06-17 22:06:27 jdbc[3]: 
/**/rs28.close();
2020-06-17 22:06:27 jdbc[3]: 
/**/prep23.getMaxRows();
2020-06-17 22:06:27 jdbc[3]: 
/**/prep23.getQueryTimeout();
2020-06-17 22:06:27 jdbc[3]: 
/**/prep23.close();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:06:27 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:06:27 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:06:27 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:06:27 jdbc[3]: 
/**/PreparedStatement prep24 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:06:27 jdbc[3]: 
/**/prep24.setString(1, "CustomerMS");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep24.setString(2, "INFO");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep24.setNull(3, 12);
2020-06-17 22:06:27 jdbc[3]: 
/**/prep24.setString(4, "/api/customers/2");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep24.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep24.setString(6, "19d2e4d621c50722");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep24.setString(7, "2020-06-18T02:53:35.082Z");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep24.setString(8, "19d2e4d621c50722");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep24.executeUpdate();
2020-06-17 22:06:27 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:06:27 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:06:27 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/2', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: '19d2e4d621c50722', 7: '2020-06-18T02:53:35.082Z', 8: '19d2e4d621c50722'};
2020-06-17 22:06:27 jdbc[3]: 
/**/ResultSet rs29 = prep24.getGeneratedKeys();
2020-06-17 22:06:27 jdbc[3]: 
/**/rs29.next();
2020-06-17 22:06:27 jdbc[3]: 
/**/ResultSetMetaData rsMeta16 = rs29.getMetaData();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:06:27 jdbc[3]: 
/**/rsMeta16.getColumnCount();
2020-06-17 22:06:27 jdbc[3]: 
/**/rs29.getLong(1);
2020-06-17 22:06:27 jdbc[3]: 
/**/rs29.close();
2020-06-17 22:06:27 jdbc[3]: 
/**/prep24.getMaxRows();
2020-06-17 22:06:27 jdbc[3]: 
/**/prep24.getQueryTimeout();
2020-06-17 22:06:27 jdbc[3]: 
/**/prep24.close();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:06:27 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:06:27 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:06:27 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:06:27 jdbc[3]: 
/**/PreparedStatement prep25 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:06:27 jdbc[3]: 
/**/prep25.setString(1, "CustomerMS");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep25.setString(2, "INFO");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep25.setNull(3, 12);
2020-06-17 22:06:27 jdbc[3]: 
/**/prep25.setString(4, "/api/customers/3");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep25.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep25.setString(6, "ab696d894d92b334");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep25.setString(7, "2020-06-18T02:53:42.252Z");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep25.setString(8, "ab696d894d92b334");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep25.executeUpdate();
2020-06-17 22:06:27 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:06:27 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:06:27 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/3', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: 'ab696d894d92b334', 7: '2020-06-18T02:53:42.252Z', 8: 'ab696d894d92b334'};
2020-06-17 22:06:27 jdbc[3]: 
/**/ResultSet rs30 = prep25.getGeneratedKeys();
2020-06-17 22:06:27 jdbc[3]: 
/**/rs30.next();
2020-06-17 22:06:27 jdbc[3]: 
/**/ResultSetMetaData rsMeta17 = rs30.getMetaData();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:06:27 jdbc[3]: 
/**/rsMeta17.getColumnCount();
2020-06-17 22:06:27 jdbc[3]: 
/**/rs30.getLong(1);
2020-06-17 22:06:27 jdbc[3]: 
/**/rs30.close();
2020-06-17 22:06:27 jdbc[3]: 
/**/prep25.getMaxRows();
2020-06-17 22:06:27 jdbc[3]: 
/**/prep25.getQueryTimeout();
2020-06-17 22:06:27 jdbc[3]: 
/**/prep25.close();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:06:27 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:06:27 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:06:27 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:06:27 jdbc[3]: 
/**/PreparedStatement prep26 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:06:27 jdbc[3]: 
/**/prep26.setString(1, "CustomerMS");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep26.setString(2, "INFO");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep26.setNull(3, 12);
2020-06-17 22:06:27 jdbc[3]: 
/**/prep26.setString(4, "/api/customers/3");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep26.setString(5, "Customer(id=3, firstName=Ramila, lastName=Karki, email=ramila@gmail.com)");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep26.setString(6, "ab696d894d92b334");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep26.setString(7, "2020-06-18T02:53:42.257Z");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep26.setString(8, "ab696d894d92b334");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep26.executeUpdate();
2020-06-17 22:06:27 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:06:27 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:06:27 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/3', 5: 'Customer(id=3, firstName=Ramila, lastName=Karki, email=ramila@gmail.com)', 6: 'ab696d894d92b334', 7: '2020-06-18T02:53:42.257Z', 8: 'ab696d894d92b334'};
2020-06-17 22:06:27 jdbc[3]: 
/**/ResultSet rs31 = prep26.getGeneratedKeys();
2020-06-17 22:06:27 jdbc[3]: 
/**/rs31.next();
2020-06-17 22:06:27 jdbc[3]: 
/**/ResultSetMetaData rsMeta18 = rs31.getMetaData();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:06:27 jdbc[3]: 
/**/rsMeta18.getColumnCount();
2020-06-17 22:06:27 jdbc[3]: 
/**/rs31.getLong(1);
2020-06-17 22:06:27 jdbc[3]: 
/**/rs31.close();
2020-06-17 22:06:27 jdbc[3]: 
/**/prep26.getMaxRows();
2020-06-17 22:06:27 jdbc[3]: 
/**/prep26.getQueryTimeout();
2020-06-17 22:06:27 jdbc[3]: 
/**/prep26.close();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:06:27 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:06:27 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:06:27 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:06:27 jdbc[3]: 
/**/PreparedStatement prep27 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:06:27 jdbc[3]: 
/**/prep27.setString(1, "CustomerMS");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep27.setString(2, "INFO");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep27.setNull(3, 12);
2020-06-17 22:06:27 jdbc[3]: 
/**/prep27.setString(4, "/api/customers/4");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep27.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep27.setString(6, "cc0b9a3859b08cfa");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep27.setString(7, "2020-06-18T02:53:58.878Z");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep27.setString(8, "cc0b9a3859b08cfa");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep27.executeUpdate();
2020-06-17 22:06:27 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:06:27 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:06:27 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/4', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: 'cc0b9a3859b08cfa', 7: '2020-06-18T02:53:58.878Z', 8: 'cc0b9a3859b08cfa'};
2020-06-17 22:06:27 jdbc[3]: 
/**/ResultSet rs32 = prep27.getGeneratedKeys();
2020-06-17 22:06:27 jdbc[3]: 
/**/rs32.next();
2020-06-17 22:06:27 jdbc[3]: 
/**/ResultSetMetaData rsMeta19 = rs32.getMetaData();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:06:27 jdbc[3]: 
/**/rsMeta19.getColumnCount();
2020-06-17 22:06:27 jdbc[3]: 
/**/rs32.getLong(1);
2020-06-17 22:06:27 jdbc[3]: 
/**/rs32.close();
2020-06-17 22:06:27 jdbc[3]: 
/**/prep27.getMaxRows();
2020-06-17 22:06:27 jdbc[3]: 
/**/prep27.getQueryTimeout();
2020-06-17 22:06:27 jdbc[3]: 
/**/prep27.close();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:06:27 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:06:27 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:06:27 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:06:27 jdbc[3]: 
/**/PreparedStatement prep28 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:06:27 jdbc[3]: 
/**/prep28.setString(1, "CustomerMS");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep28.setString(2, "INFO");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep28.setNull(3, 12);
2020-06-17 22:06:27 jdbc[3]: 
/**/prep28.setString(4, "/api/customers/4");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep28.setString(5, "Customer(id=4, firstName=David, lastName=Yonge, email=david@gmail.com)");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep28.setString(6, "cc0b9a3859b08cfa");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep28.setString(7, "2020-06-18T02:53:58.882Z");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep28.setString(8, "cc0b9a3859b08cfa");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep28.executeUpdate();
2020-06-17 22:06:27 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:06:27 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:06:27 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/4', 5: 'Customer(id=4, firstName=David, lastName=Yonge, email=david@gmail.com)', 6: 'cc0b9a3859b08cfa', 7: '2020-06-18T02:53:58.882Z', 8: 'cc0b9a3859b08cfa'};
2020-06-17 22:06:27 jdbc[3]: 
/**/ResultSet rs33 = prep28.getGeneratedKeys();
2020-06-17 22:06:27 jdbc[3]: 
/**/rs33.next();
2020-06-17 22:06:27 jdbc[3]: 
/**/ResultSetMetaData rsMeta20 = rs33.getMetaData();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:06:27 jdbc[3]: 
/**/rsMeta20.getColumnCount();
2020-06-17 22:06:27 jdbc[3]: 
/**/rs33.getLong(1);
2020-06-17 22:06:27 jdbc[3]: 
/**/rs33.close();
2020-06-17 22:06:27 jdbc[3]: 
/**/prep28.getMaxRows();
2020-06-17 22:06:27 jdbc[3]: 
/**/prep28.getQueryTimeout();
2020-06-17 22:06:27 jdbc[3]: 
/**/prep28.close();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:06:27 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:06:27 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:06:27 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:06:27 jdbc[3]: 
/**/PreparedStatement prep29 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:06:27 jdbc[3]: 
/**/prep29.setString(1, "CustomerMS");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep29.setString(2, "INFO");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep29.setNull(3, 12);
2020-06-17 22:06:27 jdbc[3]: 
/**/prep29.setString(4, "/api/customers/2");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep29.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep29.setString(6, "06670eac012d24ee");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep29.setString(7, "2020-06-18T02:55:56.769Z");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep29.setString(8, "06670eac012d24ee");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep29.executeUpdate();
2020-06-17 22:06:27 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:06:27 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:06:27 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/2', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: '06670eac012d24ee', 7: '2020-06-18T02:55:56.769Z', 8: '06670eac012d24ee'};
2020-06-17 22:06:27 jdbc[3]: 
/**/ResultSet rs34 = prep29.getGeneratedKeys();
2020-06-17 22:06:27 jdbc[3]: 
/**/rs34.next();
2020-06-17 22:06:27 jdbc[3]: 
/**/ResultSetMetaData rsMeta21 = rs34.getMetaData();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:06:27 jdbc[3]: 
/**/rsMeta21.getColumnCount();
2020-06-17 22:06:27 jdbc[3]: 
/**/rs34.getLong(1);
2020-06-17 22:06:27 jdbc[3]: 
/**/rs34.close();
2020-06-17 22:06:27 jdbc[3]: 
/**/prep29.getMaxRows();
2020-06-17 22:06:27 jdbc[3]: 
/**/prep29.getQueryTimeout();
2020-06-17 22:06:27 jdbc[3]: 
/**/prep29.close();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:06:27 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:06:27 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:06:27 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:06:27 jdbc[3]: 
/**/PreparedStatement prep30 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:06:27 jdbc[3]: 
/**/prep30.setString(1, "CustomerMS");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep30.setString(2, "INFO");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep30.setNull(3, 12);
2020-06-17 22:06:27 jdbc[3]: 
/**/prep30.setString(4, "/api/customers/3");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep30.setString(5, "Customer(id=3, firstName=Ramila, lastName=Karki, email=ramila@gmail.com)");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep30.setString(6, "8f964dcc036a839b");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep30.setString(7, "2020-06-18T02:56:04.268Z");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep30.setString(8, "8f964dcc036a839b");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep30.executeUpdate();
2020-06-17 22:06:27 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:06:27 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:06:27 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/3', 5: 'Customer(id=3, firstName=Ramila, lastName=Karki, email=ramila@gmail.com)', 6: '8f964dcc036a839b', 7: '2020-06-18T02:56:04.268Z', 8: '8f964dcc036a839b'};
2020-06-17 22:06:27 jdbc[3]: 
/**/ResultSet rs35 = prep30.getGeneratedKeys();
2020-06-17 22:06:27 jdbc[3]: 
/**/rs35.next();
2020-06-17 22:06:27 jdbc[3]: 
/**/ResultSetMetaData rsMeta22 = rs35.getMetaData();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:06:27 jdbc[3]: 
/**/rsMeta22.getColumnCount();
2020-06-17 22:06:27 jdbc[3]: 
/**/rs35.getLong(1);
2020-06-17 22:06:27 jdbc[3]: 
/**/rs35.close();
2020-06-17 22:06:27 jdbc[3]: 
/**/prep30.getMaxRows();
2020-06-17 22:06:27 jdbc[3]: 
/**/prep30.getQueryTimeout();
2020-06-17 22:06:27 jdbc[3]: 
/**/prep30.close();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:06:27 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:06:27 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:06:27 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:06:27 jdbc[3]: 
/**/PreparedStatement prep31 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:06:27 jdbc[3]: 
/**/prep31.setString(1, "CustomerMS");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep31.setString(2, "INFO");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep31.setNull(3, 12);
2020-06-17 22:06:27 jdbc[3]: 
/**/prep31.setString(4, "/api/customers/2");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep31.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep31.setString(6, "93153296296c724e");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep31.setString(7, "2020-06-18T02:56:12.997Z");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep31.setString(8, "93153296296c724e");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep31.executeUpdate();
2020-06-17 22:06:27 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:06:27 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:06:27 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/2', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: '93153296296c724e', 7: '2020-06-18T02:56:12.997Z', 8: '93153296296c724e'};
2020-06-17 22:06:27 jdbc[3]: 
/**/ResultSet rs36 = prep31.getGeneratedKeys();
2020-06-17 22:06:27 jdbc[3]: 
/**/rs36.next();
2020-06-17 22:06:27 jdbc[3]: 
/**/ResultSetMetaData rsMeta23 = rs36.getMetaData();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:06:27 jdbc[3]: 
/**/rsMeta23.getColumnCount();
2020-06-17 22:06:27 jdbc[3]: 
/**/rs36.getLong(1);
2020-06-17 22:06:27 jdbc[3]: 
/**/rs36.close();
2020-06-17 22:06:27 jdbc[3]: 
/**/prep31.getMaxRows();
2020-06-17 22:06:27 jdbc[3]: 
/**/prep31.getQueryTimeout();
2020-06-17 22:06:27 jdbc[3]: 
/**/prep31.close();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:06:27 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:06:27 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:06:27 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:06:27 jdbc[3]: 
/**/PreparedStatement prep32 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:06:27 jdbc[3]: 
/**/prep32.setString(1, "CustomerMS");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep32.setString(2, "INFO");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep32.setNull(3, 12);
2020-06-17 22:06:27 jdbc[3]: 
/**/prep32.setString(4, "/api/customers/2");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep32.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep32.setString(6, "20eb60e1e2a5f223");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep32.setString(7, "2020-06-18T02:56:15.134Z");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep32.setString(8, "20eb60e1e2a5f223");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep32.executeUpdate();
2020-06-17 22:06:27 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:06:27 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:06:27 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/2', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: '20eb60e1e2a5f223', 7: '2020-06-18T02:56:15.134Z', 8: '20eb60e1e2a5f223'};
2020-06-17 22:06:27 jdbc[3]: 
/**/ResultSet rs37 = prep32.getGeneratedKeys();
2020-06-17 22:06:27 jdbc[3]: 
/**/rs37.next();
2020-06-17 22:06:27 jdbc[3]: 
/**/ResultSetMetaData rsMeta24 = rs37.getMetaData();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:06:27 jdbc[3]: 
/**/rsMeta24.getColumnCount();
2020-06-17 22:06:27 jdbc[3]: 
/**/rs37.getLong(1);
2020-06-17 22:06:27 jdbc[3]: 
/**/rs37.close();
2020-06-17 22:06:27 jdbc[3]: 
/**/prep32.getMaxRows();
2020-06-17 22:06:27 jdbc[3]: 
/**/prep32.getQueryTimeout();
2020-06-17 22:06:27 jdbc[3]: 
/**/prep32.close();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:06:27 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:06:27 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:06:27 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:06:27 jdbc[3]: 
/**/PreparedStatement prep33 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:06:27 jdbc[3]: 
/**/prep33.setString(1, "CustomerMS");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep33.setString(2, "INFO");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep33.setNull(3, 12);
2020-06-17 22:06:27 jdbc[3]: 
/**/prep33.setString(4, "/api/customers/2");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep33.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep33.setString(6, "43d42dc852862595");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep33.setString(7, "2020-06-18T02:56:16.890Z");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep33.setString(8, "43d42dc852862595");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep33.executeUpdate();
2020-06-17 22:06:27 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:06:27 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:06:27 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/2', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: '43d42dc852862595', 7: '2020-06-18T02:56:16.890Z', 8: '43d42dc852862595'};
2020-06-17 22:06:27 jdbc[3]: 
/**/ResultSet rs38 = prep33.getGeneratedKeys();
2020-06-17 22:06:27 jdbc[3]: 
/**/rs38.next();
2020-06-17 22:06:27 jdbc[3]: 
/**/ResultSetMetaData rsMeta25 = rs38.getMetaData();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:06:27 jdbc[3]: 
/**/rsMeta25.getColumnCount();
2020-06-17 22:06:27 jdbc[3]: 
/**/rs38.getLong(1);
2020-06-17 22:06:27 jdbc[3]: 
/**/rs38.close();
2020-06-17 22:06:27 jdbc[3]: 
/**/prep33.getMaxRows();
2020-06-17 22:06:27 jdbc[3]: 
/**/prep33.getQueryTimeout();
2020-06-17 22:06:27 jdbc[3]: 
/**/prep33.close();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:06:27 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:06:27 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:06:27 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:06:27 jdbc[3]: 
/**/PreparedStatement prep34 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:06:27 jdbc[3]: 
/**/prep34.setString(1, "CustomerMS");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep34.setString(2, "INFO");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep34.setNull(3, 12);
2020-06-17 22:06:27 jdbc[3]: 
/**/prep34.setString(4, "/api/customers/2");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep34.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep34.setString(6, "6e58df6ecc92c2a9");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep34.setString(7, "2020-06-18T02:56:18.068Z");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep34.setString(8, "6e58df6ecc92c2a9");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep34.executeUpdate();
2020-06-17 22:06:27 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:06:27 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:06:27 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/2', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: '6e58df6ecc92c2a9', 7: '2020-06-18T02:56:18.068Z', 8: '6e58df6ecc92c2a9'};
2020-06-17 22:06:27 jdbc[3]: 
/**/ResultSet rs39 = prep34.getGeneratedKeys();
2020-06-17 22:06:27 jdbc[3]: 
/**/rs39.next();
2020-06-17 22:06:27 jdbc[3]: 
/**/ResultSetMetaData rsMeta26 = rs39.getMetaData();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:06:27 jdbc[3]: 
/**/rsMeta26.getColumnCount();
2020-06-17 22:06:27 jdbc[3]: 
/**/rs39.getLong(1);
2020-06-17 22:06:27 jdbc[3]: 
/**/rs39.close();
2020-06-17 22:06:27 jdbc[3]: 
/**/prep34.getMaxRows();
2020-06-17 22:06:27 jdbc[3]: 
/**/prep34.getQueryTimeout();
2020-06-17 22:06:27 jdbc[3]: 
/**/prep34.close();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:06:27 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:06:27 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:06:27 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:06:27 jdbc[3]: 
/**/PreparedStatement prep35 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:06:27 jdbc[3]: 
/**/prep35.setString(1, "CustomerMS");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep35.setString(2, "INFO");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep35.setNull(3, 12);
2020-06-17 22:06:27 jdbc[3]: 
/**/prep35.setString(4, "/api/customers/3");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep35.setString(5, "Customer(id=3, firstName=Ramila, lastName=Karki, email=ramila@gmail.com)");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep35.setString(6, "2e6641836c179162");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep35.setString(7, "2020-06-18T02:56:24.656Z");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep35.setString(8, "2e6641836c179162");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep35.executeUpdate();
2020-06-17 22:06:27 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:06:27 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:06:27 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/3', 5: 'Customer(id=3, firstName=Ramila, lastName=Karki, email=ramila@gmail.com)', 6: '2e6641836c179162', 7: '2020-06-18T02:56:24.656Z', 8: '2e6641836c179162'};
2020-06-17 22:06:27 jdbc[3]: 
/**/ResultSet rs40 = prep35.getGeneratedKeys();
2020-06-17 22:06:27 jdbc[3]: 
/**/rs40.next();
2020-06-17 22:06:27 jdbc[3]: 
/**/ResultSetMetaData rsMeta27 = rs40.getMetaData();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:06:27 jdbc[3]: 
/**/rsMeta27.getColumnCount();
2020-06-17 22:06:27 jdbc[3]: 
/**/rs40.getLong(1);
2020-06-17 22:06:27 jdbc[3]: 
/**/rs40.close();
2020-06-17 22:06:27 jdbc[3]: 
/**/prep35.getMaxRows();
2020-06-17 22:06:27 jdbc[3]: 
/**/prep35.getQueryTimeout();
2020-06-17 22:06:27 jdbc[3]: 
/**/prep35.close();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:06:27 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:06:27 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:06:27 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:06:27 jdbc[3]: 
/**/PreparedStatement prep36 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:06:27 jdbc[3]: 
/**/prep36.setString(1, "CustomerMS");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep36.setString(2, "INFO");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep36.setNull(3, 12);
2020-06-17 22:06:27 jdbc[3]: 
/**/prep36.setString(4, "/api/customers/4");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep36.setString(5, "Customer(id=4, firstName=David, lastName=Yonge, email=david@gmail.com)");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep36.setString(6, "6cc53148f46f5151");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep36.setString(7, "2020-06-18T02:56:42.193Z");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep36.setString(8, "6cc53148f46f5151");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep36.executeUpdate();
2020-06-17 22:06:27 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:06:27 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:06:27 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/4', 5: 'Customer(id=4, firstName=David, lastName=Yonge, email=david@gmail.com)', 6: '6cc53148f46f5151', 7: '2020-06-18T02:56:42.193Z', 8: '6cc53148f46f5151'};
2020-06-17 22:06:27 jdbc[3]: 
/**/ResultSet rs41 = prep36.getGeneratedKeys();
2020-06-17 22:06:27 jdbc[3]: 
/**/rs41.next();
2020-06-17 22:06:27 jdbc[3]: 
/**/ResultSetMetaData rsMeta28 = rs41.getMetaData();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:06:27 jdbc[3]: 
/**/rsMeta28.getColumnCount();
2020-06-17 22:06:27 jdbc[3]: 
/**/rs41.getLong(1);
2020-06-17 22:06:27 jdbc[3]: 
/**/rs41.close();
2020-06-17 22:06:27 jdbc[3]: 
/**/prep36.getMaxRows();
2020-06-17 22:06:27 jdbc[3]: 
/**/prep36.getQueryTimeout();
2020-06-17 22:06:27 jdbc[3]: 
/**/prep36.close();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:06:27 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:06:27 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:06:27 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:06:27 jdbc[3]: 
/**/PreparedStatement prep37 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:06:27 jdbc[3]: 
/**/prep37.setString(1, "CustomerMS");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep37.setString(2, "INFO");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep37.setNull(3, 12);
2020-06-17 22:06:27 jdbc[3]: 
/**/prep37.setString(4, "/api/customers/5");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep37.setString(5, "Customer(id=5, firstName=Peter, lastName=Parker, email=peter@gmail.com)");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep37.setString(6, "7f2851bfe57d4c73");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep37.setString(7, "2020-06-18T02:56:45.275Z");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep37.setString(8, "7f2851bfe57d4c73");
2020-06-17 22:06:27 jdbc[3]: 
/**/prep37.executeUpdate();
2020-06-17 22:06:27 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:06:27 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:06:27 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/5', 5: 'Customer(id=5, firstName=Peter, lastName=Parker, email=peter@gmail.com)', 6: '7f2851bfe57d4c73', 7: '2020-06-18T02:56:45.275Z', 8: '7f2851bfe57d4c73'};
2020-06-17 22:06:27 jdbc[3]: 
/**/ResultSet rs42 = prep37.getGeneratedKeys();
2020-06-17 22:06:27 jdbc[3]: 
/**/rs42.next();
2020-06-17 22:06:27 jdbc[3]: 
/**/ResultSetMetaData rsMeta29 = rs42.getMetaData();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:06:27 jdbc[3]: 
/**/rsMeta29.getColumnCount();
2020-06-17 22:06:27 jdbc[3]: 
/**/rs42.getLong(1);
2020-06-17 22:06:27 jdbc[3]: 
/**/rs42.close();
2020-06-17 22:06:27 jdbc[3]: 
/**/prep37.getMaxRows();
2020-06-17 22:06:27 jdbc[3]: 
/**/prep37.getQueryTimeout();
2020-06-17 22:06:27 jdbc[3]: 
/**/prep37.close();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:06:27 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:06:27 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:06:27 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:06:27 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:13:14 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-17 22:13:14 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 22:13:14 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:13:14 jdbc[3]: 
/**/Statement stat3 = conn0.createStatement();
2020-06-17 22:13:14 jdbc[3]: 
/**/stat3.execute("drop table if exists customer_tbl CASCADE ");
2020-06-17 22:13:14 lock: 3 exclusive write lock requesting for CUSTOMER_TBL 
2020-06-17 22:13:14 lock: 3 exclusive write lock added for CUSTOMER_TBL 
2020-06-17 22:13:14 lock: 3 exclusive write lock requesting for SYS 
2020-06-17 22:13:14 lock: 3 exclusive write lock added for SYS 
2020-06-17 22:13:14 jdbc[3]: 
/*SQL t:2*/drop table if exists customer_tbl CASCADE;
2020-06-17 22:13:14 lock: 3 exclusive write lock unlock SYS 
2020-06-17 22:13:14 jdbc[3]: 
/**/stat3.getWarnings();
2020-06-17 22:13:14 jdbc[3]: 
/**/stat3.execute("drop table if exists log_tbl CASCADE ");
2020-06-17 22:13:14 lock: 3 exclusive write lock requesting for LOG_TBL 
2020-06-17 22:13:14 lock: 3 exclusive write lock added for LOG_TBL 
2020-06-17 22:13:14 lock: 3 exclusive write lock requesting for SYS 
2020-06-17 22:13:14 lock: 3 exclusive write lock added for SYS 
2020-06-17 22:13:14 jdbc[3]: 
/*SQL */drop table if exists log_tbl CASCADE;
2020-06-17 22:13:14 lock: 3 exclusive write lock unlock SYS 
2020-06-17 22:13:14 jdbc[3]: 
/**/stat3.getWarnings();
2020-06-17 22:13:14 jdbc[3]: 
/**/stat3.close();
2020-06-17 22:13:14 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:13:14 database: closing /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb from shutdown hook
2020-06-17 22:13:14 lock: 3 shared read lock unlock SYS 
2020-06-17 22:13:14 database: disconnecting session #3
2020-06-17 22:13:14 database: disconnected session #3
2020-06-17 22:13:14 lock: 4 shared read lock unlock SYS 
2020-06-17 22:13:14 database: disconnecting session #4
2020-06-17 22:13:14 database: disconnected session #4
2020-06-17 22:13:14 lock: 5 shared read lock unlock SYS 
2020-06-17 22:13:14 database: disconnecting session #5
2020-06-17 22:13:14 database: disconnected session #5
2020-06-17 22:13:14 lock: 6 shared read lock unlock SYS 
2020-06-17 22:13:14 database: disconnecting session #6
2020-06-17 22:13:14 database: disconnected session #6
2020-06-17 22:13:14 jdbc[3]: 
/**/conn0.close();
2020-06-17 22:13:14 lock: 7 shared read lock unlock SYS 
2020-06-17 22:13:14 jdbc[4]: 
/**/conn1.close();
2020-06-17 22:13:14 database: disconnecting session #7
2020-06-17 22:13:14 jdbc[5]: 
/**/conn2.close();
2020-06-17 22:13:14 database: disconnected session #7
2020-06-17 22:13:14 lock: 8 shared read lock unlock SYS 
2020-06-17 22:13:14 jdbc[6]: 
/**/conn3.close();
2020-06-17 22:13:14 database: disconnecting session #8
2020-06-17 22:13:14 jdbc[7]: 
/**/conn4.close();
2020-06-17 22:13:14 database: disconnected session #8
2020-06-17 22:13:14 jdbc[8]: 
/**/conn5.close();
2020-06-17 22:13:14 lock: 9 shared read lock unlock SYS 
2020-06-17 22:13:14 database: disconnecting session #9
2020-06-17 22:13:14 jdbc[9]: 
/**/conn6.close();
2020-06-17 22:13:14 database: disconnected session #9
2020-06-17 22:13:14 jdbc[10]: 
/**/conn7.close();
2020-06-17 22:13:14 lock: 10 shared read lock unlock SYS 
2020-06-17 22:13:14 jdbc[11]: 
/**/conn8.close();
2020-06-17 22:13:14 database: disconnecting session #10
2020-06-17 22:13:14 database: disconnected session #10
2020-06-17 22:13:14 lock: 11 shared read lock unlock SYS 
2020-06-17 22:13:14 lock: 12 shared read lock unlock SYS 
2020-06-17 22:13:14 database: disconnecting session #12
2020-06-17 22:13:14 database: disconnected session #12
2020-06-17 22:13:14 database: disconnecting session #11
2020-06-17 22:13:14 database: disconnected session #11
2020-06-17 22:13:14 jdbc[12]: 
/**/conn9.close();
2020-06-17 22:13:15 database: closing /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 22:13:15 lock: 1 shared read lock unlock SYS 
2020-06-17 22:13:15 lock: 2 shared read lock unlock SYS 
2020-06-17 22:13:15 database: closed
2020-06-17 22:13:25 database: opening /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb (build 200)
2020-06-17 22:13:25 lock: 1 exclusive write lock requesting for SYS 
2020-06-17 22:13:25 lock: 1 exclusive write lock added for SYS 
2020-06-17 22:13:25 lock: 1 exclusive write lock unlock SYS 
2020-06-17 22:13:25 lock: 1 exclusive write lock requesting for SYS 
2020-06-17 22:13:25 lock: 1 exclusive write lock added for SYS 
2020-06-17 22:13:25 lock: 1 exclusive write lock unlock SYS 
2020-06-17 22:13:25 lock: 1 exclusive write lock requesting for SYS 
2020-06-17 22:13:25 lock: 1 exclusive write lock added for SYS 
2020-06-17 22:13:25 lock: 1 exclusive write lock unlock SYS 
2020-06-17 22:13:25 database: opened /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 22:13:25 database: connecting session #3 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 22:13:25 jdbc[3]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 22:13:25 jdbc[3]: 
/**/Connection conn0 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 22:13:25 jdbc[3]: 
/**/conn0.isReadOnly();
2020-06-17 22:13:25 jdbc[3]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 22:13:25 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:13:25 jdbc[3]: 
/**/conn0.isValid(1);
2020-06-17 22:13:25 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 22:13:25 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 22:13:25 jdbc[3]: 
/**/DatabaseMetaData dbMeta0 = conn0.getMetaData();
2020-06-17 22:13:25 jdbc[3]: 
/**/dbMeta0.getURL();
2020-06-17 22:13:25 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:13:25 database: connecting session #4 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 22:13:25 jdbc[4]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 22:13:25 jdbc[4]: 
/**/Connection conn1 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 22:13:25 jdbc[4]: 
/**/conn1.isReadOnly();
2020-06-17 22:13:25 jdbc[4]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 22:13:25 jdbc[4]: 
/**/conn1.getAutoCommit();
2020-06-17 22:13:25 database: connecting session #5 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 22:13:25 jdbc[5]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 22:13:25 jdbc[5]: 
/**/Connection conn2 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 22:13:25 jdbc[5]: 
/**/conn2.isReadOnly();
2020-06-17 22:13:25 jdbc[5]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 22:13:25 jdbc[5]: 
/**/conn2.getAutoCommit();
2020-06-17 22:13:25 database: connecting session #6 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 22:13:25 jdbc[6]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 22:13:25 jdbc[6]: 
/**/Connection conn3 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 22:13:25 jdbc[6]: 
/**/conn3.isReadOnly();
2020-06-17 22:13:25 jdbc[6]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 22:13:25 jdbc[6]: 
/**/conn3.getAutoCommit();
2020-06-17 22:13:25 database: connecting session #7 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 22:13:25 jdbc[7]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 22:13:25 jdbc[7]: 
/**/Connection conn4 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 22:13:25 jdbc[7]: 
/**/conn4.isReadOnly();
2020-06-17 22:13:25 jdbc[7]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 22:13:25 jdbc[7]: 
/**/conn4.getAutoCommit();
2020-06-17 22:13:25 database: connecting session #8 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 22:13:25 jdbc[8]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 22:13:25 jdbc[8]: 
/**/Connection conn5 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 22:13:25 jdbc[8]: 
/**/conn5.isReadOnly();
2020-06-17 22:13:25 jdbc[8]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 22:13:25 jdbc[8]: 
/**/conn5.getAutoCommit();
2020-06-17 22:13:25 database: connecting session #9 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 22:13:25 jdbc[9]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 22:13:25 jdbc[9]: 
/**/Connection conn6 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 22:13:25 jdbc[9]: 
/**/conn6.isReadOnly();
2020-06-17 22:13:25 jdbc[9]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 22:13:25 jdbc[9]: 
/**/conn6.getAutoCommit();
2020-06-17 22:13:25 database: connecting session #10 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 22:13:25 jdbc[10]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 22:13:25 jdbc[10]: 
/**/Connection conn7 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 22:13:25 jdbc[10]: 
/**/conn7.isReadOnly();
2020-06-17 22:13:25 jdbc[10]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 22:13:25 jdbc[10]: 
/**/conn7.getAutoCommit();
2020-06-17 22:13:25 database: connecting session #11 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 22:13:25 jdbc[11]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 22:13:25 jdbc[11]: 
/**/Connection conn8 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 22:13:25 jdbc[11]: 
/**/conn8.isReadOnly();
2020-06-17 22:13:25 jdbc[11]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 22:13:25 jdbc[11]: 
/**/conn8.getAutoCommit();
2020-06-17 22:13:25 database: connecting session #12 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 22:13:25 jdbc[12]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 22:13:25 jdbc[12]: 
/**/Connection conn9 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 22:13:25 jdbc[12]: 
/**/conn9.isReadOnly();
2020-06-17 22:13:25 jdbc[12]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 22:13:25 jdbc[12]: 
/**/conn9.getAutoCommit();
2020-06-17 22:13:26 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-17 22:13:26 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 22:13:26 jdbc[3]: 
/**/DatabaseMetaData dbMeta1 = conn0.getMetaData();
2020-06-17 22:13:26 jdbc[3]: 
/**/dbMeta1.getDatabaseProductName();
2020-06-17 22:13:26 jdbc[3]: 
/**/dbMeta1.getDatabaseProductVersion();
2020-06-17 22:13:26 jdbc[3]: 
/**/dbMeta1.getDatabaseMajorVersion();
2020-06-17 22:13:26 jdbc[3]: 
/**/dbMeta1.getDatabaseMinorVersion();
2020-06-17 22:13:26 jdbc[3]: 
/**/dbMeta1.getDriverName();
2020-06-17 22:13:26 jdbc[3]: 
/**/dbMeta1.getDriverVersion();
2020-06-17 22:13:26 jdbc[3]: 
/**/dbMeta1.getDriverMajorVersion();
2020-06-17 22:13:26 jdbc[3]: 
/**/dbMeta1.getDriverMinorVersion();
2020-06-17 22:13:26 jdbc[3]: 
/**/dbMeta1.getJDBCMajorVersion();
2020-06-17 22:13:26 jdbc[3]: 
/**/dbMeta1.getJDBCMinorVersion();
2020-06-17 22:13:26 jdbc[3]: 
/**/dbMeta1.supportsCatalogsInTableDefinitions();
2020-06-17 22:13:26 jdbc[3]: 
/**/dbMeta1.supportsSchemasInTableDefinitions();
2020-06-17 22:13:26 jdbc[3]: 
/**/dbMeta1.storesLowerCaseIdentifiers();
2020-06-17 22:13:26 jdbc[3]: 
/**/PreparedStatement prep0 = conn0.prepareStatement("SELECT NAME, VALUE FROM INFORMATION_SCHEMA.SETTINGS WHERE NAME IN (?, ?, ?, ?)");
2020-06-17 22:13:26 jdbc[3]: Plan       : calculate cost for plan [SETTINGS:-7:org.h2.table.MetaTable@63ecb5ab]
2020-06-17 22:13:26 jdbc[3]: Plan       :   for table filter SETTINGS:-7:org.h2.table.MetaTable@63ecb5ab
2020-06-17 22:13:26 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 22:13:26 jdbc[3]: Plan       :   best plan item cost 9,900 index meta
2020-06-17 22:13:26 jdbc[3]: Plan       : plan cost 9,901
2020-06-17 22:13:26 jdbc[3]: 
/**/prep0.setString(1, "MODE");
2020-06-17 22:13:26 jdbc[3]: 
/**/prep0.setString(2, "DATABASE_TO_UPPER");
2020-06-17 22:13:26 jdbc[3]: 
/**/prep0.setString(3, "DATABASE_TO_LOWER");
2020-06-17 22:13:26 jdbc[3]: 
/**/prep0.setString(4, "CASE_INSENSITIVE_IDENTIFIERS");
2020-06-17 22:13:26 jdbc[3]: 
/**/ResultSet rs0 = prep0.executeQuery();
2020-06-17 22:13:26 jdbc[3]: 
/*SQL l:78 #:4 t:2*/SELECT NAME, VALUE FROM INFORMATION_SCHEMA.SETTINGS WHERE NAME IN (?, ?, ?, ?) {1: 'MODE', 2: 'DATABASE_TO_UPPER', 3: 'DATABASE_TO_LOWER', 4: 'CASE_INSENSITIVE_IDENTIFIERS'};
2020-06-17 22:13:26 jdbc[3]: 
/**/rs0.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs0.getString(2);
2020-06-17 22:13:26 jdbc[3]: 
/**/rs0.getString(1);
2020-06-17 22:13:26 jdbc[3]: 
/**/rs0.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs0.getString(2);
2020-06-17 22:13:26 jdbc[3]: 
/**/rs0.getString(1);
2020-06-17 22:13:26 jdbc[3]: 
/**/rs0.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs0.getString(2);
2020-06-17 22:13:26 jdbc[3]: 
/**/rs0.getString(1);
2020-06-17 22:13:26 jdbc[3]: 
/**/rs0.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs0.getString(2);
2020-06-17 22:13:26 jdbc[3]: 
/**/rs0.getString(1);
2020-06-17 22:13:26 jdbc[3]: 
/**/rs0.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/prep0.close();
2020-06-17 22:13:26 jdbc[3]: 
/**/dbMeta1.storesUpperCaseIdentifiers();
2020-06-17 22:13:26 jdbc[3]: 
/**/dbMeta1.storesMixedCaseIdentifiers();
2020-06-17 22:13:26 jdbc[3]: 
/**/dbMeta1.storesUpperCaseIdentifiers();
2020-06-17 22:13:26 jdbc[3]: 
/**/dbMeta1.storesLowerCaseQuotedIdentifiers();
2020-06-17 22:13:26 jdbc[3]: 
/**/dbMeta1.storesUpperCaseQuotedIdentifiers();
2020-06-17 22:13:26 jdbc[3]: 
/**/dbMeta1.storesMixedCaseQuotedIdentifiers();
2020-06-17 22:13:26 jdbc[3]: 
/**/dbMeta1.getSQLKeywords();
2020-06-17 22:13:26 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:13:26 jdbc[3]: 
/*SQL #:1*/CALL DATABASE();
2020-06-17 22:13:26 jdbc[3]: 
/**/dbMeta1.supportsNamedParameters();
2020-06-17 22:13:26 jdbc[3]: 
/**/dbMeta1.supportsResultSetType(1004);
2020-06-17 22:13:26 jdbc[3]: 
/**/dbMeta1.supportsGetGeneratedKeys();
2020-06-17 22:13:26 jdbc[3]: 
/**/dbMeta1.supportsBatchUpdates();
2020-06-17 22:13:26 jdbc[3]: 
/**/dbMeta1.dataDefinitionIgnoredInTransactions();
2020-06-17 22:13:26 jdbc[3]: 
/**/dbMeta1.dataDefinitionCausesTransactionCommit();
2020-06-17 22:13:26 jdbc[3]: 
/**/dbMeta1.getSQLKeywords();
2020-06-17 22:13:26 jdbc[3]: 
/**/dbMeta1.getSQLStateType();
2020-06-17 22:13:26 jdbc[3]: 
/**/dbMeta1.locatorsUpdateCopy();
2020-06-17 22:13:26 jdbc[3]: 
/**/dbMeta1.getTypeInfo();
2020-06-17 22:13:26 jdbc[3]: 
/**/PreparedStatement prep1 = conn0.prepareStatement("SELECT TYPE_NAME, DATA_TYPE, PRECISION, PREFIX LITERAL_PREFIX, SUFFIX LITERAL_SUFFIX, PARAMS CREATE_PARAMS, NULLABLE, CASE_SENSITIVE, SEARCHABLE, FALSE UNSIGNED_ATTRIBUTE, FALSE FIXED_PREC_SCALE, AUTO_INCREMENT, TYPE_NAME LOCAL_TYPE_NAME, MINIMUM_SCALE, MAXIMUM_SCALE, DATA_TYPE SQL_DATA_TYPE, ZERO() SQL_DATETIME_SUB, RADIX NUM_PREC_RADIX FROM INFORMATION_SCHEMA.TYPE_INFO ORDER BY DATA_TYPE, POS");
2020-06-17 22:13:26 jdbc[3]: Plan       : calculate cost for plan [TYPE_INFO:-5:org.h2.table.MetaTable@3605c71c]
2020-06-17 22:13:26 jdbc[3]: Plan       :   for table filter TYPE_INFO:-5:org.h2.table.MetaTable@3605c71c
2020-06-17 22:13:26 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 22:13:26 jdbc[3]: Plan       :   best plan item cost 10,000 index meta
2020-06-17 22:13:26 jdbc[3]: Plan       : plan cost 10,001
2020-06-17 22:13:26 jdbc[3]: 
/**/ResultSet rs1 = prep1.executeQuery();
2020-06-17 22:13:26 jdbc[3]: 
/*SQL #:46 t:1*/SELECT TYPE_NAME, DATA_TYPE, PRECISION, PREFIX LITERAL_PREFIX, SUFFIX LITERAL_SUFFIX, PARAMS CREATE_PARAMS, NULLABLE, CASE_SENSITIVE, SEARCHABLE, FALSE UNSIGNED_ATTRIBUTE, FALSE FIXED_PREC_SCALE, AUTO_INCREMENT, TYPE_NAME LOCAL_TYPE_NAME, MINIMUM_SCALE, MAXIMUM_SCALE, DATA_TYPE SQL_DATA_TYPE, ZERO() SQL_DATETIME_SUB, RADIX NUM_PREC_RADIX FROM INFORMATION_SCHEMA.TYPE_INFO ORDER BY DATA_TYPE, POS;
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getStatement();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs1.close();
2020-06-17 22:13:26 jdbc[3]: 
/**/prep1.close();
2020-06-17 22:13:26 jdbc[3]: 
/**/conn0.getSchema();
2020-06-17 22:13:26 jdbc[3]: 
/**/conn0.getSchema();
2020-06-17 22:13:26 jdbc[3]: 
/**/dbMeta1.supportsNamedParameters();
2020-06-17 22:13:26 jdbc[3]: 
/**/Statement stat0 = conn0.createStatement();
2020-06-17 22:13:26 jdbc[3]: 
/**/ResultSet rs2 = stat0.executeQuery("select * from INFORMATION_SCHEMA.SEQUENCES");
2020-06-17 22:13:26 jdbc[3]: Plan       : calculate cost for plan [SEQUENCES:-9:org.h2.table.MetaTable@5dcf5ee4]
2020-06-17 22:13:26 jdbc[3]: Plan       :   for table filter SEQUENCES:-9:org.h2.table.MetaTable@5dcf5ee4
2020-06-17 22:13:26 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 22:13:26 jdbc[3]: Plan       :   best plan item cost 10,000 index meta
2020-06-17 22:13:26 jdbc[3]: Plan       : plan cost 10,001
2020-06-17 22:13:26 jdbc[3]: 
/*SQL */select * from INFORMATION_SCHEMA.SEQUENCES;
2020-06-17 22:13:26 jdbc[3]: 
/**/rs2.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs2.close();
2020-06-17 22:13:26 jdbc[3]: 
/**/stat0.close();
2020-06-17 22:13:26 jdbc[3]: 
/**/dbMeta1.getCatalogSeparator();
2020-06-17 22:13:26 jdbc[3]: 
/**/dbMeta1.isCatalogAtStart();
2020-06-17 22:13:26 jdbc[3]: 
/**/dbMeta1.getTypeInfo();
2020-06-17 22:13:26 jdbc[3]: 
/**/PreparedStatement prep2 = conn0.prepareStatement("SELECT TYPE_NAME, DATA_TYPE, PRECISION, PREFIX LITERAL_PREFIX, SUFFIX LITERAL_SUFFIX, PARAMS CREATE_PARAMS, NULLABLE, CASE_SENSITIVE, SEARCHABLE, FALSE UNSIGNED_ATTRIBUTE, FALSE FIXED_PREC_SCALE, AUTO_INCREMENT, TYPE_NAME LOCAL_TYPE_NAME, MINIMUM_SCALE, MAXIMUM_SCALE, DATA_TYPE SQL_DATA_TYPE, ZERO() SQL_DATETIME_SUB, RADIX NUM_PREC_RADIX FROM INFORMATION_SCHEMA.TYPE_INFO ORDER BY DATA_TYPE, POS");
2020-06-17 22:13:26 jdbc[3]: 
/**/ResultSet rs3 = prep2.executeQuery();
2020-06-17 22:13:26 jdbc[3]: 
/*SQL #:46*/SELECT TYPE_NAME, DATA_TYPE, PRECISION, PREFIX LITERAL_PREFIX, SUFFIX LITERAL_SUFFIX, PARAMS CREATE_PARAMS, NULLABLE, CASE_SENSITIVE, SEARCHABLE, FALSE UNSIGNED_ATTRIBUTE, FALSE FIXED_PREC_SCALE, AUTO_INCREMENT, TYPE_NAME LOCAL_TYPE_NAME, MINIMUM_SCALE, MAXIMUM_SCALE, DATA_TYPE SQL_DATA_TYPE, ZERO() SQL_DATETIME_SUB, RADIX NUM_PREC_RADIX FROM INFORMATION_SCHEMA.TYPE_INFO ORDER BY DATA_TYPE, POS;
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getStatement();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs3.close();
2020-06-17 22:13:26 jdbc[3]: 
/**/prep2.close();
2020-06-17 22:13:26 jdbc[3]: 
/**/DatabaseMetaData dbMeta2 = conn0.getMetaData();
2020-06-17 22:13:26 jdbc[3]: 
/**/dbMeta2.getJDBCMajorVersion();
2020-06-17 22:13:26 jdbc[3]: 
/**/Clob clob0 = conn0.createClob();
2020-06-17 22:13:26 jdbc[3]: 
/**/clob0.free();
2020-06-17 22:13:26 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:13:26 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:13:26 jdbc[3]: 
/**/Statement stat1 = conn0.createStatement();
2020-06-17 22:13:26 jdbc[3]: 
/**/stat1.execute("drop table if exists customer_tbl CASCADE ");
2020-06-17 22:13:26 jdbc[3]: 
/*SQL */drop table if exists customer_tbl CASCADE;
2020-06-17 22:13:26 jdbc[3]: 
/**/stat1.getWarnings();
2020-06-17 22:13:26 jdbc[3]: 
/**/stat1.execute("drop table if exists log_tbl CASCADE ");
2020-06-17 22:13:26 jdbc[3]: 
/*SQL */drop table if exists log_tbl CASCADE;
2020-06-17 22:13:26 jdbc[3]: 
/**/stat1.getWarnings();
2020-06-17 22:13:26 jdbc[3]: 
/**/stat1.close();
2020-06-17 22:13:26 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:13:26 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:13:26 jdbc[3]: 
/**/Statement stat2 = conn0.createStatement();
2020-06-17 22:13:26 jdbc[3]: 
/**/stat2.execute("create table customer_tbl (id bigint generated by default as identity, customer_email varchar(255), customer_firstname varchar(255), customer_lastname varchar(255), primary key (id))");
2020-06-17 22:13:26 lock: 3 exclusive write lock requesting for SYS 
2020-06-17 22:13:26 lock: 3 exclusive write lock added for SYS 
2020-06-17 22:13:26 lock: 3 exclusive write lock unlock SYS 
2020-06-17 22:13:26 lock: 3 exclusive write lock requesting for SYS 
2020-06-17 22:13:26 lock: 3 exclusive write lock added for SYS 
2020-06-17 22:13:26 lock: 3 exclusive write lock requesting for CUSTOMER_TBL 
2020-06-17 22:13:26 lock: 3 exclusive write lock added for CUSTOMER_TBL 
2020-06-17 22:13:26 jdbc[3]: 
/*SQL t:5*/create table customer_tbl (id bigint generated by default as identity, customer_email varchar(255), customer_firstname varchar(255), customer_lastname varchar(255), primary key (id));
2020-06-17 22:13:26 lock: 3 exclusive write lock unlock SYS 
2020-06-17 22:13:26 lock: 3 exclusive write lock unlock CUSTOMER_TBL 
2020-06-17 22:13:26 jdbc[3]: 
/**/stat2.getWarnings();
2020-06-17 22:13:26 jdbc[3]: 
/**/stat2.execute("create table log_tbl (id bigint generated by default as identity, application_name varchar(255), level varchar(255), parent_span_id varchar(255), request varchar(255), response varchar(255), span_id varchar(255), time varchar(255), trace_id varchar(255), primary key (id))");
2020-06-17 22:13:26 lock: 3 exclusive write lock requesting for SYS 
2020-06-17 22:13:26 lock: 3 exclusive write lock added for SYS 
2020-06-17 22:13:26 lock: 3 exclusive write lock unlock SYS 
2020-06-17 22:13:26 lock: 3 exclusive write lock requesting for SYS 
2020-06-17 22:13:26 lock: 3 exclusive write lock added for SYS 
2020-06-17 22:13:26 lock: 3 exclusive write lock requesting for LOG_TBL 
2020-06-17 22:13:26 lock: 3 exclusive write lock added for LOG_TBL 
2020-06-17 22:13:26 jdbc[3]: 
/*SQL t:1*/create table log_tbl (id bigint generated by default as identity, application_name varchar(255), level varchar(255), parent_span_id varchar(255), request varchar(255), response varchar(255), span_id varchar(255), time varchar(255), trace_id varchar(255), primary key (id));
2020-06-17 22:13:26 lock: 3 exclusive write lock unlock SYS 
2020-06-17 22:13:26 lock: 3 exclusive write lock unlock LOG_TBL 
2020-06-17 22:13:26 jdbc[3]: 
/**/stat2.getWarnings();
2020-06-17 22:13:26 jdbc[3]: 
/**/stat2.close();
2020-06-17 22:13:26 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:13:26 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:13:26 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:13:26 jdbc[3]: 
/**/PreparedStatement prep3 = conn0.prepareStatement("select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=?");
2020-06-17 22:13:26 jdbc[3]: Plan       : calculate cost for plan [CUSTOMER0_]
2020-06-17 22:13:26 jdbc[3]: Plan       :   for table filter CUSTOMER0_
2020-06-17 22:13:26 jdbc[3]: Table      :     potential plan item cost 10,200 index PUBLIC.CUSTOMER_TBL.tableScan
2020-06-17 22:13:26 jdbc[3]: Table      :     potential plan item cost 230 index PUBLIC.PRIMARY_KEY_B
2020-06-17 22:13:26 jdbc[3]: Plan       :   best plan item cost 227.7 index PUBLIC.PRIMARY_KEY_B
2020-06-17 22:13:26 jdbc[3]: Plan       : plan cost 228.7
2020-06-17 22:13:26 jdbc[3]: 
/**/prep3.setLong(1, 1L);
2020-06-17 22:13:26 jdbc[3]: 
/**/ResultSet rs8 = prep3.executeQuery();
2020-06-17 22:13:26 jdbc[3]: 
/*SQL l:225*/select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=? {1: 1};
2020-06-17 22:13:26 jdbc[3]: 
/**/rs8.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs8.close();
2020-06-17 22:13:26 jdbc[3]: 
/**/prep3.getMaxRows();
2020-06-17 22:13:26 jdbc[3]: 
/**/prep3.getQueryTimeout();
2020-06-17 22:13:26 jdbc[3]: Plan       : calculate cost for plan [SETTINGS:-7:org.h2.table.MetaTable@63ecb5ab]
2020-06-17 22:13:26 jdbc[3]: Plan       :   for table filter SETTINGS:-7:org.h2.table.MetaTable@63ecb5ab
2020-06-17 22:13:26 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 22:13:26 jdbc[3]: Plan       :   best plan item cost 9,900 index meta
2020-06-17 22:13:26 jdbc[3]: Plan       : plan cost 9,901
2020-06-17 22:13:26 jdbc[3]: 
/*SQL l:58 #:1*/SELECT VALUE FROM INFORMATION_SCHEMA.SETTINGS WHERE NAME=? {1: 'QUERY_TIMEOUT'};
2020-06-17 22:13:26 jdbc[3]: 
/**/prep3.close();
2020-06-17 22:13:26 jdbc[3]: 
/**/PreparedStatement prep4 = conn0.prepareStatement("insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?)", 1);;
2020-06-17 22:13:26 jdbc[3]: 
/**/prep4.setString(1, "ram@gmail.com");
2020-06-17 22:13:26 jdbc[3]: 
/**/prep4.setString(2, "Ram");
2020-06-17 22:13:26 jdbc[3]: 
/**/prep4.setString(3, "Thapa");
2020-06-17 22:13:26 jdbc[3]: 
/**/prep4.executeUpdate();
2020-06-17 22:13:26 lock: 1 exclusive write lock requesting for SYS 
2020-06-17 22:13:26 lock: 1 exclusive write lock added for SYS 
2020-06-17 22:13:26 lock: 1 exclusive write lock unlock SYS 
2020-06-17 22:13:26 lock: 3 shared read lock requesting for CUSTOMER_TBL 
2020-06-17 22:13:26 lock: 3 shared read lock ok CUSTOMER_TBL 
2020-06-17 22:13:26 jdbc[3]: 
/*SQL l:107 #:1 t:1*/insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?) {1: 'ram@gmail.com', 2: 'Ram', 3: 'Thapa'};
2020-06-17 22:13:26 jdbc[3]: 
/**/ResultSet rs9 = prep4.getGeneratedKeys();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs9.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/ResultSetMetaData rsMeta0 = rs9.getMetaData();
2020-06-17 22:13:26 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:13:26 jdbc[3]: 
/**/rsMeta0.getColumnCount();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs9.getLong(1);
2020-06-17 22:13:26 jdbc[3]: 
/**/rs9.close();
2020-06-17 22:13:26 jdbc[3]: 
/**/prep4.getMaxRows();
2020-06-17 22:13:26 jdbc[3]: 
/**/prep4.getQueryTimeout();
2020-06-17 22:13:26 jdbc[3]: 
/**/prep4.close();
2020-06-17 22:13:26 jdbc[3]: 
/**/PreparedStatement prep5 = conn0.prepareStatement("select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=?");
2020-06-17 22:13:26 jdbc[3]: 
/**/prep5.setLong(1, 2L);
2020-06-17 22:13:26 jdbc[3]: 
/**/ResultSet rs10 = prep5.executeQuery();
2020-06-17 22:13:26 jdbc[3]: 
/*SQL l:225*/select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=? {1: 2};
2020-06-17 22:13:26 jdbc[3]: 
/**/rs10.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs10.close();
2020-06-17 22:13:26 jdbc[3]: 
/**/prep5.getMaxRows();
2020-06-17 22:13:26 jdbc[3]: 
/**/prep5.getQueryTimeout();
2020-06-17 22:13:26 jdbc[3]: 
/**/prep5.close();
2020-06-17 22:13:26 jdbc[3]: 
/**/PreparedStatement prep6 = conn0.prepareStatement("insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?)", 1);;
2020-06-17 22:13:26 jdbc[3]: 
/**/prep6.setString(1, "hari@gmail.com");
2020-06-17 22:13:26 jdbc[3]: 
/**/prep6.setString(2, "Hari");
2020-06-17 22:13:26 jdbc[3]: 
/**/prep6.setString(3, "Neupane");
2020-06-17 22:13:26 jdbc[3]: 
/**/prep6.executeUpdate();
2020-06-17 22:13:26 jdbc[3]: 
/*SQL l:107 #:1*/insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?) {1: 'hari@gmail.com', 2: 'Hari', 3: 'Neupane'};
2020-06-17 22:13:26 jdbc[3]: 
/**/ResultSet rs11 = prep6.getGeneratedKeys();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs11.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/ResultSetMetaData rsMeta1 = rs11.getMetaData();
2020-06-17 22:13:26 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:13:26 jdbc[3]: 
/**/rsMeta1.getColumnCount();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs11.getLong(1);
2020-06-17 22:13:26 jdbc[3]: 
/**/rs11.close();
2020-06-17 22:13:26 jdbc[3]: 
/**/prep6.getMaxRows();
2020-06-17 22:13:26 jdbc[3]: 
/**/prep6.getQueryTimeout();
2020-06-17 22:13:26 jdbc[3]: 
/**/prep6.close();
2020-06-17 22:13:26 jdbc[3]: 
/**/PreparedStatement prep7 = conn0.prepareStatement("select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=?");
2020-06-17 22:13:26 jdbc[3]: 
/**/prep7.setLong(1, 3L);
2020-06-17 22:13:26 jdbc[3]: 
/**/ResultSet rs12 = prep7.executeQuery();
2020-06-17 22:13:26 jdbc[3]: 
/*SQL l:225*/select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=? {1: 3};
2020-06-17 22:13:26 jdbc[3]: 
/**/rs12.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs12.close();
2020-06-17 22:13:26 jdbc[3]: 
/**/prep7.getMaxRows();
2020-06-17 22:13:26 jdbc[3]: 
/**/prep7.getQueryTimeout();
2020-06-17 22:13:26 jdbc[3]: 
/**/prep7.close();
2020-06-17 22:13:26 jdbc[3]: 
/**/PreparedStatement prep8 = conn0.prepareStatement("insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?)", 1);;
2020-06-17 22:13:26 jdbc[3]: 
/**/prep8.setString(1, "ramila@gmail.com");
2020-06-17 22:13:26 jdbc[3]: 
/**/prep8.setString(2, "Ramila");
2020-06-17 22:13:26 jdbc[3]: 
/**/prep8.setString(3, "Karki");
2020-06-17 22:13:26 jdbc[3]: 
/**/prep8.executeUpdate();
2020-06-17 22:13:26 jdbc[3]: 
/*SQL l:107 #:1*/insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?) {1: 'ramila@gmail.com', 2: 'Ramila', 3: 'Karki'};
2020-06-17 22:13:26 jdbc[3]: 
/**/ResultSet rs13 = prep8.getGeneratedKeys();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs13.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/ResultSetMetaData rsMeta2 = rs13.getMetaData();
2020-06-17 22:13:26 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:13:26 jdbc[3]: 
/**/rsMeta2.getColumnCount();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs13.getLong(1);
2020-06-17 22:13:26 jdbc[3]: 
/**/rs13.close();
2020-06-17 22:13:26 jdbc[3]: 
/**/prep8.getMaxRows();
2020-06-17 22:13:26 jdbc[3]: 
/**/prep8.getQueryTimeout();
2020-06-17 22:13:26 jdbc[3]: 
/**/prep8.close();
2020-06-17 22:13:26 jdbc[3]: 
/**/PreparedStatement prep9 = conn0.prepareStatement("select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=?");
2020-06-17 22:13:26 jdbc[3]: 
/**/prep9.setLong(1, 4L);
2020-06-17 22:13:26 jdbc[3]: 
/**/ResultSet rs14 = prep9.executeQuery();
2020-06-17 22:13:26 jdbc[3]: 
/*SQL l:225*/select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=? {1: 4};
2020-06-17 22:13:26 jdbc[3]: 
/**/rs14.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs14.close();
2020-06-17 22:13:26 jdbc[3]: 
/**/prep9.getMaxRows();
2020-06-17 22:13:26 jdbc[3]: 
/**/prep9.getQueryTimeout();
2020-06-17 22:13:26 jdbc[3]: 
/**/prep9.close();
2020-06-17 22:13:26 jdbc[3]: 
/**/PreparedStatement prep10 = conn0.prepareStatement("insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?)", 1);;
2020-06-17 22:13:26 jdbc[3]: 
/**/prep10.setString(1, "david@gmail.com");
2020-06-17 22:13:26 jdbc[3]: 
/**/prep10.setString(2, "David");
2020-06-17 22:13:26 jdbc[3]: 
/**/prep10.setString(3, "Yonge");
2020-06-17 22:13:26 jdbc[3]: 
/**/prep10.executeUpdate();
2020-06-17 22:13:26 jdbc[3]: 
/*SQL l:107 #:1*/insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?) {1: 'david@gmail.com', 2: 'David', 3: 'Yonge'};
2020-06-17 22:13:26 jdbc[3]: 
/**/ResultSet rs15 = prep10.getGeneratedKeys();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs15.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/ResultSetMetaData rsMeta3 = rs15.getMetaData();
2020-06-17 22:13:26 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:13:26 jdbc[3]: 
/**/rsMeta3.getColumnCount();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs15.getLong(1);
2020-06-17 22:13:26 jdbc[3]: 
/**/rs15.close();
2020-06-17 22:13:26 jdbc[3]: 
/**/prep10.getMaxRows();
2020-06-17 22:13:26 jdbc[3]: 
/**/prep10.getQueryTimeout();
2020-06-17 22:13:26 jdbc[3]: 
/**/prep10.close();
2020-06-17 22:13:26 jdbc[3]: 
/**/PreparedStatement prep11 = conn0.prepareStatement("select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=?");
2020-06-17 22:13:26 jdbc[3]: 
/**/prep11.setLong(1, 5L);
2020-06-17 22:13:26 jdbc[3]: 
/**/ResultSet rs16 = prep11.executeQuery();
2020-06-17 22:13:26 jdbc[3]: 
/*SQL l:225*/select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=? {1: 5};
2020-06-17 22:13:26 jdbc[3]: 
/**/rs16.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs16.close();
2020-06-17 22:13:26 jdbc[3]: 
/**/prep11.getMaxRows();
2020-06-17 22:13:26 jdbc[3]: 
/**/prep11.getQueryTimeout();
2020-06-17 22:13:26 jdbc[3]: 
/**/prep11.close();
2020-06-17 22:13:26 jdbc[3]: 
/**/PreparedStatement prep12 = conn0.prepareStatement("insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?)", 1);;
2020-06-17 22:13:26 jdbc[3]: 
/**/prep12.setString(1, "peter@gmail.com");
2020-06-17 22:13:26 jdbc[3]: 
/**/prep12.setString(2, "Peter");
2020-06-17 22:13:26 jdbc[3]: 
/**/prep12.setString(3, "Parker");
2020-06-17 22:13:26 jdbc[3]: 
/**/prep12.executeUpdate();
2020-06-17 22:13:26 jdbc[3]: 
/*SQL l:107 #:1*/insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?) {1: 'peter@gmail.com', 2: 'Peter', 3: 'Parker'};
2020-06-17 22:13:26 jdbc[3]: 
/**/ResultSet rs17 = prep12.getGeneratedKeys();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs17.next();
2020-06-17 22:13:26 jdbc[3]: 
/**/ResultSetMetaData rsMeta4 = rs17.getMetaData();
2020-06-17 22:13:26 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:13:26 jdbc[3]: 
/**/rsMeta4.getColumnCount();
2020-06-17 22:13:26 jdbc[3]: 
/**/rs17.getLong(1);
2020-06-17 22:13:26 jdbc[3]: 
/**/rs17.close();
2020-06-17 22:13:26 jdbc[3]: 
/**/prep12.getMaxRows();
2020-06-17 22:13:26 jdbc[3]: 
/**/prep12.getQueryTimeout();
2020-06-17 22:13:26 jdbc[3]: 
/**/prep12.close();
2020-06-17 22:13:26 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:13:26 lock: 3 shared read lock unlock CUSTOMER_TBL 
2020-06-17 22:13:26 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:13:26 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:13:26 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:13:26 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:13:26 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:13:26 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:13:26 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:13:30 jdbc[3]: 
/**/PreparedStatement prep13 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:13:30 jdbc[3]: 
/**/prep13.setString(1, "CustomerMS");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep13.setString(2, "INFO");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep13.setNull(3, 12);
2020-06-17 22:13:30 jdbc[3]: 
/**/prep13.setString(4, "/api/customers/2");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep13.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep13.setString(6, "835c44c5407a860f");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep13.setString(7, "2020-06-17T20:43:48.395Z");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep13.setString(8, "835c44c5407a860f");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep13.executeUpdate();
2020-06-17 22:13:30 lock: 1 exclusive write lock requesting for SYS 
2020-06-17 22:13:30 lock: 1 exclusive write lock added for SYS 
2020-06-17 22:13:30 lock: 1 exclusive write lock unlock SYS 
2020-06-17 22:13:30 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:13:30 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:13:30 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/2', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: '835c44c5407a860f', 7: '2020-06-17T20:43:48.395Z', 8: '835c44c5407a860f'};
2020-06-17 22:13:30 jdbc[3]: 
/**/ResultSet rs18 = prep13.getGeneratedKeys();
2020-06-17 22:13:30 jdbc[3]: 
/**/rs18.next();
2020-06-17 22:13:30 jdbc[3]: 
/**/ResultSetMetaData rsMeta5 = rs18.getMetaData();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:13:30 jdbc[3]: 
/**/rsMeta5.getColumnCount();
2020-06-17 22:13:30 jdbc[3]: 
/**/rs18.getLong(1);
2020-06-17 22:13:30 jdbc[3]: 
/**/rs18.close();
2020-06-17 22:13:30 jdbc[3]: 
/**/prep13.getMaxRows();
2020-06-17 22:13:30 jdbc[3]: 
/**/prep13.getQueryTimeout();
2020-06-17 22:13:30 jdbc[3]: 
/**/prep13.close();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:13:30 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:13:30 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:13:30 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:13:30 jdbc[3]: 
/**/PreparedStatement prep14 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:13:30 jdbc[3]: 
/**/prep14.setString(1, "CustomerMS");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep14.setString(2, "INFO");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep14.setNull(3, 12);
2020-06-17 22:13:30 jdbc[3]: 
/**/prep14.setString(4, "/api/customers/2");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep14.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep14.setString(6, "ac4762af3b603bf9");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep14.setString(7, "2020-06-18T02:47:02.751Z");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep14.setString(8, "ac4762af3b603bf9");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep14.executeUpdate();
2020-06-17 22:13:30 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:13:30 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:13:30 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/2', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: 'ac4762af3b603bf9', 7: '2020-06-18T02:47:02.751Z', 8: 'ac4762af3b603bf9'};
2020-06-17 22:13:30 jdbc[3]: 
/**/ResultSet rs19 = prep14.getGeneratedKeys();
2020-06-17 22:13:30 jdbc[3]: 
/**/rs19.next();
2020-06-17 22:13:30 jdbc[3]: 
/**/ResultSetMetaData rsMeta6 = rs19.getMetaData();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:13:30 jdbc[3]: 
/**/rsMeta6.getColumnCount();
2020-06-17 22:13:30 jdbc[3]: 
/**/rs19.getLong(1);
2020-06-17 22:13:30 jdbc[3]: 
/**/rs19.close();
2020-06-17 22:13:30 jdbc[3]: 
/**/prep14.getMaxRows();
2020-06-17 22:13:30 jdbc[3]: 
/**/prep14.getQueryTimeout();
2020-06-17 22:13:30 jdbc[3]: 
/**/prep14.close();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:13:30 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:13:30 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:13:30 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:13:30 jdbc[3]: 
/**/PreparedStatement prep15 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:13:30 jdbc[3]: 
/**/prep15.setString(1, "CustomerMS");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep15.setString(2, "INFO");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep15.setNull(3, 12);
2020-06-17 22:13:30 jdbc[3]: 
/**/prep15.setString(4, "/api/customers/3");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep15.setString(5, "Customer(id=3, firstName=Ramila, lastName=Karki, email=ramila@gmail.com)");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep15.setString(6, "cda1008eb6f59b1a");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep15.setString(7, "2020-06-18T02:47:23.391Z");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep15.setString(8, "cda1008eb6f59b1a");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep15.executeUpdate();
2020-06-17 22:13:30 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:13:30 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:13:30 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/3', 5: 'Customer(id=3, firstName=Ramila, lastName=Karki, email=ramila@gmail.com)', 6: 'cda1008eb6f59b1a', 7: '2020-06-18T02:47:23.391Z', 8: 'cda1008eb6f59b1a'};
2020-06-17 22:13:30 jdbc[3]: 
/**/ResultSet rs20 = prep15.getGeneratedKeys();
2020-06-17 22:13:30 jdbc[3]: 
/**/rs20.next();
2020-06-17 22:13:30 jdbc[3]: 
/**/ResultSetMetaData rsMeta7 = rs20.getMetaData();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:13:30 jdbc[3]: 
/**/rsMeta7.getColumnCount();
2020-06-17 22:13:30 jdbc[3]: 
/**/rs20.getLong(1);
2020-06-17 22:13:30 jdbc[3]: 
/**/rs20.close();
2020-06-17 22:13:30 jdbc[3]: 
/**/prep15.getMaxRows();
2020-06-17 22:13:30 jdbc[3]: 
/**/prep15.getQueryTimeout();
2020-06-17 22:13:30 jdbc[3]: 
/**/prep15.close();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:13:30 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:13:30 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:13:30 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:13:30 jdbc[3]: 
/**/PreparedStatement prep16 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:13:30 jdbc[3]: 
/**/prep16.setString(1, "CustomerMS");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep16.setString(2, "INFO");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep16.setNull(3, 12);
2020-06-17 22:13:30 jdbc[3]: 
/**/prep16.setString(4, "/api/customers/4");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep16.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep16.setString(6, "93222afc6f639d33");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep16.setString(7, "2020-06-18T02:47:33.067Z");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep16.setString(8, "93222afc6f639d33");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep16.executeUpdate();
2020-06-17 22:13:30 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:13:30 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:13:30 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/4', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: '93222afc6f639d33', 7: '2020-06-18T02:47:33.067Z', 8: '93222afc6f639d33'};
2020-06-17 22:13:30 jdbc[3]: 
/**/ResultSet rs21 = prep16.getGeneratedKeys();
2020-06-17 22:13:30 jdbc[3]: 
/**/rs21.next();
2020-06-17 22:13:30 jdbc[3]: 
/**/ResultSetMetaData rsMeta8 = rs21.getMetaData();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:13:30 jdbc[3]: 
/**/rsMeta8.getColumnCount();
2020-06-17 22:13:30 jdbc[3]: 
/**/rs21.getLong(1);
2020-06-17 22:13:30 jdbc[3]: 
/**/rs21.close();
2020-06-17 22:13:30 jdbc[3]: 
/**/prep16.getMaxRows();
2020-06-17 22:13:30 jdbc[3]: 
/**/prep16.getQueryTimeout();
2020-06-17 22:13:30 jdbc[3]: 
/**/prep16.close();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:13:30 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:13:30 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:13:30 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:13:30 jdbc[3]: 
/**/PreparedStatement prep17 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:13:30 jdbc[3]: 
/**/prep17.setString(1, "CustomerMS");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep17.setString(2, "INFO");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep17.setNull(3, 12);
2020-06-17 22:13:30 jdbc[3]: 
/**/prep17.setString(4, "/api/customers/4");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep17.setString(5, "Customer(id=4, firstName=David, lastName=Yonge, email=david@gmail.com)");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep17.setString(6, "93222afc6f639d33");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep17.setString(7, "2020-06-18T02:47:33.071Z");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep17.setString(8, "93222afc6f639d33");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep17.executeUpdate();
2020-06-17 22:13:30 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:13:30 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:13:30 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/4', 5: 'Customer(id=4, firstName=David, lastName=Yonge, email=david@gmail.com)', 6: '93222afc6f639d33', 7: '2020-06-18T02:47:33.071Z', 8: '93222afc6f639d33'};
2020-06-17 22:13:30 jdbc[3]: 
/**/ResultSet rs22 = prep17.getGeneratedKeys();
2020-06-17 22:13:30 jdbc[3]: 
/**/rs22.next();
2020-06-17 22:13:30 jdbc[3]: 
/**/ResultSetMetaData rsMeta9 = rs22.getMetaData();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:13:30 jdbc[3]: 
/**/rsMeta9.getColumnCount();
2020-06-17 22:13:30 jdbc[3]: 
/**/rs22.getLong(1);
2020-06-17 22:13:30 jdbc[3]: 
/**/rs22.close();
2020-06-17 22:13:30 jdbc[3]: 
/**/prep17.getMaxRows();
2020-06-17 22:13:30 jdbc[3]: 
/**/prep17.getQueryTimeout();
2020-06-17 22:13:30 jdbc[3]: 
/**/prep17.close();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:13:30 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:13:30 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:13:30 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:13:30 jdbc[3]: 
/**/PreparedStatement prep18 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:13:30 jdbc[3]: 
/**/prep18.setString(1, "CustomerMS");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep18.setString(2, "INFO");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep18.setNull(3, 12);
2020-06-17 22:13:30 jdbc[3]: 
/**/prep18.setString(4, "/api/customers/5");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep18.setString(5, "Customer(id=5, firstName=Peter, lastName=Parker, email=peter@gmail.com)");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep18.setString(6, "66f1f3cca2518457");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep18.setString(7, "2020-06-18T02:48:04.745Z");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep18.setString(8, "66f1f3cca2518457");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep18.executeUpdate();
2020-06-17 22:13:30 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:13:30 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:13:30 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/5', 5: 'Customer(id=5, firstName=Peter, lastName=Parker, email=peter@gmail.com)', 6: '66f1f3cca2518457', 7: '2020-06-18T02:48:04.745Z', 8: '66f1f3cca2518457'};
2020-06-17 22:13:30 jdbc[3]: 
/**/ResultSet rs23 = prep18.getGeneratedKeys();
2020-06-17 22:13:30 jdbc[3]: 
/**/rs23.next();
2020-06-17 22:13:30 jdbc[3]: 
/**/ResultSetMetaData rsMeta10 = rs23.getMetaData();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:13:30 jdbc[3]: 
/**/rsMeta10.getColumnCount();
2020-06-17 22:13:30 jdbc[3]: 
/**/rs23.getLong(1);
2020-06-17 22:13:30 jdbc[3]: 
/**/rs23.close();
2020-06-17 22:13:30 jdbc[3]: 
/**/prep18.getMaxRows();
2020-06-17 22:13:30 jdbc[3]: 
/**/prep18.getQueryTimeout();
2020-06-17 22:13:30 jdbc[3]: 
/**/prep18.close();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:13:30 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:13:30 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:13:30 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:13:30 jdbc[3]: 
/**/PreparedStatement prep19 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:13:30 jdbc[3]: 
/**/prep19.setString(1, "CustomerMS");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep19.setString(2, "INFO");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep19.setNull(3, 12);
2020-06-17 22:13:30 jdbc[3]: 
/**/prep19.setString(4, "/api/customers/6");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep19.setString(5, "Customer(id=null, firstName=null, lastName=null, email=null)");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep19.setString(6, "e4ff784815173d28");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep19.setString(7, "2020-06-18T02:48:16.076Z");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep19.setString(8, "e4ff784815173d28");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep19.executeUpdate();
2020-06-17 22:13:30 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:13:30 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:13:30 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/6', 5: 'Customer(id=null, firstName=null, lastName=null, email=null)', 6: 'e4ff784815173d28', 7: '2020-06-18T02:48:16.076Z', 8: 'e4ff784815173d28'};
2020-06-17 22:13:30 jdbc[3]: 
/**/ResultSet rs24 = prep19.getGeneratedKeys();
2020-06-17 22:13:30 jdbc[3]: 
/**/rs24.next();
2020-06-17 22:13:30 jdbc[3]: 
/**/ResultSetMetaData rsMeta11 = rs24.getMetaData();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:13:30 jdbc[3]: 
/**/rsMeta11.getColumnCount();
2020-06-17 22:13:30 jdbc[3]: 
/**/rs24.getLong(1);
2020-06-17 22:13:30 jdbc[3]: 
/**/rs24.close();
2020-06-17 22:13:30 jdbc[3]: 
/**/prep19.getMaxRows();
2020-06-17 22:13:30 jdbc[3]: 
/**/prep19.getQueryTimeout();
2020-06-17 22:13:30 jdbc[3]: 
/**/prep19.close();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:13:30 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:13:30 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:13:30 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:13:30 jdbc[3]: 
/**/PreparedStatement prep20 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:13:30 jdbc[3]: 
/**/prep20.setString(1, "CustomerMS");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep20.setString(2, "INFO");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep20.setNull(3, 12);
2020-06-17 22:13:30 jdbc[3]: 
/**/prep20.setString(4, "/api/customers/2");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep20.setString(5, "Customer(id=3, firstName=Ramila, lastName=Karki, email=ramila@gmail.com)");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep20.setString(6, "543f683d787432fc");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep20.setString(7, "2020-06-18T02:48:30.897Z");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep20.setString(8, "543f683d787432fc");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep20.executeUpdate();
2020-06-17 22:13:30 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:13:30 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:13:30 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/2', 5: 'Customer(id=3, firstName=Ramila, lastName=Karki, email=ramila@gmail.com)', 6: '543f683d787432fc', 7: '2020-06-18T02:48:30.897Z', 8: '543f683d787432fc'};
2020-06-17 22:13:30 jdbc[3]: 
/**/ResultSet rs25 = prep20.getGeneratedKeys();
2020-06-17 22:13:30 jdbc[3]: 
/**/rs25.next();
2020-06-17 22:13:30 jdbc[3]: 
/**/ResultSetMetaData rsMeta12 = rs25.getMetaData();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:13:30 jdbc[3]: 
/**/rsMeta12.getColumnCount();
2020-06-17 22:13:30 jdbc[3]: 
/**/rs25.getLong(1);
2020-06-17 22:13:30 jdbc[3]: 
/**/rs25.close();
2020-06-17 22:13:30 jdbc[3]: 
/**/prep20.getMaxRows();
2020-06-17 22:13:30 jdbc[3]: 
/**/prep20.getQueryTimeout();
2020-06-17 22:13:30 jdbc[3]: 
/**/prep20.close();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:13:30 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:13:30 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:13:30 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:13:30 jdbc[3]: 
/**/PreparedStatement prep21 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:13:30 jdbc[3]: 
/**/prep21.setString(1, "CustomerMS");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep21.setString(2, "INFO");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep21.setNull(3, 12);
2020-06-17 22:13:30 jdbc[3]: 
/**/prep21.setString(4, "/api/customers/2");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep21.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep21.setString(6, "543f683d787432fc");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep21.setString(7, "2020-06-18T02:48:30.901Z");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep21.setString(8, "543f683d787432fc");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep21.executeUpdate();
2020-06-17 22:13:30 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:13:30 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:13:30 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/2', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: '543f683d787432fc', 7: '2020-06-18T02:48:30.901Z', 8: '543f683d787432fc'};
2020-06-17 22:13:30 jdbc[3]: 
/**/ResultSet rs26 = prep21.getGeneratedKeys();
2020-06-17 22:13:30 jdbc[3]: 
/**/rs26.next();
2020-06-17 22:13:30 jdbc[3]: 
/**/ResultSetMetaData rsMeta13 = rs26.getMetaData();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:13:30 jdbc[3]: 
/**/rsMeta13.getColumnCount();
2020-06-17 22:13:30 jdbc[3]: 
/**/rs26.getLong(1);
2020-06-17 22:13:30 jdbc[3]: 
/**/rs26.close();
2020-06-17 22:13:30 jdbc[3]: 
/**/prep21.getMaxRows();
2020-06-17 22:13:30 jdbc[3]: 
/**/prep21.getQueryTimeout();
2020-06-17 22:13:30 jdbc[3]: 
/**/prep21.close();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:13:30 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:13:30 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:13:30 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:13:30 jdbc[3]: 
/**/PreparedStatement prep22 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:13:30 jdbc[3]: 
/**/prep22.setString(1, "CustomerMS");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep22.setString(2, "INFO");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep22.setNull(3, 12);
2020-06-17 22:13:30 jdbc[3]: 
/**/prep22.setString(4, "/api/customers/2");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep22.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep22.setString(6, "dd81605f39be9222");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep22.setString(7, "2020-06-18T02:53:16.435Z");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep22.setString(8, "dd81605f39be9222");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep22.executeUpdate();
2020-06-17 22:13:30 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:13:30 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:13:30 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/2', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: 'dd81605f39be9222', 7: '2020-06-18T02:53:16.435Z', 8: 'dd81605f39be9222'};
2020-06-17 22:13:30 jdbc[3]: 
/**/ResultSet rs27 = prep22.getGeneratedKeys();
2020-06-17 22:13:30 jdbc[3]: 
/**/rs27.next();
2020-06-17 22:13:30 jdbc[3]: 
/**/ResultSetMetaData rsMeta14 = rs27.getMetaData();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:13:30 jdbc[3]: 
/**/rsMeta14.getColumnCount();
2020-06-17 22:13:30 jdbc[3]: 
/**/rs27.getLong(1);
2020-06-17 22:13:30 jdbc[3]: 
/**/rs27.close();
2020-06-17 22:13:30 jdbc[3]: 
/**/prep22.getMaxRows();
2020-06-17 22:13:30 jdbc[3]: 
/**/prep22.getQueryTimeout();
2020-06-17 22:13:30 jdbc[3]: 
/**/prep22.close();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:13:30 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:13:30 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:13:30 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:13:30 jdbc[3]: 
/**/PreparedStatement prep23 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:13:30 jdbc[3]: 
/**/prep23.setString(1, "CustomerMS");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep23.setString(2, "INFO");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep23.setNull(3, 12);
2020-06-17 22:13:30 jdbc[3]: 
/**/prep23.setString(4, "/api/customers/2");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep23.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep23.setString(6, "34ab3d102fb49096");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep23.setString(7, "2020-06-18T02:53:23.797Z");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep23.setString(8, "34ab3d102fb49096");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep23.executeUpdate();
2020-06-17 22:13:30 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:13:30 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:13:30 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/2', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: '34ab3d102fb49096', 7: '2020-06-18T02:53:23.797Z', 8: '34ab3d102fb49096'};
2020-06-17 22:13:30 jdbc[3]: 
/**/ResultSet rs28 = prep23.getGeneratedKeys();
2020-06-17 22:13:30 jdbc[3]: 
/**/rs28.next();
2020-06-17 22:13:30 jdbc[3]: 
/**/ResultSetMetaData rsMeta15 = rs28.getMetaData();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:13:30 jdbc[3]: 
/**/rsMeta15.getColumnCount();
2020-06-17 22:13:30 jdbc[3]: 
/**/rs28.getLong(1);
2020-06-17 22:13:30 jdbc[3]: 
/**/rs28.close();
2020-06-17 22:13:30 jdbc[3]: 
/**/prep23.getMaxRows();
2020-06-17 22:13:30 jdbc[3]: 
/**/prep23.getQueryTimeout();
2020-06-17 22:13:30 jdbc[3]: 
/**/prep23.close();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:13:30 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:13:30 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:13:30 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:13:30 jdbc[3]: 
/**/PreparedStatement prep24 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:13:30 jdbc[3]: 
/**/prep24.setString(1, "CustomerMS");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep24.setString(2, "INFO");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep24.setNull(3, 12);
2020-06-17 22:13:30 jdbc[3]: 
/**/prep24.setString(4, "/api/customers/2");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep24.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep24.setString(6, "19d2e4d621c50722");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep24.setString(7, "2020-06-18T02:53:35.082Z");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep24.setString(8, "19d2e4d621c50722");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep24.executeUpdate();
2020-06-17 22:13:30 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:13:30 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:13:30 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/2', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: '19d2e4d621c50722', 7: '2020-06-18T02:53:35.082Z', 8: '19d2e4d621c50722'};
2020-06-17 22:13:30 jdbc[3]: 
/**/ResultSet rs29 = prep24.getGeneratedKeys();
2020-06-17 22:13:30 jdbc[3]: 
/**/rs29.next();
2020-06-17 22:13:30 jdbc[3]: 
/**/ResultSetMetaData rsMeta16 = rs29.getMetaData();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:13:30 jdbc[3]: 
/**/rsMeta16.getColumnCount();
2020-06-17 22:13:30 jdbc[3]: 
/**/rs29.getLong(1);
2020-06-17 22:13:30 jdbc[3]: 
/**/rs29.close();
2020-06-17 22:13:30 jdbc[3]: 
/**/prep24.getMaxRows();
2020-06-17 22:13:30 jdbc[3]: 
/**/prep24.getQueryTimeout();
2020-06-17 22:13:30 jdbc[3]: 
/**/prep24.close();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:13:30 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:13:30 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:13:30 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:13:30 jdbc[3]: 
/**/PreparedStatement prep25 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:13:30 jdbc[3]: 
/**/prep25.setString(1, "CustomerMS");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep25.setString(2, "INFO");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep25.setNull(3, 12);
2020-06-17 22:13:30 jdbc[3]: 
/**/prep25.setString(4, "/api/customers/3");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep25.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep25.setString(6, "ab696d894d92b334");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep25.setString(7, "2020-06-18T02:53:42.252Z");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep25.setString(8, "ab696d894d92b334");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep25.executeUpdate();
2020-06-17 22:13:30 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:13:30 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:13:30 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/3', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: 'ab696d894d92b334', 7: '2020-06-18T02:53:42.252Z', 8: 'ab696d894d92b334'};
2020-06-17 22:13:30 jdbc[3]: 
/**/ResultSet rs30 = prep25.getGeneratedKeys();
2020-06-17 22:13:30 jdbc[3]: 
/**/rs30.next();
2020-06-17 22:13:30 jdbc[3]: 
/**/ResultSetMetaData rsMeta17 = rs30.getMetaData();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:13:30 jdbc[3]: 
/**/rsMeta17.getColumnCount();
2020-06-17 22:13:30 jdbc[3]: 
/**/rs30.getLong(1);
2020-06-17 22:13:30 jdbc[3]: 
/**/rs30.close();
2020-06-17 22:13:30 jdbc[3]: 
/**/prep25.getMaxRows();
2020-06-17 22:13:30 jdbc[3]: 
/**/prep25.getQueryTimeout();
2020-06-17 22:13:30 jdbc[3]: 
/**/prep25.close();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:13:30 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:13:30 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:13:30 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:13:30 jdbc[3]: 
/**/PreparedStatement prep26 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:13:30 jdbc[3]: 
/**/prep26.setString(1, "CustomerMS");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep26.setString(2, "INFO");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep26.setNull(3, 12);
2020-06-17 22:13:30 jdbc[3]: 
/**/prep26.setString(4, "/api/customers/3");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep26.setString(5, "Customer(id=3, firstName=Ramila, lastName=Karki, email=ramila@gmail.com)");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep26.setString(6, "ab696d894d92b334");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep26.setString(7, "2020-06-18T02:53:42.257Z");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep26.setString(8, "ab696d894d92b334");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep26.executeUpdate();
2020-06-17 22:13:30 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:13:30 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:13:30 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/3', 5: 'Customer(id=3, firstName=Ramila, lastName=Karki, email=ramila@gmail.com)', 6: 'ab696d894d92b334', 7: '2020-06-18T02:53:42.257Z', 8: 'ab696d894d92b334'};
2020-06-17 22:13:30 jdbc[3]: 
/**/ResultSet rs31 = prep26.getGeneratedKeys();
2020-06-17 22:13:30 jdbc[3]: 
/**/rs31.next();
2020-06-17 22:13:30 jdbc[3]: 
/**/ResultSetMetaData rsMeta18 = rs31.getMetaData();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:13:30 jdbc[3]: 
/**/rsMeta18.getColumnCount();
2020-06-17 22:13:30 jdbc[3]: 
/**/rs31.getLong(1);
2020-06-17 22:13:30 jdbc[3]: 
/**/rs31.close();
2020-06-17 22:13:30 jdbc[3]: 
/**/prep26.getMaxRows();
2020-06-17 22:13:30 jdbc[3]: 
/**/prep26.getQueryTimeout();
2020-06-17 22:13:30 jdbc[3]: 
/**/prep26.close();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:13:30 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:13:30 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:13:30 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:13:30 jdbc[3]: 
/**/PreparedStatement prep27 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:13:30 jdbc[3]: 
/**/prep27.setString(1, "CustomerMS");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep27.setString(2, "INFO");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep27.setNull(3, 12);
2020-06-17 22:13:30 jdbc[3]: 
/**/prep27.setString(4, "/api/customers/4");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep27.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep27.setString(6, "cc0b9a3859b08cfa");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep27.setString(7, "2020-06-18T02:53:58.878Z");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep27.setString(8, "cc0b9a3859b08cfa");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep27.executeUpdate();
2020-06-17 22:13:30 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:13:30 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:13:30 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/4', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: 'cc0b9a3859b08cfa', 7: '2020-06-18T02:53:58.878Z', 8: 'cc0b9a3859b08cfa'};
2020-06-17 22:13:30 jdbc[3]: 
/**/ResultSet rs32 = prep27.getGeneratedKeys();
2020-06-17 22:13:30 jdbc[3]: 
/**/rs32.next();
2020-06-17 22:13:30 jdbc[3]: 
/**/ResultSetMetaData rsMeta19 = rs32.getMetaData();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:13:30 jdbc[3]: 
/**/rsMeta19.getColumnCount();
2020-06-17 22:13:30 jdbc[3]: 
/**/rs32.getLong(1);
2020-06-17 22:13:30 jdbc[3]: 
/**/rs32.close();
2020-06-17 22:13:30 jdbc[3]: 
/**/prep27.getMaxRows();
2020-06-17 22:13:30 jdbc[3]: 
/**/prep27.getQueryTimeout();
2020-06-17 22:13:30 jdbc[3]: 
/**/prep27.close();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:13:30 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:13:30 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:13:30 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:13:30 jdbc[3]: 
/**/PreparedStatement prep28 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:13:30 jdbc[3]: 
/**/prep28.setString(1, "CustomerMS");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep28.setString(2, "INFO");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep28.setNull(3, 12);
2020-06-17 22:13:30 jdbc[3]: 
/**/prep28.setString(4, "/api/customers/4");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep28.setString(5, "Customer(id=4, firstName=David, lastName=Yonge, email=david@gmail.com)");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep28.setString(6, "cc0b9a3859b08cfa");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep28.setString(7, "2020-06-18T02:53:58.882Z");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep28.setString(8, "cc0b9a3859b08cfa");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep28.executeUpdate();
2020-06-17 22:13:30 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:13:30 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:13:30 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/4', 5: 'Customer(id=4, firstName=David, lastName=Yonge, email=david@gmail.com)', 6: 'cc0b9a3859b08cfa', 7: '2020-06-18T02:53:58.882Z', 8: 'cc0b9a3859b08cfa'};
2020-06-17 22:13:30 jdbc[3]: 
/**/ResultSet rs33 = prep28.getGeneratedKeys();
2020-06-17 22:13:30 jdbc[3]: 
/**/rs33.next();
2020-06-17 22:13:30 jdbc[3]: 
/**/ResultSetMetaData rsMeta20 = rs33.getMetaData();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:13:30 jdbc[3]: 
/**/rsMeta20.getColumnCount();
2020-06-17 22:13:30 jdbc[3]: 
/**/rs33.getLong(1);
2020-06-17 22:13:30 jdbc[3]: 
/**/rs33.close();
2020-06-17 22:13:30 jdbc[3]: 
/**/prep28.getMaxRows();
2020-06-17 22:13:30 jdbc[3]: 
/**/prep28.getQueryTimeout();
2020-06-17 22:13:30 jdbc[3]: 
/**/prep28.close();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:13:30 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:13:30 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:13:30 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:13:30 jdbc[3]: 
/**/PreparedStatement prep29 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:13:30 jdbc[3]: 
/**/prep29.setString(1, "CustomerMS");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep29.setString(2, "INFO");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep29.setNull(3, 12);
2020-06-17 22:13:30 jdbc[3]: 
/**/prep29.setString(4, "/api/customers/2");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep29.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep29.setString(6, "06670eac012d24ee");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep29.setString(7, "2020-06-18T02:55:56.769Z");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep29.setString(8, "06670eac012d24ee");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep29.executeUpdate();
2020-06-17 22:13:30 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:13:30 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:13:30 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/2', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: '06670eac012d24ee', 7: '2020-06-18T02:55:56.769Z', 8: '06670eac012d24ee'};
2020-06-17 22:13:30 jdbc[3]: 
/**/ResultSet rs34 = prep29.getGeneratedKeys();
2020-06-17 22:13:30 jdbc[3]: 
/**/rs34.next();
2020-06-17 22:13:30 jdbc[3]: 
/**/ResultSetMetaData rsMeta21 = rs34.getMetaData();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:13:30 jdbc[3]: 
/**/rsMeta21.getColumnCount();
2020-06-17 22:13:30 jdbc[3]: 
/**/rs34.getLong(1);
2020-06-17 22:13:30 jdbc[3]: 
/**/rs34.close();
2020-06-17 22:13:30 jdbc[3]: 
/**/prep29.getMaxRows();
2020-06-17 22:13:30 jdbc[3]: 
/**/prep29.getQueryTimeout();
2020-06-17 22:13:30 jdbc[3]: 
/**/prep29.close();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:13:30 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:13:30 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:13:30 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:13:30 jdbc[3]: 
/**/PreparedStatement prep30 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:13:30 jdbc[3]: 
/**/prep30.setString(1, "CustomerMS");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep30.setString(2, "INFO");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep30.setNull(3, 12);
2020-06-17 22:13:30 jdbc[3]: 
/**/prep30.setString(4, "/api/customers/3");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep30.setString(5, "Customer(id=3, firstName=Ramila, lastName=Karki, email=ramila@gmail.com)");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep30.setString(6, "8f964dcc036a839b");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep30.setString(7, "2020-06-18T02:56:04.268Z");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep30.setString(8, "8f964dcc036a839b");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep30.executeUpdate();
2020-06-17 22:13:30 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:13:30 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:13:30 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/3', 5: 'Customer(id=3, firstName=Ramila, lastName=Karki, email=ramila@gmail.com)', 6: '8f964dcc036a839b', 7: '2020-06-18T02:56:04.268Z', 8: '8f964dcc036a839b'};
2020-06-17 22:13:30 jdbc[3]: 
/**/ResultSet rs35 = prep30.getGeneratedKeys();
2020-06-17 22:13:30 jdbc[3]: 
/**/rs35.next();
2020-06-17 22:13:30 jdbc[3]: 
/**/ResultSetMetaData rsMeta22 = rs35.getMetaData();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:13:30 jdbc[3]: 
/**/rsMeta22.getColumnCount();
2020-06-17 22:13:30 jdbc[3]: 
/**/rs35.getLong(1);
2020-06-17 22:13:30 jdbc[3]: 
/**/rs35.close();
2020-06-17 22:13:30 jdbc[3]: 
/**/prep30.getMaxRows();
2020-06-17 22:13:30 jdbc[3]: 
/**/prep30.getQueryTimeout();
2020-06-17 22:13:30 jdbc[3]: 
/**/prep30.close();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:13:30 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:13:30 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:13:30 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:13:30 jdbc[3]: 
/**/PreparedStatement prep31 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:13:30 jdbc[3]: 
/**/prep31.setString(1, "CustomerMS");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep31.setString(2, "INFO");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep31.setNull(3, 12);
2020-06-17 22:13:30 jdbc[3]: 
/**/prep31.setString(4, "/api/customers/2");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep31.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep31.setString(6, "93153296296c724e");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep31.setString(7, "2020-06-18T02:56:12.997Z");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep31.setString(8, "93153296296c724e");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep31.executeUpdate();
2020-06-17 22:13:30 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:13:30 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:13:30 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/2', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: '93153296296c724e', 7: '2020-06-18T02:56:12.997Z', 8: '93153296296c724e'};
2020-06-17 22:13:30 jdbc[3]: 
/**/ResultSet rs36 = prep31.getGeneratedKeys();
2020-06-17 22:13:30 jdbc[3]: 
/**/rs36.next();
2020-06-17 22:13:30 jdbc[3]: 
/**/ResultSetMetaData rsMeta23 = rs36.getMetaData();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:13:30 jdbc[3]: 
/**/rsMeta23.getColumnCount();
2020-06-17 22:13:30 jdbc[3]: 
/**/rs36.getLong(1);
2020-06-17 22:13:30 jdbc[3]: 
/**/rs36.close();
2020-06-17 22:13:30 jdbc[3]: 
/**/prep31.getMaxRows();
2020-06-17 22:13:30 jdbc[3]: 
/**/prep31.getQueryTimeout();
2020-06-17 22:13:30 jdbc[3]: 
/**/prep31.close();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:13:30 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:13:30 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:13:30 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:13:30 jdbc[3]: 
/**/PreparedStatement prep32 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:13:30 jdbc[3]: 
/**/prep32.setString(1, "CustomerMS");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep32.setString(2, "INFO");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep32.setNull(3, 12);
2020-06-17 22:13:30 jdbc[3]: 
/**/prep32.setString(4, "/api/customers/2");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep32.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep32.setString(6, "20eb60e1e2a5f223");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep32.setString(7, "2020-06-18T02:56:15.134Z");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep32.setString(8, "20eb60e1e2a5f223");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep32.executeUpdate();
2020-06-17 22:13:30 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:13:30 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:13:30 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/2', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: '20eb60e1e2a5f223', 7: '2020-06-18T02:56:15.134Z', 8: '20eb60e1e2a5f223'};
2020-06-17 22:13:30 jdbc[3]: 
/**/ResultSet rs37 = prep32.getGeneratedKeys();
2020-06-17 22:13:30 jdbc[3]: 
/**/rs37.next();
2020-06-17 22:13:30 jdbc[3]: 
/**/ResultSetMetaData rsMeta24 = rs37.getMetaData();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:13:30 jdbc[3]: 
/**/rsMeta24.getColumnCount();
2020-06-17 22:13:30 jdbc[3]: 
/**/rs37.getLong(1);
2020-06-17 22:13:30 jdbc[3]: 
/**/rs37.close();
2020-06-17 22:13:30 jdbc[3]: 
/**/prep32.getMaxRows();
2020-06-17 22:13:30 jdbc[3]: 
/**/prep32.getQueryTimeout();
2020-06-17 22:13:30 jdbc[3]: 
/**/prep32.close();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:13:30 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:13:30 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:13:30 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:13:30 jdbc[3]: 
/**/PreparedStatement prep33 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:13:30 jdbc[3]: 
/**/prep33.setString(1, "CustomerMS");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep33.setString(2, "INFO");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep33.setNull(3, 12);
2020-06-17 22:13:30 jdbc[3]: 
/**/prep33.setString(4, "/api/customers/2");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep33.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep33.setString(6, "43d42dc852862595");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep33.setString(7, "2020-06-18T02:56:16.890Z");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep33.setString(8, "43d42dc852862595");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep33.executeUpdate();
2020-06-17 22:13:30 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:13:30 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:13:30 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/2', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: '43d42dc852862595', 7: '2020-06-18T02:56:16.890Z', 8: '43d42dc852862595'};
2020-06-17 22:13:30 jdbc[3]: 
/**/ResultSet rs38 = prep33.getGeneratedKeys();
2020-06-17 22:13:30 jdbc[3]: 
/**/rs38.next();
2020-06-17 22:13:30 jdbc[3]: 
/**/ResultSetMetaData rsMeta25 = rs38.getMetaData();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:13:30 jdbc[3]: 
/**/rsMeta25.getColumnCount();
2020-06-17 22:13:30 jdbc[3]: 
/**/rs38.getLong(1);
2020-06-17 22:13:30 jdbc[3]: 
/**/rs38.close();
2020-06-17 22:13:30 jdbc[3]: 
/**/prep33.getMaxRows();
2020-06-17 22:13:30 jdbc[3]: 
/**/prep33.getQueryTimeout();
2020-06-17 22:13:30 jdbc[3]: 
/**/prep33.close();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:13:30 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:13:30 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:13:30 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:13:30 jdbc[3]: 
/**/PreparedStatement prep34 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:13:30 jdbc[3]: 
/**/prep34.setString(1, "CustomerMS");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep34.setString(2, "INFO");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep34.setNull(3, 12);
2020-06-17 22:13:30 jdbc[3]: 
/**/prep34.setString(4, "/api/customers/2");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep34.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep34.setString(6, "6e58df6ecc92c2a9");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep34.setString(7, "2020-06-18T02:56:18.068Z");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep34.setString(8, "6e58df6ecc92c2a9");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep34.executeUpdate();
2020-06-17 22:13:30 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:13:30 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:13:30 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/2', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: '6e58df6ecc92c2a9', 7: '2020-06-18T02:56:18.068Z', 8: '6e58df6ecc92c2a9'};
2020-06-17 22:13:30 jdbc[3]: 
/**/ResultSet rs39 = prep34.getGeneratedKeys();
2020-06-17 22:13:30 jdbc[3]: 
/**/rs39.next();
2020-06-17 22:13:30 jdbc[3]: 
/**/ResultSetMetaData rsMeta26 = rs39.getMetaData();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:13:30 jdbc[3]: 
/**/rsMeta26.getColumnCount();
2020-06-17 22:13:30 jdbc[3]: 
/**/rs39.getLong(1);
2020-06-17 22:13:30 jdbc[3]: 
/**/rs39.close();
2020-06-17 22:13:30 jdbc[3]: 
/**/prep34.getMaxRows();
2020-06-17 22:13:30 jdbc[3]: 
/**/prep34.getQueryTimeout();
2020-06-17 22:13:30 jdbc[3]: 
/**/prep34.close();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:13:30 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:13:30 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:13:30 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:13:30 jdbc[3]: 
/**/PreparedStatement prep35 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:13:30 jdbc[3]: 
/**/prep35.setString(1, "CustomerMS");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep35.setString(2, "INFO");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep35.setNull(3, 12);
2020-06-17 22:13:30 jdbc[3]: 
/**/prep35.setString(4, "/api/customers/3");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep35.setString(5, "Customer(id=3, firstName=Ramila, lastName=Karki, email=ramila@gmail.com)");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep35.setString(6, "2e6641836c179162");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep35.setString(7, "2020-06-18T02:56:24.656Z");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep35.setString(8, "2e6641836c179162");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep35.executeUpdate();
2020-06-17 22:13:30 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:13:30 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:13:30 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/3', 5: 'Customer(id=3, firstName=Ramila, lastName=Karki, email=ramila@gmail.com)', 6: '2e6641836c179162', 7: '2020-06-18T02:56:24.656Z', 8: '2e6641836c179162'};
2020-06-17 22:13:30 jdbc[3]: 
/**/ResultSet rs40 = prep35.getGeneratedKeys();
2020-06-17 22:13:30 jdbc[3]: 
/**/rs40.next();
2020-06-17 22:13:30 jdbc[3]: 
/**/ResultSetMetaData rsMeta27 = rs40.getMetaData();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:13:30 jdbc[3]: 
/**/rsMeta27.getColumnCount();
2020-06-17 22:13:30 jdbc[3]: 
/**/rs40.getLong(1);
2020-06-17 22:13:30 jdbc[3]: 
/**/rs40.close();
2020-06-17 22:13:30 jdbc[3]: 
/**/prep35.getMaxRows();
2020-06-17 22:13:30 jdbc[3]: 
/**/prep35.getQueryTimeout();
2020-06-17 22:13:30 jdbc[3]: 
/**/prep35.close();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:13:30 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:13:30 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:13:30 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:13:30 jdbc[3]: 
/**/PreparedStatement prep36 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:13:30 jdbc[3]: 
/**/prep36.setString(1, "CustomerMS");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep36.setString(2, "INFO");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep36.setNull(3, 12);
2020-06-17 22:13:30 jdbc[3]: 
/**/prep36.setString(4, "/api/customers/4");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep36.setString(5, "Customer(id=4, firstName=David, lastName=Yonge, email=david@gmail.com)");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep36.setString(6, "6cc53148f46f5151");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep36.setString(7, "2020-06-18T02:56:42.193Z");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep36.setString(8, "6cc53148f46f5151");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep36.executeUpdate();
2020-06-17 22:13:30 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:13:30 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:13:30 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/4', 5: 'Customer(id=4, firstName=David, lastName=Yonge, email=david@gmail.com)', 6: '6cc53148f46f5151', 7: '2020-06-18T02:56:42.193Z', 8: '6cc53148f46f5151'};
2020-06-17 22:13:30 jdbc[3]: 
/**/ResultSet rs41 = prep36.getGeneratedKeys();
2020-06-17 22:13:30 jdbc[3]: 
/**/rs41.next();
2020-06-17 22:13:30 jdbc[3]: 
/**/ResultSetMetaData rsMeta28 = rs41.getMetaData();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:13:30 jdbc[3]: 
/**/rsMeta28.getColumnCount();
2020-06-17 22:13:30 jdbc[3]: 
/**/rs41.getLong(1);
2020-06-17 22:13:30 jdbc[3]: 
/**/rs41.close();
2020-06-17 22:13:30 jdbc[3]: 
/**/prep36.getMaxRows();
2020-06-17 22:13:30 jdbc[3]: 
/**/prep36.getQueryTimeout();
2020-06-17 22:13:30 jdbc[3]: 
/**/prep36.close();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:13:30 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:13:30 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:13:30 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:13:30 jdbc[3]: 
/**/PreparedStatement prep37 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:13:30 jdbc[3]: 
/**/prep37.setString(1, "CustomerMS");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep37.setString(2, "INFO");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep37.setNull(3, 12);
2020-06-17 22:13:30 jdbc[3]: 
/**/prep37.setString(4, "/api/customers/5");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep37.setString(5, "Customer(id=5, firstName=Peter, lastName=Parker, email=peter@gmail.com)");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep37.setString(6, "7f2851bfe57d4c73");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep37.setString(7, "2020-06-18T02:56:45.275Z");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep37.setString(8, "7f2851bfe57d4c73");
2020-06-17 22:13:30 jdbc[3]: 
/**/prep37.executeUpdate();
2020-06-17 22:13:30 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:13:30 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:13:30 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/5', 5: 'Customer(id=5, firstName=Peter, lastName=Parker, email=peter@gmail.com)', 6: '7f2851bfe57d4c73', 7: '2020-06-18T02:56:45.275Z', 8: '7f2851bfe57d4c73'};
2020-06-17 22:13:30 jdbc[3]: 
/**/ResultSet rs42 = prep37.getGeneratedKeys();
2020-06-17 22:13:30 jdbc[3]: 
/**/rs42.next();
2020-06-17 22:13:30 jdbc[3]: 
/**/ResultSetMetaData rsMeta29 = rs42.getMetaData();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:13:30 jdbc[3]: 
/**/rsMeta29.getColumnCount();
2020-06-17 22:13:30 jdbc[3]: 
/**/rs42.getLong(1);
2020-06-17 22:13:30 jdbc[3]: 
/**/rs42.close();
2020-06-17 22:13:30 jdbc[3]: 
/**/prep37.getMaxRows();
2020-06-17 22:13:30 jdbc[3]: 
/**/prep37.getQueryTimeout();
2020-06-17 22:13:30 jdbc[3]: 
/**/prep37.close();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:13:30 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:13:30 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:13:30 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:13:30 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:30:07 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-17 22:30:07 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 22:30:07 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:30:07 jdbc[3]: 
/**/Statement stat3 = conn0.createStatement();
2020-06-17 22:30:07 jdbc[3]: 
/**/stat3.execute("drop table if exists customer_tbl CASCADE ");
2020-06-17 22:30:07 lock: 3 exclusive write lock requesting for CUSTOMER_TBL 
2020-06-17 22:30:07 lock: 3 exclusive write lock added for CUSTOMER_TBL 
2020-06-17 22:30:07 lock: 3 exclusive write lock requesting for SYS 
2020-06-17 22:30:07 lock: 3 exclusive write lock added for SYS 
2020-06-17 22:30:07 jdbc[3]: 
/*SQL t:4*/drop table if exists customer_tbl CASCADE;
2020-06-17 22:30:07 lock: 3 exclusive write lock unlock SYS 
2020-06-17 22:30:07 jdbc[3]: 
/**/stat3.getWarnings();
2020-06-17 22:30:07 jdbc[3]: 
/**/stat3.execute("drop table if exists log_tbl CASCADE ");
2020-06-17 22:30:07 lock: 3 exclusive write lock requesting for LOG_TBL 
2020-06-17 22:30:07 lock: 3 exclusive write lock added for LOG_TBL 
2020-06-17 22:30:07 lock: 3 exclusive write lock requesting for SYS 
2020-06-17 22:30:07 lock: 3 exclusive write lock added for SYS 
2020-06-17 22:30:07 jdbc[3]: 
/*SQL */drop table if exists log_tbl CASCADE;
2020-06-17 22:30:07 lock: 3 exclusive write lock unlock SYS 
2020-06-17 22:30:07 jdbc[3]: 
/**/stat3.getWarnings();
2020-06-17 22:30:07 jdbc[3]: 
/**/stat3.close();
2020-06-17 22:30:07 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:30:07 database: closing /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb from shutdown hook
2020-06-17 22:30:07 lock: 3 shared read lock unlock SYS 
2020-06-17 22:30:07 database: disconnecting session #3
2020-06-17 22:30:07 database: disconnected session #3
2020-06-17 22:30:07 lock: 4 shared read lock unlock SYS 
2020-06-17 22:30:07 database: disconnecting session #4
2020-06-17 22:30:07 database: disconnected session #4
2020-06-17 22:30:07 lock: 5 shared read lock unlock SYS 
2020-06-17 22:30:07 database: disconnecting session #5
2020-06-17 22:30:07 database: disconnected session #5
2020-06-17 22:30:07 lock: 6 shared read lock unlock SYS 
2020-06-17 22:30:07 database: disconnecting session #6
2020-06-17 22:30:07 database: disconnected session #6
2020-06-17 22:30:07 lock: 7 shared read lock unlock SYS 
2020-06-17 22:30:07 database: disconnecting session #7
2020-06-17 22:30:07 database: disconnected session #7
2020-06-17 22:30:07 lock: 8 shared read lock unlock SYS 
2020-06-17 22:30:07 database: disconnecting session #8
2020-06-17 22:30:07 database: disconnected session #8
2020-06-17 22:30:07 lock: 9 shared read lock unlock SYS 
2020-06-17 22:30:07 database: disconnecting session #9
2020-06-17 22:30:07 database: disconnected session #9
2020-06-17 22:30:07 lock: 10 shared read lock unlock SYS 
2020-06-17 22:30:07 jdbc[3]: 
/**/conn0.close();
2020-06-17 22:30:07 database: disconnecting session #10
2020-06-17 22:30:07 jdbc[4]: 
/**/conn1.close();
2020-06-17 22:30:07 database: disconnected session #10
2020-06-17 22:30:07 jdbc[5]: 
/**/conn2.close();
2020-06-17 22:30:07 lock: 11 shared read lock unlock SYS 
2020-06-17 22:30:07 jdbc[6]: 
/**/conn3.close();
2020-06-17 22:30:07 database: disconnecting session #11
2020-06-17 22:30:07 jdbc[7]: 
/**/conn4.close();
2020-06-17 22:30:07 database: disconnected session #11
2020-06-17 22:30:07 lock: 12 shared read lock unlock SYS 
2020-06-17 22:30:07 jdbc[8]: 
/**/conn5.close();
2020-06-17 22:30:07 database: disconnecting session #12
2020-06-17 22:30:07 jdbc[9]: 
/**/conn6.close();
2020-06-17 22:30:07 database: disconnected session #12
2020-06-17 22:30:07 jdbc[10]: 
/**/conn7.close();
2020-06-17 22:30:07 jdbc[11]: 
/**/conn8.close();
2020-06-17 22:30:07 jdbc[12]: 
/**/conn9.close();
2020-06-17 22:30:07 database: closing /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 22:30:07 lock: 1 shared read lock unlock SYS 
2020-06-17 22:30:07 lock: 2 shared read lock unlock SYS 
2020-06-17 22:30:07 database: closed
2020-06-17 22:30:15 database: opening /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb (build 200)
2020-06-17 22:30:16 lock: 1 exclusive write lock requesting for SYS 
2020-06-17 22:30:16 lock: 1 exclusive write lock added for SYS 
2020-06-17 22:30:16 lock: 1 exclusive write lock unlock SYS 
2020-06-17 22:30:16 lock: 1 exclusive write lock requesting for SYS 
2020-06-17 22:30:16 lock: 1 exclusive write lock added for SYS 
2020-06-17 22:30:16 lock: 1 exclusive write lock unlock SYS 
2020-06-17 22:30:16 lock: 1 exclusive write lock requesting for SYS 
2020-06-17 22:30:16 lock: 1 exclusive write lock added for SYS 
2020-06-17 22:30:16 lock: 1 exclusive write lock unlock SYS 
2020-06-17 22:30:16 database: opened /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 22:30:16 database: connecting session #3 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 22:30:16 jdbc[3]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 22:30:16 jdbc[3]: 
/**/Connection conn0 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 22:30:16 jdbc[3]: 
/**/conn0.isReadOnly();
2020-06-17 22:30:16 jdbc[3]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 22:30:16 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:30:16 jdbc[3]: 
/**/conn0.isValid(1);
2020-06-17 22:30:16 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 22:30:16 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 22:30:16 jdbc[3]: 
/**/DatabaseMetaData dbMeta0 = conn0.getMetaData();
2020-06-17 22:30:16 jdbc[3]: 
/**/dbMeta0.getURL();
2020-06-17 22:30:16 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:30:16 database: connecting session #4 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 22:30:16 jdbc[4]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 22:30:16 jdbc[4]: 
/**/Connection conn1 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 22:30:16 jdbc[4]: 
/**/conn1.isReadOnly();
2020-06-17 22:30:16 jdbc[4]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 22:30:16 jdbc[4]: 
/**/conn1.getAutoCommit();
2020-06-17 22:30:16 database: connecting session #5 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 22:30:16 jdbc[5]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 22:30:16 jdbc[5]: 
/**/Connection conn2 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 22:30:16 jdbc[5]: 
/**/conn2.isReadOnly();
2020-06-17 22:30:16 jdbc[5]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 22:30:16 jdbc[5]: 
/**/conn2.getAutoCommit();
2020-06-17 22:30:16 database: connecting session #6 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 22:30:16 jdbc[6]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 22:30:16 jdbc[6]: 
/**/Connection conn3 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 22:30:16 jdbc[6]: 
/**/conn3.isReadOnly();
2020-06-17 22:30:16 jdbc[6]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 22:30:16 jdbc[6]: 
/**/conn3.getAutoCommit();
2020-06-17 22:30:16 database: connecting session #7 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 22:30:16 jdbc[7]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 22:30:16 jdbc[7]: 
/**/Connection conn4 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 22:30:16 jdbc[7]: 
/**/conn4.isReadOnly();
2020-06-17 22:30:16 jdbc[7]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 22:30:16 jdbc[7]: 
/**/conn4.getAutoCommit();
2020-06-17 22:30:16 database: connecting session #8 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 22:30:16 jdbc[8]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 22:30:16 jdbc[8]: 
/**/Connection conn5 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 22:30:16 jdbc[8]: 
/**/conn5.isReadOnly();
2020-06-17 22:30:16 jdbc[8]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 22:30:16 jdbc[8]: 
/**/conn5.getAutoCommit();
2020-06-17 22:30:16 database: connecting session #9 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 22:30:16 jdbc[9]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 22:30:16 jdbc[9]: 
/**/Connection conn6 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 22:30:16 jdbc[9]: 
/**/conn6.isReadOnly();
2020-06-17 22:30:16 jdbc[9]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 22:30:16 jdbc[9]: 
/**/conn6.getAutoCommit();
2020-06-17 22:30:16 database: connecting session #10 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 22:30:16 jdbc[10]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 22:30:16 jdbc[10]: 
/**/Connection conn7 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 22:30:16 jdbc[10]: 
/**/conn7.isReadOnly();
2020-06-17 22:30:16 jdbc[10]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 22:30:16 jdbc[10]: 
/**/conn7.getAutoCommit();
2020-06-17 22:30:16 database: connecting session #11 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 22:30:16 jdbc[11]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 22:30:16 jdbc[11]: 
/**/Connection conn8 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 22:30:16 jdbc[11]: 
/**/conn8.isReadOnly();
2020-06-17 22:30:16 jdbc[11]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 22:30:16 jdbc[11]: 
/**/conn8.getAutoCommit();
2020-06-17 22:30:16 database: connecting session #12 to /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 22:30:16 jdbc[12]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2020-06-17 22:30:16 jdbc[12]: 
/**/Connection conn9 = DriverManager.getConnection("jdbc:h2:file:./customerdb;TRACE_LEVEL_FILE=3", "SA", "");
2020-06-17 22:30:16 jdbc[12]: 
/**/conn9.isReadOnly();
2020-06-17 22:30:16 jdbc[12]: 
/*SQL #:1*/CALL READONLY();
2020-06-17 22:30:16 jdbc[12]: 
/**/conn9.getAutoCommit();
2020-06-17 22:30:16 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-17 22:30:16 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 22:30:16 jdbc[3]: 
/**/DatabaseMetaData dbMeta1 = conn0.getMetaData();
2020-06-17 22:30:16 jdbc[3]: 
/**/dbMeta1.getDatabaseProductName();
2020-06-17 22:30:16 jdbc[3]: 
/**/dbMeta1.getDatabaseProductVersion();
2020-06-17 22:30:16 jdbc[3]: 
/**/dbMeta1.getDatabaseMajorVersion();
2020-06-17 22:30:16 jdbc[3]: 
/**/dbMeta1.getDatabaseMinorVersion();
2020-06-17 22:30:16 jdbc[3]: 
/**/dbMeta1.getDriverName();
2020-06-17 22:30:16 jdbc[3]: 
/**/dbMeta1.getDriverVersion();
2020-06-17 22:30:16 jdbc[3]: 
/**/dbMeta1.getDriverMajorVersion();
2020-06-17 22:30:16 jdbc[3]: 
/**/dbMeta1.getDriverMinorVersion();
2020-06-17 22:30:16 jdbc[3]: 
/**/dbMeta1.getJDBCMajorVersion();
2020-06-17 22:30:16 jdbc[3]: 
/**/dbMeta1.getJDBCMinorVersion();
2020-06-17 22:30:16 jdbc[3]: 
/**/dbMeta1.supportsCatalogsInTableDefinitions();
2020-06-17 22:30:16 jdbc[3]: 
/**/dbMeta1.supportsSchemasInTableDefinitions();
2020-06-17 22:30:16 jdbc[3]: 
/**/dbMeta1.storesLowerCaseIdentifiers();
2020-06-17 22:30:16 jdbc[3]: 
/**/PreparedStatement prep0 = conn0.prepareStatement("SELECT NAME, VALUE FROM INFORMATION_SCHEMA.SETTINGS WHERE NAME IN (?, ?, ?, ?)");
2020-06-17 22:30:16 jdbc[3]: Plan       : calculate cost for plan [SETTINGS:-7:org.h2.table.MetaTable@63ecb5ab]
2020-06-17 22:30:16 jdbc[3]: Plan       :   for table filter SETTINGS:-7:org.h2.table.MetaTable@63ecb5ab
2020-06-17 22:30:16 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 22:30:16 jdbc[3]: Plan       :   best plan item cost 9,900 index meta
2020-06-17 22:30:16 jdbc[3]: Plan       : plan cost 9,901
2020-06-17 22:30:16 jdbc[3]: 
/**/prep0.setString(1, "MODE");
2020-06-17 22:30:16 jdbc[3]: 
/**/prep0.setString(2, "DATABASE_TO_UPPER");
2020-06-17 22:30:16 jdbc[3]: 
/**/prep0.setString(3, "DATABASE_TO_LOWER");
2020-06-17 22:30:16 jdbc[3]: 
/**/prep0.setString(4, "CASE_INSENSITIVE_IDENTIFIERS");
2020-06-17 22:30:16 jdbc[3]: 
/**/ResultSet rs0 = prep0.executeQuery();
2020-06-17 22:30:16 jdbc[3]: 
/*SQL l:78 #:4 t:2*/SELECT NAME, VALUE FROM INFORMATION_SCHEMA.SETTINGS WHERE NAME IN (?, ?, ?, ?) {1: 'MODE', 2: 'DATABASE_TO_UPPER', 3: 'DATABASE_TO_LOWER', 4: 'CASE_INSENSITIVE_IDENTIFIERS'};
2020-06-17 22:30:16 jdbc[3]: 
/**/rs0.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs0.getString(2);
2020-06-17 22:30:16 jdbc[3]: 
/**/rs0.getString(1);
2020-06-17 22:30:16 jdbc[3]: 
/**/rs0.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs0.getString(2);
2020-06-17 22:30:16 jdbc[3]: 
/**/rs0.getString(1);
2020-06-17 22:30:16 jdbc[3]: 
/**/rs0.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs0.getString(2);
2020-06-17 22:30:16 jdbc[3]: 
/**/rs0.getString(1);
2020-06-17 22:30:16 jdbc[3]: 
/**/rs0.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs0.getString(2);
2020-06-17 22:30:16 jdbc[3]: 
/**/rs0.getString(1);
2020-06-17 22:30:16 jdbc[3]: 
/**/rs0.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/prep0.close();
2020-06-17 22:30:16 jdbc[3]: 
/**/dbMeta1.storesUpperCaseIdentifiers();
2020-06-17 22:30:16 jdbc[3]: 
/**/dbMeta1.storesMixedCaseIdentifiers();
2020-06-17 22:30:16 jdbc[3]: 
/**/dbMeta1.storesUpperCaseIdentifiers();
2020-06-17 22:30:16 jdbc[3]: 
/**/dbMeta1.storesLowerCaseQuotedIdentifiers();
2020-06-17 22:30:16 jdbc[3]: 
/**/dbMeta1.storesUpperCaseQuotedIdentifiers();
2020-06-17 22:30:16 jdbc[3]: 
/**/dbMeta1.storesMixedCaseQuotedIdentifiers();
2020-06-17 22:30:16 jdbc[3]: 
/**/dbMeta1.getSQLKeywords();
2020-06-17 22:30:16 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:30:16 jdbc[3]: 
/*SQL #:1*/CALL DATABASE();
2020-06-17 22:30:16 jdbc[3]: 
/**/dbMeta1.supportsNamedParameters();
2020-06-17 22:30:16 jdbc[3]: 
/**/dbMeta1.supportsResultSetType(1004);
2020-06-17 22:30:16 jdbc[3]: 
/**/dbMeta1.supportsGetGeneratedKeys();
2020-06-17 22:30:16 jdbc[3]: 
/**/dbMeta1.supportsBatchUpdates();
2020-06-17 22:30:16 jdbc[3]: 
/**/dbMeta1.dataDefinitionIgnoredInTransactions();
2020-06-17 22:30:16 jdbc[3]: 
/**/dbMeta1.dataDefinitionCausesTransactionCommit();
2020-06-17 22:30:16 jdbc[3]: 
/**/dbMeta1.getSQLKeywords();
2020-06-17 22:30:16 jdbc[3]: 
/**/dbMeta1.getSQLStateType();
2020-06-17 22:30:16 jdbc[3]: 
/**/dbMeta1.locatorsUpdateCopy();
2020-06-17 22:30:16 jdbc[3]: 
/**/dbMeta1.getTypeInfo();
2020-06-17 22:30:16 jdbc[3]: 
/**/PreparedStatement prep1 = conn0.prepareStatement("SELECT TYPE_NAME, DATA_TYPE, PRECISION, PREFIX LITERAL_PREFIX, SUFFIX LITERAL_SUFFIX, PARAMS CREATE_PARAMS, NULLABLE, CASE_SENSITIVE, SEARCHABLE, FALSE UNSIGNED_ATTRIBUTE, FALSE FIXED_PREC_SCALE, AUTO_INCREMENT, TYPE_NAME LOCAL_TYPE_NAME, MINIMUM_SCALE, MAXIMUM_SCALE, DATA_TYPE SQL_DATA_TYPE, ZERO() SQL_DATETIME_SUB, RADIX NUM_PREC_RADIX FROM INFORMATION_SCHEMA.TYPE_INFO ORDER BY DATA_TYPE, POS");
2020-06-17 22:30:16 jdbc[3]: Plan       : calculate cost for plan [TYPE_INFO:-5:org.h2.table.MetaTable@3605c71c]
2020-06-17 22:30:16 jdbc[3]: Plan       :   for table filter TYPE_INFO:-5:org.h2.table.MetaTable@3605c71c
2020-06-17 22:30:16 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 22:30:16 jdbc[3]: Plan       :   best plan item cost 10,000 index meta
2020-06-17 22:30:16 jdbc[3]: Plan       : plan cost 10,001
2020-06-17 22:30:16 jdbc[3]: 
/**/ResultSet rs1 = prep1.executeQuery();
2020-06-17 22:30:16 jdbc[3]: 
/*SQL #:46 t:1*/SELECT TYPE_NAME, DATA_TYPE, PRECISION, PREFIX LITERAL_PREFIX, SUFFIX LITERAL_SUFFIX, PARAMS CREATE_PARAMS, NULLABLE, CASE_SENSITIVE, SEARCHABLE, FALSE UNSIGNED_ATTRIBUTE, FALSE FIXED_PREC_SCALE, AUTO_INCREMENT, TYPE_NAME LOCAL_TYPE_NAME, MINIMUM_SCALE, MAXIMUM_SCALE, DATA_TYPE SQL_DATA_TYPE, ZERO() SQL_DATETIME_SUB, RADIX NUM_PREC_RADIX FROM INFORMATION_SCHEMA.TYPE_INFO ORDER BY DATA_TYPE, POS;
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getStatement();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs1.close();
2020-06-17 22:30:16 jdbc[3]: 
/**/prep1.close();
2020-06-17 22:30:16 jdbc[3]: 
/**/conn0.getSchema();
2020-06-17 22:30:16 jdbc[3]: 
/**/conn0.getSchema();
2020-06-17 22:30:16 jdbc[3]: 
/**/dbMeta1.supportsNamedParameters();
2020-06-17 22:30:16 jdbc[3]: 
/**/Statement stat0 = conn0.createStatement();
2020-06-17 22:30:16 jdbc[3]: 
/**/ResultSet rs2 = stat0.executeQuery("select * from INFORMATION_SCHEMA.SEQUENCES");
2020-06-17 22:30:16 jdbc[3]: Plan       : calculate cost for plan [SEQUENCES:-9:org.h2.table.MetaTable@5dcf5ee4]
2020-06-17 22:30:16 jdbc[3]: Plan       :   for table filter SEQUENCES:-9:org.h2.table.MetaTable@5dcf5ee4
2020-06-17 22:30:16 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 22:30:16 jdbc[3]: Plan       :   best plan item cost 10,000 index meta
2020-06-17 22:30:16 jdbc[3]: Plan       : plan cost 10,001
2020-06-17 22:30:16 jdbc[3]: 
/*SQL */select * from INFORMATION_SCHEMA.SEQUENCES;
2020-06-17 22:30:16 jdbc[3]: 
/**/rs2.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs2.close();
2020-06-17 22:30:16 jdbc[3]: 
/**/stat0.close();
2020-06-17 22:30:16 jdbc[3]: 
/**/dbMeta1.getCatalogSeparator();
2020-06-17 22:30:16 jdbc[3]: 
/**/dbMeta1.isCatalogAtStart();
2020-06-17 22:30:16 jdbc[3]: 
/**/dbMeta1.getTypeInfo();
2020-06-17 22:30:16 jdbc[3]: 
/**/PreparedStatement prep2 = conn0.prepareStatement("SELECT TYPE_NAME, DATA_TYPE, PRECISION, PREFIX LITERAL_PREFIX, SUFFIX LITERAL_SUFFIX, PARAMS CREATE_PARAMS, NULLABLE, CASE_SENSITIVE, SEARCHABLE, FALSE UNSIGNED_ATTRIBUTE, FALSE FIXED_PREC_SCALE, AUTO_INCREMENT, TYPE_NAME LOCAL_TYPE_NAME, MINIMUM_SCALE, MAXIMUM_SCALE, DATA_TYPE SQL_DATA_TYPE, ZERO() SQL_DATETIME_SUB, RADIX NUM_PREC_RADIX FROM INFORMATION_SCHEMA.TYPE_INFO ORDER BY DATA_TYPE, POS");
2020-06-17 22:30:16 jdbc[3]: 
/**/ResultSet rs3 = prep2.executeQuery();
2020-06-17 22:30:16 jdbc[3]: 
/*SQL #:46*/SELECT TYPE_NAME, DATA_TYPE, PRECISION, PREFIX LITERAL_PREFIX, SUFFIX LITERAL_SUFFIX, PARAMS CREATE_PARAMS, NULLABLE, CASE_SENSITIVE, SEARCHABLE, FALSE UNSIGNED_ATTRIBUTE, FALSE FIXED_PREC_SCALE, AUTO_INCREMENT, TYPE_NAME LOCAL_TYPE_NAME, MINIMUM_SCALE, MAXIMUM_SCALE, DATA_TYPE SQL_DATA_TYPE, ZERO() SQL_DATETIME_SUB, RADIX NUM_PREC_RADIX FROM INFORMATION_SCHEMA.TYPE_INFO ORDER BY DATA_TYPE, POS;
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getStatement();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("TYPE_NAME");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("DATA_TYPE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("CREATE_PARAMS");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("UNSIGNED_ATTRIBUTE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getInt("PRECISION");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MINIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("MAXIMUM_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("FIXED_PREC_SCALE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_PREFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getString("LITERAL_SUFFIX");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getBoolean("CASE_SENSITIVE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("SEARCHABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.getShort("NULLABLE");
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.next();
2020-06-17 22:30:16 jdbc[3]: 
/**/rs3.close();
2020-06-17 22:30:16 jdbc[3]: 
/**/prep2.close();
2020-06-17 22:30:16 jdbc[3]: 
/**/DatabaseMetaData dbMeta2 = conn0.getMetaData();
2020-06-17 22:30:16 jdbc[3]: 
/**/dbMeta2.getJDBCMajorVersion();
2020-06-17 22:30:16 jdbc[3]: 
/**/Clob clob0 = conn0.createClob();
2020-06-17 22:30:16 jdbc[3]: 
/**/clob0.free();
2020-06-17 22:30:16 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:30:17 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:30:17 jdbc[3]: 
/**/Statement stat1 = conn0.createStatement();
2020-06-17 22:30:17 jdbc[3]: 
/**/stat1.execute("drop table if exists customer_tbl CASCADE ");
2020-06-17 22:30:17 jdbc[3]: 
/*SQL */drop table if exists customer_tbl CASCADE;
2020-06-17 22:30:17 jdbc[3]: 
/**/stat1.getWarnings();
2020-06-17 22:30:17 jdbc[3]: 
/**/stat1.execute("drop table if exists log_tbl CASCADE ");
2020-06-17 22:30:17 jdbc[3]: 
/*SQL */drop table if exists log_tbl CASCADE;
2020-06-17 22:30:17 jdbc[3]: 
/**/stat1.getWarnings();
2020-06-17 22:30:17 jdbc[3]: 
/**/stat1.close();
2020-06-17 22:30:17 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:30:17 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:30:17 jdbc[3]: 
/**/Statement stat2 = conn0.createStatement();
2020-06-17 22:30:17 jdbc[3]: 
/**/stat2.execute("create table customer_tbl (id bigint generated by default as identity, customer_email varchar(255), customer_firstname varchar(255), customer_lastname varchar(255), primary key (id))");
2020-06-17 22:30:17 lock: 3 exclusive write lock requesting for SYS 
2020-06-17 22:30:17 lock: 3 exclusive write lock added for SYS 
2020-06-17 22:30:17 lock: 3 exclusive write lock unlock SYS 
2020-06-17 22:30:17 lock: 3 exclusive write lock requesting for SYS 
2020-06-17 22:30:17 lock: 3 exclusive write lock added for SYS 
2020-06-17 22:30:17 lock: 3 exclusive write lock requesting for CUSTOMER_TBL 
2020-06-17 22:30:17 lock: 3 exclusive write lock added for CUSTOMER_TBL 
2020-06-17 22:30:17 jdbc[3]: 
/*SQL t:5*/create table customer_tbl (id bigint generated by default as identity, customer_email varchar(255), customer_firstname varchar(255), customer_lastname varchar(255), primary key (id));
2020-06-17 22:30:17 lock: 3 exclusive write lock unlock SYS 
2020-06-17 22:30:17 lock: 3 exclusive write lock unlock CUSTOMER_TBL 
2020-06-17 22:30:17 jdbc[3]: 
/**/stat2.getWarnings();
2020-06-17 22:30:17 jdbc[3]: 
/**/stat2.execute("create table log_tbl (id bigint generated by default as identity, application_name varchar(255), level varchar(255), parent_span_id varchar(255), request varchar(255), response varchar(255), span_id varchar(255), time varchar(255), trace_id varchar(255), primary key (id))");
2020-06-17 22:30:17 lock: 3 exclusive write lock requesting for SYS 
2020-06-17 22:30:17 lock: 3 exclusive write lock added for SYS 
2020-06-17 22:30:17 lock: 3 exclusive write lock unlock SYS 
2020-06-17 22:30:17 lock: 3 exclusive write lock requesting for SYS 
2020-06-17 22:30:17 lock: 3 exclusive write lock added for SYS 
2020-06-17 22:30:17 lock: 3 exclusive write lock requesting for LOG_TBL 
2020-06-17 22:30:17 lock: 3 exclusive write lock added for LOG_TBL 
2020-06-17 22:30:17 jdbc[3]: 
/*SQL t:1*/create table log_tbl (id bigint generated by default as identity, application_name varchar(255), level varchar(255), parent_span_id varchar(255), request varchar(255), response varchar(255), span_id varchar(255), time varchar(255), trace_id varchar(255), primary key (id));
2020-06-17 22:30:17 lock: 3 exclusive write lock unlock SYS 
2020-06-17 22:30:17 lock: 3 exclusive write lock unlock LOG_TBL 
2020-06-17 22:30:17 jdbc[3]: 
/**/stat2.getWarnings();
2020-06-17 22:30:17 jdbc[3]: 
/**/stat2.close();
2020-06-17 22:30:17 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:30:17 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:30:17 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:30:17 jdbc[3]: 
/**/PreparedStatement prep3 = conn0.prepareStatement("select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=?");
2020-06-17 22:30:17 jdbc[3]: Plan       : calculate cost for plan [CUSTOMER0_]
2020-06-17 22:30:17 jdbc[3]: Plan       :   for table filter CUSTOMER0_
2020-06-17 22:30:17 jdbc[3]: Table      :     potential plan item cost 10,200 index PUBLIC.CUSTOMER_TBL.tableScan
2020-06-17 22:30:17 jdbc[3]: Table      :     potential plan item cost 230 index PUBLIC.PRIMARY_KEY_B
2020-06-17 22:30:17 jdbc[3]: Plan       :   best plan item cost 227.7 index PUBLIC.PRIMARY_KEY_B
2020-06-17 22:30:17 jdbc[3]: Plan       : plan cost 228.7
2020-06-17 22:30:17 jdbc[3]: 
/**/prep3.setLong(1, 1L);
2020-06-17 22:30:17 jdbc[3]: 
/**/ResultSet rs8 = prep3.executeQuery();
2020-06-17 22:30:17 jdbc[3]: 
/*SQL l:225*/select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=? {1: 1};
2020-06-17 22:30:17 jdbc[3]: 
/**/rs8.next();
2020-06-17 22:30:17 jdbc[3]: 
/**/rs8.close();
2020-06-17 22:30:17 jdbc[3]: 
/**/prep3.getMaxRows();
2020-06-17 22:30:17 jdbc[3]: 
/**/prep3.getQueryTimeout();
2020-06-17 22:30:17 jdbc[3]: Plan       : calculate cost for plan [SETTINGS:-7:org.h2.table.MetaTable@63ecb5ab]
2020-06-17 22:30:17 jdbc[3]: Plan       :   for table filter SETTINGS:-7:org.h2.table.MetaTable@63ecb5ab
2020-06-17 22:30:17 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 22:30:17 jdbc[3]: Plan       :   best plan item cost 9,900 index meta
2020-06-17 22:30:17 jdbc[3]: Plan       : plan cost 9,901
2020-06-17 22:30:17 jdbc[3]: 
/*SQL l:58 #:1*/SELECT VALUE FROM INFORMATION_SCHEMA.SETTINGS WHERE NAME=? {1: 'QUERY_TIMEOUT'};
2020-06-17 22:30:17 jdbc[3]: 
/**/prep3.close();
2020-06-17 22:30:17 jdbc[3]: 
/**/PreparedStatement prep4 = conn0.prepareStatement("insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?)", 1);;
2020-06-17 22:30:17 jdbc[3]: 
/**/prep4.setString(1, "ram@gmail.com");
2020-06-17 22:30:17 jdbc[3]: 
/**/prep4.setString(2, "Ram");
2020-06-17 22:30:17 jdbc[3]: 
/**/prep4.setString(3, "Thapa");
2020-06-17 22:30:17 jdbc[3]: 
/**/prep4.executeUpdate();
2020-06-17 22:30:17 lock: 1 exclusive write lock requesting for SYS 
2020-06-17 22:30:17 lock: 1 exclusive write lock added for SYS 
2020-06-17 22:30:17 lock: 1 exclusive write lock unlock SYS 
2020-06-17 22:30:17 lock: 3 shared read lock requesting for CUSTOMER_TBL 
2020-06-17 22:30:17 lock: 3 shared read lock ok CUSTOMER_TBL 
2020-06-17 22:30:17 jdbc[3]: 
/*SQL l:107 #:1 t:1*/insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?) {1: 'ram@gmail.com', 2: 'Ram', 3: 'Thapa'};
2020-06-17 22:30:17 jdbc[3]: 
/**/ResultSet rs9 = prep4.getGeneratedKeys();
2020-06-17 22:30:17 jdbc[3]: 
/**/rs9.next();
2020-06-17 22:30:17 jdbc[3]: 
/**/ResultSetMetaData rsMeta0 = rs9.getMetaData();
2020-06-17 22:30:17 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:30:17 jdbc[3]: 
/**/rsMeta0.getColumnCount();
2020-06-17 22:30:17 jdbc[3]: 
/**/rs9.getLong(1);
2020-06-17 22:30:17 jdbc[3]: 
/**/rs9.close();
2020-06-17 22:30:17 jdbc[3]: 
/**/prep4.getMaxRows();
2020-06-17 22:30:17 jdbc[3]: 
/**/prep4.getQueryTimeout();
2020-06-17 22:30:17 jdbc[3]: 
/**/prep4.close();
2020-06-17 22:30:17 jdbc[3]: 
/**/PreparedStatement prep5 = conn0.prepareStatement("select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=?");
2020-06-17 22:30:17 jdbc[3]: 
/**/prep5.setLong(1, 2L);
2020-06-17 22:30:17 jdbc[3]: 
/**/ResultSet rs10 = prep5.executeQuery();
2020-06-17 22:30:17 jdbc[3]: 
/*SQL l:225*/select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=? {1: 2};
2020-06-17 22:30:17 jdbc[3]: 
/**/rs10.next();
2020-06-17 22:30:17 jdbc[3]: 
/**/rs10.close();
2020-06-17 22:30:17 jdbc[3]: 
/**/prep5.getMaxRows();
2020-06-17 22:30:17 jdbc[3]: 
/**/prep5.getQueryTimeout();
2020-06-17 22:30:17 jdbc[3]: 
/**/prep5.close();
2020-06-17 22:30:17 jdbc[3]: 
/**/PreparedStatement prep6 = conn0.prepareStatement("insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?)", 1);;
2020-06-17 22:30:17 jdbc[3]: 
/**/prep6.setString(1, "hari@gmail.com");
2020-06-17 22:30:17 jdbc[3]: 
/**/prep6.setString(2, "Hari");
2020-06-17 22:30:17 jdbc[3]: 
/**/prep6.setString(3, "Neupane");
2020-06-17 22:30:17 jdbc[3]: 
/**/prep6.executeUpdate();
2020-06-17 22:30:17 jdbc[3]: 
/*SQL l:107 #:1*/insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?) {1: 'hari@gmail.com', 2: 'Hari', 3: 'Neupane'};
2020-06-17 22:30:17 jdbc[3]: 
/**/ResultSet rs11 = prep6.getGeneratedKeys();
2020-06-17 22:30:17 jdbc[3]: 
/**/rs11.next();
2020-06-17 22:30:17 jdbc[3]: 
/**/ResultSetMetaData rsMeta1 = rs11.getMetaData();
2020-06-17 22:30:17 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:30:17 jdbc[3]: 
/**/rsMeta1.getColumnCount();
2020-06-17 22:30:17 jdbc[3]: 
/**/rs11.getLong(1);
2020-06-17 22:30:17 jdbc[3]: 
/**/rs11.close();
2020-06-17 22:30:17 jdbc[3]: 
/**/prep6.getMaxRows();
2020-06-17 22:30:17 jdbc[3]: 
/**/prep6.getQueryTimeout();
2020-06-17 22:30:17 jdbc[3]: 
/**/prep6.close();
2020-06-17 22:30:17 jdbc[3]: 
/**/PreparedStatement prep7 = conn0.prepareStatement("select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=?");
2020-06-17 22:30:17 jdbc[3]: 
/**/prep7.setLong(1, 3L);
2020-06-17 22:30:17 jdbc[3]: 
/**/ResultSet rs12 = prep7.executeQuery();
2020-06-17 22:30:17 jdbc[3]: 
/*SQL l:225*/select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=? {1: 3};
2020-06-17 22:30:17 jdbc[3]: 
/**/rs12.next();
2020-06-17 22:30:17 jdbc[3]: 
/**/rs12.close();
2020-06-17 22:30:17 jdbc[3]: 
/**/prep7.getMaxRows();
2020-06-17 22:30:17 jdbc[3]: 
/**/prep7.getQueryTimeout();
2020-06-17 22:30:17 jdbc[3]: 
/**/prep7.close();
2020-06-17 22:30:17 jdbc[3]: 
/**/PreparedStatement prep8 = conn0.prepareStatement("insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?)", 1);;
2020-06-17 22:30:17 jdbc[3]: 
/**/prep8.setString(1, "ramila@gmail.com");
2020-06-17 22:30:17 jdbc[3]: 
/**/prep8.setString(2, "Ramila");
2020-06-17 22:30:17 jdbc[3]: 
/**/prep8.setString(3, "Karki");
2020-06-17 22:30:17 jdbc[3]: 
/**/prep8.executeUpdate();
2020-06-17 22:30:17 jdbc[3]: 
/*SQL l:107 #:1*/insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?) {1: 'ramila@gmail.com', 2: 'Ramila', 3: 'Karki'};
2020-06-17 22:30:17 jdbc[3]: 
/**/ResultSet rs13 = prep8.getGeneratedKeys();
2020-06-17 22:30:17 jdbc[3]: 
/**/rs13.next();
2020-06-17 22:30:17 jdbc[3]: 
/**/ResultSetMetaData rsMeta2 = rs13.getMetaData();
2020-06-17 22:30:17 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:30:17 jdbc[3]: 
/**/rsMeta2.getColumnCount();
2020-06-17 22:30:17 jdbc[3]: 
/**/rs13.getLong(1);
2020-06-17 22:30:17 jdbc[3]: 
/**/rs13.close();
2020-06-17 22:30:17 jdbc[3]: 
/**/prep8.getMaxRows();
2020-06-17 22:30:17 jdbc[3]: 
/**/prep8.getQueryTimeout();
2020-06-17 22:30:17 jdbc[3]: 
/**/prep8.close();
2020-06-17 22:30:17 jdbc[3]: 
/**/PreparedStatement prep9 = conn0.prepareStatement("select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=?");
2020-06-17 22:30:17 jdbc[3]: 
/**/prep9.setLong(1, 4L);
2020-06-17 22:30:17 jdbc[3]: 
/**/ResultSet rs14 = prep9.executeQuery();
2020-06-17 22:30:17 jdbc[3]: 
/*SQL l:225*/select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=? {1: 4};
2020-06-17 22:30:17 jdbc[3]: 
/**/rs14.next();
2020-06-17 22:30:17 jdbc[3]: 
/**/rs14.close();
2020-06-17 22:30:17 jdbc[3]: 
/**/prep9.getMaxRows();
2020-06-17 22:30:17 jdbc[3]: 
/**/prep9.getQueryTimeout();
2020-06-17 22:30:17 jdbc[3]: 
/**/prep9.close();
2020-06-17 22:30:17 jdbc[3]: 
/**/PreparedStatement prep10 = conn0.prepareStatement("insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?)", 1);;
2020-06-17 22:30:17 jdbc[3]: 
/**/prep10.setString(1, "david@gmail.com");
2020-06-17 22:30:17 jdbc[3]: 
/**/prep10.setString(2, "David");
2020-06-17 22:30:17 jdbc[3]: 
/**/prep10.setString(3, "Yonge");
2020-06-17 22:30:17 jdbc[3]: 
/**/prep10.executeUpdate();
2020-06-17 22:30:17 jdbc[3]: 
/*SQL l:107 #:1*/insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?) {1: 'david@gmail.com', 2: 'David', 3: 'Yonge'};
2020-06-17 22:30:17 jdbc[3]: 
/**/ResultSet rs15 = prep10.getGeneratedKeys();
2020-06-17 22:30:17 jdbc[3]: 
/**/rs15.next();
2020-06-17 22:30:17 jdbc[3]: 
/**/ResultSetMetaData rsMeta3 = rs15.getMetaData();
2020-06-17 22:30:17 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:30:17 jdbc[3]: 
/**/rsMeta3.getColumnCount();
2020-06-17 22:30:17 jdbc[3]: 
/**/rs15.getLong(1);
2020-06-17 22:30:17 jdbc[3]: 
/**/rs15.close();
2020-06-17 22:30:17 jdbc[3]: 
/**/prep10.getMaxRows();
2020-06-17 22:30:17 jdbc[3]: 
/**/prep10.getQueryTimeout();
2020-06-17 22:30:17 jdbc[3]: 
/**/prep10.close();
2020-06-17 22:30:17 jdbc[3]: 
/**/PreparedStatement prep11 = conn0.prepareStatement("select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=?");
2020-06-17 22:30:17 jdbc[3]: 
/**/prep11.setLong(1, 5L);
2020-06-17 22:30:17 jdbc[3]: 
/**/ResultSet rs16 = prep11.executeQuery();
2020-06-17 22:30:17 jdbc[3]: 
/*SQL l:225*/select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=? {1: 5};
2020-06-17 22:30:17 jdbc[3]: 
/**/rs16.next();
2020-06-17 22:30:17 jdbc[3]: 
/**/rs16.close();
2020-06-17 22:30:17 jdbc[3]: 
/**/prep11.getMaxRows();
2020-06-17 22:30:17 jdbc[3]: 
/**/prep11.getQueryTimeout();
2020-06-17 22:30:17 jdbc[3]: 
/**/prep11.close();
2020-06-17 22:30:17 jdbc[3]: 
/**/PreparedStatement prep12 = conn0.prepareStatement("insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?)", 1);;
2020-06-17 22:30:17 jdbc[3]: 
/**/prep12.setString(1, "peter@gmail.com");
2020-06-17 22:30:17 jdbc[3]: 
/**/prep12.setString(2, "Peter");
2020-06-17 22:30:17 jdbc[3]: 
/**/prep12.setString(3, "Parker");
2020-06-17 22:30:17 jdbc[3]: 
/**/prep12.executeUpdate();
2020-06-17 22:30:17 jdbc[3]: 
/*SQL l:107 #:1*/insert into customer_tbl (id, customer_email, customer_firstname, customer_lastname) values (null, ?, ?, ?) {1: 'peter@gmail.com', 2: 'Peter', 3: 'Parker'};
2020-06-17 22:30:17 jdbc[3]: 
/**/ResultSet rs17 = prep12.getGeneratedKeys();
2020-06-17 22:30:17 jdbc[3]: 
/**/rs17.next();
2020-06-17 22:30:17 jdbc[3]: 
/**/ResultSetMetaData rsMeta4 = rs17.getMetaData();
2020-06-17 22:30:17 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:30:17 jdbc[3]: 
/**/rsMeta4.getColumnCount();
2020-06-17 22:30:17 jdbc[3]: 
/**/rs17.getLong(1);
2020-06-17 22:30:17 jdbc[3]: 
/**/rs17.close();
2020-06-17 22:30:17 jdbc[3]: 
/**/prep12.getMaxRows();
2020-06-17 22:30:17 jdbc[3]: 
/**/prep12.getQueryTimeout();
2020-06-17 22:30:17 jdbc[3]: 
/**/prep12.close();
2020-06-17 22:30:17 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:30:17 lock: 3 shared read lock unlock CUSTOMER_TBL 
2020-06-17 22:30:17 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:30:17 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:30:17 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:30:17 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:30:17 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:30:17 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:30:17 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:30:20 jdbc[3]: 
/**/PreparedStatement prep13 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:30:20 jdbc[3]: 
/**/prep13.setString(1, "CustomerMS");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep13.setString(2, "INFO");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep13.setNull(3, 12);
2020-06-17 22:30:20 jdbc[3]: 
/**/prep13.setString(4, "/api/customers/2");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep13.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep13.setString(6, "835c44c5407a860f");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep13.setString(7, "2020-06-17T20:43:48.395Z");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep13.setString(8, "835c44c5407a860f");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep13.executeUpdate();
2020-06-17 22:30:20 lock: 1 exclusive write lock requesting for SYS 
2020-06-17 22:30:20 lock: 1 exclusive write lock added for SYS 
2020-06-17 22:30:20 lock: 1 exclusive write lock unlock SYS 
2020-06-17 22:30:20 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:30:20 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:30:20 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/2', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: '835c44c5407a860f', 7: '2020-06-17T20:43:48.395Z', 8: '835c44c5407a860f'};
2020-06-17 22:30:20 jdbc[3]: 
/**/ResultSet rs18 = prep13.getGeneratedKeys();
2020-06-17 22:30:20 jdbc[3]: 
/**/rs18.next();
2020-06-17 22:30:20 jdbc[3]: 
/**/ResultSetMetaData rsMeta5 = rs18.getMetaData();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:30:20 jdbc[3]: 
/**/rsMeta5.getColumnCount();
2020-06-17 22:30:20 jdbc[3]: 
/**/rs18.getLong(1);
2020-06-17 22:30:20 jdbc[3]: 
/**/rs18.close();
2020-06-17 22:30:20 jdbc[3]: 
/**/prep13.getMaxRows();
2020-06-17 22:30:20 jdbc[3]: 
/**/prep13.getQueryTimeout();
2020-06-17 22:30:20 jdbc[3]: 
/**/prep13.close();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:30:20 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:30:20 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:30:20 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:30:20 jdbc[3]: 
/**/PreparedStatement prep14 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:30:20 jdbc[3]: 
/**/prep14.setString(1, "CustomerMS");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep14.setString(2, "INFO");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep14.setNull(3, 12);
2020-06-17 22:30:20 jdbc[3]: 
/**/prep14.setString(4, "/api/customers/2");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep14.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep14.setString(6, "ac4762af3b603bf9");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep14.setString(7, "2020-06-18T02:47:02.751Z");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep14.setString(8, "ac4762af3b603bf9");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep14.executeUpdate();
2020-06-17 22:30:20 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:30:20 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:30:20 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/2', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: 'ac4762af3b603bf9', 7: '2020-06-18T02:47:02.751Z', 8: 'ac4762af3b603bf9'};
2020-06-17 22:30:20 jdbc[3]: 
/**/ResultSet rs19 = prep14.getGeneratedKeys();
2020-06-17 22:30:20 jdbc[3]: 
/**/rs19.next();
2020-06-17 22:30:20 jdbc[3]: 
/**/ResultSetMetaData rsMeta6 = rs19.getMetaData();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:30:20 jdbc[3]: 
/**/rsMeta6.getColumnCount();
2020-06-17 22:30:20 jdbc[3]: 
/**/rs19.getLong(1);
2020-06-17 22:30:20 jdbc[3]: 
/**/rs19.close();
2020-06-17 22:30:20 jdbc[3]: 
/**/prep14.getMaxRows();
2020-06-17 22:30:20 jdbc[3]: 
/**/prep14.getQueryTimeout();
2020-06-17 22:30:20 jdbc[3]: 
/**/prep14.close();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:30:20 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:30:20 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:30:20 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:30:20 jdbc[3]: 
/**/PreparedStatement prep15 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:30:20 jdbc[3]: 
/**/prep15.setString(1, "CustomerMS");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep15.setString(2, "INFO");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep15.setNull(3, 12);
2020-06-17 22:30:20 jdbc[3]: 
/**/prep15.setString(4, "/api/customers/3");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep15.setString(5, "Customer(id=3, firstName=Ramila, lastName=Karki, email=ramila@gmail.com)");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep15.setString(6, "cda1008eb6f59b1a");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep15.setString(7, "2020-06-18T02:47:23.391Z");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep15.setString(8, "cda1008eb6f59b1a");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep15.executeUpdate();
2020-06-17 22:30:20 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:30:20 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:30:20 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/3', 5: 'Customer(id=3, firstName=Ramila, lastName=Karki, email=ramila@gmail.com)', 6: 'cda1008eb6f59b1a', 7: '2020-06-18T02:47:23.391Z', 8: 'cda1008eb6f59b1a'};
2020-06-17 22:30:20 jdbc[3]: 
/**/ResultSet rs20 = prep15.getGeneratedKeys();
2020-06-17 22:30:20 jdbc[3]: 
/**/rs20.next();
2020-06-17 22:30:20 jdbc[3]: 
/**/ResultSetMetaData rsMeta7 = rs20.getMetaData();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:30:20 jdbc[3]: 
/**/rsMeta7.getColumnCount();
2020-06-17 22:30:20 jdbc[3]: 
/**/rs20.getLong(1);
2020-06-17 22:30:20 jdbc[3]: 
/**/rs20.close();
2020-06-17 22:30:20 jdbc[3]: 
/**/prep15.getMaxRows();
2020-06-17 22:30:20 jdbc[3]: 
/**/prep15.getQueryTimeout();
2020-06-17 22:30:20 jdbc[3]: 
/**/prep15.close();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:30:20 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:30:20 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:30:20 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:30:20 jdbc[3]: 
/**/PreparedStatement prep16 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:30:20 jdbc[3]: 
/**/prep16.setString(1, "CustomerMS");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep16.setString(2, "INFO");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep16.setNull(3, 12);
2020-06-17 22:30:20 jdbc[3]: 
/**/prep16.setString(4, "/api/customers/4");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep16.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep16.setString(6, "93222afc6f639d33");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep16.setString(7, "2020-06-18T02:47:33.067Z");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep16.setString(8, "93222afc6f639d33");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep16.executeUpdate();
2020-06-17 22:30:20 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:30:20 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:30:20 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/4', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: '93222afc6f639d33', 7: '2020-06-18T02:47:33.067Z', 8: '93222afc6f639d33'};
2020-06-17 22:30:20 jdbc[3]: 
/**/ResultSet rs21 = prep16.getGeneratedKeys();
2020-06-17 22:30:20 jdbc[3]: 
/**/rs21.next();
2020-06-17 22:30:20 jdbc[3]: 
/**/ResultSetMetaData rsMeta8 = rs21.getMetaData();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:30:20 jdbc[3]: 
/**/rsMeta8.getColumnCount();
2020-06-17 22:30:20 jdbc[3]: 
/**/rs21.getLong(1);
2020-06-17 22:30:20 jdbc[3]: 
/**/rs21.close();
2020-06-17 22:30:20 jdbc[3]: 
/**/prep16.getMaxRows();
2020-06-17 22:30:20 jdbc[3]: 
/**/prep16.getQueryTimeout();
2020-06-17 22:30:20 jdbc[3]: 
/**/prep16.close();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:30:20 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:30:20 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:30:20 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:30:20 jdbc[3]: 
/**/PreparedStatement prep17 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:30:20 jdbc[3]: 
/**/prep17.setString(1, "CustomerMS");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep17.setString(2, "INFO");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep17.setNull(3, 12);
2020-06-17 22:30:20 jdbc[3]: 
/**/prep17.setString(4, "/api/customers/4");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep17.setString(5, "Customer(id=4, firstName=David, lastName=Yonge, email=david@gmail.com)");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep17.setString(6, "93222afc6f639d33");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep17.setString(7, "2020-06-18T02:47:33.071Z");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep17.setString(8, "93222afc6f639d33");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep17.executeUpdate();
2020-06-17 22:30:20 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:30:20 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:30:20 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/4', 5: 'Customer(id=4, firstName=David, lastName=Yonge, email=david@gmail.com)', 6: '93222afc6f639d33', 7: '2020-06-18T02:47:33.071Z', 8: '93222afc6f639d33'};
2020-06-17 22:30:20 jdbc[3]: 
/**/ResultSet rs22 = prep17.getGeneratedKeys();
2020-06-17 22:30:20 jdbc[3]: 
/**/rs22.next();
2020-06-17 22:30:20 jdbc[3]: 
/**/ResultSetMetaData rsMeta9 = rs22.getMetaData();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:30:20 jdbc[3]: 
/**/rsMeta9.getColumnCount();
2020-06-17 22:30:20 jdbc[3]: 
/**/rs22.getLong(1);
2020-06-17 22:30:20 jdbc[3]: 
/**/rs22.close();
2020-06-17 22:30:20 jdbc[3]: 
/**/prep17.getMaxRows();
2020-06-17 22:30:20 jdbc[3]: 
/**/prep17.getQueryTimeout();
2020-06-17 22:30:20 jdbc[3]: 
/**/prep17.close();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:30:20 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:30:20 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:30:20 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:30:20 jdbc[3]: 
/**/PreparedStatement prep18 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:30:20 jdbc[3]: 
/**/prep18.setString(1, "CustomerMS");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep18.setString(2, "INFO");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep18.setNull(3, 12);
2020-06-17 22:30:20 jdbc[3]: 
/**/prep18.setString(4, "/api/customers/5");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep18.setString(5, "Customer(id=5, firstName=Peter, lastName=Parker, email=peter@gmail.com)");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep18.setString(6, "66f1f3cca2518457");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep18.setString(7, "2020-06-18T02:48:04.745Z");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep18.setString(8, "66f1f3cca2518457");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep18.executeUpdate();
2020-06-17 22:30:20 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:30:20 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:30:20 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/5', 5: 'Customer(id=5, firstName=Peter, lastName=Parker, email=peter@gmail.com)', 6: '66f1f3cca2518457', 7: '2020-06-18T02:48:04.745Z', 8: '66f1f3cca2518457'};
2020-06-17 22:30:20 jdbc[3]: 
/**/ResultSet rs23 = prep18.getGeneratedKeys();
2020-06-17 22:30:20 jdbc[3]: 
/**/rs23.next();
2020-06-17 22:30:20 jdbc[3]: 
/**/ResultSetMetaData rsMeta10 = rs23.getMetaData();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:30:20 jdbc[3]: 
/**/rsMeta10.getColumnCount();
2020-06-17 22:30:20 jdbc[3]: 
/**/rs23.getLong(1);
2020-06-17 22:30:20 jdbc[3]: 
/**/rs23.close();
2020-06-17 22:30:20 jdbc[3]: 
/**/prep18.getMaxRows();
2020-06-17 22:30:20 jdbc[3]: 
/**/prep18.getQueryTimeout();
2020-06-17 22:30:20 jdbc[3]: 
/**/prep18.close();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:30:20 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:30:20 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:30:20 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:30:20 jdbc[3]: 
/**/PreparedStatement prep19 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:30:20 jdbc[3]: 
/**/prep19.setString(1, "CustomerMS");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep19.setString(2, "INFO");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep19.setNull(3, 12);
2020-06-17 22:30:20 jdbc[3]: 
/**/prep19.setString(4, "/api/customers/6");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep19.setString(5, "Customer(id=null, firstName=null, lastName=null, email=null)");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep19.setString(6, "e4ff784815173d28");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep19.setString(7, "2020-06-18T02:48:16.076Z");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep19.setString(8, "e4ff784815173d28");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep19.executeUpdate();
2020-06-17 22:30:20 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:30:20 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:30:20 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/6', 5: 'Customer(id=null, firstName=null, lastName=null, email=null)', 6: 'e4ff784815173d28', 7: '2020-06-18T02:48:16.076Z', 8: 'e4ff784815173d28'};
2020-06-17 22:30:20 jdbc[3]: 
/**/ResultSet rs24 = prep19.getGeneratedKeys();
2020-06-17 22:30:20 jdbc[3]: 
/**/rs24.next();
2020-06-17 22:30:20 jdbc[3]: 
/**/ResultSetMetaData rsMeta11 = rs24.getMetaData();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:30:20 jdbc[3]: 
/**/rsMeta11.getColumnCount();
2020-06-17 22:30:20 jdbc[3]: 
/**/rs24.getLong(1);
2020-06-17 22:30:20 jdbc[3]: 
/**/rs24.close();
2020-06-17 22:30:20 jdbc[3]: 
/**/prep19.getMaxRows();
2020-06-17 22:30:20 jdbc[3]: 
/**/prep19.getQueryTimeout();
2020-06-17 22:30:20 jdbc[3]: 
/**/prep19.close();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:30:20 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:30:20 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:30:20 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:30:20 jdbc[3]: 
/**/PreparedStatement prep20 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:30:20 jdbc[3]: 
/**/prep20.setString(1, "CustomerMS");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep20.setString(2, "INFO");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep20.setNull(3, 12);
2020-06-17 22:30:20 jdbc[3]: 
/**/prep20.setString(4, "/api/customers/2");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep20.setString(5, "Customer(id=3, firstName=Ramila, lastName=Karki, email=ramila@gmail.com)");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep20.setString(6, "543f683d787432fc");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep20.setString(7, "2020-06-18T02:48:30.897Z");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep20.setString(8, "543f683d787432fc");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep20.executeUpdate();
2020-06-17 22:30:20 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:30:20 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:30:20 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/2', 5: 'Customer(id=3, firstName=Ramila, lastName=Karki, email=ramila@gmail.com)', 6: '543f683d787432fc', 7: '2020-06-18T02:48:30.897Z', 8: '543f683d787432fc'};
2020-06-17 22:30:20 jdbc[3]: 
/**/ResultSet rs25 = prep20.getGeneratedKeys();
2020-06-17 22:30:20 jdbc[3]: 
/**/rs25.next();
2020-06-17 22:30:20 jdbc[3]: 
/**/ResultSetMetaData rsMeta12 = rs25.getMetaData();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:30:20 jdbc[3]: 
/**/rsMeta12.getColumnCount();
2020-06-17 22:30:20 jdbc[3]: 
/**/rs25.getLong(1);
2020-06-17 22:30:20 jdbc[3]: 
/**/rs25.close();
2020-06-17 22:30:20 jdbc[3]: 
/**/prep20.getMaxRows();
2020-06-17 22:30:20 jdbc[3]: 
/**/prep20.getQueryTimeout();
2020-06-17 22:30:20 jdbc[3]: 
/**/prep20.close();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:30:20 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:30:20 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:30:20 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:30:20 jdbc[3]: 
/**/PreparedStatement prep21 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:30:20 jdbc[3]: 
/**/prep21.setString(1, "CustomerMS");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep21.setString(2, "INFO");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep21.setNull(3, 12);
2020-06-17 22:30:20 jdbc[3]: 
/**/prep21.setString(4, "/api/customers/2");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep21.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep21.setString(6, "543f683d787432fc");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep21.setString(7, "2020-06-18T02:48:30.901Z");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep21.setString(8, "543f683d787432fc");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep21.executeUpdate();
2020-06-17 22:30:20 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:30:20 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:30:20 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/2', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: '543f683d787432fc', 7: '2020-06-18T02:48:30.901Z', 8: '543f683d787432fc'};
2020-06-17 22:30:20 jdbc[3]: 
/**/ResultSet rs26 = prep21.getGeneratedKeys();
2020-06-17 22:30:20 jdbc[3]: 
/**/rs26.next();
2020-06-17 22:30:20 jdbc[3]: 
/**/ResultSetMetaData rsMeta13 = rs26.getMetaData();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:30:20 jdbc[3]: 
/**/rsMeta13.getColumnCount();
2020-06-17 22:30:20 jdbc[3]: 
/**/rs26.getLong(1);
2020-06-17 22:30:20 jdbc[3]: 
/**/rs26.close();
2020-06-17 22:30:20 jdbc[3]: 
/**/prep21.getMaxRows();
2020-06-17 22:30:20 jdbc[3]: 
/**/prep21.getQueryTimeout();
2020-06-17 22:30:20 jdbc[3]: 
/**/prep21.close();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:30:20 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:30:20 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:30:20 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:30:20 jdbc[3]: 
/**/PreparedStatement prep22 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:30:20 jdbc[3]: 
/**/prep22.setString(1, "CustomerMS");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep22.setString(2, "INFO");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep22.setNull(3, 12);
2020-06-17 22:30:20 jdbc[3]: 
/**/prep22.setString(4, "/api/customers/2");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep22.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep22.setString(6, "dd81605f39be9222");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep22.setString(7, "2020-06-18T02:53:16.435Z");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep22.setString(8, "dd81605f39be9222");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep22.executeUpdate();
2020-06-17 22:30:20 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:30:20 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:30:20 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/2', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: 'dd81605f39be9222', 7: '2020-06-18T02:53:16.435Z', 8: 'dd81605f39be9222'};
2020-06-17 22:30:20 jdbc[3]: 
/**/ResultSet rs27 = prep22.getGeneratedKeys();
2020-06-17 22:30:20 jdbc[3]: 
/**/rs27.next();
2020-06-17 22:30:20 jdbc[3]: 
/**/ResultSetMetaData rsMeta14 = rs27.getMetaData();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:30:20 jdbc[3]: 
/**/rsMeta14.getColumnCount();
2020-06-17 22:30:20 jdbc[3]: 
/**/rs27.getLong(1);
2020-06-17 22:30:20 jdbc[3]: 
/**/rs27.close();
2020-06-17 22:30:20 jdbc[3]: 
/**/prep22.getMaxRows();
2020-06-17 22:30:20 jdbc[3]: 
/**/prep22.getQueryTimeout();
2020-06-17 22:30:20 jdbc[3]: 
/**/prep22.close();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:30:20 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:30:20 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:30:20 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:30:20 jdbc[3]: 
/**/PreparedStatement prep23 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:30:20 jdbc[3]: 
/**/prep23.setString(1, "CustomerMS");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep23.setString(2, "INFO");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep23.setNull(3, 12);
2020-06-17 22:30:20 jdbc[3]: 
/**/prep23.setString(4, "/api/customers/2");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep23.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep23.setString(6, "34ab3d102fb49096");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep23.setString(7, "2020-06-18T02:53:23.797Z");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep23.setString(8, "34ab3d102fb49096");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep23.executeUpdate();
2020-06-17 22:30:20 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:30:20 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:30:20 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/2', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: '34ab3d102fb49096', 7: '2020-06-18T02:53:23.797Z', 8: '34ab3d102fb49096'};
2020-06-17 22:30:20 jdbc[3]: 
/**/ResultSet rs28 = prep23.getGeneratedKeys();
2020-06-17 22:30:20 jdbc[3]: 
/**/rs28.next();
2020-06-17 22:30:20 jdbc[3]: 
/**/ResultSetMetaData rsMeta15 = rs28.getMetaData();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:30:20 jdbc[3]: 
/**/rsMeta15.getColumnCount();
2020-06-17 22:30:20 jdbc[3]: 
/**/rs28.getLong(1);
2020-06-17 22:30:20 jdbc[3]: 
/**/rs28.close();
2020-06-17 22:30:20 jdbc[3]: 
/**/prep23.getMaxRows();
2020-06-17 22:30:20 jdbc[3]: 
/**/prep23.getQueryTimeout();
2020-06-17 22:30:20 jdbc[3]: 
/**/prep23.close();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:30:20 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:30:20 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:30:20 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:30:20 jdbc[3]: 
/**/PreparedStatement prep24 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:30:20 jdbc[3]: 
/**/prep24.setString(1, "CustomerMS");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep24.setString(2, "INFO");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep24.setNull(3, 12);
2020-06-17 22:30:20 jdbc[3]: 
/**/prep24.setString(4, "/api/customers/2");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep24.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep24.setString(6, "19d2e4d621c50722");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep24.setString(7, "2020-06-18T02:53:35.082Z");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep24.setString(8, "19d2e4d621c50722");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep24.executeUpdate();
2020-06-17 22:30:20 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:30:20 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:30:20 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/2', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: '19d2e4d621c50722', 7: '2020-06-18T02:53:35.082Z', 8: '19d2e4d621c50722'};
2020-06-17 22:30:20 jdbc[3]: 
/**/ResultSet rs29 = prep24.getGeneratedKeys();
2020-06-17 22:30:20 jdbc[3]: 
/**/rs29.next();
2020-06-17 22:30:20 jdbc[3]: 
/**/ResultSetMetaData rsMeta16 = rs29.getMetaData();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:30:20 jdbc[3]: 
/**/rsMeta16.getColumnCount();
2020-06-17 22:30:20 jdbc[3]: 
/**/rs29.getLong(1);
2020-06-17 22:30:20 jdbc[3]: 
/**/rs29.close();
2020-06-17 22:30:20 jdbc[3]: 
/**/prep24.getMaxRows();
2020-06-17 22:30:20 jdbc[3]: 
/**/prep24.getQueryTimeout();
2020-06-17 22:30:20 jdbc[3]: 
/**/prep24.close();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:30:20 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:30:20 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:30:20 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:30:20 jdbc[3]: 
/**/PreparedStatement prep25 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:30:20 jdbc[3]: 
/**/prep25.setString(1, "CustomerMS");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep25.setString(2, "INFO");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep25.setNull(3, 12);
2020-06-17 22:30:20 jdbc[3]: 
/**/prep25.setString(4, "/api/customers/3");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep25.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep25.setString(6, "ab696d894d92b334");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep25.setString(7, "2020-06-18T02:53:42.252Z");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep25.setString(8, "ab696d894d92b334");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep25.executeUpdate();
2020-06-17 22:30:20 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:30:20 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:30:20 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/3', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: 'ab696d894d92b334', 7: '2020-06-18T02:53:42.252Z', 8: 'ab696d894d92b334'};
2020-06-17 22:30:20 jdbc[3]: 
/**/ResultSet rs30 = prep25.getGeneratedKeys();
2020-06-17 22:30:20 jdbc[3]: 
/**/rs30.next();
2020-06-17 22:30:20 jdbc[3]: 
/**/ResultSetMetaData rsMeta17 = rs30.getMetaData();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:30:20 jdbc[3]: 
/**/rsMeta17.getColumnCount();
2020-06-17 22:30:20 jdbc[3]: 
/**/rs30.getLong(1);
2020-06-17 22:30:20 jdbc[3]: 
/**/rs30.close();
2020-06-17 22:30:20 jdbc[3]: 
/**/prep25.getMaxRows();
2020-06-17 22:30:20 jdbc[3]: 
/**/prep25.getQueryTimeout();
2020-06-17 22:30:20 jdbc[3]: 
/**/prep25.close();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:30:20 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:30:20 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:30:20 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:30:20 jdbc[3]: 
/**/PreparedStatement prep26 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:30:20 jdbc[3]: 
/**/prep26.setString(1, "CustomerMS");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep26.setString(2, "INFO");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep26.setNull(3, 12);
2020-06-17 22:30:20 jdbc[3]: 
/**/prep26.setString(4, "/api/customers/3");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep26.setString(5, "Customer(id=3, firstName=Ramila, lastName=Karki, email=ramila@gmail.com)");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep26.setString(6, "ab696d894d92b334");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep26.setString(7, "2020-06-18T02:53:42.257Z");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep26.setString(8, "ab696d894d92b334");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep26.executeUpdate();
2020-06-17 22:30:20 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:30:20 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:30:20 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/3', 5: 'Customer(id=3, firstName=Ramila, lastName=Karki, email=ramila@gmail.com)', 6: 'ab696d894d92b334', 7: '2020-06-18T02:53:42.257Z', 8: 'ab696d894d92b334'};
2020-06-17 22:30:20 jdbc[3]: 
/**/ResultSet rs31 = prep26.getGeneratedKeys();
2020-06-17 22:30:20 jdbc[3]: 
/**/rs31.next();
2020-06-17 22:30:20 jdbc[3]: 
/**/ResultSetMetaData rsMeta18 = rs31.getMetaData();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:30:20 jdbc[3]: 
/**/rsMeta18.getColumnCount();
2020-06-17 22:30:20 jdbc[3]: 
/**/rs31.getLong(1);
2020-06-17 22:30:20 jdbc[3]: 
/**/rs31.close();
2020-06-17 22:30:20 jdbc[3]: 
/**/prep26.getMaxRows();
2020-06-17 22:30:20 jdbc[3]: 
/**/prep26.getQueryTimeout();
2020-06-17 22:30:20 jdbc[3]: 
/**/prep26.close();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:30:20 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:30:20 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:30:20 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:30:20 jdbc[3]: 
/**/PreparedStatement prep27 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:30:20 jdbc[3]: 
/**/prep27.setString(1, "CustomerMS");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep27.setString(2, "INFO");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep27.setNull(3, 12);
2020-06-17 22:30:20 jdbc[3]: 
/**/prep27.setString(4, "/api/customers/4");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep27.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep27.setString(6, "cc0b9a3859b08cfa");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep27.setString(7, "2020-06-18T02:53:58.878Z");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep27.setString(8, "cc0b9a3859b08cfa");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep27.executeUpdate();
2020-06-17 22:30:20 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:30:20 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:30:20 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/4', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: 'cc0b9a3859b08cfa', 7: '2020-06-18T02:53:58.878Z', 8: 'cc0b9a3859b08cfa'};
2020-06-17 22:30:20 jdbc[3]: 
/**/ResultSet rs32 = prep27.getGeneratedKeys();
2020-06-17 22:30:20 jdbc[3]: 
/**/rs32.next();
2020-06-17 22:30:20 jdbc[3]: 
/**/ResultSetMetaData rsMeta19 = rs32.getMetaData();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:30:20 jdbc[3]: 
/**/rsMeta19.getColumnCount();
2020-06-17 22:30:20 jdbc[3]: 
/**/rs32.getLong(1);
2020-06-17 22:30:20 jdbc[3]: 
/**/rs32.close();
2020-06-17 22:30:20 jdbc[3]: 
/**/prep27.getMaxRows();
2020-06-17 22:30:20 jdbc[3]: 
/**/prep27.getQueryTimeout();
2020-06-17 22:30:20 jdbc[3]: 
/**/prep27.close();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:30:20 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:30:20 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:30:20 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:30:20 jdbc[3]: 
/**/PreparedStatement prep28 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:30:20 jdbc[3]: 
/**/prep28.setString(1, "CustomerMS");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep28.setString(2, "INFO");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep28.setNull(3, 12);
2020-06-17 22:30:20 jdbc[3]: 
/**/prep28.setString(4, "/api/customers/4");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep28.setString(5, "Customer(id=4, firstName=David, lastName=Yonge, email=david@gmail.com)");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep28.setString(6, "cc0b9a3859b08cfa");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep28.setString(7, "2020-06-18T02:53:58.882Z");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep28.setString(8, "cc0b9a3859b08cfa");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep28.executeUpdate();
2020-06-17 22:30:20 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:30:20 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:30:20 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/4', 5: 'Customer(id=4, firstName=David, lastName=Yonge, email=david@gmail.com)', 6: 'cc0b9a3859b08cfa', 7: '2020-06-18T02:53:58.882Z', 8: 'cc0b9a3859b08cfa'};
2020-06-17 22:30:20 jdbc[3]: 
/**/ResultSet rs33 = prep28.getGeneratedKeys();
2020-06-17 22:30:20 jdbc[3]: 
/**/rs33.next();
2020-06-17 22:30:20 jdbc[3]: 
/**/ResultSetMetaData rsMeta20 = rs33.getMetaData();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:30:20 jdbc[3]: 
/**/rsMeta20.getColumnCount();
2020-06-17 22:30:20 jdbc[3]: 
/**/rs33.getLong(1);
2020-06-17 22:30:20 jdbc[3]: 
/**/rs33.close();
2020-06-17 22:30:20 jdbc[3]: 
/**/prep28.getMaxRows();
2020-06-17 22:30:20 jdbc[3]: 
/**/prep28.getQueryTimeout();
2020-06-17 22:30:20 jdbc[3]: 
/**/prep28.close();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:30:20 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:30:20 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:30:20 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:30:20 jdbc[3]: 
/**/PreparedStatement prep29 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:30:20 jdbc[3]: 
/**/prep29.setString(1, "CustomerMS");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep29.setString(2, "INFO");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep29.setNull(3, 12);
2020-06-17 22:30:20 jdbc[3]: 
/**/prep29.setString(4, "/api/customers/2");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep29.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep29.setString(6, "06670eac012d24ee");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep29.setString(7, "2020-06-18T02:55:56.769Z");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep29.setString(8, "06670eac012d24ee");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep29.executeUpdate();
2020-06-17 22:30:20 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:30:20 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:30:20 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/2', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: '06670eac012d24ee', 7: '2020-06-18T02:55:56.769Z', 8: '06670eac012d24ee'};
2020-06-17 22:30:20 jdbc[3]: 
/**/ResultSet rs34 = prep29.getGeneratedKeys();
2020-06-17 22:30:20 jdbc[3]: 
/**/rs34.next();
2020-06-17 22:30:20 jdbc[3]: 
/**/ResultSetMetaData rsMeta21 = rs34.getMetaData();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:30:20 jdbc[3]: 
/**/rsMeta21.getColumnCount();
2020-06-17 22:30:20 jdbc[3]: 
/**/rs34.getLong(1);
2020-06-17 22:30:20 jdbc[3]: 
/**/rs34.close();
2020-06-17 22:30:20 jdbc[3]: 
/**/prep29.getMaxRows();
2020-06-17 22:30:20 jdbc[3]: 
/**/prep29.getQueryTimeout();
2020-06-17 22:30:20 jdbc[3]: 
/**/prep29.close();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:30:20 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:30:20 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:30:20 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:30:20 jdbc[3]: 
/**/PreparedStatement prep30 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:30:20 jdbc[3]: 
/**/prep30.setString(1, "CustomerMS");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep30.setString(2, "INFO");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep30.setNull(3, 12);
2020-06-17 22:30:20 jdbc[3]: 
/**/prep30.setString(4, "/api/customers/3");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep30.setString(5, "Customer(id=3, firstName=Ramila, lastName=Karki, email=ramila@gmail.com)");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep30.setString(6, "8f964dcc036a839b");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep30.setString(7, "2020-06-18T02:56:04.268Z");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep30.setString(8, "8f964dcc036a839b");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep30.executeUpdate();
2020-06-17 22:30:20 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:30:20 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:30:20 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/3', 5: 'Customer(id=3, firstName=Ramila, lastName=Karki, email=ramila@gmail.com)', 6: '8f964dcc036a839b', 7: '2020-06-18T02:56:04.268Z', 8: '8f964dcc036a839b'};
2020-06-17 22:30:20 jdbc[3]: 
/**/ResultSet rs35 = prep30.getGeneratedKeys();
2020-06-17 22:30:20 jdbc[3]: 
/**/rs35.next();
2020-06-17 22:30:20 jdbc[3]: 
/**/ResultSetMetaData rsMeta22 = rs35.getMetaData();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:30:20 jdbc[3]: 
/**/rsMeta22.getColumnCount();
2020-06-17 22:30:20 jdbc[3]: 
/**/rs35.getLong(1);
2020-06-17 22:30:20 jdbc[3]: 
/**/rs35.close();
2020-06-17 22:30:20 jdbc[3]: 
/**/prep30.getMaxRows();
2020-06-17 22:30:20 jdbc[3]: 
/**/prep30.getQueryTimeout();
2020-06-17 22:30:20 jdbc[3]: 
/**/prep30.close();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:30:20 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:30:20 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:30:20 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:30:20 jdbc[3]: 
/**/PreparedStatement prep31 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:30:20 jdbc[3]: 
/**/prep31.setString(1, "CustomerMS");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep31.setString(2, "INFO");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep31.setNull(3, 12);
2020-06-17 22:30:20 jdbc[3]: 
/**/prep31.setString(4, "/api/customers/2");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep31.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep31.setString(6, "93153296296c724e");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep31.setString(7, "2020-06-18T02:56:12.997Z");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep31.setString(8, "93153296296c724e");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep31.executeUpdate();
2020-06-17 22:30:20 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:30:20 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:30:20 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/2', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: '93153296296c724e', 7: '2020-06-18T02:56:12.997Z', 8: '93153296296c724e'};
2020-06-17 22:30:20 jdbc[3]: 
/**/ResultSet rs36 = prep31.getGeneratedKeys();
2020-06-17 22:30:20 jdbc[3]: 
/**/rs36.next();
2020-06-17 22:30:20 jdbc[3]: 
/**/ResultSetMetaData rsMeta23 = rs36.getMetaData();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:30:20 jdbc[3]: 
/**/rsMeta23.getColumnCount();
2020-06-17 22:30:20 jdbc[3]: 
/**/rs36.getLong(1);
2020-06-17 22:30:20 jdbc[3]: 
/**/rs36.close();
2020-06-17 22:30:20 jdbc[3]: 
/**/prep31.getMaxRows();
2020-06-17 22:30:20 jdbc[3]: 
/**/prep31.getQueryTimeout();
2020-06-17 22:30:20 jdbc[3]: 
/**/prep31.close();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:30:20 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:30:20 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:30:20 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:30:20 jdbc[3]: 
/**/PreparedStatement prep32 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:30:20 jdbc[3]: 
/**/prep32.setString(1, "CustomerMS");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep32.setString(2, "INFO");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep32.setNull(3, 12);
2020-06-17 22:30:20 jdbc[3]: 
/**/prep32.setString(4, "/api/customers/2");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep32.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep32.setString(6, "20eb60e1e2a5f223");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep32.setString(7, "2020-06-18T02:56:15.134Z");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep32.setString(8, "20eb60e1e2a5f223");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep32.executeUpdate();
2020-06-17 22:30:20 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:30:20 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:30:20 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/2', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: '20eb60e1e2a5f223', 7: '2020-06-18T02:56:15.134Z', 8: '20eb60e1e2a5f223'};
2020-06-17 22:30:20 jdbc[3]: 
/**/ResultSet rs37 = prep32.getGeneratedKeys();
2020-06-17 22:30:20 jdbc[3]: 
/**/rs37.next();
2020-06-17 22:30:20 jdbc[3]: 
/**/ResultSetMetaData rsMeta24 = rs37.getMetaData();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:30:20 jdbc[3]: 
/**/rsMeta24.getColumnCount();
2020-06-17 22:30:20 jdbc[3]: 
/**/rs37.getLong(1);
2020-06-17 22:30:20 jdbc[3]: 
/**/rs37.close();
2020-06-17 22:30:20 jdbc[3]: 
/**/prep32.getMaxRows();
2020-06-17 22:30:20 jdbc[3]: 
/**/prep32.getQueryTimeout();
2020-06-17 22:30:20 jdbc[3]: 
/**/prep32.close();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:30:20 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:30:20 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:30:20 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:30:20 jdbc[3]: 
/**/PreparedStatement prep33 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:30:20 jdbc[3]: 
/**/prep33.setString(1, "CustomerMS");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep33.setString(2, "INFO");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep33.setNull(3, 12);
2020-06-17 22:30:20 jdbc[3]: 
/**/prep33.setString(4, "/api/customers/2");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep33.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep33.setString(6, "43d42dc852862595");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep33.setString(7, "2020-06-18T02:56:16.890Z");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep33.setString(8, "43d42dc852862595");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep33.executeUpdate();
2020-06-17 22:30:20 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:30:20 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:30:20 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/2', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: '43d42dc852862595', 7: '2020-06-18T02:56:16.890Z', 8: '43d42dc852862595'};
2020-06-17 22:30:20 jdbc[3]: 
/**/ResultSet rs38 = prep33.getGeneratedKeys();
2020-06-17 22:30:20 jdbc[3]: 
/**/rs38.next();
2020-06-17 22:30:20 jdbc[3]: 
/**/ResultSetMetaData rsMeta25 = rs38.getMetaData();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:30:20 jdbc[3]: 
/**/rsMeta25.getColumnCount();
2020-06-17 22:30:20 jdbc[3]: 
/**/rs38.getLong(1);
2020-06-17 22:30:20 jdbc[3]: 
/**/rs38.close();
2020-06-17 22:30:20 jdbc[3]: 
/**/prep33.getMaxRows();
2020-06-17 22:30:20 jdbc[3]: 
/**/prep33.getQueryTimeout();
2020-06-17 22:30:20 jdbc[3]: 
/**/prep33.close();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:30:20 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:30:20 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:30:20 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:30:20 jdbc[3]: 
/**/PreparedStatement prep34 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:30:20 jdbc[3]: 
/**/prep34.setString(1, "CustomerMS");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep34.setString(2, "INFO");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep34.setNull(3, 12);
2020-06-17 22:30:20 jdbc[3]: 
/**/prep34.setString(4, "/api/customers/2");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep34.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep34.setString(6, "6e58df6ecc92c2a9");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep34.setString(7, "2020-06-18T02:56:18.068Z");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep34.setString(8, "6e58df6ecc92c2a9");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep34.executeUpdate();
2020-06-17 22:30:20 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:30:20 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:30:20 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/2', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: '6e58df6ecc92c2a9', 7: '2020-06-18T02:56:18.068Z', 8: '6e58df6ecc92c2a9'};
2020-06-17 22:30:20 jdbc[3]: 
/**/ResultSet rs39 = prep34.getGeneratedKeys();
2020-06-17 22:30:20 jdbc[3]: 
/**/rs39.next();
2020-06-17 22:30:20 jdbc[3]: 
/**/ResultSetMetaData rsMeta26 = rs39.getMetaData();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:30:20 jdbc[3]: 
/**/rsMeta26.getColumnCount();
2020-06-17 22:30:20 jdbc[3]: 
/**/rs39.getLong(1);
2020-06-17 22:30:20 jdbc[3]: 
/**/rs39.close();
2020-06-17 22:30:20 jdbc[3]: 
/**/prep34.getMaxRows();
2020-06-17 22:30:20 jdbc[3]: 
/**/prep34.getQueryTimeout();
2020-06-17 22:30:20 jdbc[3]: 
/**/prep34.close();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:30:20 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:30:20 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:30:20 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:30:20 jdbc[3]: 
/**/PreparedStatement prep35 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:30:20 jdbc[3]: 
/**/prep35.setString(1, "CustomerMS");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep35.setString(2, "INFO");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep35.setNull(3, 12);
2020-06-17 22:30:20 jdbc[3]: 
/**/prep35.setString(4, "/api/customers/3");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep35.setString(5, "Customer(id=3, firstName=Ramila, lastName=Karki, email=ramila@gmail.com)");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep35.setString(6, "2e6641836c179162");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep35.setString(7, "2020-06-18T02:56:24.656Z");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep35.setString(8, "2e6641836c179162");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep35.executeUpdate();
2020-06-17 22:30:20 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:30:20 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:30:20 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/3', 5: 'Customer(id=3, firstName=Ramila, lastName=Karki, email=ramila@gmail.com)', 6: '2e6641836c179162', 7: '2020-06-18T02:56:24.656Z', 8: '2e6641836c179162'};
2020-06-17 22:30:20 jdbc[3]: 
/**/ResultSet rs40 = prep35.getGeneratedKeys();
2020-06-17 22:30:20 jdbc[3]: 
/**/rs40.next();
2020-06-17 22:30:20 jdbc[3]: 
/**/ResultSetMetaData rsMeta27 = rs40.getMetaData();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:30:20 jdbc[3]: 
/**/rsMeta27.getColumnCount();
2020-06-17 22:30:20 jdbc[3]: 
/**/rs40.getLong(1);
2020-06-17 22:30:20 jdbc[3]: 
/**/rs40.close();
2020-06-17 22:30:20 jdbc[3]: 
/**/prep35.getMaxRows();
2020-06-17 22:30:20 jdbc[3]: 
/**/prep35.getQueryTimeout();
2020-06-17 22:30:20 jdbc[3]: 
/**/prep35.close();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:30:20 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:30:20 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:30:20 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:30:20 jdbc[3]: 
/**/PreparedStatement prep36 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:30:20 jdbc[3]: 
/**/prep36.setString(1, "CustomerMS");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep36.setString(2, "INFO");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep36.setNull(3, 12);
2020-06-17 22:30:20 jdbc[3]: 
/**/prep36.setString(4, "/api/customers/4");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep36.setString(5, "Customer(id=4, firstName=David, lastName=Yonge, email=david@gmail.com)");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep36.setString(6, "6cc53148f46f5151");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep36.setString(7, "2020-06-18T02:56:42.193Z");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep36.setString(8, "6cc53148f46f5151");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep36.executeUpdate();
2020-06-17 22:30:20 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:30:20 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:30:20 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/4', 5: 'Customer(id=4, firstName=David, lastName=Yonge, email=david@gmail.com)', 6: '6cc53148f46f5151', 7: '2020-06-18T02:56:42.193Z', 8: '6cc53148f46f5151'};
2020-06-17 22:30:20 jdbc[3]: 
/**/ResultSet rs41 = prep36.getGeneratedKeys();
2020-06-17 22:30:20 jdbc[3]: 
/**/rs41.next();
2020-06-17 22:30:20 jdbc[3]: 
/**/ResultSetMetaData rsMeta28 = rs41.getMetaData();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:30:20 jdbc[3]: 
/**/rsMeta28.getColumnCount();
2020-06-17 22:30:20 jdbc[3]: 
/**/rs41.getLong(1);
2020-06-17 22:30:20 jdbc[3]: 
/**/rs41.close();
2020-06-17 22:30:20 jdbc[3]: 
/**/prep36.getMaxRows();
2020-06-17 22:30:20 jdbc[3]: 
/**/prep36.getQueryTimeout();
2020-06-17 22:30:20 jdbc[3]: 
/**/prep36.close();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:30:20 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:30:20 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:30:20 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:30:20 jdbc[3]: 
/**/PreparedStatement prep37 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:30:20 jdbc[3]: 
/**/prep37.setString(1, "CustomerMS");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep37.setString(2, "INFO");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep37.setNull(3, 12);
2020-06-17 22:30:20 jdbc[3]: 
/**/prep37.setString(4, "/api/customers/5");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep37.setString(5, "Customer(id=5, firstName=Peter, lastName=Parker, email=peter@gmail.com)");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep37.setString(6, "7f2851bfe57d4c73");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep37.setString(7, "2020-06-18T02:56:45.275Z");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep37.setString(8, "7f2851bfe57d4c73");
2020-06-17 22:30:20 jdbc[3]: 
/**/prep37.executeUpdate();
2020-06-17 22:30:20 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:30:20 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:30:20 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/5', 5: 'Customer(id=5, firstName=Peter, lastName=Parker, email=peter@gmail.com)', 6: '7f2851bfe57d4c73', 7: '2020-06-18T02:56:45.275Z', 8: '7f2851bfe57d4c73'};
2020-06-17 22:30:20 jdbc[3]: 
/**/ResultSet rs42 = prep37.getGeneratedKeys();
2020-06-17 22:30:20 jdbc[3]: 
/**/rs42.next();
2020-06-17 22:30:20 jdbc[3]: 
/**/ResultSetMetaData rsMeta29 = rs42.getMetaData();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:30:20 jdbc[3]: 
/**/rsMeta29.getColumnCount();
2020-06-17 22:30:20 jdbc[3]: 
/**/rs42.getLong(1);
2020-06-17 22:30:20 jdbc[3]: 
/**/rs42.close();
2020-06-17 22:30:20 jdbc[3]: 
/**/prep37.getMaxRows();
2020-06-17 22:30:20 jdbc[3]: 
/**/prep37.getQueryTimeout();
2020-06-17 22:30:20 jdbc[3]: 
/**/prep37.close();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:30:20 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:30:20 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:30:20 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:30:20 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:32:49 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-17 22:32:49 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 22:32:49 jdbc[3]: 
/**/conn0.setReadOnly(true);
2020-06-17 22:32:49 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:32:49 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:32:49 jdbc[3]: 
/**/PreparedStatement prep38 = conn0.prepareStatement("select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=?");
2020-06-17 22:32:49 jdbc[3]: 
/**/prep38.setLong(1, 1L);
2020-06-17 22:32:49 jdbc[3]: 
/**/ResultSet rs43 = prep38.executeQuery();
2020-06-17 22:32:49 jdbc[3]: 
/*SQL l:225 #:1*/select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=? {1: 1};
2020-06-17 22:32:49 jdbc[3]: 
/**/rs43.next();
2020-06-17 22:32:49 jdbc[3]: 
/**/rs43.getString("customer2_0_0_");
2020-06-17 22:32:49 jdbc[3]: 
/**/rs43.wasNull();
2020-06-17 22:32:49 jdbc[3]: 
/**/rs43.getString("customer3_0_0_");
2020-06-17 22:32:49 jdbc[3]: 
/**/rs43.wasNull();
2020-06-17 22:32:49 jdbc[3]: 
/**/rs43.getString("customer4_0_0_");
2020-06-17 22:32:49 jdbc[3]: 
/**/rs43.wasNull();
2020-06-17 22:32:49 jdbc[3]: 
/**/rs43.next();
2020-06-17 22:32:49 jdbc[3]: 
/**/rs43.close();
2020-06-17 22:32:49 jdbc[3]: 
/**/prep38.getMaxRows();
2020-06-17 22:32:49 jdbc[3]: 
/**/prep38.getQueryTimeout();
2020-06-17 22:32:49 jdbc[3]: 
/**/prep38.close();
2020-06-17 22:32:49 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:32:49 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:32:49 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:32:49 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:32:49 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:32:49 jdbc[3]: 
/**/conn0.setReadOnly(false);
2020-06-17 22:32:49 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:32:49 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:32:49 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:32:50 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:32:50 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:32:50 jdbc[3]: 
/**/PreparedStatement prep39 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:32:50 jdbc[3]: 
/**/prep39.setString(1, "CustomerMS");
2020-06-17 22:32:50 jdbc[3]: 
/**/prep39.setString(2, "INFO");
2020-06-17 22:32:50 jdbc[3]: 
/**/prep39.setNull(3, 12);
2020-06-17 22:32:50 jdbc[3]: 
/**/prep39.setString(4, "/api/customers/1");
2020-06-17 22:32:50 jdbc[3]: 
/**/prep39.setString(5, "Customer(id=1, firstName=Ram, lastName=Thapa, email=ram@gmail.com)");
2020-06-17 22:32:50 jdbc[3]: 
/**/prep39.setString(6, "635868a426b12c82");
2020-06-17 22:32:50 jdbc[3]: 
/**/prep39.setString(7, "2020-06-18T03:32:49.793Z");
2020-06-17 22:32:50 jdbc[3]: 
/**/prep39.setString(8, "635868a426b12c82");
2020-06-17 22:32:50 jdbc[3]: 
/**/prep39.executeUpdate();
2020-06-17 22:32:50 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:32:50 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:32:50 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/1', 5: 'Customer(id=1, firstName=Ram, lastName=Thapa, email=ram@gmail.com)', 6: '635868a426b12c82', 7: '2020-06-18T03:32:49.793Z', 8: '635868a426b12c82'};
2020-06-17 22:32:50 jdbc[3]: 
/**/ResultSet rs44 = prep39.getGeneratedKeys();
2020-06-17 22:32:50 jdbc[3]: 
/**/rs44.next();
2020-06-17 22:32:50 jdbc[3]: 
/**/ResultSetMetaData rsMeta30 = rs44.getMetaData();
2020-06-17 22:32:50 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:32:50 jdbc[3]: 
/**/rsMeta30.getColumnCount();
2020-06-17 22:32:50 jdbc[3]: 
/**/rs44.getLong(1);
2020-06-17 22:32:50 jdbc[3]: 
/**/rs44.close();
2020-06-17 22:32:50 jdbc[3]: 
/**/prep39.getMaxRows();
2020-06-17 22:32:50 jdbc[3]: 
/**/prep39.getQueryTimeout();
2020-06-17 22:32:50 jdbc[3]: 
/**/prep39.close();
2020-06-17 22:32:50 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:32:50 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:32:50 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:32:50 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:32:50 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:32:50 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:32:50 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:32:50 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:32:50 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:33:01 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-17 22:33:01 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 22:33:01 jdbc[3]: 
/**/conn0.setReadOnly(true);
2020-06-17 22:33:01 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:33:01 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:33:01 jdbc[3]: 
/**/PreparedStatement prep40 = conn0.prepareStatement("select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=?");
2020-06-17 22:33:01 jdbc[3]: 
/**/prep40.setLong(1, 2L);
2020-06-17 22:33:01 jdbc[3]: 
/**/ResultSet rs45 = prep40.executeQuery();
2020-06-17 22:33:01 jdbc[3]: 
/*SQL l:225 #:1*/select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=? {1: 2};
2020-06-17 22:33:01 jdbc[3]: 
/**/rs45.next();
2020-06-17 22:33:01 jdbc[3]: 
/**/rs45.getString("customer2_0_0_");
2020-06-17 22:33:01 jdbc[3]: 
/**/rs45.wasNull();
2020-06-17 22:33:01 jdbc[3]: 
/**/rs45.getString("customer3_0_0_");
2020-06-17 22:33:01 jdbc[3]: 
/**/rs45.wasNull();
2020-06-17 22:33:01 jdbc[3]: 
/**/rs45.getString("customer4_0_0_");
2020-06-17 22:33:01 jdbc[3]: 
/**/rs45.wasNull();
2020-06-17 22:33:01 jdbc[3]: 
/**/rs45.next();
2020-06-17 22:33:01 jdbc[3]: 
/**/rs45.close();
2020-06-17 22:33:01 jdbc[3]: 
/**/prep40.getMaxRows();
2020-06-17 22:33:01 jdbc[3]: 
/**/prep40.getQueryTimeout();
2020-06-17 22:33:01 jdbc[3]: 
/**/prep40.close();
2020-06-17 22:33:01 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:33:01 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:33:01 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:33:01 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:33:01 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:33:01 jdbc[3]: 
/**/conn0.setReadOnly(false);
2020-06-17 22:33:01 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:33:01 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:33:01 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:33:02 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-17 22:33:02 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 22:33:02 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:33:02 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:33:02 jdbc[3]: 
/**/PreparedStatement prep41 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:33:02 jdbc[3]: 
/**/prep41.setString(1, "CustomerMS");
2020-06-17 22:33:02 jdbc[3]: 
/**/prep41.setString(2, "INFO");
2020-06-17 22:33:02 jdbc[3]: 
/**/prep41.setNull(3, 12);
2020-06-17 22:33:02 jdbc[3]: 
/**/prep41.setString(4, "/api/customers/2");
2020-06-17 22:33:02 jdbc[3]: 
/**/prep41.setString(5, "Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)");
2020-06-17 22:33:02 jdbc[3]: 
/**/prep41.setString(6, "defae3b7a95bc330");
2020-06-17 22:33:02 jdbc[3]: 
/**/prep41.setString(7, "2020-06-18T03:33:01.264Z");
2020-06-17 22:33:02 jdbc[3]: 
/**/prep41.setString(8, "defae3b7a95bc330");
2020-06-17 22:33:02 jdbc[3]: 
/**/prep41.executeUpdate();
2020-06-17 22:33:02 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:33:02 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:33:02 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/2', 5: 'Customer(id=2, firstName=Hari, lastName=Neupane, email=hari@gmail.com)', 6: 'defae3b7a95bc330', 7: '2020-06-18T03:33:01.264Z', 8: 'defae3b7a95bc330'};
2020-06-17 22:33:02 jdbc[3]: 
/**/ResultSet rs46 = prep41.getGeneratedKeys();
2020-06-17 22:33:02 jdbc[3]: 
/**/rs46.next();
2020-06-17 22:33:02 jdbc[3]: 
/**/ResultSetMetaData rsMeta31 = rs46.getMetaData();
2020-06-17 22:33:02 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:33:02 jdbc[3]: 
/**/rsMeta31.getColumnCount();
2020-06-17 22:33:02 jdbc[3]: 
/**/rs46.getLong(1);
2020-06-17 22:33:02 jdbc[3]: 
/**/rs46.close();
2020-06-17 22:33:02 jdbc[3]: 
/**/prep41.getMaxRows();
2020-06-17 22:33:02 jdbc[3]: 
/**/prep41.getQueryTimeout();
2020-06-17 22:33:02 jdbc[3]: 
/**/prep41.close();
2020-06-17 22:33:02 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:33:02 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:33:02 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:33:02 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:33:02 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:33:02 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:33:02 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:33:02 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:33:02 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:40:43 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-17 22:40:43 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 22:40:43 jdbc[3]: 
/**/conn0.setReadOnly(true);
2020-06-17 22:40:43 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:40:43 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:40:43 jdbc[3]: 
/**/PreparedStatement prep42 = conn0.prepareStatement("select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=?");
2020-06-17 22:40:43 jdbc[3]: 
/**/prep42.setLong(1, 1L);
2020-06-17 22:40:43 jdbc[3]: 
/**/ResultSet rs47 = prep42.executeQuery();
2020-06-17 22:40:43 jdbc[3]: 
/*SQL l:225 #:1*/select customer0_.id as id1_0_0_, customer0_.customer_email as customer2_0_0_, customer0_.customer_firstname as customer3_0_0_, customer0_.customer_lastname as customer4_0_0_ from customer_tbl customer0_ where customer0_.id=? {1: 1};
2020-06-17 22:40:43 jdbc[3]: 
/**/rs47.next();
2020-06-17 22:40:43 jdbc[3]: 
/**/rs47.getString("customer2_0_0_");
2020-06-17 22:40:43 jdbc[3]: 
/**/rs47.wasNull();
2020-06-17 22:40:43 jdbc[3]: 
/**/rs47.getString("customer3_0_0_");
2020-06-17 22:40:43 jdbc[3]: 
/**/rs47.wasNull();
2020-06-17 22:40:43 jdbc[3]: 
/**/rs47.getString("customer4_0_0_");
2020-06-17 22:40:43 jdbc[3]: 
/**/rs47.wasNull();
2020-06-17 22:40:43 jdbc[3]: 
/**/rs47.next();
2020-06-17 22:40:43 jdbc[3]: 
/**/rs47.close();
2020-06-17 22:40:43 jdbc[3]: 
/**/prep42.getMaxRows();
2020-06-17 22:40:43 jdbc[3]: 
/**/prep42.getQueryTimeout();
2020-06-17 22:40:43 jdbc[3]: 
/**/prep42.close();
2020-06-17 22:40:43 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:40:43 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:40:43 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:40:43 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:40:43 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:40:43 jdbc[3]: 
/**/conn0.setReadOnly(false);
2020-06-17 22:40:43 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:40:43 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:40:43 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:40:44 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:40:44 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:40:44 jdbc[3]: 
/**/PreparedStatement prep43 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:40:44 jdbc[3]: 
/**/prep43.setString(1, "CustomerMS");
2020-06-17 22:40:44 jdbc[3]: 
/**/prep43.setString(2, "INFO");
2020-06-17 22:40:44 jdbc[3]: 
/**/prep43.setNull(3, 12);
2020-06-17 22:40:44 jdbc[3]: 
/**/prep43.setString(4, "/api/customers/1");
2020-06-17 22:40:44 jdbc[3]: 
/**/prep43.setString(5, "Customer(id=1, firstName=Ram, lastName=Thapa, email=ram@gmail.com)");
2020-06-17 22:40:44 jdbc[3]: 
/**/prep43.setString(6, "450af2b18eec918a");
2020-06-17 22:40:44 jdbc[3]: 
/**/prep43.setString(7, "2020-06-18T03:40:43.842Z");
2020-06-17 22:40:44 jdbc[3]: 
/**/prep43.setString(8, "450af2b18eec918a");
2020-06-17 22:40:44 jdbc[3]: 
/**/prep43.executeUpdate();
2020-06-17 22:40:44 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:40:44 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:40:44 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'CustomerMS', 2: 'INFO', 3: NULL, 4: '/api/customers/1', 5: 'Customer(id=1, firstName=Ram, lastName=Thapa, email=ram@gmail.com)', 6: '450af2b18eec918a', 7: '2020-06-18T03:40:43.842Z', 8: '450af2b18eec918a'};
2020-06-17 22:40:44 jdbc[3]: 
/**/ResultSet rs48 = prep43.getGeneratedKeys();
2020-06-17 22:40:44 jdbc[3]: 
/**/rs48.next();
2020-06-17 22:40:44 jdbc[3]: 
/**/ResultSetMetaData rsMeta32 = rs48.getMetaData();
2020-06-17 22:40:44 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:40:44 jdbc[3]: 
/**/rsMeta32.getColumnCount();
2020-06-17 22:40:44 jdbc[3]: 
/**/rs48.getLong(1);
2020-06-17 22:40:44 jdbc[3]: 
/**/rs48.close();
2020-06-17 22:40:44 jdbc[3]: 
/**/prep43.getMaxRows();
2020-06-17 22:40:44 jdbc[3]: 
/**/prep43.getQueryTimeout();
2020-06-17 22:40:44 jdbc[3]: 
/**/prep43.close();
2020-06-17 22:40:44 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:40:44 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:40:44 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:40:44 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:40:44 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:40:44 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:40:44 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:40:44 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:40:44 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:41:02 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-17 22:41:02 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 22:41:02 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:41:02 jdbc[3]: 
/**/Statement stat3 = conn0.createStatement();
2020-06-17 22:41:02 jdbc[3]: 
/**/stat3.execute("drop table if exists customer_tbl CASCADE ");
2020-06-17 22:41:02 lock: 3 exclusive write lock requesting for CUSTOMER_TBL 
2020-06-17 22:41:02 lock: 3 exclusive write lock added for CUSTOMER_TBL 
2020-06-17 22:41:02 lock: 3 exclusive write lock requesting for SYS 
2020-06-17 22:41:02 lock: 3 exclusive write lock added for SYS 
2020-06-17 22:41:02 jdbc[3]: 
/*SQL t:2*/drop table if exists customer_tbl CASCADE;
2020-06-17 22:41:02 lock: 3 exclusive write lock unlock SYS 
2020-06-17 22:41:02 jdbc[3]: 
/**/stat3.getWarnings();
2020-06-17 22:41:02 jdbc[3]: 
/**/stat3.execute("drop table if exists log_tbl CASCADE ");
2020-06-17 22:41:02 lock: 3 exclusive write lock requesting for LOG_TBL 
2020-06-17 22:41:02 lock: 3 exclusive write lock added for LOG_TBL 
2020-06-17 22:41:02 lock: 3 exclusive write lock requesting for SYS 
2020-06-17 22:41:02 lock: 3 exclusive write lock added for SYS 
2020-06-17 22:41:02 jdbc[3]: 
/*SQL */drop table if exists log_tbl CASCADE;
2020-06-17 22:41:02 lock: 3 exclusive write lock unlock SYS 
2020-06-17 22:41:02 jdbc[3]: 
/**/stat3.getWarnings();
2020-06-17 22:41:02 jdbc[3]: 
/**/stat3.close();
2020-06-17 22:41:02 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:41:02 database: closing /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb from shutdown hook
2020-06-17 22:41:02 lock: 3 shared read lock unlock SYS 
2020-06-17 22:41:02 database: disconnecting session #3
2020-06-17 22:41:02 database: disconnected session #3
2020-06-17 22:41:02 lock: 4 shared read lock unlock SYS 
2020-06-17 22:41:02 database: disconnecting session #4
2020-06-17 22:41:02 database: disconnected session #4
2020-06-17 22:41:02 lock: 5 shared read lock unlock SYS 
2020-06-17 22:41:02 database: disconnecting session #5
2020-06-17 22:41:02 database: disconnected session #5
2020-06-17 22:41:02 lock: 6 shared read lock unlock SYS 
2020-06-17 22:41:02 database: disconnecting session #6
2020-06-17 22:41:02 database: disconnected session #6
2020-06-17 22:41:02 jdbc[3]: 
/**/conn0.close();
2020-06-17 22:41:02 lock: 7 shared read lock unlock SYS 
2020-06-17 22:41:02 jdbc[4]: 
/**/conn1.close();
2020-06-17 22:41:02 database: disconnecting session #7
2020-06-17 22:41:02 jdbc[5]: 
/**/conn2.close();
2020-06-17 22:41:02 database: disconnected session #7
2020-06-17 22:41:02 jdbc[6]: 
/**/conn3.close();
2020-06-17 22:41:02 lock: 8 shared read lock unlock SYS 
2020-06-17 22:41:02 jdbc[7]: 
/**/conn4.close();
2020-06-17 22:41:02 database: disconnecting session #8
2020-06-17 22:41:02 database: disconnected session #8
2020-06-17 22:41:02 jdbc[8]: 
/**/conn5.close();
2020-06-17 22:41:02 lock: 9 shared read lock unlock SYS 
2020-06-17 22:41:02 jdbc[9]: 
/**/conn6.close();
2020-06-17 22:41:02 database: disconnecting session #9
2020-06-17 22:41:02 database: disconnected session #9
2020-06-17 22:41:02 jdbc[10]: 
/**/conn7.close();
2020-06-17 22:41:02 lock: 10 shared read lock unlock SYS 
2020-06-17 22:41:02 jdbc[11]: 
/**/conn8.close();
2020-06-17 22:41:02 database: disconnecting session #10
2020-06-17 22:41:02 database: disconnected session #10
2020-06-17 22:41:02 lock: 11 shared read lock unlock SYS 
2020-06-17 22:41:02 lock: 12 shared read lock unlock SYS 
2020-06-17 22:41:02 database: disconnecting session #12
2020-06-17 22:41:02 database: disconnected session #12
2020-06-17 22:41:02 database: disconnecting session #11
2020-06-17 22:41:02 database: disconnected session #11
2020-06-17 22:41:02 jdbc[12]: 
/**/conn9.close();
2020-06-17 22:41:02 database: closing /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/CustomerMS/customerdb
2020-06-17 22:41:02 lock: 1 shared read lock unlock SYS 
2020-06-17 22:41:02 lock: 2 shared read lock unlock SYS 
2020-06-17 22:41:02 database: closed
