2020-05-29 22:47:23 database: flush
org.h2.message.DbException: General error: "java.lang.IllegalStateException: The file is locked: nio:/home/lappy/Documents/workspace-spring-tool-suite-4-4.5.1.RELEASE/Microservices-Task/EquipmentMS/equipmentdb.mv.db [1.4.200/7]" [50000-200]
	at org.h2.message.DbException.get(DbException.java:194)
	at org.h2.message.DbException.convert(DbException.java:347)
	at org.h2.mvstore.db.MVTableEngine$1.uncaughtException(MVTableEngine.java:93)
	at org.h2.mvstore.MVStore.handleException(MVStore.java:2877)
	at org.h2.mvstore.MVStore.panic(MVStore.java:481)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:402)
	at org.h2.mvstore.MVStore$Builder.open(MVStore.java:3579)
	at org.h2.mvstore.db.MVTableEngine$Store.open(MVTableEngine.java:170)
	at org.h2.mvstore.db.MVTableEngine.init(MVTableEngine.java:103)
	at org.h2.engine.Database.getPageStore(Database.java:2659)
	at org.h2.engine.Database.open(Database.java:675)
	at org.h2.engine.Database.openDatabase(Database.java:307)
	at org.h2.engine.Database.<init>(Database.java:301)
	at org.h2.engine.Engine.openSession(Engine.java:74)
	at org.h2.engine.Engine.openSession(Engine.java:192)
	at org.h2.engine.Engine.createSessionAndValidate(Engine.java:171)
	at org.h2.engine.Engine.createSession(Engine.java:166)
	at org.h2.engine.Engine.createSession(Engine.java:29)
	at org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:340)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:173)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:152)
	at org.h2.Driver.connect(Driver.java:69)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:138)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:358)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:206)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:477)
	at com.zaxxer.hikari.pool.HikariPool.access$100(HikariPool.java:71)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:725)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:711)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: org.h2.jdbc.JdbcSQLNonTransientException: General error: "java.lang.IllegalStateException: The file is locked: nio:/home/lappy/Documents/workspace-spring-tool-suite-4-4.5.1.RELEASE/Microservices-Task/EquipmentMS/equipmentdb.mv.db [1.4.200/7]" [50000-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:505)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	... 33 more
Caused by: java.lang.IllegalStateException: The file is locked: nio:/home/lappy/Documents/workspace-spring-tool-suite-4-4.5.1.RELEASE/Microservices-Task/EquipmentMS/equipmentdb.mv.db [1.4.200/7]
	at org.h2.mvstore.DataUtils.newIllegalStateException(DataUtils.java:950)
	at org.h2.mvstore.FileStore.open(FileStore.java:166)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:381)
	... 27 more
Caused by: java.nio.channels.OverlappingFileLockException
	at java.base/sun.nio.ch.FileLockTable.checkList(FileLockTable.java:229)
	at java.base/sun.nio.ch.FileLockTable.add(FileLockTable.java:123)
	at java.base/sun.nio.ch.FileChannelImpl.tryLock(FileChannelImpl.java:1154)
	at org.h2.store.fs.FileNio.tryLock(FilePathNio.java:121)
	at java.base/java.nio.channels.FileChannel.tryLock(FileChannel.java:1165)
	at org.h2.mvstore.FileStore.open(FileStore.java:163)
	... 28 more
2020-06-01 13:29:27 database: flush
org.h2.message.DbException: General error: "java.lang.IllegalStateException: The file is locked: nio:/home/lappy/Documents/workspace-spring-tool-suite-4-4.5.1.RELEASE/Microservices-Task/EquipmentMS/equipmentdb.mv.db [1.4.200/7]" [50000-200]
	at org.h2.message.DbException.get(DbException.java:194)
	at org.h2.message.DbException.convert(DbException.java:347)
	at org.h2.mvstore.db.MVTableEngine$1.uncaughtException(MVTableEngine.java:93)
	at org.h2.mvstore.MVStore.handleException(MVStore.java:2877)
	at org.h2.mvstore.MVStore.panic(MVStore.java:481)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:402)
	at org.h2.mvstore.MVStore$Builder.open(MVStore.java:3579)
	at org.h2.mvstore.db.MVTableEngine$Store.open(MVTableEngine.java:170)
	at org.h2.mvstore.db.MVTableEngine.init(MVTableEngine.java:103)
	at org.h2.engine.Database.getPageStore(Database.java:2659)
	at org.h2.engine.Database.open(Database.java:675)
	at org.h2.engine.Database.openDatabase(Database.java:307)
	at org.h2.engine.Database.<init>(Database.java:301)
	at org.h2.engine.Engine.openSession(Engine.java:74)
	at org.h2.engine.Engine.openSession(Engine.java:192)
	at org.h2.engine.Engine.createSessionAndValidate(Engine.java:171)
	at org.h2.engine.Engine.createSession(Engine.java:166)
	at org.h2.engine.Engine.createSession(Engine.java:29)
	at org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:340)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:173)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:152)
	at org.h2.Driver.connect(Driver.java:69)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:138)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:358)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:206)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:477)
	at com.zaxxer.hikari.pool.HikariPool.access$100(HikariPool.java:71)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:725)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:711)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: org.h2.jdbc.JdbcSQLNonTransientException: General error: "java.lang.IllegalStateException: The file is locked: nio:/home/lappy/Documents/workspace-spring-tool-suite-4-4.5.1.RELEASE/Microservices-Task/EquipmentMS/equipmentdb.mv.db [1.4.200/7]" [50000-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:505)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	... 33 more
Caused by: java.lang.IllegalStateException: The file is locked: nio:/home/lappy/Documents/workspace-spring-tool-suite-4-4.5.1.RELEASE/Microservices-Task/EquipmentMS/equipmentdb.mv.db [1.4.200/7]
	at org.h2.mvstore.DataUtils.newIllegalStateException(DataUtils.java:950)
	at org.h2.mvstore.FileStore.open(FileStore.java:166)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:381)
	... 27 more
Caused by: java.nio.channels.OverlappingFileLockException
	at java.base/sun.nio.ch.FileLockTable.checkList(FileLockTable.java:229)
	at java.base/sun.nio.ch.FileLockTable.add(FileLockTable.java:123)
	at java.base/sun.nio.ch.FileChannelImpl.tryLock(FileChannelImpl.java:1154)
	at org.h2.store.fs.FileNio.tryLock(FilePathNio.java:121)
	at java.base/java.nio.channels.FileChannel.tryLock(FileChannel.java:1165)
	at org.h2.mvstore.FileStore.open(FileStore.java:163)
	... 28 more
2020-06-01 17:51:43 database: flush
org.h2.message.DbException: General error: "java.lang.IllegalStateException: The file is locked: nio:/home/lappy/Documents/workspace-spring-tool-suite-4-4.5.1.RELEASE/Microservices-Task/EquipmentMS/equipmentdb.mv.db [1.4.200/7]" [50000-200]
	at org.h2.message.DbException.get(DbException.java:194)
	at org.h2.message.DbException.convert(DbException.java:347)
	at org.h2.mvstore.db.MVTableEngine$1.uncaughtException(MVTableEngine.java:93)
	at org.h2.mvstore.MVStore.handleException(MVStore.java:2877)
	at org.h2.mvstore.MVStore.panic(MVStore.java:481)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:402)
	at org.h2.mvstore.MVStore$Builder.open(MVStore.java:3579)
	at org.h2.mvstore.db.MVTableEngine$Store.open(MVTableEngine.java:170)
	at org.h2.mvstore.db.MVTableEngine.init(MVTableEngine.java:103)
	at org.h2.engine.Database.getPageStore(Database.java:2659)
	at org.h2.engine.Database.open(Database.java:675)
	at org.h2.engine.Database.openDatabase(Database.java:307)
	at org.h2.engine.Database.<init>(Database.java:301)
	at org.h2.engine.Engine.openSession(Engine.java:74)
	at org.h2.engine.Engine.openSession(Engine.java:192)
	at org.h2.engine.Engine.createSessionAndValidate(Engine.java:171)
	at org.h2.engine.Engine.createSession(Engine.java:166)
	at org.h2.engine.Engine.createSession(Engine.java:29)
	at org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:340)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:173)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:152)
	at org.h2.Driver.connect(Driver.java:69)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:138)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:358)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:206)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:477)
	at com.zaxxer.hikari.pool.HikariPool.access$100(HikariPool.java:71)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:725)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:711)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: org.h2.jdbc.JdbcSQLNonTransientException: General error: "java.lang.IllegalStateException: The file is locked: nio:/home/lappy/Documents/workspace-spring-tool-suite-4-4.5.1.RELEASE/Microservices-Task/EquipmentMS/equipmentdb.mv.db [1.4.200/7]" [50000-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:505)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	... 33 more
Caused by: java.lang.IllegalStateException: The file is locked: nio:/home/lappy/Documents/workspace-spring-tool-suite-4-4.5.1.RELEASE/Microservices-Task/EquipmentMS/equipmentdb.mv.db [1.4.200/7]
	at org.h2.mvstore.DataUtils.newIllegalStateException(DataUtils.java:950)
	at org.h2.mvstore.FileStore.open(FileStore.java:166)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:381)
	... 27 more
Caused by: java.nio.channels.OverlappingFileLockException
	at java.base/sun.nio.ch.FileLockTable.checkList(FileLockTable.java:229)
	at java.base/sun.nio.ch.FileLockTable.add(FileLockTable.java:123)
	at java.base/sun.nio.ch.FileChannelImpl.tryLock(FileChannelImpl.java:1154)
	at org.h2.store.fs.FileNio.tryLock(FilePathNio.java:121)
	at java.base/java.nio.channels.FileChannel.tryLock(FileChannel.java:1165)
	at org.h2.mvstore.FileStore.open(FileStore.java:163)
	... 28 more
2020-06-01 18:30:36 database: flush
org.h2.message.DbException: General error: "java.lang.IllegalStateException: The file is locked: nio:/home/lappy/Documents/workspace-spring-tool-suite-4-4.5.1.RELEASE/Microservices-Task/EquipmentMS/equipmentdb.mv.db [1.4.200/7]" [50000-200]
	at org.h2.message.DbException.get(DbException.java:194)
	at org.h2.message.DbException.convert(DbException.java:347)
	at org.h2.mvstore.db.MVTableEngine$1.uncaughtException(MVTableEngine.java:93)
	at org.h2.mvstore.MVStore.handleException(MVStore.java:2877)
	at org.h2.mvstore.MVStore.panic(MVStore.java:481)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:402)
	at org.h2.mvstore.MVStore$Builder.open(MVStore.java:3579)
	at org.h2.mvstore.db.MVTableEngine$Store.open(MVTableEngine.java:170)
	at org.h2.mvstore.db.MVTableEngine.init(MVTableEngine.java:103)
	at org.h2.engine.Database.getPageStore(Database.java:2659)
	at org.h2.engine.Database.open(Database.java:675)
	at org.h2.engine.Database.openDatabase(Database.java:307)
	at org.h2.engine.Database.<init>(Database.java:301)
	at org.h2.engine.Engine.openSession(Engine.java:74)
	at org.h2.engine.Engine.openSession(Engine.java:192)
	at org.h2.engine.Engine.createSessionAndValidate(Engine.java:171)
	at org.h2.engine.Engine.createSession(Engine.java:166)
	at org.h2.engine.Engine.createSession(Engine.java:29)
	at org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:340)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:173)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:152)
	at org.h2.Driver.connect(Driver.java:69)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:138)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:358)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:206)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:477)
	at com.zaxxer.hikari.pool.HikariPool.access$100(HikariPool.java:71)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:725)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:711)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: org.h2.jdbc.JdbcSQLNonTransientException: General error: "java.lang.IllegalStateException: The file is locked: nio:/home/lappy/Documents/workspace-spring-tool-suite-4-4.5.1.RELEASE/Microservices-Task/EquipmentMS/equipmentdb.mv.db [1.4.200/7]" [50000-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:505)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	... 33 more
Caused by: java.lang.IllegalStateException: The file is locked: nio:/home/lappy/Documents/workspace-spring-tool-suite-4-4.5.1.RELEASE/Microservices-Task/EquipmentMS/equipmentdb.mv.db [1.4.200/7]
	at org.h2.mvstore.DataUtils.newIllegalStateException(DataUtils.java:950)
	at org.h2.mvstore.FileStore.open(FileStore.java:166)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:381)
	... 27 more
Caused by: java.nio.channels.OverlappingFileLockException
	at java.base/sun.nio.ch.FileLockTable.checkList(FileLockTable.java:229)
	at java.base/sun.nio.ch.FileLockTable.add(FileLockTable.java:123)
	at java.base/sun.nio.ch.FileChannelImpl.tryLock(FileChannelImpl.java:1154)
	at org.h2.store.fs.FileNio.tryLock(FilePathNio.java:121)
	at java.base/java.nio.channels.FileChannel.tryLock(FileChannel.java:1165)
	at org.h2.mvstore.FileStore.open(FileStore.java:163)
	... 28 more
2020-06-01 18:50:59 database: flush
org.h2.message.DbException: General error: "java.lang.IllegalStateException: The file is locked: nio:/home/lappy/Documents/workspace-spring-tool-suite-4-4.5.1.RELEASE/Microservices-Task/EquipmentMS/equipmentdb.mv.db [1.4.200/7]" [50000-200]
	at org.h2.message.DbException.get(DbException.java:194)
	at org.h2.message.DbException.convert(DbException.java:347)
	at org.h2.mvstore.db.MVTableEngine$1.uncaughtException(MVTableEngine.java:93)
	at org.h2.mvstore.MVStore.handleException(MVStore.java:2877)
	at org.h2.mvstore.MVStore.panic(MVStore.java:481)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:402)
	at org.h2.mvstore.MVStore$Builder.open(MVStore.java:3579)
	at org.h2.mvstore.db.MVTableEngine$Store.open(MVTableEngine.java:170)
	at org.h2.mvstore.db.MVTableEngine.init(MVTableEngine.java:103)
	at org.h2.engine.Database.getPageStore(Database.java:2659)
	at org.h2.engine.Database.open(Database.java:675)
	at org.h2.engine.Database.openDatabase(Database.java:307)
	at org.h2.engine.Database.<init>(Database.java:301)
	at org.h2.engine.Engine.openSession(Engine.java:74)
	at org.h2.engine.Engine.openSession(Engine.java:192)
	at org.h2.engine.Engine.createSessionAndValidate(Engine.java:171)
	at org.h2.engine.Engine.createSession(Engine.java:166)
	at org.h2.engine.Engine.createSession(Engine.java:29)
	at org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:340)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:173)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:152)
	at org.h2.Driver.connect(Driver.java:69)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:138)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:358)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:206)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:477)
	at com.zaxxer.hikari.pool.HikariPool.access$100(HikariPool.java:71)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:725)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:711)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: org.h2.jdbc.JdbcSQLNonTransientException: General error: "java.lang.IllegalStateException: The file is locked: nio:/home/lappy/Documents/workspace-spring-tool-suite-4-4.5.1.RELEASE/Microservices-Task/EquipmentMS/equipmentdb.mv.db [1.4.200/7]" [50000-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:505)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	... 33 more
Caused by: java.lang.IllegalStateException: The file is locked: nio:/home/lappy/Documents/workspace-spring-tool-suite-4-4.5.1.RELEASE/Microservices-Task/EquipmentMS/equipmentdb.mv.db [1.4.200/7]
	at org.h2.mvstore.DataUtils.newIllegalStateException(DataUtils.java:950)
	at org.h2.mvstore.FileStore.open(FileStore.java:166)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:381)
	... 27 more
Caused by: java.nio.channels.OverlappingFileLockException
	at java.base/sun.nio.ch.FileLockTable.checkList(FileLockTable.java:229)
	at java.base/sun.nio.ch.FileLockTable.add(FileLockTable.java:123)
	at java.base/sun.nio.ch.FileChannelImpl.tryLock(FileChannelImpl.java:1154)
	at org.h2.store.fs.FileNio.tryLock(FilePathNio.java:121)
	at java.base/java.nio.channels.FileChannel.tryLock(FileChannel.java:1165)
	at org.h2.mvstore.FileStore.open(FileStore.java:163)
	... 28 more
2020-06-01 19:07:03 database: flush
org.h2.message.DbException: General error: "java.lang.IllegalStateException: The file is locked: nio:/home/lappy/Documents/workspace-spring-tool-suite-4-4.5.1.RELEASE/Microservices-Task/EquipmentMS/equipmentdb.mv.db [1.4.200/7]" [50000-200]
	at org.h2.message.DbException.get(DbException.java:194)
	at org.h2.message.DbException.convert(DbException.java:347)
	at org.h2.mvstore.db.MVTableEngine$1.uncaughtException(MVTableEngine.java:93)
	at org.h2.mvstore.MVStore.handleException(MVStore.java:2877)
	at org.h2.mvstore.MVStore.panic(MVStore.java:481)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:402)
	at org.h2.mvstore.MVStore$Builder.open(MVStore.java:3579)
	at org.h2.mvstore.db.MVTableEngine$Store.open(MVTableEngine.java:170)
	at org.h2.mvstore.db.MVTableEngine.init(MVTableEngine.java:103)
	at org.h2.engine.Database.getPageStore(Database.java:2659)
	at org.h2.engine.Database.open(Database.java:675)
	at org.h2.engine.Database.openDatabase(Database.java:307)
	at org.h2.engine.Database.<init>(Database.java:301)
	at org.h2.engine.Engine.openSession(Engine.java:74)
	at org.h2.engine.Engine.openSession(Engine.java:192)
	at org.h2.engine.Engine.createSessionAndValidate(Engine.java:171)
	at org.h2.engine.Engine.createSession(Engine.java:166)
	at org.h2.engine.Engine.createSession(Engine.java:29)
	at org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:340)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:173)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:152)
	at org.h2.Driver.connect(Driver.java:69)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:138)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:358)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:206)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:477)
	at com.zaxxer.hikari.pool.HikariPool.access$100(HikariPool.java:71)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:725)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:711)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: org.h2.jdbc.JdbcSQLNonTransientException: General error: "java.lang.IllegalStateException: The file is locked: nio:/home/lappy/Documents/workspace-spring-tool-suite-4-4.5.1.RELEASE/Microservices-Task/EquipmentMS/equipmentdb.mv.db [1.4.200/7]" [50000-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:505)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	... 33 more
Caused by: java.lang.IllegalStateException: The file is locked: nio:/home/lappy/Documents/workspace-spring-tool-suite-4-4.5.1.RELEASE/Microservices-Task/EquipmentMS/equipmentdb.mv.db [1.4.200/7]
	at org.h2.mvstore.DataUtils.newIllegalStateException(DataUtils.java:950)
	at org.h2.mvstore.FileStore.open(FileStore.java:166)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:381)
	... 27 more
Caused by: java.nio.channels.OverlappingFileLockException
	at java.base/sun.nio.ch.FileLockTable.checkList(FileLockTable.java:229)
	at java.base/sun.nio.ch.FileLockTable.add(FileLockTable.java:123)
	at java.base/sun.nio.ch.FileChannelImpl.tryLock(FileChannelImpl.java:1154)
	at org.h2.store.fs.FileNio.tryLock(FilePathNio.java:121)
	at java.base/java.nio.channels.FileChannel.tryLock(FileChannel.java:1165)
	at org.h2.mvstore.FileStore.open(FileStore.java:163)
	... 28 more
2020-06-17 22:25:40 database: flush
org.h2.message.DbException: General error: "java.lang.IllegalStateException: The file is locked: nio:/Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/EquipmentMS/equipmentdb.mv.db [1.4.200/7]" [50000-200]
	at org.h2.message.DbException.get(DbException.java:194)
	at org.h2.message.DbException.convert(DbException.java:347)
	at org.h2.mvstore.db.MVTableEngine$1.uncaughtException(MVTableEngine.java:93)
	at org.h2.mvstore.MVStore.handleException(MVStore.java:2877)
	at org.h2.mvstore.MVStore.panic(MVStore.java:481)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:402)
	at org.h2.mvstore.MVStore$Builder.open(MVStore.java:3579)
	at org.h2.mvstore.db.MVTableEngine$Store.open(MVTableEngine.java:170)
	at org.h2.mvstore.db.MVTableEngine.init(MVTableEngine.java:103)
	at org.h2.engine.Database.getPageStore(Database.java:2659)
	at org.h2.engine.Database.open(Database.java:675)
	at org.h2.engine.Database.openDatabase(Database.java:307)
	at org.h2.engine.Database.<init>(Database.java:301)
	at org.h2.engine.Engine.openSession(Engine.java:74)
	at org.h2.engine.Engine.openSession(Engine.java:192)
	at org.h2.engine.Engine.createSessionAndValidate(Engine.java:171)
	at org.h2.engine.Engine.createSession(Engine.java:166)
	at org.h2.engine.Engine.createSession(Engine.java:29)
	at org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:340)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:173)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:152)
	at org.h2.Driver.connect(Driver.java:69)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:138)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:358)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:206)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:477)
	at com.zaxxer.hikari.pool.HikariPool.access$100(HikariPool.java:71)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:725)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:711)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:832)
Caused by: org.h2.jdbc.JdbcSQLNonTransientException: General error: "java.lang.IllegalStateException: The file is locked: nio:/Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/EquipmentMS/equipmentdb.mv.db [1.4.200/7]" [50000-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:505)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	... 33 more
Caused by: java.lang.IllegalStateException: The file is locked: nio:/Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/EquipmentMS/equipmentdb.mv.db [1.4.200/7]
	at org.h2.mvstore.DataUtils.newIllegalStateException(DataUtils.java:950)
	at org.h2.mvstore.FileStore.open(FileStore.java:166)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:381)
	... 27 more
Caused by: java.nio.channels.OverlappingFileLockException
	at java.base/sun.nio.ch.FileLockTable.checkList(FileLockTable.java:229)
	at java.base/sun.nio.ch.FileLockTable.add(FileLockTable.java:123)
	at java.base/sun.nio.ch.FileChannelImpl.tryLock(FileChannelImpl.java:1286)
	at org.h2.store.fs.FileNio.tryLock(FilePathNio.java:121)
	at java.base/java.nio.channels.FileChannel.tryLock(FileChannel.java:1178)
	at org.h2.mvstore.FileStore.open(FileStore.java:163)
	... 28 more
2020-06-17 22:25:40 database: flush
org.h2.message.DbException: General error: "java.lang.IllegalStateException: The file is locked: nio:/Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/EquipmentMS/equipmentdb.mv.db [1.4.200/7]" [50000-200]
	at org.h2.message.DbException.get(DbException.java:194)
	at org.h2.message.DbException.convert(DbException.java:347)
	at org.h2.mvstore.db.MVTableEngine$1.uncaughtException(MVTableEngine.java:93)
	at org.h2.mvstore.MVStore.handleException(MVStore.java:2877)
	at org.h2.mvstore.MVStore.panic(MVStore.java:481)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:402)
	at org.h2.mvstore.MVStore$Builder.open(MVStore.java:3579)
	at org.h2.mvstore.db.MVTableEngine$Store.open(MVTableEngine.java:170)
	at org.h2.mvstore.db.MVTableEngine.init(MVTableEngine.java:103)
	at org.h2.engine.Database.getPageStore(Database.java:2659)
	at org.h2.engine.Database.open(Database.java:675)
	at org.h2.engine.Database.openDatabase(Database.java:307)
	at org.h2.engine.Database.<init>(Database.java:301)
	at org.h2.engine.Engine.openSession(Engine.java:74)
	at org.h2.engine.Engine.openSession(Engine.java:192)
	at org.h2.engine.Engine.createSessionAndValidate(Engine.java:171)
	at org.h2.engine.Engine.createSession(Engine.java:166)
	at org.h2.engine.Engine.createSession(Engine.java:29)
	at org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:340)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:173)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:152)
	at org.h2.Driver.connect(Driver.java:69)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:138)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:358)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:206)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:477)
	at com.zaxxer.hikari.pool.HikariPool.access$100(HikariPool.java:71)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:725)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:711)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:832)
Caused by: org.h2.jdbc.JdbcSQLNonTransientException: General error: "java.lang.IllegalStateException: The file is locked: nio:/Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/EquipmentMS/equipmentdb.mv.db [1.4.200/7]" [50000-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:505)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	... 33 more
Caused by: java.lang.IllegalStateException: The file is locked: nio:/Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/EquipmentMS/equipmentdb.mv.db [1.4.200/7]
	at org.h2.mvstore.DataUtils.newIllegalStateException(DataUtils.java:950)
	at org.h2.mvstore.FileStore.open(FileStore.java:166)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:381)
	... 27 more
Caused by: java.nio.channels.OverlappingFileLockException
	at java.base/sun.nio.ch.FileLockTable.checkList(FileLockTable.java:229)
	at java.base/sun.nio.ch.FileLockTable.add(FileLockTable.java:123)
	at java.base/sun.nio.ch.FileChannelImpl.tryLock(FileChannelImpl.java:1286)
	at org.h2.store.fs.FileNio.tryLock(FilePathNio.java:121)
	at java.base/java.nio.channels.FileChannel.tryLock(FileChannel.java:1178)
	at org.h2.mvstore.FileStore.open(FileStore.java:163)
	... 28 more
2020-06-17 22:31:15 jdbc[13]: 
/**/Connection conn10 = DriverManager.getConnection("jdbc:h2:file:./equipmentdb;TRACE_LEVEL_FILE=3;FORBID_CREATION=TRUE", "SA", "");
2020-06-17 22:31:15 jdbc[13]: 
/**/DatabaseMetaData dbMeta3 = conn10.getMetaData();
2020-06-17 22:31:15 jdbc[13]: 
/**/PreparedStatement prep11 = conn10.prepareStatement("SELECT NAME, VALUE FROM INFORMATION_SCHEMA.SETTINGS WHERE NAME IN (?, ?, ?, ?)");
2020-06-17 22:31:15 jdbc[13]: Plan       : calculate cost for plan [SETTINGS:-7:org.h2.table.MetaTable@50fe7234]
2020-06-17 22:31:15 jdbc[13]: Plan       :   for table filter SETTINGS:-7:org.h2.table.MetaTable@50fe7234
2020-06-17 22:31:15 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 22:31:15 jdbc[13]: Plan       :   best plan item cost 9,900 index meta
2020-06-17 22:31:15 jdbc[13]: Plan       : plan cost 9,901
2020-06-17 22:31:15 jdbc[13]: 
/**/prep11.setString(1, "MODE");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep11.setString(2, "DATABASE_TO_UPPER");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep11.setString(3, "DATABASE_TO_LOWER");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep11.setString(4, "CASE_INSENSITIVE_IDENTIFIERS");
2020-06-17 22:31:15 jdbc[13]: 
/**/ResultSet rs16 = prep11.executeQuery();
2020-06-17 22:31:15 jdbc[13]: 
/*SQL l:78 #:4*/SELECT NAME, VALUE FROM INFORMATION_SCHEMA.SETTINGS WHERE NAME IN (?, ?, ?, ?) {1: 'MODE', 2: 'DATABASE_TO_UPPER', 3: 'DATABASE_TO_LOWER', 4: 'CASE_INSENSITIVE_IDENTIFIERS'};
2020-06-17 22:31:15 jdbc[13]: 
/**/rs16.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs16.getString(2);
2020-06-17 22:31:15 jdbc[13]: 
/**/rs16.getString(1);
2020-06-17 22:31:15 jdbc[13]: 
/**/rs16.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs16.getString(2);
2020-06-17 22:31:15 jdbc[13]: 
/**/rs16.getString(1);
2020-06-17 22:31:15 jdbc[13]: 
/**/rs16.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs16.getString(2);
2020-06-17 22:31:15 jdbc[13]: 
/**/rs16.getString(1);
2020-06-17 22:31:15 jdbc[13]: 
/**/rs16.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs16.getString(2);
2020-06-17 22:31:15 jdbc[13]: 
/**/rs16.getString(1);
2020-06-17 22:31:15 jdbc[13]: 
/**/rs16.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/prep11.close();
2020-06-17 22:31:15 jdbc[13]: 
/**/DatabaseMetaData dbMeta4 = conn10.getMetaData();
2020-06-17 22:31:15 jdbc[13]: 
/**/dbMeta4.getSchemas();
2020-06-17 22:31:15 jdbc[13]: 
/**/PreparedStatement prep12 = conn10.prepareStatement("SELECT SCHEMA_NAME TABLE_SCHEM, CATALOG_NAME TABLE_CATALOG,  IS_DEFAULT FROM INFORMATION_SCHEMA.SCHEMATA ORDER BY SCHEMA_NAME");
2020-06-17 22:31:15 jdbc[13]: Plan       : calculate cost for plan [SCHEMATA:-14:org.h2.table.MetaTable@46aee0f]
2020-06-17 22:31:15 jdbc[13]: Plan       :   for table filter SCHEMATA:-14:org.h2.table.MetaTable@46aee0f
2020-06-17 22:31:15 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 22:31:15 jdbc[13]: Plan       :   best plan item cost 10,000 index meta
2020-06-17 22:31:15 jdbc[13]: Plan       : plan cost 10,001
2020-06-17 22:31:15 jdbc[13]: 
/**/ResultSet rs17 = prep12.executeQuery();
2020-06-17 22:31:15 jdbc[13]: 
/*SQL #:2*/SELECT SCHEMA_NAME TABLE_SCHEM, CATALOG_NAME TABLE_CATALOG,  IS_DEFAULT FROM INFORMATION_SCHEMA.SCHEMATA ORDER BY SCHEMA_NAME;
2020-06-17 22:31:15 jdbc[13]: 
/**/rs17.findColumn("IS_DEFAULT");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs17.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs17.getBoolean(3);
2020-06-17 22:31:15 jdbc[13]: 
/**/rs17.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs17.getBoolean(3);
2020-06-17 22:31:15 jdbc[13]: 
/**/rs17.getString("TABLE_SCHEM");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs17.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/dbMeta4.getSchemas();
2020-06-17 22:31:15 jdbc[13]: 
/**/PreparedStatement prep13 = conn10.prepareStatement("SELECT SCHEMA_NAME TABLE_SCHEM, CATALOG_NAME TABLE_CATALOG,  IS_DEFAULT FROM INFORMATION_SCHEMA.SCHEMATA ORDER BY SCHEMA_NAME");
2020-06-17 22:31:15 jdbc[13]: Plan       : calculate cost for plan [SCHEMATA:-14:org.h2.table.MetaTable@46aee0f]
2020-06-17 22:31:15 jdbc[13]: Plan       :   for table filter SCHEMATA:-14:org.h2.table.MetaTable@46aee0f
2020-06-17 22:31:15 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 22:31:15 jdbc[13]: Plan       :   best plan item cost 10,000 index meta
2020-06-17 22:31:15 jdbc[13]: Plan       : plan cost 10,001
2020-06-17 22:31:15 jdbc[13]: 
/**/ResultSet rs18 = prep13.executeQuery();
2020-06-17 22:31:15 jdbc[13]: 
/*SQL #:2*/SELECT SCHEMA_NAME TABLE_SCHEM, CATALOG_NAME TABLE_CATALOG,  IS_DEFAULT FROM INFORMATION_SCHEMA.SCHEMATA ORDER BY SCHEMA_NAME;
2020-06-17 22:31:15 jdbc[13]: 
/**/rs18.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs18.getString("TABLE_SCHEM");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs18.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs18.getString("TABLE_SCHEM");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs18.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs18.close();
2020-06-17 22:31:15 jdbc[13]: 
/**/prep13.close();
2020-06-17 22:31:15 jdbc[13]: 
/**/dbMeta4.getTables(null, "INFORMATION_SCHEMA", null, new String[]{"TABLE", "SYSTEM TABLE", "VIEW", "SYSTEM VIEW", "TABLE LINK", "SYNONYM", "EXTERNAL"});
2020-06-17 22:31:15 jdbc[13]: 
/**/PreparedStatement prep14 = conn10.prepareStatement("SELECT TABLE_CAT, TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_CAT, TYPE_SCHEM, TYPE_NAME, SELF_REFERENCING_COL_NAME, REF_GENERATION, SQL FROM (SELECT SYNONYM_CATALOG TABLE_CAT, SYNONYM_SCHEMA TABLE_SCHEM, SYNONYM_NAME as TABLE_NAME, TYPE_NAME AS TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME AS TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, NULL AS SQL FROM INFORMATION_SCHEMA.SYNONYMS WHERE SYNONYM_CATALOG LIKE ?1 ESCAPE ?4 AND SYNONYM_SCHEMA LIKE ?2 ESCAPE ?4 AND SYNONYM_NAME LIKE ?3 ESCAPE ?4 UNION SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5, ?6, ?7, ?8, ?9, ?10, ?11)) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME");
2020-06-17 22:31:15 jdbc[13]: Plan       : calculate cost for plan [_0]
2020-06-17 22:31:15 jdbc[13]: Plan       :   for table filter _0
2020-06-17 22:31:15 jdbc[13]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@5184bf29]
2020-06-17 22:31:15 jdbc[13]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@5184bf29
2020-06-17 22:31:15 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 22:31:15 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 22:31:15 jdbc[13]: Plan       :   best plan item cost 4,022 index meta
2020-06-17 22:31:15 jdbc[13]: Plan       : plan cost 4,023
2020-06-17 22:31:15 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@7b3e34d0]
2020-06-17 22:31:15 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@7b3e34d0
2020-06-17 22:31:15 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 22:31:15 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 22:31:15 jdbc[13]: Plan       :   best plan item cost 3,981.78 index meta
2020-06-17 22:31:15 jdbc[13]: Plan       : plan cost 3,982.78
2020-06-17 22:31:15 jdbc[13]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@5184bf29]
2020-06-17 22:31:15 jdbc[13]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@5184bf29
2020-06-17 22:31:15 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 22:31:15 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 22:31:15 jdbc[13]: Plan       :   best plan item cost 4,022 index meta
2020-06-17 22:31:15 jdbc[13]: Plan       : plan cost 4,023
2020-06-17 22:31:15 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@7b3e34d0]
2020-06-17 22:31:15 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@7b3e34d0
2020-06-17 22:31:15 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 22:31:15 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 22:31:15 jdbc[13]: Plan       :   best plan item cost 3,981.78 index meta
2020-06-17 22:31:15 jdbc[13]: Plan       : plan cost 3,982.78
2020-06-17 22:31:15 jdbc[13]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@5184bf29]
2020-06-17 22:31:15 jdbc[13]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@5184bf29
2020-06-17 22:31:15 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 22:31:15 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 22:31:15 jdbc[13]: Plan       :   best plan item cost 4,022 index meta
2020-06-17 22:31:15 jdbc[13]: Plan       : plan cost 4,023
2020-06-17 22:31:15 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@7b3e34d0]
2020-06-17 22:31:15 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@7b3e34d0
2020-06-17 22:31:15 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 22:31:15 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 22:31:15 jdbc[13]: Plan       :   best plan item cost 3,981.78 index meta
2020-06-17 22:31:15 jdbc[13]: Plan       : plan cost 3,982.78
2020-06-17 22:31:15 jdbc[13]: Plan       :   best plan item cost 8,005.78 index (SELECT
    SYNONYM_CATALOG AS TABLE_CAT,
    SYNONYM_SCHEMA AS TABLE_SCHEM,
    SYNONYM_NAME AS TABLE_NAME,
    TYPE_NAME AS TABLE_TYPE,
    REMARKS,
    TYPE_NAME AS TYPE_CAT,
    TYPE_NAME AS TYPE_SCHEM,
    TYPE_NAME AS TYPE_NAME,
    TYPE_NAME AS SELF_REFERENCING_COL_NAME,
    TYPE_NAME AS REF_GENERATION,
    NULL AS SQL
FROM INFORMATION_SCHEMA.SYNONYMS
    /* meta */
WHERE (SYNONYM_NAME LIKE ?3 ESCAPE ?4)
    AND ((SYNONYM_CATALOG LIKE ?1 ESCAPE ?4)
    AND (SYNONYM_SCHEMA LIKE ?2 ESCAPE ?4)))
UNION
(SELECT
    TABLE_CATALOG AS TABLE_CAT,
    TABLE_SCHEMA AS TABLE_SCHEM,
    TABLE_NAME,
    TABLE_TYPE,
    REMARKS,
    TYPE_NAME AS TYPE_CAT,
    TYPE_NAME AS TYPE_SCHEM,
    TYPE_NAME,
    TYPE_NAME AS SELF_REFERENCING_COL_NAME,
    TYPE_NAME AS REF_GENERATION,
    SQL
FROM INFORMATION_SCHEMA.TABLES
    /* meta */
WHERE (TABLE_TYPE IN(?5, ?6, ?7, ?8, ?9, ?10, ?11))
    AND ((TABLE_NAME LIKE ?3 ESCAPE ?4)
    AND ((TABLE_CATALOG LIKE ?1 ESCAPE ?4)
    AND (TABLE_SCHEMA LIKE ?2 ESCAPE ?4))))
2020-06-17 22:31:15 jdbc[13]: Plan       : plan cost 8,006.78
2020-06-17 22:31:15 jdbc[13]: 
/**/prep14.setString(1, "%");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep14.setString(2, "INFORMATION_SCHEMA");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep14.setString(3, "%");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep14.setString(4, "\\");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep14.setString(5, "TABLE");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep14.setString(6, "SYSTEM TABLE");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep14.setString(7, "VIEW");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep14.setString(8, "SYSTEM VIEW");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep14.setString(9, "TABLE LINK");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep14.setString(10, "SYNONYM");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep14.setString(11, "EXTERNAL");
2020-06-17 22:31:15 jdbc[13]: 
/**/ResultSet rs19 = prep14.executeQuery();
2020-06-17 22:31:15 jdbc[13]: Plan       : calculate cost for plan [_1]
2020-06-17 22:31:15 jdbc[13]: Plan       :   for table filter _1
2020-06-17 22:31:15 jdbc[13]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@5184bf29]
2020-06-17 22:31:15 jdbc[13]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@5184bf29
2020-06-17 22:31:15 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 22:31:15 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 22:31:15 jdbc[13]: Plan       :   best plan item cost 4,022 index meta
2020-06-17 22:31:15 jdbc[13]: Plan       : plan cost 4,023
2020-06-17 22:31:15 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@7b3e34d0]
2020-06-17 22:31:15 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@7b3e34d0
2020-06-17 22:31:15 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 22:31:15 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 22:31:15 jdbc[13]: Plan       :   best plan item cost 3,981.78 index meta
2020-06-17 22:31:15 jdbc[13]: Plan       : plan cost 3,982.78
2020-06-17 22:31:15 jdbc[13]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@5184bf29]
2020-06-17 22:31:15 jdbc[13]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@5184bf29
2020-06-17 22:31:15 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 22:31:15 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 22:31:15 jdbc[13]: Plan       :   best plan item cost 4,022 index meta
2020-06-17 22:31:15 jdbc[13]: Plan       : plan cost 4,023
2020-06-17 22:31:15 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@7b3e34d0]
2020-06-17 22:31:15 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@7b3e34d0
2020-06-17 22:31:15 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 22:31:15 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 22:31:15 jdbc[13]: Plan       :   best plan item cost 3,981.78 index meta
2020-06-17 22:31:15 jdbc[13]: Plan       : plan cost 3,982.78
2020-06-17 22:31:15 jdbc[13]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@5184bf29]
2020-06-17 22:31:15 jdbc[13]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@5184bf29
2020-06-17 22:31:15 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 22:31:15 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 22:31:15 jdbc[13]: Plan       :   best plan item cost 4,022 index meta
2020-06-17 22:31:15 jdbc[13]: Plan       : plan cost 4,023
2020-06-17 22:31:15 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@7b3e34d0]
2020-06-17 22:31:15 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@7b3e34d0
2020-06-17 22:31:15 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 22:31:15 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 22:31:15 jdbc[13]: Plan       :   best plan item cost 3,981.78 index meta
2020-06-17 22:31:15 jdbc[13]: Plan       : plan cost 3,982.78
2020-06-17 22:31:15 jdbc[13]: Plan       :   best plan item cost 8,005.78 index (SELECT
    SYNONYM_CATALOG AS TABLE_CAT,
    SYNONYM_SCHEMA AS TABLE_SCHEM,
    SYNONYM_NAME AS TABLE_NAME,
    TYPE_NAME AS TABLE_TYPE,
    REMARKS,
    TYPE_NAME AS TYPE_CAT,
    TYPE_NAME AS TYPE_SCHEM,
    TYPE_NAME AS TYPE_NAME,
    TYPE_NAME AS SELF_REFERENCING_COL_NAME,
    TYPE_NAME AS REF_GENERATION,
    NULL AS SQL
FROM INFORMATION_SCHEMA.SYNONYMS
    /* meta */
WHERE (SYNONYM_NAME LIKE ?3 ESCAPE ?4)
    AND ((SYNONYM_CATALOG LIKE ?1 ESCAPE ?4)
    AND (SYNONYM_SCHEMA LIKE ?2 ESCAPE ?4)))
UNION
(SELECT
    TABLE_CATALOG AS TABLE_CAT,
    TABLE_SCHEMA AS TABLE_SCHEM,
    TABLE_NAME,
    TABLE_TYPE,
    REMARKS,
    TYPE_NAME AS TYPE_CAT,
    TYPE_NAME AS TYPE_SCHEM,
    TYPE_NAME,
    TYPE_NAME AS SELF_REFERENCING_COL_NAME,
    TYPE_NAME AS REF_GENERATION,
    SQL
FROM INFORMATION_SCHEMA.TABLES
    /* meta */
WHERE (TABLE_TYPE IN(?5, ?6, ?7, ?8, ?9, ?10, ?11))
    AND ((TABLE_NAME LIKE ?3 ESCAPE ?4)
    AND ((TABLE_CATALOG LIKE ?1 ESCAPE ?4)
    AND (TABLE_SCHEMA LIKE ?2 ESCAPE ?4))))
2020-06-17 22:31:15 jdbc[13]: Plan       : plan cost 8,006.78
2020-06-17 22:31:15 jdbc[13]: 
/*SQL l:1007 #:33 t:2*/SELECT TABLE_CAT, TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_CAT, TYPE_SCHEM, TYPE_NAME, SELF_REFERENCING_COL_NAME, REF_GENERATION, SQL FROM (SELECT SYNONYM_CATALOG TABLE_CAT, SYNONYM_SCHEMA TABLE_SCHEM, SYNONYM_NAME as TABLE_NAME, TYPE_NAME AS TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME AS TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, NULL AS SQL FROM INFORMATION_SCHEMA.SYNONYMS WHERE SYNONYM_CATALOG LIKE ?1 ESCAPE ?4 AND SYNONYM_SCHEMA LIKE ?2 ESCAPE ?4 AND SYNONYM_NAME LIKE ?3 ESCAPE ?4 UNION SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5, ?6, ?7, ?8, ?9, ?10, ?11)) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME {1: '%', 2: 'INFORMATION_SCHEMA', 3: '%', 4: '\\', 5: 'TABLE', 6: 'SYSTEM TABLE', 7: 'VIEW', 8: 'SYSTEM VIEW', 9: 'TABLE LINK', 10: 'SYNONYM', 11: 'EXTERNAL'};
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.getString("TABLE_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.getString("TABLE_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.getString("TABLE_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.getString("TABLE_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.getString("TABLE_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.getString("TABLE_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.getString("TABLE_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.getString("TABLE_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.getString("TABLE_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.getString("TABLE_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.getString("TABLE_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.getString("TABLE_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.getString("TABLE_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.getString("TABLE_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.getString("TABLE_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.getString("TABLE_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.getString("TABLE_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.getString("TABLE_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.getString("TABLE_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.getString("TABLE_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.getString("TABLE_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.getString("TABLE_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.getString("TABLE_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.getString("TABLE_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.getString("TABLE_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.getString("TABLE_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.getString("TABLE_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.getString("TABLE_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.getString("TABLE_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.getString("TABLE_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.getString("TABLE_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.getString("TABLE_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.getString("TABLE_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.getString("TABLE_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.getString("TABLE_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.getString("TABLE_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.getString("TABLE_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.getString("TABLE_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.getString("TABLE_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.getString("TABLE_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.getString("TABLE_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.getString("TABLE_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.getString("TABLE_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.getString("TABLE_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.getString("TABLE_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.getString("TABLE_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.getString("TABLE_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.getString("TABLE_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.getString("TABLE_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.getString("TABLE_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.getString("TABLE_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.getString("TABLE_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.getString("TABLE_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.getString("TABLE_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.getString("TABLE_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.getString("TABLE_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.getString("TABLE_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.getString("TABLE_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.getString("TABLE_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.getString("TABLE_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.getString("TABLE_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.getString("TABLE_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.getString("TABLE_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.getString("TABLE_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.getString("TABLE_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.getString("TABLE_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs19.close();
2020-06-17 22:31:15 jdbc[13]: 
/**/prep14.close();
2020-06-17 22:31:15 jdbc[13]: 
/**/dbMeta4.getConnection();
2020-06-17 22:31:15 jdbc[13]: 
/**/PreparedStatement prep15 = conn10.prepareStatement("SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ?");
2020-06-17 22:31:15 jdbc[13]: Plan       : calculate cost for plan [COLUMNS:-2:org.h2.table.MetaTable@7cd9e6c7]
2020-06-17 22:31:15 jdbc[13]: Plan       :   for table filter COLUMNS:-2:org.h2.table.MetaTable@7cd9e6c7
2020-06-17 22:31:15 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 22:31:15 jdbc[13]: Table      :     potential plan item cost 28 index meta
2020-06-17 22:31:15 jdbc[13]: Plan       :   best plan item cost 27.44 index meta
2020-06-17 22:31:15 jdbc[13]: Plan       : plan cost 28.44
2020-06-17 22:31:15 jdbc[13]: 
/**/prep15.setString(1, "INFORMATION_SCHEMA");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep15.setString(2, "CATALOGS");
2020-06-17 22:31:15 jdbc[13]: 
/**/ResultSet rs20 = prep15.executeQuery();
2020-06-17 22:31:15 jdbc[13]: 
/*SQL l:123 #:1*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'CATALOGS'};
2020-06-17 22:31:15 jdbc[13]: 
/**/rs20.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs20.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs20.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs20.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs20.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs20.close();
2020-06-17 22:31:15 jdbc[13]: 
/**/prep15.setString(1, "INFORMATION_SCHEMA");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep15.setString(2, "COLLATIONS");
2020-06-17 22:31:15 jdbc[13]: 
/**/ResultSet rs21 = prep15.executeQuery();
2020-06-17 22:31:15 jdbc[13]: 
/*SQL l:123 #:2*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'COLLATIONS'};
2020-06-17 22:31:15 jdbc[13]: 
/**/rs21.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs21.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs21.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs21.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs21.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs21.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs21.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs21.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs21.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs21.close();
2020-06-17 22:31:15 jdbc[13]: 
/**/prep15.setString(1, "INFORMATION_SCHEMA");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep15.setString(2, "COLUMNS");
2020-06-17 22:31:15 jdbc[13]: 
/**/ResultSet rs22 = prep15.executeQuery();
2020-06-17 22:31:15 jdbc[13]: 
/*SQL l:123 #:32*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'COLUMNS'};
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs22.close();
2020-06-17 22:31:15 jdbc[13]: 
/**/prep15.setString(1, "INFORMATION_SCHEMA");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep15.setString(2, "COLUMN_PRIVILEGES");
2020-06-17 22:31:15 jdbc[13]: 
/**/ResultSet rs23 = prep15.executeQuery();
2020-06-17 22:31:15 jdbc[13]: 
/*SQL l:123 #:8*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'COLUMN_PRIVILEGES'};
2020-06-17 22:31:15 jdbc[13]: 
/**/rs23.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs23.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs23.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs23.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs23.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs23.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs23.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs23.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs23.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs23.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs23.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs23.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs23.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs23.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs23.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs23.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs23.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs23.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs23.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs23.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs23.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs23.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs23.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs23.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs23.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs23.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs23.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs23.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs23.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs23.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs23.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs23.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs23.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs23.close();
2020-06-17 22:31:15 jdbc[13]: 
/**/prep15.setString(1, "INFORMATION_SCHEMA");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep15.setString(2, "CONSTANTS");
2020-06-17 22:31:15 jdbc[13]: 
/**/ResultSet rs24 = prep15.executeQuery();
2020-06-17 22:31:15 jdbc[13]: 
/*SQL l:123 #:7*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'CONSTANTS'};
2020-06-17 22:31:15 jdbc[13]: 
/**/rs24.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs24.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs24.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs24.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs24.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs24.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs24.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs24.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs24.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs24.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs24.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs24.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs24.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs24.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs24.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs24.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs24.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs24.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs24.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs24.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs24.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs24.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs24.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs24.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs24.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs24.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs24.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs24.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs24.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs24.close();
2020-06-17 22:31:15 jdbc[13]: 
/**/prep15.setString(1, "INFORMATION_SCHEMA");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep15.setString(2, "CONSTRAINTS");
2020-06-17 22:31:15 jdbc[13]: 
/**/ResultSet rs25 = prep15.executeQuery();
2020-06-17 22:31:15 jdbc[13]: 
/*SQL l:123 #:13*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'CONSTRAINTS'};
2020-06-17 22:31:15 jdbc[13]: 
/**/rs25.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs25.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs25.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs25.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs25.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs25.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs25.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs25.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs25.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs25.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs25.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs25.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs25.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs25.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs25.close();
2020-06-17 22:31:15 jdbc[13]: 
/**/prep15.setString(1, "INFORMATION_SCHEMA");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep15.setString(2, "CROSS_REFERENCES");
2020-06-17 22:31:15 jdbc[13]: 
/**/ResultSet rs26 = prep15.executeQuery();
2020-06-17 22:31:15 jdbc[13]: 
/*SQL l:123 #:14*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'CROSS_REFERENCES'};
2020-06-17 22:31:15 jdbc[13]: 
/**/rs26.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs26.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs26.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs26.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs26.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs26.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs26.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs26.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs26.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs26.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs26.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs26.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs26.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs26.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs26.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs26.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs26.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs26.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs26.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs26.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs26.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs26.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs26.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs26.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs26.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs26.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs26.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs26.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs26.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs26.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs26.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs26.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs26.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs26.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs26.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs26.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs26.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs26.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs26.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs26.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs26.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs26.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs26.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs26.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs26.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs26.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs26.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs26.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs26.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs26.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs26.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs26.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs26.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs26.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs26.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs26.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs26.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs26.close();
2020-06-17 22:31:15 jdbc[13]: 
/**/prep15.setString(1, "INFORMATION_SCHEMA");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep15.setString(2, "DOMAINS");
2020-06-17 22:31:15 jdbc[13]: 
/**/ResultSet rs27 = prep15.executeQuery();
2020-06-17 22:31:15 jdbc[13]: 
/*SQL l:123 #:14*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'DOMAINS'};
2020-06-17 22:31:15 jdbc[13]: 
/**/rs27.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs27.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs27.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs27.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs27.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs27.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs27.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs27.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs27.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs27.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs27.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs27.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs27.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs27.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs27.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs27.close();
2020-06-17 22:31:15 jdbc[13]: 
/**/prep15.setString(1, "INFORMATION_SCHEMA");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep15.setString(2, "FUNCTION_ALIASES");
2020-06-17 22:31:15 jdbc[13]: 
/**/ResultSet rs28 = prep15.executeQuery();
2020-06-17 22:31:15 jdbc[13]: 
/*SQL l:123 #:12*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'FUNCTION_ALIASES'};
2020-06-17 22:31:15 jdbc[13]: 
/**/rs28.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs28.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs28.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs28.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs28.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs28.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs28.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs28.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs28.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs28.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs28.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs28.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs28.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs28.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs28.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs28.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs28.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs28.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs28.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs28.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs28.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs28.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs28.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs28.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs28.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs28.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs28.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs28.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs28.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs28.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs28.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs28.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs28.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs28.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs28.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs28.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs28.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs28.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs28.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs28.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs28.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs28.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs28.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs28.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs28.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs28.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs28.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs28.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs28.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs28.close();
2020-06-17 22:31:15 jdbc[13]: 
/**/prep15.setString(1, "INFORMATION_SCHEMA");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep15.setString(2, "FUNCTION_COLUMNS");
2020-06-17 22:31:15 jdbc[13]: 
/**/ResultSet rs29 = prep15.executeQuery();
2020-06-17 22:31:15 jdbc[13]: 
/*SQL l:123 #:17 t:7*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'FUNCTION_COLUMNS'};
2020-06-17 22:31:15 jdbc[13]: 
/**/rs29.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs29.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs29.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs29.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs29.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs29.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs29.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs29.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs29.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs29.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs29.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs29.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs29.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs29.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs29.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs29.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs29.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs29.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs29.close();
2020-06-17 22:31:15 jdbc[13]: 
/**/prep15.setString(1, "INFORMATION_SCHEMA");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep15.setString(2, "HELP");
2020-06-17 22:31:15 jdbc[13]: 
/**/ResultSet rs30 = prep15.executeQuery();
2020-06-17 22:31:15 jdbc[13]: 
/*SQL l:123 #:5*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'HELP'};
2020-06-17 22:31:15 jdbc[13]: 
/**/rs30.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs30.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs30.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs30.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs30.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs30.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs30.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs30.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs30.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs30.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs30.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs30.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs30.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs30.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs30.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs30.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs30.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs30.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs30.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs30.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs30.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs30.close();
2020-06-17 22:31:15 jdbc[13]: 
/**/prep15.setString(1, "INFORMATION_SCHEMA");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep15.setString(2, "INDEXES");
2020-06-17 22:31:15 jdbc[13]: 
/**/ResultSet rs31 = prep15.executeQuery();
2020-06-17 22:31:15 jdbc[13]: 
/*SQL l:123 #:22*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'INDEXES'};
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs31.close();
2020-06-17 22:31:15 jdbc[13]: 
/**/prep15.setString(1, "INFORMATION_SCHEMA");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep15.setString(2, "IN_DOUBT");
2020-06-17 22:31:15 jdbc[13]: 
/**/ResultSet rs32 = prep15.executeQuery();
2020-06-17 22:31:15 jdbc[13]: 
/*SQL l:123 #:2*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'IN_DOUBT'};
2020-06-17 22:31:15 jdbc[13]: 
/**/rs32.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs32.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs32.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs32.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs32.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs32.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs32.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs32.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs32.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs32.close();
2020-06-17 22:31:15 jdbc[13]: 
/**/prep15.setString(1, "INFORMATION_SCHEMA");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep15.setString(2, "KEY_COLUMN_USAGE");
2020-06-17 22:31:15 jdbc[13]: 
/**/ResultSet rs33 = prep15.executeQuery();
2020-06-17 22:31:15 jdbc[13]: 
/*SQL l:123 #:9*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'KEY_COLUMN_USAGE'};
2020-06-17 22:31:15 jdbc[13]: 
/**/rs33.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs33.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs33.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs33.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs33.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs33.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs33.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs33.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs33.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs33.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs33.close();
2020-06-17 22:31:15 jdbc[13]: 
/**/prep15.setString(1, "INFORMATION_SCHEMA");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep15.setString(2, "LOCKS");
2020-06-17 22:31:15 jdbc[13]: 
/**/ResultSet rs34 = prep15.executeQuery();
2020-06-17 22:31:15 jdbc[13]: 
/*SQL l:123 #:4*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'LOCKS'};
2020-06-17 22:31:15 jdbc[13]: 
/**/rs34.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs34.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs34.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs34.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs34.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs34.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs34.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs34.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs34.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs34.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs34.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs34.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs34.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs34.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs34.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs34.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs34.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs34.close();
2020-06-17 22:31:15 jdbc[13]: 
/**/prep15.setString(1, "INFORMATION_SCHEMA");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep15.setString(2, "QUERY_STATISTICS");
2020-06-17 22:31:15 jdbc[13]: 
/**/ResultSet rs35 = prep15.executeQuery();
2020-06-17 22:31:15 jdbc[13]: 
/*SQL l:123 #:12*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'QUERY_STATISTICS'};
2020-06-17 22:31:15 jdbc[13]: 
/**/rs35.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs35.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs35.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs35.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs35.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs35.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs35.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs35.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs35.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs35.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs35.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs35.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs35.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs35.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs35.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs35.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs35.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs35.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs35.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs35.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs35.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs35.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs35.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs35.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs35.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs35.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs35.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs35.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs35.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs35.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs35.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs35.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs35.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs35.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs35.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs35.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs35.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs35.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs35.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs35.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs35.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs35.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs35.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs35.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs35.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs35.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs35.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs35.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs35.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs35.close();
2020-06-17 22:31:15 jdbc[13]: 
/**/prep15.setString(1, "INFORMATION_SCHEMA");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep15.setString(2, "REFERENTIAL_CONSTRAINTS");
2020-06-17 22:31:15 jdbc[13]: 
/**/ResultSet rs36 = prep15.executeQuery();
2020-06-17 22:31:15 jdbc[13]: 
/*SQL l:123 #:9*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'REFERENTIAL_CONSTRAINTS'};
2020-06-17 22:31:15 jdbc[13]: 
/**/rs36.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs36.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs36.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs36.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs36.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs36.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs36.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs36.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs36.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs36.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs36.close();
2020-06-17 22:31:15 jdbc[13]: 
/**/prep15.setString(1, "INFORMATION_SCHEMA");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep15.setString(2, "RIGHTS");
2020-06-17 22:31:15 jdbc[13]: 
/**/ResultSet rs37 = prep15.executeQuery();
2020-06-17 22:31:15 jdbc[13]: 
/*SQL l:123 #:7*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'RIGHTS'};
2020-06-17 22:31:15 jdbc[13]: 
/**/rs37.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs37.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs37.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs37.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs37.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs37.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs37.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs37.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs37.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs37.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs37.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs37.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs37.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs37.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs37.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs37.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs37.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs37.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs37.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs37.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs37.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs37.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs37.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs37.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs37.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs37.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs37.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs37.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs37.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs37.close();
2020-06-17 22:31:15 jdbc[13]: 
/**/prep15.setString(1, "INFORMATION_SCHEMA");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep15.setString(2, "ROLES");
2020-06-17 22:31:15 jdbc[13]: 
/**/ResultSet rs38 = prep15.executeQuery();
2020-06-17 22:31:15 jdbc[13]: 
/*SQL l:123 #:3*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'ROLES'};
2020-06-17 22:31:15 jdbc[13]: 
/**/rs38.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs38.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs38.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs38.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs38.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs38.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs38.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs38.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs38.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs38.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs38.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs38.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs38.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs38.close();
2020-06-17 22:31:15 jdbc[13]: 
/**/prep15.setString(1, "INFORMATION_SCHEMA");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep15.setString(2, "SCHEMATA");
2020-06-17 22:31:15 jdbc[13]: 
/**/ResultSet rs39 = prep15.executeQuery();
2020-06-17 22:31:15 jdbc[13]: 
/*SQL l:123 #:8*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'SCHEMATA'};
2020-06-17 22:31:15 jdbc[13]: 
/**/rs39.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs39.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs39.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs39.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs39.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs39.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs39.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs39.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs39.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs39.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs39.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs39.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs39.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs39.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs39.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs39.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs39.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs39.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs39.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs39.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs39.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs39.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs39.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs39.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs39.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs39.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs39.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs39.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs39.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs39.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs39.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs39.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs39.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs39.close();
2020-06-17 22:31:15 jdbc[13]: 
/**/prep15.setString(1, "INFORMATION_SCHEMA");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep15.setString(2, "SEQUENCES");
2020-06-17 22:31:15 jdbc[13]: 
/**/ResultSet rs40 = prep15.executeQuery();
2020-06-17 22:31:15 jdbc[13]: 
/*SQL l:123 #:12*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'SEQUENCES'};
2020-06-17 22:31:15 jdbc[13]: 
/**/rs40.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs40.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs40.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs40.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs40.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs40.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs40.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs40.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs40.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs40.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs40.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs40.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs40.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs40.close();
2020-06-17 22:31:15 jdbc[13]: 
/**/prep15.setString(1, "INFORMATION_SCHEMA");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep15.setString(2, "SESSIONS");
2020-06-17 22:31:15 jdbc[13]: 
/**/ResultSet rs41 = prep15.executeQuery();
2020-06-17 22:31:15 jdbc[13]: 
/*SQL l:123 #:12*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'SESSIONS'};
2020-06-17 22:31:15 jdbc[13]: 
/**/rs41.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs41.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs41.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs41.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs41.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs41.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs41.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs41.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs41.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs41.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs41.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs41.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs41.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs41.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs41.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs41.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs41.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs41.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs41.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs41.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs41.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs41.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs41.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs41.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs41.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs41.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs41.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs41.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs41.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs41.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs41.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs41.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs41.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs41.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs41.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs41.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs41.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs41.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs41.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs41.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs41.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs41.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs41.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs41.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs41.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs41.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs41.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs41.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs41.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs41.close();
2020-06-17 22:31:15 jdbc[13]: 
/**/prep15.setString(1, "INFORMATION_SCHEMA");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep15.setString(2, "SESSION_STATE");
2020-06-17 22:31:15 jdbc[13]: 
/**/ResultSet rs42 = prep15.executeQuery();
2020-06-17 22:31:15 jdbc[13]: 
/*SQL l:123 #:2*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'SESSION_STATE'};
2020-06-17 22:31:15 jdbc[13]: 
/**/rs42.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs42.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs42.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs42.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs42.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs42.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs42.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs42.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs42.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs42.close();
2020-06-17 22:31:15 jdbc[13]: 
/**/prep15.setString(1, "INFORMATION_SCHEMA");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep15.setString(2, "SETTINGS");
2020-06-17 22:31:15 jdbc[13]: 
/**/ResultSet rs43 = prep15.executeQuery();
2020-06-17 22:31:15 jdbc[13]: 
/*SQL l:123 #:2*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'SETTINGS'};
2020-06-17 22:31:15 jdbc[13]: 
/**/rs43.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs43.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs43.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs43.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs43.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs43.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs43.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs43.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs43.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs43.close();
2020-06-17 22:31:15 jdbc[13]: 
/**/prep15.setString(1, "INFORMATION_SCHEMA");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep15.setString(2, "SYNONYMS");
2020-06-17 22:31:15 jdbc[13]: 
/**/ResultSet rs44 = prep15.executeQuery();
2020-06-17 22:31:15 jdbc[13]: 
/*SQL l:123 #:9*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'SYNONYMS'};
2020-06-17 22:31:15 jdbc[13]: 
/**/rs44.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs44.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs44.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs44.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs44.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs44.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs44.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs44.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs44.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs44.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs44.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs44.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs44.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs44.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs44.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs44.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs44.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs44.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs44.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs44.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs44.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs44.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs44.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs44.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs44.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs44.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs44.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs44.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs44.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs44.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs44.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs44.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs44.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs44.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs44.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs44.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs44.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs44.close();
2020-06-17 22:31:15 jdbc[13]: 
/**/prep15.setString(1, "INFORMATION_SCHEMA");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep15.setString(2, "TABLES");
2020-06-17 22:31:15 jdbc[13]: 
/**/ResultSet rs45 = prep15.executeQuery();
2020-06-17 22:31:15 jdbc[13]: 
/*SQL l:123 #:12*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'TABLES'};
2020-06-17 22:31:15 jdbc[13]: 
/**/rs45.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs45.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs45.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs45.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs45.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs45.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs45.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs45.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs45.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs45.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs45.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs45.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs45.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs45.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs45.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs45.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs45.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs45.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs45.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs45.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs45.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs45.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs45.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs45.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs45.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs45.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs45.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs45.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs45.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs45.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs45.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs45.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs45.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs45.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs45.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs45.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs45.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs45.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs45.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs45.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs45.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs45.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs45.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs45.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs45.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs45.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs45.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs45.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs45.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs45.close();
2020-06-17 22:31:15 jdbc[13]: 
/**/prep15.setString(1, "INFORMATION_SCHEMA");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep15.setString(2, "TABLE_CONSTRAINTS");
2020-06-17 22:31:15 jdbc[13]: 
/**/ResultSet rs46 = prep15.executeQuery();
2020-06-17 22:31:15 jdbc[13]: 
/*SQL l:123 #:9*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'TABLE_CONSTRAINTS'};
2020-06-17 22:31:15 jdbc[13]: 
/**/rs46.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs46.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs46.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs46.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs46.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs46.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs46.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs46.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs46.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs46.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs46.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs46.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs46.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs46.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs46.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs46.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs46.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs46.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs46.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs46.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs46.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs46.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs46.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs46.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs46.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs46.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs46.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs46.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs46.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs46.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs46.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs46.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs46.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs46.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs46.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs46.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs46.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs46.close();
2020-06-17 22:31:15 jdbc[13]: 
/**/prep15.setString(1, "INFORMATION_SCHEMA");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep15.setString(2, "TABLE_PRIVILEGES");
2020-06-17 22:31:15 jdbc[13]: 
/**/ResultSet rs47 = prep15.executeQuery();
2020-06-17 22:31:15 jdbc[13]: 
/*SQL l:123 #:7*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'TABLE_PRIVILEGES'};
2020-06-17 22:31:15 jdbc[13]: 
/**/rs47.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs47.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs47.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs47.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs47.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs47.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs47.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs47.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs47.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs47.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs47.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs47.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs47.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs47.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs47.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs47.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs47.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs47.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs47.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs47.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs47.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs47.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs47.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs47.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs47.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs47.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs47.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs47.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs47.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs47.close();
2020-06-17 22:31:15 jdbc[13]: 
/**/prep15.setString(1, "INFORMATION_SCHEMA");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep15.setString(2, "TABLE_TYPES");
2020-06-17 22:31:15 jdbc[13]: 
/**/ResultSet rs48 = prep15.executeQuery();
2020-06-17 22:31:15 jdbc[13]: 
/*SQL l:123 #:1*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'TABLE_TYPES'};
2020-06-17 22:31:15 jdbc[13]: 
/**/rs48.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs48.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs48.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs48.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs48.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs48.close();
2020-06-17 22:31:15 jdbc[13]: 
/**/prep15.setString(1, "INFORMATION_SCHEMA");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep15.setString(2, "TRIGGERS");
2020-06-17 22:31:15 jdbc[13]: 
/**/ResultSet rs49 = prep15.executeQuery();
2020-06-17 22:31:15 jdbc[13]: 
/*SQL l:123 #:14*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'TRIGGERS'};
2020-06-17 22:31:15 jdbc[13]: 
/**/rs49.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs49.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs49.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs49.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs49.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs49.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs49.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs49.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs49.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs49.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs49.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs49.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs49.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs49.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs49.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs49.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs49.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs49.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs49.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs49.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs49.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs49.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs49.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs49.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs49.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs49.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs49.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs49.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs49.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs49.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs49.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs49.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs49.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs49.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs49.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs49.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs49.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs49.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs49.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs49.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs49.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs49.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs49.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs49.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs49.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs49.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs49.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs49.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs49.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs49.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs49.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs49.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs49.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs49.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs49.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs49.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs49.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs49.close();
2020-06-17 22:31:15 jdbc[13]: 
/**/prep15.setString(1, "INFORMATION_SCHEMA");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep15.setString(2, "TYPE_INFO");
2020-06-17 22:31:15 jdbc[13]: 
/**/ResultSet rs50 = prep15.executeQuery();
2020-06-17 22:31:15 jdbc[13]: 
/*SQL l:123 #:14*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'TYPE_INFO'};
2020-06-17 22:31:15 jdbc[13]: 
/**/rs50.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs50.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs50.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs50.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs50.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs50.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs50.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs50.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs50.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs50.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs50.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs50.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs50.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs50.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs50.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs50.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs50.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs50.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs50.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs50.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs50.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs50.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs50.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs50.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs50.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs50.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs50.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs50.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs50.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs50.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs50.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs50.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs50.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs50.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs50.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs50.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs50.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs50.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs50.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs50.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs50.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs50.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs50.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs50.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs50.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs50.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs50.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs50.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs50.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs50.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs50.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs50.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs50.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs50.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs50.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs50.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs50.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs50.close();
2020-06-17 22:31:15 jdbc[13]: 
/**/prep15.setString(1, "INFORMATION_SCHEMA");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep15.setString(2, "USERS");
2020-06-17 22:31:15 jdbc[13]: 
/**/ResultSet rs51 = prep15.executeQuery();
2020-06-17 22:31:15 jdbc[13]: 
/*SQL l:123 #:4*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'USERS'};
2020-06-17 22:31:15 jdbc[13]: 
/**/rs51.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs51.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs51.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs51.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs51.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs51.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs51.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs51.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs51.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs51.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs51.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs51.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs51.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs51.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs51.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs51.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs51.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs51.close();
2020-06-17 22:31:15 jdbc[13]: 
/**/prep15.setString(1, "INFORMATION_SCHEMA");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep15.setString(2, "VIEWS");
2020-06-17 22:31:15 jdbc[13]: 
/**/ResultSet rs52 = prep15.executeQuery();
2020-06-17 22:31:15 jdbc[13]: 
/*SQL l:123 #:9*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'VIEWS'};
2020-06-17 22:31:15 jdbc[13]: 
/**/rs52.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs52.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs52.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs52.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs52.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs52.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs52.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs52.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs52.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs52.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs52.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs52.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs52.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs52.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs52.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs52.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs52.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs52.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs52.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs52.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs52.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs52.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs52.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs52.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs52.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs52.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs52.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs52.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs52.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs52.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs52.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs52.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs52.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs52.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs52.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs52.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs52.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs52.close();
2020-06-17 22:31:15 jdbc[13]: 
/**/prep15.close();
2020-06-17 22:31:15 jdbc[13]: 
/**/dbMeta4.getProcedures(null, "INFORMATION_SCHEMA", null);
2020-06-17 22:31:15 jdbc[13]: 
/**/PreparedStatement prep16 = conn10.prepareStatement("SELECT ALIAS_CATALOG PROCEDURE_CAT, ALIAS_SCHEMA PROCEDURE_SCHEM, ALIAS_NAME PROCEDURE_NAME, COLUMN_COUNT NUM_INPUT_PARAMS, ZERO() NUM_OUTPUT_PARAMS, ZERO() NUM_RESULT_SETS, REMARKS, RETURNS_RESULT PROCEDURE_TYPE, ALIAS_NAME SPECIFIC_NAME FROM INFORMATION_SCHEMA.FUNCTION_ALIASES WHERE ALIAS_CATALOG LIKE ? ESCAPE ? AND ALIAS_SCHEMA LIKE ? ESCAPE ? AND ALIAS_NAME LIKE ? ESCAPE ? ORDER BY PROCEDURE_SCHEM, PROCEDURE_NAME, NUM_INPUT_PARAMS");
2020-06-17 22:31:15 jdbc[13]: Plan       : calculate cost for plan [FUNCTION_ALIASES:-13:org.h2.table.MetaTable@4880ca00]
2020-06-17 22:31:15 jdbc[13]: Plan       :   for table filter FUNCTION_ALIASES:-13:org.h2.table.MetaTable@4880ca00
2020-06-17 22:31:15 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 22:31:15 jdbc[13]: Plan       :   best plan item cost 10,000 index meta
2020-06-17 22:31:15 jdbc[13]: Plan       : plan cost 10,001
2020-06-17 22:31:15 jdbc[13]: 
/**/prep16.setString(1, "%");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep16.setString(2, "\\");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep16.setString(3, "INFORMATION_SCHEMA");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep16.setString(4, "\\");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep16.setString(5, "%");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep16.setString(6, "\\");
2020-06-17 22:31:15 jdbc[13]: 
/**/ResultSet rs53 = prep16.executeQuery();
2020-06-17 22:31:15 jdbc[13]: Plan       : calculate cost for plan [FUNCTION_ALIASES:-13:org.h2.table.MetaTable@4880ca00]
2020-06-17 22:31:15 jdbc[13]: Plan       :   for table filter FUNCTION_ALIASES:-13:org.h2.table.MetaTable@4880ca00
2020-06-17 22:31:15 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 22:31:15 jdbc[13]: Plan       :   best plan item cost 9,800 index meta
2020-06-17 22:31:15 jdbc[13]: Plan       : plan cost 9,801
2020-06-17 22:31:15 jdbc[13]: 
/*SQL l:438*/SELECT ALIAS_CATALOG PROCEDURE_CAT, ALIAS_SCHEMA PROCEDURE_SCHEM, ALIAS_NAME PROCEDURE_NAME, COLUMN_COUNT NUM_INPUT_PARAMS, ZERO() NUM_OUTPUT_PARAMS, ZERO() NUM_RESULT_SETS, REMARKS, RETURNS_RESULT PROCEDURE_TYPE, ALIAS_NAME SPECIFIC_NAME FROM INFORMATION_SCHEMA.FUNCTION_ALIASES WHERE ALIAS_CATALOG LIKE ? ESCAPE ? AND ALIAS_SCHEMA LIKE ? ESCAPE ? AND ALIAS_NAME LIKE ? ESCAPE ? ORDER BY PROCEDURE_SCHEM, PROCEDURE_NAME, NUM_INPUT_PARAMS {1: '%', 2: '\\', 3: 'INFORMATION_SCHEMA', 4: '\\', 5: '%', 6: '\\'};
2020-06-17 22:31:15 jdbc[13]: 
/**/rs53.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs53.close();
2020-06-17 22:31:15 jdbc[13]: 
/**/prep16.close();
2020-06-17 22:31:15 jdbc[13]: 
/**/dbMeta4.getTables(null, "PUBLIC", null, new String[]{"TABLE", "SYSTEM TABLE", "VIEW", "SYSTEM VIEW", "TABLE LINK", "SYNONYM", "EXTERNAL"});
2020-06-17 22:31:15 jdbc[13]: 
/**/PreparedStatement prep17 = conn10.prepareStatement("SELECT TABLE_CAT, TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_CAT, TYPE_SCHEM, TYPE_NAME, SELF_REFERENCING_COL_NAME, REF_GENERATION, SQL FROM (SELECT SYNONYM_CATALOG TABLE_CAT, SYNONYM_SCHEMA TABLE_SCHEM, SYNONYM_NAME as TABLE_NAME, TYPE_NAME AS TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME AS TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, NULL AS SQL FROM INFORMATION_SCHEMA.SYNONYMS WHERE SYNONYM_CATALOG LIKE ?1 ESCAPE ?4 AND SYNONYM_SCHEMA LIKE ?2 ESCAPE ?4 AND SYNONYM_NAME LIKE ?3 ESCAPE ?4 UNION SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5, ?6, ?7, ?8, ?9, ?10, ?11)) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep17.setString(1, "%");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep17.setString(2, "PUBLIC");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep17.setString(3, "%");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep17.setString(4, "\\");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep17.setString(5, "TABLE");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep17.setString(6, "SYSTEM TABLE");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep17.setString(7, "VIEW");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep17.setString(8, "SYSTEM VIEW");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep17.setString(9, "TABLE LINK");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep17.setString(10, "SYNONYM");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep17.setString(11, "EXTERNAL");
2020-06-17 22:31:15 jdbc[13]: 
/**/ResultSet rs54 = prep17.executeQuery();
2020-06-17 22:31:15 jdbc[13]: Plan       : calculate cost for plan [_2]
2020-06-17 22:31:15 jdbc[13]: Plan       :   for table filter _2
2020-06-17 22:31:15 jdbc[13]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@5184bf29]
2020-06-17 22:31:15 jdbc[13]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@5184bf29
2020-06-17 22:31:15 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 22:31:15 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 22:31:15 jdbc[13]: Plan       :   best plan item cost 4,022 index meta
2020-06-17 22:31:15 jdbc[13]: Plan       : plan cost 4,023
2020-06-17 22:31:15 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@7b3e34d0]
2020-06-17 22:31:15 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@7b3e34d0
2020-06-17 22:31:15 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 22:31:15 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 22:31:15 jdbc[13]: Plan       :   best plan item cost 3,981.78 index meta
2020-06-17 22:31:15 jdbc[13]: Plan       : plan cost 3,982.78
2020-06-17 22:31:15 jdbc[13]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@5184bf29]
2020-06-17 22:31:15 jdbc[13]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@5184bf29
2020-06-17 22:31:15 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 22:31:15 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 22:31:15 jdbc[13]: Plan       :   best plan item cost 4,022 index meta
2020-06-17 22:31:15 jdbc[13]: Plan       : plan cost 4,023
2020-06-17 22:31:15 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@7b3e34d0]
2020-06-17 22:31:15 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@7b3e34d0
2020-06-17 22:31:15 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 22:31:15 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 22:31:15 jdbc[13]: Plan       :   best plan item cost 3,981.78 index meta
2020-06-17 22:31:15 jdbc[13]: Plan       : plan cost 3,982.78
2020-06-17 22:31:15 jdbc[13]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@5184bf29]
2020-06-17 22:31:15 jdbc[13]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@5184bf29
2020-06-17 22:31:15 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 22:31:15 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 22:31:15 jdbc[13]: Plan       :   best plan item cost 4,022 index meta
2020-06-17 22:31:15 jdbc[13]: Plan       : plan cost 4,023
2020-06-17 22:31:15 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@7b3e34d0]
2020-06-17 22:31:15 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@7b3e34d0
2020-06-17 22:31:15 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 22:31:15 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-17 22:31:15 jdbc[13]: Plan       :   best plan item cost 3,981.78 index meta
2020-06-17 22:31:15 jdbc[13]: Plan       : plan cost 3,982.78
2020-06-17 22:31:15 jdbc[13]: Plan       :   best plan item cost 8,005.78 index (SELECT
    SYNONYM_CATALOG AS TABLE_CAT,
    SYNONYM_SCHEMA AS TABLE_SCHEM,
    SYNONYM_NAME AS TABLE_NAME,
    TYPE_NAME AS TABLE_TYPE,
    REMARKS,
    TYPE_NAME AS TYPE_CAT,
    TYPE_NAME AS TYPE_SCHEM,
    TYPE_NAME AS TYPE_NAME,
    TYPE_NAME AS SELF_REFERENCING_COL_NAME,
    TYPE_NAME AS REF_GENERATION,
    NULL AS SQL
FROM INFORMATION_SCHEMA.SYNONYMS
    /* meta */
WHERE (SYNONYM_NAME LIKE ?3 ESCAPE ?4)
    AND ((SYNONYM_CATALOG LIKE ?1 ESCAPE ?4)
    AND (SYNONYM_SCHEMA LIKE ?2 ESCAPE ?4)))
UNION
(SELECT
    TABLE_CATALOG AS TABLE_CAT,
    TABLE_SCHEMA AS TABLE_SCHEM,
    TABLE_NAME,
    TABLE_TYPE,
    REMARKS,
    TYPE_NAME AS TYPE_CAT,
    TYPE_NAME AS TYPE_SCHEM,
    TYPE_NAME,
    TYPE_NAME AS SELF_REFERENCING_COL_NAME,
    TYPE_NAME AS REF_GENERATION,
    SQL
FROM INFORMATION_SCHEMA.TABLES
    /* meta */
WHERE (TABLE_TYPE IN(?5, ?6, ?7, ?8, ?9, ?10, ?11))
    AND ((TABLE_NAME LIKE ?3 ESCAPE ?4)
    AND ((TABLE_CATALOG LIKE ?1 ESCAPE ?4)
    AND (TABLE_SCHEMA LIKE ?2 ESCAPE ?4))))
2020-06-17 22:31:15 jdbc[13]: Plan       : plan cost 8,006.78
2020-06-17 22:31:15 jdbc[13]: 
/*SQL l:1007 #:2*/SELECT TABLE_CAT, TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_CAT, TYPE_SCHEM, TYPE_NAME, SELF_REFERENCING_COL_NAME, REF_GENERATION, SQL FROM (SELECT SYNONYM_CATALOG TABLE_CAT, SYNONYM_SCHEMA TABLE_SCHEM, SYNONYM_NAME as TABLE_NAME, TYPE_NAME AS TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME AS TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, NULL AS SQL FROM INFORMATION_SCHEMA.SYNONYMS WHERE SYNONYM_CATALOG LIKE ?1 ESCAPE ?4 AND SYNONYM_SCHEMA LIKE ?2 ESCAPE ?4 AND SYNONYM_NAME LIKE ?3 ESCAPE ?4 UNION SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5, ?6, ?7, ?8, ?9, ?10, ?11)) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME {1: '%', 2: 'PUBLIC', 3: '%', 4: '\\', 5: 'TABLE', 6: 'SYSTEM TABLE', 7: 'VIEW', 8: 'SYSTEM VIEW', 9: 'TABLE LINK', 10: 'SYNONYM', 11: 'EXTERNAL'};
2020-06-17 22:31:15 jdbc[13]: 
/**/rs54.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs54.getString("TABLE_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs54.getString("TABLE_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs54.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs54.getString("TABLE_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs54.getString("TABLE_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs54.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs54.close();
2020-06-17 22:31:15 jdbc[13]: 
/**/prep17.close();
2020-06-17 22:31:15 jdbc[13]: 
/**/dbMeta4.getConnection();
2020-06-17 22:31:15 jdbc[13]: 
/**/PreparedStatement prep18 = conn10.prepareStatement("SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ?");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep18.setString(1, "PUBLIC");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep18.setString(2, "EQUIPMENT_TBL");
2020-06-17 22:31:15 jdbc[13]: 
/**/ResultSet rs55 = prep18.executeQuery();
2020-06-17 22:31:15 jdbc[13]: 
/*SQL l:123 #:3*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'PUBLIC', 2: 'EQUIPMENT_TBL'};
2020-06-17 22:31:15 jdbc[13]: 
/**/rs55.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs55.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs55.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs55.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs55.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs55.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs55.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs55.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs55.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs55.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs55.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs55.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs55.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs55.close();
2020-06-17 22:31:15 jdbc[13]: 
/**/prep18.setString(1, "PUBLIC");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep18.setString(2, "LOG_TBL");
2020-06-17 22:31:15 jdbc[13]: 
/**/ResultSet rs56 = prep18.executeQuery();
2020-06-17 22:31:15 jdbc[13]: 
/*SQL l:123 #:9*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'PUBLIC', 2: 'LOG_TBL'};
2020-06-17 22:31:15 jdbc[13]: 
/**/rs56.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs56.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs56.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs56.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs56.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs56.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs56.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs56.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs56.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs56.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs56.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs56.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs56.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs56.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs56.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs56.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs56.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs56.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs56.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs56.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs56.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs56.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs56.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs56.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs56.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs56.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs56.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs56.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs56.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs56.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs56.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs56.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs56.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs56.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs56.getInt("ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs56.getString("COLUMN_TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs56.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs56.close();
2020-06-17 22:31:15 jdbc[13]: 
/**/prep18.close();
2020-06-17 22:31:15 jdbc[13]: 
/**/dbMeta4.getProcedures(null, "PUBLIC", null);
2020-06-17 22:31:15 jdbc[13]: 
/**/PreparedStatement prep19 = conn10.prepareStatement("SELECT ALIAS_CATALOG PROCEDURE_CAT, ALIAS_SCHEMA PROCEDURE_SCHEM, ALIAS_NAME PROCEDURE_NAME, COLUMN_COUNT NUM_INPUT_PARAMS, ZERO() NUM_OUTPUT_PARAMS, ZERO() NUM_RESULT_SETS, REMARKS, RETURNS_RESULT PROCEDURE_TYPE, ALIAS_NAME SPECIFIC_NAME FROM INFORMATION_SCHEMA.FUNCTION_ALIASES WHERE ALIAS_CATALOG LIKE ? ESCAPE ? AND ALIAS_SCHEMA LIKE ? ESCAPE ? AND ALIAS_NAME LIKE ? ESCAPE ? ORDER BY PROCEDURE_SCHEM, PROCEDURE_NAME, NUM_INPUT_PARAMS");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep19.setString(1, "%");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep19.setString(2, "\\");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep19.setString(3, "PUBLIC");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep19.setString(4, "\\");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep19.setString(5, "%");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep19.setString(6, "\\");
2020-06-17 22:31:15 jdbc[13]: 
/**/ResultSet rs57 = prep19.executeQuery();
2020-06-17 22:31:15 jdbc[13]: Plan       : calculate cost for plan [FUNCTION_ALIASES:-13:org.h2.table.MetaTable@4880ca00]
2020-06-17 22:31:15 jdbc[13]: Plan       :   for table filter FUNCTION_ALIASES:-13:org.h2.table.MetaTable@4880ca00
2020-06-17 22:31:15 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 22:31:15 jdbc[13]: Plan       :   best plan item cost 9,900 index meta
2020-06-17 22:31:15 jdbc[13]: Plan       : plan cost 9,901
2020-06-17 22:31:15 jdbc[13]: 
/*SQL l:438*/SELECT ALIAS_CATALOG PROCEDURE_CAT, ALIAS_SCHEMA PROCEDURE_SCHEM, ALIAS_NAME PROCEDURE_NAME, COLUMN_COUNT NUM_INPUT_PARAMS, ZERO() NUM_OUTPUT_PARAMS, ZERO() NUM_RESULT_SETS, REMARKS, RETURNS_RESULT PROCEDURE_TYPE, ALIAS_NAME SPECIFIC_NAME FROM INFORMATION_SCHEMA.FUNCTION_ALIASES WHERE ALIAS_CATALOG LIKE ? ESCAPE ? AND ALIAS_SCHEMA LIKE ? ESCAPE ? AND ALIAS_NAME LIKE ? ESCAPE ? ORDER BY PROCEDURE_SCHEM, PROCEDURE_NAME, NUM_INPUT_PARAMS {1: '%', 2: '\\', 3: 'PUBLIC', 4: '\\', 5: '%', 6: '\\'};
2020-06-17 22:31:15 jdbc[13]: 
/**/rs57.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs57.close();
2020-06-17 22:31:15 jdbc[13]: 
/**/prep19.close();
2020-06-17 22:31:15 jdbc[13]: 
/**/dbMeta3.getIndexInfo(null, "PUBLIC", "EQUIPMENT_TBL", false, true);
2020-06-17 22:31:15 jdbc[13]: 
/**/PreparedStatement prep20 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, NON_UNIQUE, TABLE_CATALOG INDEX_QUALIFIER, INDEX_NAME, INDEX_TYPE TYPE, ORDINAL_POSITION, COLUMN_NAME, ASC_OR_DESC, CARDINALITY, PAGES, FILTER_CONDITION, SORT_TYPE FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND (TRUE) AND TABLE_NAME = ? ORDER BY NON_UNIQUE, TYPE, TABLE_SCHEM, INDEX_NAME, ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@375bd55b]
2020-06-17 22:31:15 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@375bd55b
2020-06-17 22:31:15 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 22:31:15 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-17 22:31:15 jdbc[13]: Plan       :   best plan item cost 324.72 index meta
2020-06-17 22:31:15 jdbc[13]: Plan       : plan cost 325.72
2020-06-17 22:31:15 jdbc[13]: 
/**/prep20.setString(1, "%");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep20.setString(2, "\\");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep20.setString(3, "PUBLIC");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep20.setString(4, "\\");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep20.setString(5, "EQUIPMENT_TBL");
2020-06-17 22:31:15 jdbc[13]: 
/**/ResultSet rs58 = prep20.executeQuery();
2020-06-17 22:31:15 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@375bd55b]
2020-06-17 22:31:15 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@375bd55b
2020-06-17 22:31:15 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 22:31:15 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-17 22:31:15 jdbc[13]: Plan       :   best plan item cost 321.44 index meta
2020-06-17 22:31:15 jdbc[13]: Plan       : plan cost 322.44
2020-06-17 22:31:15 jdbc[13]: 
/*SQL l:433 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, NON_UNIQUE, TABLE_CATALOG INDEX_QUALIFIER, INDEX_NAME, INDEX_TYPE TYPE, ORDINAL_POSITION, COLUMN_NAME, ASC_OR_DESC, CARDINALITY, PAGES, FILTER_CONDITION, SORT_TYPE FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND (TRUE) AND TABLE_NAME = ? ORDER BY NON_UNIQUE, TYPE, TABLE_SCHEM, INDEX_NAME, ORDINAL_POSITION {1: '%', 2: '\\', 3: 'PUBLIC', 4: '\\', 5: 'EQUIPMENT_TBL'};
2020-06-17 22:31:15 jdbc[13]: 
/**/rs58.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs58.getString("INDEX_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs58.getInt("TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs58.getBoolean("NON_UNIQUE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs58.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs58.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs58.close();
2020-06-17 22:31:15 jdbc[13]: 
/**/prep20.close();
2020-06-17 22:31:15 jdbc[13]: 
/**/dbMeta3.getIndexInfo(null, "PUBLIC", "LOG_TBL", false, true);
2020-06-17 22:31:15 jdbc[13]: 
/**/PreparedStatement prep21 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, NON_UNIQUE, TABLE_CATALOG INDEX_QUALIFIER, INDEX_NAME, INDEX_TYPE TYPE, ORDINAL_POSITION, COLUMN_NAME, ASC_OR_DESC, CARDINALITY, PAGES, FILTER_CONDITION, SORT_TYPE FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND (TRUE) AND TABLE_NAME = ? ORDER BY NON_UNIQUE, TYPE, TABLE_SCHEM, INDEX_NAME, ORDINAL_POSITION");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep21.setString(1, "%");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep21.setString(2, "\\");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep21.setString(3, "PUBLIC");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep21.setString(4, "\\");
2020-06-17 22:31:15 jdbc[13]: 
/**/prep21.setString(5, "LOG_TBL");
2020-06-17 22:31:15 jdbc[13]: 
/**/ResultSet rs59 = prep21.executeQuery();
2020-06-17 22:31:15 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@375bd55b]
2020-06-17 22:31:15 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@375bd55b
2020-06-17 22:31:15 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 22:31:15 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-17 22:31:15 jdbc[13]: Plan       :   best plan item cost 321.44 index meta
2020-06-17 22:31:15 jdbc[13]: Plan       : plan cost 322.44
2020-06-17 22:31:15 jdbc[13]: 
/*SQL l:433 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, NON_UNIQUE, TABLE_CATALOG INDEX_QUALIFIER, INDEX_NAME, INDEX_TYPE TYPE, ORDINAL_POSITION, COLUMN_NAME, ASC_OR_DESC, CARDINALITY, PAGES, FILTER_CONDITION, SORT_TYPE FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND (TRUE) AND TABLE_NAME = ? ORDER BY NON_UNIQUE, TYPE, TABLE_SCHEM, INDEX_NAME, ORDINAL_POSITION {1: '%', 2: '\\', 3: 'PUBLIC', 4: '\\', 5: 'LOG_TBL'};
2020-06-17 22:31:15 jdbc[13]: 
/**/rs59.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs59.getString("INDEX_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs59.getInt("TYPE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs59.getBoolean("NON_UNIQUE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs59.getString("COLUMN_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs59.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs59.close();
2020-06-17 22:31:15 jdbc[13]: 
/**/prep21.close();
2020-06-17 22:31:15 jdbc[13]: 
/**/Statement stat3 = conn10.createStatement();
2020-06-17 22:31:15 jdbc[13]: 
/**/ResultSet rs60 = stat3.executeQuery("SELECT * FROM INFORMATION_SCHEMA.SEQUENCES ORDER BY SEQUENCE_NAME");
2020-06-17 22:31:15 jdbc[13]: Plan       : calculate cost for plan [SEQUENCES:-9:org.h2.table.MetaTable@33a2be4c]
2020-06-17 22:31:15 jdbc[13]: Plan       :   for table filter SEQUENCES:-9:org.h2.table.MetaTable@33a2be4c
2020-06-17 22:31:15 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 22:31:15 jdbc[13]: Plan       :   best plan item cost 10,000 index meta
2020-06-17 22:31:15 jdbc[13]: Plan       : plan cost 10,001
2020-06-17 22:31:15 jdbc[13]: 
/*SQL #:2*/SELECT * FROM INFORMATION_SCHEMA.SEQUENCES ORDER BY SEQUENCE_NAME;
2020-06-17 22:31:15 jdbc[13]: 
/**/rs60.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs60.getString("SEQUENCE_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs60.getString("CURRENT_VALUE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs60.getString("INCREMENT");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs60.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs60.getString("SEQUENCE_NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs60.getString("CURRENT_VALUE");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs60.getString("INCREMENT");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs60.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs60.close();
2020-06-17 22:31:15 jdbc[13]: 
/**/ResultSet rs61 = stat3.executeQuery("SELECT * FROM INFORMATION_SCHEMA.USERS ORDER BY NAME");
2020-06-17 22:31:15 jdbc[13]: Plan       : calculate cost for plan [USERS:-10:org.h2.table.MetaTable@6e2d43d5]
2020-06-17 22:31:15 jdbc[13]: Plan       :   for table filter USERS:-10:org.h2.table.MetaTable@6e2d43d5
2020-06-17 22:31:15 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 22:31:15 jdbc[13]: Plan       :   best plan item cost 10,000 index meta
2020-06-17 22:31:15 jdbc[13]: Plan       : plan cost 10,001
2020-06-17 22:31:15 jdbc[13]: 
/*SQL #:1*/SELECT * FROM INFORMATION_SCHEMA.USERS ORDER BY NAME;
2020-06-17 22:31:15 jdbc[13]: 
/**/rs61.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs61.getString("NAME");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs61.getString("ADMIN");
2020-06-17 22:31:15 jdbc[13]: 
/**/rs61.next();
2020-06-17 22:31:15 jdbc[13]: 
/**/rs61.close();
2020-06-17 22:31:15 jdbc[13]: 
/**/stat3.close();
2020-06-17 22:31:15 jdbc[13]: 
/**/dbMeta3.getDatabaseProductName();
2020-06-17 22:31:15 jdbc[13]: 
/**/dbMeta3.getDatabaseProductVersion();
2020-06-17 22:31:19 jdbc[13]: 
/**/Statement stat4 = conn10.createStatement(1004, 1008);
2020-06-17 22:31:19 jdbc[13]: 
/**/stat4.setMaxRows(1000);
2020-06-17 22:31:19 jdbc[13]: 
/**/stat4.execute("SELECT * FROM LOG_TBL");
2020-06-17 22:31:19 jdbc[13]: Plan       : calculate cost for plan [PUBLIC.LOG_TBL]
2020-06-17 22:31:19 jdbc[13]: Plan       :   for table filter PUBLIC.LOG_TBL
2020-06-17 22:31:19 jdbc[13]: Table      :     potential plan item cost 10,200 index PUBLIC.LOG_TBL.tableScan
2020-06-17 22:31:19 jdbc[13]: Table      :     potential plan item cost 10,210 index PUBLIC.PRIMARY_KEY_3F
2020-06-17 22:31:19 jdbc[13]: Plan       :   best plan item cost 10,200 index PUBLIC.LOG_TBL.tableScan
2020-06-17 22:31:19 jdbc[13]: Plan       : plan cost 10,201
2020-06-17 22:31:19 jdbc[13]: 
/*SQL */SELECT * FROM LOG_TBL;
2020-06-17 22:31:19 jdbc[13]: 
/**/ResultSet rs62 = stat4.getResultSet();
2020-06-17 22:31:19 jdbc[13]: 
/**/ResultSetMetaData rsMeta4 = rs62.getMetaData();
2020-06-17 22:31:19 jdbc[13]: 
/**/conn10.getCatalog();
2020-06-17 22:31:19 jdbc[13]: 
/*SQL #:1*/CALL DATABASE();
2020-06-17 22:31:19 jdbc[13]: 
/**/rsMeta4.getColumnCount();
2020-06-17 22:31:19 jdbc[13]: 
/**/rsMeta4.getColumnLabel(1);
2020-06-17 22:31:19 jdbc[13]: 
/**/rsMeta4.getColumnLabel(2);
2020-06-17 22:31:19 jdbc[13]: 
/**/rsMeta4.getColumnLabel(3);
2020-06-17 22:31:19 jdbc[13]: 
/**/rsMeta4.getColumnLabel(4);
2020-06-17 22:31:19 jdbc[13]: 
/**/rsMeta4.getColumnLabel(5);
2020-06-17 22:31:19 jdbc[13]: 
/**/rsMeta4.getColumnLabel(6);
2020-06-17 22:31:19 jdbc[13]: 
/**/rsMeta4.getColumnLabel(7);
2020-06-17 22:31:19 jdbc[13]: 
/**/rsMeta4.getColumnLabel(8);
2020-06-17 22:31:19 jdbc[13]: 
/**/rsMeta4.getColumnLabel(9);
2020-06-17 22:31:19 jdbc[13]: 
/**/rs62.next();
2020-06-17 22:31:19 jdbc[13]: 
/**/rs62.getConcurrency();
2020-06-17 22:31:19 jdbc[13]: 
/**/DatabaseMetaData dbMeta5 = conn10.getMetaData();
2020-06-17 22:31:19 jdbc[13]: 
/**/dbMeta5.getTables(null, "PUBLIC", "LOG_TBL", new String[]{"TABLE"});
2020-06-17 22:31:19 jdbc[13]: 
/**/PreparedStatement prep22 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME");
2020-06-17 22:31:19 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@7b3e34d0]
2020-06-17 22:31:19 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@7b3e34d0
2020-06-17 22:31:19 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 22:31:19 jdbc[13]: Table      :     potential plan item cost 4,322 index meta
2020-06-17 22:31:19 jdbc[13]: Plan       :   best plan item cost 4,278.78 index meta
2020-06-17 22:31:19 jdbc[13]: Plan       : plan cost 4,279.78
2020-06-17 22:31:19 jdbc[13]: 
/**/prep22.setString(1, "%");
2020-06-17 22:31:19 jdbc[13]: 
/**/prep22.setString(2, "PUBLIC");
2020-06-17 22:31:19 jdbc[13]: 
/**/prep22.setString(3, "LOG_TBL");
2020-06-17 22:31:19 jdbc[13]: 
/**/prep22.setString(4, "\\");
2020-06-17 22:31:19 jdbc[13]: 
/**/prep22.setString(5, "TABLE");
2020-06-17 22:31:19 jdbc[13]: 
/**/ResultSet rs63 = prep22.executeQuery();
2020-06-17 22:31:19 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@7b3e34d0]
2020-06-17 22:31:19 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@7b3e34d0
2020-06-17 22:31:19 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 22:31:19 jdbc[13]: Table      :     potential plan item cost 1,324 index meta
2020-06-17 22:31:19 jdbc[13]: Plan       :   best plan item cost 1,271.04 index meta
2020-06-17 22:31:19 jdbc[13]: Plan       : plan cost 1,272.04
2020-06-17 22:31:19 jdbc[13]: 
/*SQL l:414 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME {1: '%', 2: 'PUBLIC', 3: 'LOG_TBL', 4: '\\', 5: 'TABLE'};
2020-06-17 22:31:19 jdbc[13]: 
/**/rs63.next();
2020-06-17 22:31:19 jdbc[13]: 
/**/rs63.getString("SQL");
2020-06-17 22:31:19 jdbc[13]: 
/**/rs63.getString("TABLE_NAME");
2020-06-17 22:31:19 jdbc[13]: 
/**/dbMeta5.getPrimaryKeys(null, "PUBLIC", "LOG_TBL");
2020-06-17 22:31:19 jdbc[13]: 
/**/PreparedStatement prep23 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME");
2020-06-17 22:31:19 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@375bd55b]
2020-06-17 22:31:19 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@375bd55b
2020-06-17 22:31:19 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 22:31:19 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-17 22:31:19 jdbc[13]: Plan       :   best plan item cost 321.44 index meta
2020-06-17 22:31:19 jdbc[13]: Plan       : plan cost 322.44
2020-06-17 22:31:19 jdbc[13]: 
/**/prep23.setString(1, "%");
2020-06-17 22:31:19 jdbc[13]: 
/**/prep23.setString(2, "\\");
2020-06-17 22:31:19 jdbc[13]: 
/**/prep23.setString(3, "PUBLIC");
2020-06-17 22:31:19 jdbc[13]: 
/**/prep23.setString(4, "\\");
2020-06-17 22:31:19 jdbc[13]: 
/**/prep23.setString(5, "LOG_TBL");
2020-06-17 22:31:19 jdbc[13]: 
/**/ResultSet rs64 = prep23.executeQuery();
2020-06-17 22:31:19 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@375bd55b]
2020-06-17 22:31:19 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@375bd55b
2020-06-17 22:31:19 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 22:31:19 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-17 22:31:19 jdbc[13]: Plan       :   best plan item cost 318.16 index meta
2020-06-17 22:31:19 jdbc[13]: Plan       : plan cost 319.16
2020-06-17 22:31:19 jdbc[13]: 
/*SQL l:316 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME {1: '%', 2: '\\', 3: 'PUBLIC', 4: '\\', 5: 'LOG_TBL'};
2020-06-17 22:31:19 jdbc[13]: 
/**/rs64.next();
2020-06-17 22:31:19 jdbc[13]: 
/**/rs64.getString("COLUMN_NAME");
2020-06-17 22:31:19 jdbc[13]: 
/**/rs64.next();
2020-06-17 22:31:19 jdbc[13]: 
/**/rs62.getType();
2020-06-17 22:31:19 jdbc[13]: 
/**/rs62.close();
2020-06-17 22:31:19 jdbc[13]: 
/**/stat4.close();
2020-06-17 22:31:36 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-17 22:31:36 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 22:31:36 jdbc[3]: 
/**/PreparedStatement prep24 = conn0.prepareStatement("select equipment0_.id as id1_0_, equipment0_.cust_id as cust_id2_0_, equipment0_.equipment_name as equipmen3_0_ from equipment_tbl equipment0_ where equipment0_.cust_id=?");
2020-06-17 22:31:36 jdbc[3]: Plan       : calculate cost for plan [EQUIPMENT0_]
2020-06-17 22:31:36 jdbc[3]: Plan       :   for table filter EQUIPMENT0_
2020-06-17 22:31:36 jdbc[3]: Table      :     potential plan item cost 10,240 index PUBLIC.EQUIPMENT_TBL.tableScan
2020-06-17 22:31:36 jdbc[3]: Table      :     potential plan item cost 10,250 index PUBLIC.PRIMARY_KEY_3
2020-06-17 22:31:36 jdbc[3]: Plan       :   best plan item cost 10,137.6 index PUBLIC.EQUIPMENT_TBL.tableScan
2020-06-17 22:31:36 jdbc[3]: Plan       : plan cost 10,138.6
2020-06-17 22:31:36 jdbc[3]: 
/**/prep24.setLong(1, 1L);
2020-06-17 22:31:36 jdbc[3]: 
/**/ResultSet rs65 = prep24.executeQuery();
2020-06-17 22:31:36 jdbc[3]: 
/*SQL l:170 #:3*/select equipment0_.id as id1_0_, equipment0_.cust_id as cust_id2_0_, equipment0_.equipment_name as equipmen3_0_ from equipment_tbl equipment0_ where equipment0_.cust_id=? {1: 1};
2020-06-17 22:31:36 jdbc[3]: 
/**/rs65.next();
2020-06-17 22:31:36 jdbc[3]: 
/**/rs65.getLong("id1_0_");
2020-06-17 22:31:36 jdbc[3]: 
/**/rs65.wasNull();
2020-06-17 22:31:36 jdbc[3]: 
/**/rs65.getLong("cust_id2_0_");
2020-06-17 22:31:36 jdbc[3]: 
/**/rs65.wasNull();
2020-06-17 22:31:36 jdbc[3]: 
/**/rs65.getString("equipmen3_0_");
2020-06-17 22:31:36 jdbc[3]: 
/**/rs65.wasNull();
2020-06-17 22:31:36 jdbc[3]: 
/**/rs65.next();
2020-06-17 22:31:36 jdbc[3]: 
/**/rs65.getLong("id1_0_");
2020-06-17 22:31:36 jdbc[3]: 
/**/rs65.wasNull();
2020-06-17 22:31:36 jdbc[3]: 
/**/rs65.getLong("cust_id2_0_");
2020-06-17 22:31:36 jdbc[3]: 
/**/rs65.wasNull();
2020-06-17 22:31:36 jdbc[3]: 
/**/rs65.getString("equipmen3_0_");
2020-06-17 22:31:36 jdbc[3]: 
/**/rs65.wasNull();
2020-06-17 22:31:36 jdbc[3]: 
/**/rs65.next();
2020-06-17 22:31:36 jdbc[3]: 
/**/rs65.getLong("id1_0_");
2020-06-17 22:31:36 jdbc[3]: 
/**/rs65.wasNull();
2020-06-17 22:31:36 jdbc[3]: 
/**/rs65.getLong("cust_id2_0_");
2020-06-17 22:31:36 jdbc[3]: 
/**/rs65.wasNull();
2020-06-17 22:31:36 jdbc[3]: 
/**/rs65.getString("equipmen3_0_");
2020-06-17 22:31:36 jdbc[3]: 
/**/rs65.wasNull();
2020-06-17 22:31:36 jdbc[3]: 
/**/rs65.next();
2020-06-17 22:31:36 jdbc[3]: 
/**/rs65.close();
2020-06-17 22:31:36 jdbc[3]: 
/**/prep24.getMaxRows();
2020-06-17 22:31:36 jdbc[3]: 
/**/prep24.getQueryTimeout();
2020-06-17 22:31:36 jdbc[3]: 
/**/prep24.close();
2020-06-17 22:31:36 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:31:36 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:31:36 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:31:37 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-17 22:31:37 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 22:31:37 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:31:37 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:31:37 jdbc[3]: 
/**/PreparedStatement prep25 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:31:37 jdbc[3]: 
/**/prep25.setString(1, "EquipmentMS");
2020-06-17 22:31:37 jdbc[3]: 
/**/prep25.setString(2, "INFO");
2020-06-17 22:31:37 jdbc[3]: 
/**/prep25.setNull(3, 12);
2020-06-17 22:31:37 jdbc[3]: 
/**/prep25.setString(4, "/api/equipments/1");
2020-06-17 22:31:37 jdbc[3]: 
/**/prep25.setString(5, "[Mouse, Keyboard, guitar]");
2020-06-17 22:31:37 jdbc[3]: 
/**/prep25.setString(6, "5d9239b57d1c7563");
2020-06-17 22:31:37 jdbc[3]: 
/**/prep25.setString(7, "2020-06-18T03:31:36.250Z");
2020-06-17 22:31:37 jdbc[3]: 
/**/prep25.setString(8, "5d9239b57d1c7563");
2020-06-17 22:31:37 jdbc[3]: 
/**/prep25.executeUpdate();
2020-06-17 22:31:37 lock: 1 exclusive write lock requesting for SYS 
2020-06-17 22:31:37 lock: 1 exclusive write lock added for SYS 
2020-06-17 22:31:37 lock: 1 exclusive write lock unlock SYS 
2020-06-17 22:31:37 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:31:37 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:31:37 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'EquipmentMS', 2: 'INFO', 3: NULL, 4: '/api/equipments/1', 5: '[Mouse, Keyboard, guitar]', 6: '5d9239b57d1c7563', 7: '2020-06-18T03:31:36.250Z', 8: '5d9239b57d1c7563'};
2020-06-17 22:31:37 jdbc[3]: 
/**/ResultSet rs66 = prep25.getGeneratedKeys();
2020-06-17 22:31:37 jdbc[3]: 
/**/rs66.next();
2020-06-17 22:31:37 jdbc[3]: 
/**/ResultSetMetaData rsMeta5 = rs66.getMetaData();
2020-06-17 22:31:37 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:31:37 jdbc[3]: 
/**/rsMeta5.getColumnCount();
2020-06-17 22:31:37 jdbc[3]: 
/**/rs66.getLong(1);
2020-06-17 22:31:37 jdbc[3]: 
/**/rs66.close();
2020-06-17 22:31:37 jdbc[3]: 
/**/prep25.getMaxRows();
2020-06-17 22:31:37 jdbc[3]: 
/**/prep25.getQueryTimeout();
2020-06-17 22:31:37 jdbc[3]: 
/**/prep25.close();
2020-06-17 22:31:37 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:31:37 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:31:37 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:31:37 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:31:37 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:31:37 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:31:37 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:31:37 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:31:37 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:31:39 jdbc[13]: 
/**/Statement stat5 = conn10.createStatement(1004, 1008);
2020-06-17 22:31:39 jdbc[13]: 
/**/stat5.setMaxRows(1000);
2020-06-17 22:31:39 jdbc[13]: 
/**/stat5.execute("SELECT * FROM LOG_TBL");
2020-06-17 22:31:39 jdbc[13]: 
/*SQL #:1*/SELECT * FROM LOG_TBL;
2020-06-17 22:31:39 jdbc[13]: 
/**/ResultSet rs67 = stat5.getResultSet();
2020-06-17 22:31:39 jdbc[13]: 
/**/ResultSetMetaData rsMeta6 = rs67.getMetaData();
2020-06-17 22:31:39 jdbc[13]: 
/**/conn10.getCatalog();
2020-06-17 22:31:39 jdbc[13]: 
/**/rsMeta6.getColumnCount();
2020-06-17 22:31:39 jdbc[13]: 
/**/rsMeta6.getColumnLabel(1);
2020-06-17 22:31:39 jdbc[13]: 
/**/rsMeta6.getColumnLabel(2);
2020-06-17 22:31:39 jdbc[13]: 
/**/rsMeta6.getColumnLabel(3);
2020-06-17 22:31:39 jdbc[13]: 
/**/rsMeta6.getColumnLabel(4);
2020-06-17 22:31:39 jdbc[13]: 
/**/rsMeta6.getColumnLabel(5);
2020-06-17 22:31:39 jdbc[13]: 
/**/rsMeta6.getColumnLabel(6);
2020-06-17 22:31:39 jdbc[13]: 
/**/rsMeta6.getColumnLabel(7);
2020-06-17 22:31:39 jdbc[13]: 
/**/rsMeta6.getColumnLabel(8);
2020-06-17 22:31:39 jdbc[13]: 
/**/rsMeta6.getColumnLabel(9);
2020-06-17 22:31:39 jdbc[13]: 
/**/rs67.next();
2020-06-17 22:31:39 jdbc[13]: 
/**/rs67.getString(1);
2020-06-17 22:31:39 jdbc[13]: 
/**/rs67.getString(2);
2020-06-17 22:31:39 jdbc[13]: 
/**/rs67.getString(3);
2020-06-17 22:31:39 jdbc[13]: 
/**/rs67.getString(4);
2020-06-17 22:31:39 jdbc[13]: 
/**/rs67.getString(5);
2020-06-17 22:31:39 jdbc[13]: 
/**/rs67.getString(6);
2020-06-17 22:31:39 jdbc[13]: 
/**/rs67.getString(7);
2020-06-17 22:31:39 jdbc[13]: 
/**/rs67.getString(8);
2020-06-17 22:31:39 jdbc[13]: 
/**/rs67.getString(9);
2020-06-17 22:31:39 jdbc[13]: 
/**/rs67.next();
2020-06-17 22:31:39 jdbc[13]: 
/**/rs67.getConcurrency();
2020-06-17 22:31:39 jdbc[13]: 
/**/DatabaseMetaData dbMeta6 = conn10.getMetaData();
2020-06-17 22:31:39 jdbc[13]: 
/**/dbMeta6.getTables(null, "PUBLIC", "LOG_TBL", new String[]{"TABLE"});
2020-06-17 22:31:39 jdbc[13]: 
/**/PreparedStatement prep26 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME");
2020-06-17 22:31:39 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@7b3e34d0]
2020-06-17 22:31:39 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@7b3e34d0
2020-06-17 22:31:39 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 22:31:39 jdbc[13]: Table      :     potential plan item cost 4,322 index meta
2020-06-17 22:31:39 jdbc[13]: Plan       :   best plan item cost 4,278.78 index meta
2020-06-17 22:31:39 jdbc[13]: Plan       : plan cost 4,279.78
2020-06-17 22:31:39 jdbc[13]: 
/**/prep26.setString(1, "%");
2020-06-17 22:31:39 jdbc[13]: 
/**/prep26.setString(2, "PUBLIC");
2020-06-17 22:31:39 jdbc[13]: 
/**/prep26.setString(3, "LOG_TBL");
2020-06-17 22:31:39 jdbc[13]: 
/**/prep26.setString(4, "\\");
2020-06-17 22:31:39 jdbc[13]: 
/**/prep26.setString(5, "TABLE");
2020-06-17 22:31:39 jdbc[13]: 
/**/ResultSet rs68 = prep26.executeQuery();
2020-06-17 22:31:39 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@7b3e34d0]
2020-06-17 22:31:39 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@7b3e34d0
2020-06-17 22:31:39 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 22:31:39 jdbc[13]: Table      :     potential plan item cost 1,324 index meta
2020-06-17 22:31:39 jdbc[13]: Plan       :   best plan item cost 1,271.04 index meta
2020-06-17 22:31:39 jdbc[13]: Plan       : plan cost 1,272.04
2020-06-17 22:31:39 jdbc[13]: 
/*SQL l:414 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME {1: '%', 2: 'PUBLIC', 3: 'LOG_TBL', 4: '\\', 5: 'TABLE'};
2020-06-17 22:31:39 jdbc[13]: 
/**/rs68.next();
2020-06-17 22:31:39 jdbc[13]: 
/**/rs68.getString("SQL");
2020-06-17 22:31:39 jdbc[13]: 
/**/rs68.getString("TABLE_NAME");
2020-06-17 22:31:39 jdbc[13]: 
/**/dbMeta6.getPrimaryKeys(null, "PUBLIC", "LOG_TBL");
2020-06-17 22:31:39 jdbc[13]: 
/**/PreparedStatement prep27 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME");
2020-06-17 22:31:39 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@375bd55b]
2020-06-17 22:31:39 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@375bd55b
2020-06-17 22:31:39 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 22:31:39 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-17 22:31:39 jdbc[13]: Plan       :   best plan item cost 321.44 index meta
2020-06-17 22:31:39 jdbc[13]: Plan       : plan cost 322.44
2020-06-17 22:31:39 jdbc[13]: 
/**/prep27.setString(1, "%");
2020-06-17 22:31:39 jdbc[13]: 
/**/prep27.setString(2, "\\");
2020-06-17 22:31:39 jdbc[13]: 
/**/prep27.setString(3, "PUBLIC");
2020-06-17 22:31:39 jdbc[13]: 
/**/prep27.setString(4, "\\");
2020-06-17 22:31:39 jdbc[13]: 
/**/prep27.setString(5, "LOG_TBL");
2020-06-17 22:31:39 jdbc[13]: 
/**/ResultSet rs69 = prep27.executeQuery();
2020-06-17 22:31:39 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@375bd55b]
2020-06-17 22:31:39 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@375bd55b
2020-06-17 22:31:39 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 22:31:39 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-17 22:31:39 jdbc[13]: Plan       :   best plan item cost 318.16 index meta
2020-06-17 22:31:39 jdbc[13]: Plan       : plan cost 319.16
2020-06-17 22:31:39 jdbc[13]: 
/*SQL l:316 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME {1: '%', 2: '\\', 3: 'PUBLIC', 4: '\\', 5: 'LOG_TBL'};
2020-06-17 22:31:39 jdbc[13]: 
/**/rs69.next();
2020-06-17 22:31:39 jdbc[13]: 
/**/rs69.getString("COLUMN_NAME");
2020-06-17 22:31:39 jdbc[13]: 
/**/rs69.next();
2020-06-17 22:31:39 jdbc[13]: 
/**/rs67.getType();
2020-06-17 22:31:39 jdbc[13]: 
/**/rs67.close();
2020-06-17 22:31:39 jdbc[13]: 
/**/stat5.close();
2020-06-17 22:31:44 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-17 22:31:44 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 22:31:44 jdbc[3]: 
/**/PreparedStatement prep28 = conn0.prepareStatement("select equipment0_.id as id1_0_, equipment0_.cust_id as cust_id2_0_, equipment0_.equipment_name as equipmen3_0_ from equipment_tbl equipment0_ where equipment0_.cust_id=?");
2020-06-17 22:31:44 jdbc[3]: 
/**/prep28.setLong(1, 2L);
2020-06-17 22:31:44 jdbc[3]: 
/**/ResultSet rs70 = prep28.executeQuery();
2020-06-17 22:31:44 jdbc[3]: 
/*SQL l:170 #:1*/select equipment0_.id as id1_0_, equipment0_.cust_id as cust_id2_0_, equipment0_.equipment_name as equipmen3_0_ from equipment_tbl equipment0_ where equipment0_.cust_id=? {1: 2};
2020-06-17 22:31:44 jdbc[3]: 
/**/rs70.next();
2020-06-17 22:31:44 jdbc[3]: 
/**/rs70.getLong("id1_0_");
2020-06-17 22:31:44 jdbc[3]: 
/**/rs70.wasNull();
2020-06-17 22:31:44 jdbc[3]: 
/**/rs70.getLong("cust_id2_0_");
2020-06-17 22:31:44 jdbc[3]: 
/**/rs70.wasNull();
2020-06-17 22:31:44 jdbc[3]: 
/**/rs70.getString("equipmen3_0_");
2020-06-17 22:31:44 jdbc[3]: 
/**/rs70.wasNull();
2020-06-17 22:31:44 jdbc[3]: 
/**/rs70.next();
2020-06-17 22:31:44 jdbc[3]: 
/**/rs70.close();
2020-06-17 22:31:44 jdbc[3]: 
/**/prep28.getMaxRows();
2020-06-17 22:31:44 jdbc[3]: 
/**/prep28.getQueryTimeout();
2020-06-17 22:31:44 jdbc[3]: 
/**/prep28.close();
2020-06-17 22:31:44 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:31:44 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:31:44 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:31:45 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-17 22:31:45 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 22:31:45 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:31:45 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:31:45 jdbc[3]: 
/**/PreparedStatement prep29 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:31:45 jdbc[3]: 
/**/prep29.setString(1, "EquipmentMS");
2020-06-17 22:31:45 jdbc[3]: 
/**/prep29.setString(2, "INFO");
2020-06-17 22:31:45 jdbc[3]: 
/**/prep29.setNull(3, 12);
2020-06-17 22:31:45 jdbc[3]: 
/**/prep29.setString(4, "/api/equipments/2");
2020-06-17 22:31:45 jdbc[3]: 
/**/prep29.setString(5, "[Apple Keyboard]");
2020-06-17 22:31:45 jdbc[3]: 
/**/prep29.setString(6, "87db1b7cba2a627f");
2020-06-17 22:31:45 jdbc[3]: 
/**/prep29.setString(7, "2020-06-18T03:31:44.083Z");
2020-06-17 22:31:45 jdbc[3]: 
/**/prep29.setString(8, "87db1b7cba2a627f");
2020-06-17 22:31:45 jdbc[3]: 
/**/prep29.executeUpdate();
2020-06-17 22:31:45 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:31:45 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:31:45 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'EquipmentMS', 2: 'INFO', 3: NULL, 4: '/api/equipments/2', 5: '[Apple Keyboard]', 6: '87db1b7cba2a627f', 7: '2020-06-18T03:31:44.083Z', 8: '87db1b7cba2a627f'};
2020-06-17 22:31:45 jdbc[3]: 
/**/ResultSet rs71 = prep29.getGeneratedKeys();
2020-06-17 22:31:45 jdbc[3]: 
/**/rs71.next();
2020-06-17 22:31:45 jdbc[3]: 
/**/ResultSetMetaData rsMeta7 = rs71.getMetaData();
2020-06-17 22:31:45 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:31:45 jdbc[3]: 
/**/rsMeta7.getColumnCount();
2020-06-17 22:31:45 jdbc[3]: 
/**/rs71.getLong(1);
2020-06-17 22:31:45 jdbc[3]: 
/**/rs71.close();
2020-06-17 22:31:45 jdbc[3]: 
/**/prep29.getMaxRows();
2020-06-17 22:31:45 jdbc[3]: 
/**/prep29.getQueryTimeout();
2020-06-17 22:31:45 jdbc[3]: 
/**/prep29.close();
2020-06-17 22:31:45 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:31:45 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:31:45 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:31:45 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:31:45 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:31:45 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:31:45 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:31:45 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:31:45 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:31:46 jdbc[13]: 
/**/Statement stat6 = conn10.createStatement(1004, 1008);
2020-06-17 22:31:46 jdbc[13]: 
/**/stat6.setMaxRows(1000);
2020-06-17 22:31:46 jdbc[13]: 
/**/stat6.execute("SELECT * FROM LOG_TBL");
2020-06-17 22:31:46 jdbc[13]: 
/*SQL #:2*/SELECT * FROM LOG_TBL;
2020-06-17 22:31:46 jdbc[13]: 
/**/ResultSet rs72 = stat6.getResultSet();
2020-06-17 22:31:46 jdbc[13]: 
/**/ResultSetMetaData rsMeta8 = rs72.getMetaData();
2020-06-17 22:31:46 jdbc[13]: 
/**/conn10.getCatalog();
2020-06-17 22:31:46 jdbc[13]: 
/**/rsMeta8.getColumnCount();
2020-06-17 22:31:46 jdbc[13]: 
/**/rsMeta8.getColumnLabel(1);
2020-06-17 22:31:46 jdbc[13]: 
/**/rsMeta8.getColumnLabel(2);
2020-06-17 22:31:46 jdbc[13]: 
/**/rsMeta8.getColumnLabel(3);
2020-06-17 22:31:46 jdbc[13]: 
/**/rsMeta8.getColumnLabel(4);
2020-06-17 22:31:46 jdbc[13]: 
/**/rsMeta8.getColumnLabel(5);
2020-06-17 22:31:46 jdbc[13]: 
/**/rsMeta8.getColumnLabel(6);
2020-06-17 22:31:46 jdbc[13]: 
/**/rsMeta8.getColumnLabel(7);
2020-06-17 22:31:46 jdbc[13]: 
/**/rsMeta8.getColumnLabel(8);
2020-06-17 22:31:46 jdbc[13]: 
/**/rsMeta8.getColumnLabel(9);
2020-06-17 22:31:46 jdbc[13]: 
/**/rs72.next();
2020-06-17 22:31:46 jdbc[13]: 
/**/rs72.getString(1);
2020-06-17 22:31:46 jdbc[13]: 
/**/rs72.getString(2);
2020-06-17 22:31:46 jdbc[13]: 
/**/rs72.getString(3);
2020-06-17 22:31:46 jdbc[13]: 
/**/rs72.getString(4);
2020-06-17 22:31:46 jdbc[13]: 
/**/rs72.getString(5);
2020-06-17 22:31:46 jdbc[13]: 
/**/rs72.getString(6);
2020-06-17 22:31:46 jdbc[13]: 
/**/rs72.getString(7);
2020-06-17 22:31:46 jdbc[13]: 
/**/rs72.getString(8);
2020-06-17 22:31:46 jdbc[13]: 
/**/rs72.getString(9);
2020-06-17 22:31:46 jdbc[13]: 
/**/rs72.next();
2020-06-17 22:31:46 jdbc[13]: 
/**/rs72.getString(1);
2020-06-17 22:31:46 jdbc[13]: 
/**/rs72.getString(2);
2020-06-17 22:31:46 jdbc[13]: 
/**/rs72.getString(3);
2020-06-17 22:31:46 jdbc[13]: 
/**/rs72.getString(4);
2020-06-17 22:31:46 jdbc[13]: 
/**/rs72.getString(5);
2020-06-17 22:31:46 jdbc[13]: 
/**/rs72.getString(6);
2020-06-17 22:31:46 jdbc[13]: 
/**/rs72.getString(7);
2020-06-17 22:31:46 jdbc[13]: 
/**/rs72.getString(8);
2020-06-17 22:31:46 jdbc[13]: 
/**/rs72.getString(9);
2020-06-17 22:31:46 jdbc[13]: 
/**/rs72.next();
2020-06-17 22:31:46 jdbc[13]: 
/**/rs72.getConcurrency();
2020-06-17 22:31:46 jdbc[13]: 
/**/DatabaseMetaData dbMeta7 = conn10.getMetaData();
2020-06-17 22:31:46 jdbc[13]: 
/**/dbMeta7.getTables(null, "PUBLIC", "LOG_TBL", new String[]{"TABLE"});
2020-06-17 22:31:46 jdbc[13]: 
/**/PreparedStatement prep30 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME");
2020-06-17 22:31:46 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@7b3e34d0]
2020-06-17 22:31:46 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@7b3e34d0
2020-06-17 22:31:46 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 22:31:46 jdbc[13]: Table      :     potential plan item cost 4,322 index meta
2020-06-17 22:31:46 jdbc[13]: Plan       :   best plan item cost 4,278.78 index meta
2020-06-17 22:31:46 jdbc[13]: Plan       : plan cost 4,279.78
2020-06-17 22:31:46 jdbc[13]: 
/**/prep30.setString(1, "%");
2020-06-17 22:31:46 jdbc[13]: 
/**/prep30.setString(2, "PUBLIC");
2020-06-17 22:31:46 jdbc[13]: 
/**/prep30.setString(3, "LOG_TBL");
2020-06-17 22:31:46 jdbc[13]: 
/**/prep30.setString(4, "\\");
2020-06-17 22:31:46 jdbc[13]: 
/**/prep30.setString(5, "TABLE");
2020-06-17 22:31:46 jdbc[13]: 
/**/ResultSet rs73 = prep30.executeQuery();
2020-06-17 22:31:46 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@7b3e34d0]
2020-06-17 22:31:46 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@7b3e34d0
2020-06-17 22:31:46 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 22:31:46 jdbc[13]: Table      :     potential plan item cost 1,324 index meta
2020-06-17 22:31:46 jdbc[13]: Plan       :   best plan item cost 1,271.04 index meta
2020-06-17 22:31:46 jdbc[13]: Plan       : plan cost 1,272.04
2020-06-17 22:31:46 jdbc[13]: 
/*SQL l:414 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME {1: '%', 2: 'PUBLIC', 3: 'LOG_TBL', 4: '\\', 5: 'TABLE'};
2020-06-17 22:31:46 jdbc[13]: 
/**/rs73.next();
2020-06-17 22:31:46 jdbc[13]: 
/**/rs73.getString("SQL");
2020-06-17 22:31:46 jdbc[13]: 
/**/rs73.getString("TABLE_NAME");
2020-06-17 22:31:46 jdbc[13]: 
/**/dbMeta7.getPrimaryKeys(null, "PUBLIC", "LOG_TBL");
2020-06-17 22:31:46 jdbc[13]: 
/**/PreparedStatement prep31 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME");
2020-06-17 22:31:46 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@375bd55b]
2020-06-17 22:31:46 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@375bd55b
2020-06-17 22:31:46 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 22:31:46 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-17 22:31:46 jdbc[13]: Plan       :   best plan item cost 321.44 index meta
2020-06-17 22:31:46 jdbc[13]: Plan       : plan cost 322.44
2020-06-17 22:31:46 jdbc[13]: 
/**/prep31.setString(1, "%");
2020-06-17 22:31:46 jdbc[13]: 
/**/prep31.setString(2, "\\");
2020-06-17 22:31:46 jdbc[13]: 
/**/prep31.setString(3, "PUBLIC");
2020-06-17 22:31:46 jdbc[13]: 
/**/prep31.setString(4, "\\");
2020-06-17 22:31:46 jdbc[13]: 
/**/prep31.setString(5, "LOG_TBL");
2020-06-17 22:31:46 jdbc[13]: 
/**/ResultSet rs74 = prep31.executeQuery();
2020-06-17 22:31:46 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@375bd55b]
2020-06-17 22:31:46 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@375bd55b
2020-06-17 22:31:46 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 22:31:46 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-17 22:31:46 jdbc[13]: Plan       :   best plan item cost 318.16 index meta
2020-06-17 22:31:46 jdbc[13]: Plan       : plan cost 319.16
2020-06-17 22:31:46 jdbc[13]: 
/*SQL l:316 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME {1: '%', 2: '\\', 3: 'PUBLIC', 4: '\\', 5: 'LOG_TBL'};
2020-06-17 22:31:46 jdbc[13]: 
/**/rs74.next();
2020-06-17 22:31:46 jdbc[13]: 
/**/rs74.getString("COLUMN_NAME");
2020-06-17 22:31:46 jdbc[13]: 
/**/rs74.next();
2020-06-17 22:31:46 jdbc[13]: 
/**/rs72.getType();
2020-06-17 22:31:46 jdbc[13]: 
/**/rs72.close();
2020-06-17 22:31:46 jdbc[13]: 
/**/stat6.close();
2020-06-17 22:31:53 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-17 22:31:53 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 22:31:53 jdbc[3]: 
/**/PreparedStatement prep32 = conn0.prepareStatement("select equipment0_.id as id1_0_, equipment0_.cust_id as cust_id2_0_, equipment0_.equipment_name as equipmen3_0_ from equipment_tbl equipment0_ where equipment0_.cust_id=?");
2020-06-17 22:31:53 jdbc[3]: 
/**/prep32.setLong(1, 3L);
2020-06-17 22:31:53 jdbc[3]: 
/**/ResultSet rs75 = prep32.executeQuery();
2020-06-17 22:31:53 jdbc[3]: 
/*SQL l:170*/select equipment0_.id as id1_0_, equipment0_.cust_id as cust_id2_0_, equipment0_.equipment_name as equipmen3_0_ from equipment_tbl equipment0_ where equipment0_.cust_id=? {1: 3};
2020-06-17 22:31:53 jdbc[3]: 
/**/rs75.next();
2020-06-17 22:31:53 jdbc[3]: 
/**/rs75.close();
2020-06-17 22:31:53 jdbc[3]: 
/**/prep32.getMaxRows();
2020-06-17 22:31:53 jdbc[3]: 
/**/prep32.getQueryTimeout();
2020-06-17 22:31:53 jdbc[3]: 
/**/prep32.close();
2020-06-17 22:31:53 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:31:53 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:31:53 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:31:54 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:31:54 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:31:54 jdbc[3]: 
/**/PreparedStatement prep33 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:31:54 jdbc[3]: 
/**/prep33.setString(1, "EquipmentMS");
2020-06-17 22:31:54 jdbc[3]: 
/**/prep33.setString(2, "INFO");
2020-06-17 22:31:54 jdbc[3]: 
/**/prep33.setNull(3, 12);
2020-06-17 22:31:54 jdbc[3]: 
/**/prep33.setString(4, "/api/equipments/3");
2020-06-17 22:31:54 jdbc[3]: 
/**/prep33.setString(5, "[]");
2020-06-17 22:31:54 jdbc[3]: 
/**/prep33.setString(6, "74c7912b976eb23a");
2020-06-17 22:31:54 jdbc[3]: 
/**/prep33.setString(7, "2020-06-18T03:31:53.978Z");
2020-06-17 22:31:54 jdbc[3]: 
/**/prep33.setString(8, "74c7912b976eb23a");
2020-06-17 22:31:54 jdbc[3]: 
/**/prep33.executeUpdate();
2020-06-17 22:31:54 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:31:54 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:31:54 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'EquipmentMS', 2: 'INFO', 3: NULL, 4: '/api/equipments/3', 5: '[]', 6: '74c7912b976eb23a', 7: '2020-06-18T03:31:53.978Z', 8: '74c7912b976eb23a'};
2020-06-17 22:31:54 jdbc[3]: 
/**/ResultSet rs76 = prep33.getGeneratedKeys();
2020-06-17 22:31:54 jdbc[3]: 
/**/rs76.next();
2020-06-17 22:31:54 jdbc[3]: 
/**/ResultSetMetaData rsMeta9 = rs76.getMetaData();
2020-06-17 22:31:54 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:31:54 jdbc[3]: 
/**/rsMeta9.getColumnCount();
2020-06-17 22:31:54 jdbc[3]: 
/**/rs76.getLong(1);
2020-06-17 22:31:54 jdbc[3]: 
/**/rs76.close();
2020-06-17 22:31:54 jdbc[3]: 
/**/prep33.getMaxRows();
2020-06-17 22:31:54 jdbc[3]: 
/**/prep33.getQueryTimeout();
2020-06-17 22:31:54 jdbc[3]: 
/**/prep33.close();
2020-06-17 22:31:54 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:31:54 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:31:54 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:31:54 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:31:54 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:31:54 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:31:54 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:31:54 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:31:54 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:31:57 jdbc[13]: 
/**/Statement stat7 = conn10.createStatement(1004, 1008);
2020-06-17 22:31:57 jdbc[13]: 
/**/stat7.setMaxRows(1000);
2020-06-17 22:31:57 jdbc[13]: 
/**/stat7.execute("SELECT * FROM LOG_TBL");
2020-06-17 22:31:57 jdbc[13]: 
/*SQL #:3*/SELECT * FROM LOG_TBL;
2020-06-17 22:31:57 jdbc[13]: 
/**/ResultSet rs77 = stat7.getResultSet();
2020-06-17 22:31:57 jdbc[13]: 
/**/ResultSetMetaData rsMeta10 = rs77.getMetaData();
2020-06-17 22:31:57 jdbc[13]: 
/**/conn10.getCatalog();
2020-06-17 22:31:57 jdbc[13]: 
/**/rsMeta10.getColumnCount();
2020-06-17 22:31:57 jdbc[13]: 
/**/rsMeta10.getColumnLabel(1);
2020-06-17 22:31:57 jdbc[13]: 
/**/rsMeta10.getColumnLabel(2);
2020-06-17 22:31:57 jdbc[13]: 
/**/rsMeta10.getColumnLabel(3);
2020-06-17 22:31:57 jdbc[13]: 
/**/rsMeta10.getColumnLabel(4);
2020-06-17 22:31:57 jdbc[13]: 
/**/rsMeta10.getColumnLabel(5);
2020-06-17 22:31:57 jdbc[13]: 
/**/rsMeta10.getColumnLabel(6);
2020-06-17 22:31:57 jdbc[13]: 
/**/rsMeta10.getColumnLabel(7);
2020-06-17 22:31:57 jdbc[13]: 
/**/rsMeta10.getColumnLabel(8);
2020-06-17 22:31:57 jdbc[13]: 
/**/rsMeta10.getColumnLabel(9);
2020-06-17 22:31:57 jdbc[13]: 
/**/rs77.next();
2020-06-17 22:31:57 jdbc[13]: 
/**/rs77.getString(1);
2020-06-17 22:31:57 jdbc[13]: 
/**/rs77.getString(2);
2020-06-17 22:31:57 jdbc[13]: 
/**/rs77.getString(3);
2020-06-17 22:31:57 jdbc[13]: 
/**/rs77.getString(4);
2020-06-17 22:31:57 jdbc[13]: 
/**/rs77.getString(5);
2020-06-17 22:31:57 jdbc[13]: 
/**/rs77.getString(6);
2020-06-17 22:31:57 jdbc[13]: 
/**/rs77.getString(7);
2020-06-17 22:31:57 jdbc[13]: 
/**/rs77.getString(8);
2020-06-17 22:31:57 jdbc[13]: 
/**/rs77.getString(9);
2020-06-17 22:31:57 jdbc[13]: 
/**/rs77.next();
2020-06-17 22:31:57 jdbc[13]: 
/**/rs77.getString(1);
2020-06-17 22:31:57 jdbc[13]: 
/**/rs77.getString(2);
2020-06-17 22:31:57 jdbc[13]: 
/**/rs77.getString(3);
2020-06-17 22:31:57 jdbc[13]: 
/**/rs77.getString(4);
2020-06-17 22:31:57 jdbc[13]: 
/**/rs77.getString(5);
2020-06-17 22:31:57 jdbc[13]: 
/**/rs77.getString(6);
2020-06-17 22:31:57 jdbc[13]: 
/**/rs77.getString(7);
2020-06-17 22:31:57 jdbc[13]: 
/**/rs77.getString(8);
2020-06-17 22:31:57 jdbc[13]: 
/**/rs77.getString(9);
2020-06-17 22:31:57 jdbc[13]: 
/**/rs77.next();
2020-06-17 22:31:57 jdbc[13]: 
/**/rs77.getString(1);
2020-06-17 22:31:57 jdbc[13]: 
/**/rs77.getString(2);
2020-06-17 22:31:57 jdbc[13]: 
/**/rs77.getString(3);
2020-06-17 22:31:57 jdbc[13]: 
/**/rs77.getString(4);
2020-06-17 22:31:57 jdbc[13]: 
/**/rs77.getString(5);
2020-06-17 22:31:57 jdbc[13]: 
/**/rs77.getString(6);
2020-06-17 22:31:57 jdbc[13]: 
/**/rs77.getString(7);
2020-06-17 22:31:57 jdbc[13]: 
/**/rs77.getString(8);
2020-06-17 22:31:57 jdbc[13]: 
/**/rs77.getString(9);
2020-06-17 22:31:57 jdbc[13]: 
/**/rs77.next();
2020-06-17 22:31:57 jdbc[13]: 
/**/rs77.getConcurrency();
2020-06-17 22:31:57 jdbc[13]: 
/**/DatabaseMetaData dbMeta8 = conn10.getMetaData();
2020-06-17 22:31:57 jdbc[13]: 
/**/dbMeta8.getTables(null, "PUBLIC", "LOG_TBL", new String[]{"TABLE"});
2020-06-17 22:31:57 jdbc[13]: 
/**/PreparedStatement prep34 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME");
2020-06-17 22:31:57 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@7b3e34d0]
2020-06-17 22:31:57 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@7b3e34d0
2020-06-17 22:31:57 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 22:31:57 jdbc[13]: Table      :     potential plan item cost 4,322 index meta
2020-06-17 22:31:57 jdbc[13]: Plan       :   best plan item cost 4,278.78 index meta
2020-06-17 22:31:57 jdbc[13]: Plan       : plan cost 4,279.78
2020-06-17 22:31:57 jdbc[13]: 
/**/prep34.setString(1, "%");
2020-06-17 22:31:57 jdbc[13]: 
/**/prep34.setString(2, "PUBLIC");
2020-06-17 22:31:57 jdbc[13]: 
/**/prep34.setString(3, "LOG_TBL");
2020-06-17 22:31:57 jdbc[13]: 
/**/prep34.setString(4, "\\");
2020-06-17 22:31:57 jdbc[13]: 
/**/prep34.setString(5, "TABLE");
2020-06-17 22:31:57 jdbc[13]: 
/**/ResultSet rs78 = prep34.executeQuery();
2020-06-17 22:31:57 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@7b3e34d0]
2020-06-17 22:31:57 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@7b3e34d0
2020-06-17 22:31:57 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 22:31:57 jdbc[13]: Table      :     potential plan item cost 1,324 index meta
2020-06-17 22:31:57 jdbc[13]: Plan       :   best plan item cost 1,271.04 index meta
2020-06-17 22:31:57 jdbc[13]: Plan       : plan cost 1,272.04
2020-06-17 22:31:57 jdbc[13]: 
/*SQL l:414 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME {1: '%', 2: 'PUBLIC', 3: 'LOG_TBL', 4: '\\', 5: 'TABLE'};
2020-06-17 22:31:57 jdbc[13]: 
/**/rs78.next();
2020-06-17 22:31:57 jdbc[13]: 
/**/rs78.getString("SQL");
2020-06-17 22:31:57 jdbc[13]: 
/**/rs78.getString("TABLE_NAME");
2020-06-17 22:31:57 jdbc[13]: 
/**/dbMeta8.getPrimaryKeys(null, "PUBLIC", "LOG_TBL");
2020-06-17 22:31:57 jdbc[13]: 
/**/PreparedStatement prep35 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME");
2020-06-17 22:31:57 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@375bd55b]
2020-06-17 22:31:57 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@375bd55b
2020-06-17 22:31:57 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 22:31:57 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-17 22:31:57 jdbc[13]: Plan       :   best plan item cost 321.44 index meta
2020-06-17 22:31:57 jdbc[13]: Plan       : plan cost 322.44
2020-06-17 22:31:57 jdbc[13]: 
/**/prep35.setString(1, "%");
2020-06-17 22:31:57 jdbc[13]: 
/**/prep35.setString(2, "\\");
2020-06-17 22:31:57 jdbc[13]: 
/**/prep35.setString(3, "PUBLIC");
2020-06-17 22:31:57 jdbc[13]: 
/**/prep35.setString(4, "\\");
2020-06-17 22:31:57 jdbc[13]: 
/**/prep35.setString(5, "LOG_TBL");
2020-06-17 22:31:57 jdbc[13]: 
/**/ResultSet rs79 = prep35.executeQuery();
2020-06-17 22:31:57 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@375bd55b]
2020-06-17 22:31:57 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@375bd55b
2020-06-17 22:31:57 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-17 22:31:57 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-17 22:31:57 jdbc[13]: Plan       :   best plan item cost 318.16 index meta
2020-06-17 22:31:57 jdbc[13]: Plan       : plan cost 319.16
2020-06-17 22:31:57 jdbc[13]: 
/*SQL l:316 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME {1: '%', 2: '\\', 3: 'PUBLIC', 4: '\\', 5: 'LOG_TBL'};
2020-06-17 22:31:57 jdbc[13]: 
/**/rs79.next();
2020-06-17 22:31:57 jdbc[13]: 
/**/rs79.getString("COLUMN_NAME");
2020-06-17 22:31:57 jdbc[13]: 
/**/rs79.next();
2020-06-17 22:31:57 jdbc[13]: 
/**/rs77.getType();
2020-06-17 22:31:57 jdbc[13]: 
/**/rs77.close();
2020-06-17 22:31:57 jdbc[13]: 
/**/stat7.close();
2020-06-17 22:32:49 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-17 22:32:49 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 22:32:49 jdbc[3]: 
/**/PreparedStatement prep36 = conn0.prepareStatement("select equipment0_.id as id1_0_, equipment0_.cust_id as cust_id2_0_, equipment0_.equipment_name as equipmen3_0_ from equipment_tbl equipment0_ where equipment0_.cust_id=?");
2020-06-17 22:32:49 jdbc[3]: 
/**/prep36.setLong(1, 1L);
2020-06-17 22:32:49 jdbc[3]: 
/**/ResultSet rs80 = prep36.executeQuery();
2020-06-17 22:32:49 jdbc[3]: 
/*SQL l:170 #:3*/select equipment0_.id as id1_0_, equipment0_.cust_id as cust_id2_0_, equipment0_.equipment_name as equipmen3_0_ from equipment_tbl equipment0_ where equipment0_.cust_id=? {1: 1};
2020-06-17 22:32:49 jdbc[3]: 
/**/rs80.next();
2020-06-17 22:32:49 jdbc[3]: 
/**/rs80.getLong("id1_0_");
2020-06-17 22:32:49 jdbc[3]: 
/**/rs80.wasNull();
2020-06-17 22:32:49 jdbc[3]: 
/**/rs80.getLong("cust_id2_0_");
2020-06-17 22:32:49 jdbc[3]: 
/**/rs80.wasNull();
2020-06-17 22:32:49 jdbc[3]: 
/**/rs80.getString("equipmen3_0_");
2020-06-17 22:32:49 jdbc[3]: 
/**/rs80.wasNull();
2020-06-17 22:32:49 jdbc[3]: 
/**/rs80.next();
2020-06-17 22:32:49 jdbc[3]: 
/**/rs80.getLong("id1_0_");
2020-06-17 22:32:49 jdbc[3]: 
/**/rs80.wasNull();
2020-06-17 22:32:49 jdbc[3]: 
/**/rs80.getLong("cust_id2_0_");
2020-06-17 22:32:49 jdbc[3]: 
/**/rs80.wasNull();
2020-06-17 22:32:49 jdbc[3]: 
/**/rs80.getString("equipmen3_0_");
2020-06-17 22:32:49 jdbc[3]: 
/**/rs80.wasNull();
2020-06-17 22:32:49 jdbc[3]: 
/**/rs80.next();
2020-06-17 22:32:49 jdbc[3]: 
/**/rs80.getLong("id1_0_");
2020-06-17 22:32:49 jdbc[3]: 
/**/rs80.wasNull();
2020-06-17 22:32:49 jdbc[3]: 
/**/rs80.getLong("cust_id2_0_");
2020-06-17 22:32:49 jdbc[3]: 
/**/rs80.wasNull();
2020-06-17 22:32:49 jdbc[3]: 
/**/rs80.getString("equipmen3_0_");
2020-06-17 22:32:49 jdbc[3]: 
/**/rs80.wasNull();
2020-06-17 22:32:49 jdbc[3]: 
/**/rs80.next();
2020-06-17 22:32:49 jdbc[3]: 
/**/rs80.close();
2020-06-17 22:32:49 jdbc[3]: 
/**/prep36.getMaxRows();
2020-06-17 22:32:49 jdbc[3]: 
/**/prep36.getQueryTimeout();
2020-06-17 22:32:49 jdbc[3]: 
/**/prep36.close();
2020-06-17 22:32:49 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:32:49 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:32:49 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:32:50 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:32:50 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:32:50 jdbc[3]: 
/**/PreparedStatement prep37 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:32:50 jdbc[3]: 
/**/prep37.setString(1, "EquipmentMS");
2020-06-17 22:32:50 jdbc[3]: 
/**/prep37.setString(2, "INFO");
2020-06-17 22:32:50 jdbc[3]: 
/**/prep37.setNull(3, 12);
2020-06-17 22:32:50 jdbc[3]: 
/**/prep37.setString(4, "/api/equipments/1");
2020-06-17 22:32:50 jdbc[3]: 
/**/prep37.setString(5, "[Mouse, Keyboard, guitar]");
2020-06-17 22:32:50 jdbc[3]: 
/**/prep37.setString(6, "fc135316fe9b5bf7");
2020-06-17 22:32:50 jdbc[3]: 
/**/prep37.setString(7, "2020-06-18T03:32:49.810Z");
2020-06-17 22:32:50 jdbc[3]: 
/**/prep37.setString(8, "fc135316fe9b5bf7");
2020-06-17 22:32:50 jdbc[3]: 
/**/prep37.executeUpdate();
2020-06-17 22:32:50 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:32:50 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:32:50 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'EquipmentMS', 2: 'INFO', 3: NULL, 4: '/api/equipments/1', 5: '[Mouse, Keyboard, guitar]', 6: 'fc135316fe9b5bf7', 7: '2020-06-18T03:32:49.810Z', 8: 'fc135316fe9b5bf7'};
2020-06-17 22:32:50 jdbc[3]: 
/**/ResultSet rs81 = prep37.getGeneratedKeys();
2020-06-17 22:32:50 jdbc[3]: 
/**/rs81.next();
2020-06-17 22:32:50 jdbc[3]: 
/**/ResultSetMetaData rsMeta11 = rs81.getMetaData();
2020-06-17 22:32:50 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:32:50 jdbc[3]: 
/**/rsMeta11.getColumnCount();
2020-06-17 22:32:50 jdbc[3]: 
/**/rs81.getLong(1);
2020-06-17 22:32:50 jdbc[3]: 
/**/rs81.close();
2020-06-17 22:32:50 jdbc[3]: 
/**/prep37.getMaxRows();
2020-06-17 22:32:50 jdbc[3]: 
/**/prep37.getQueryTimeout();
2020-06-17 22:32:50 jdbc[3]: 
/**/prep37.close();
2020-06-17 22:32:50 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:32:50 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:32:50 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:32:50 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:32:50 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:32:50 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:32:50 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:32:50 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:32:50 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:33:01 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-17 22:33:01 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 22:33:01 jdbc[3]: 
/**/PreparedStatement prep38 = conn0.prepareStatement("select equipment0_.id as id1_0_, equipment0_.cust_id as cust_id2_0_, equipment0_.equipment_name as equipmen3_0_ from equipment_tbl equipment0_ where equipment0_.cust_id=?");
2020-06-17 22:33:01 jdbc[3]: 
/**/prep38.setLong(1, 2L);
2020-06-17 22:33:01 jdbc[3]: 
/**/ResultSet rs82 = prep38.executeQuery();
2020-06-17 22:33:01 jdbc[3]: 
/*SQL l:170 #:1*/select equipment0_.id as id1_0_, equipment0_.cust_id as cust_id2_0_, equipment0_.equipment_name as equipmen3_0_ from equipment_tbl equipment0_ where equipment0_.cust_id=? {1: 2};
2020-06-17 22:33:01 jdbc[3]: 
/**/rs82.next();
2020-06-17 22:33:01 jdbc[3]: 
/**/rs82.getLong("id1_0_");
2020-06-17 22:33:01 jdbc[3]: 
/**/rs82.wasNull();
2020-06-17 22:33:01 jdbc[3]: 
/**/rs82.getLong("cust_id2_0_");
2020-06-17 22:33:01 jdbc[3]: 
/**/rs82.wasNull();
2020-06-17 22:33:01 jdbc[3]: 
/**/rs82.getString("equipmen3_0_");
2020-06-17 22:33:01 jdbc[3]: 
/**/rs82.wasNull();
2020-06-17 22:33:01 jdbc[3]: 
/**/rs82.next();
2020-06-17 22:33:01 jdbc[3]: 
/**/rs82.close();
2020-06-17 22:33:01 jdbc[3]: 
/**/prep38.getMaxRows();
2020-06-17 22:33:01 jdbc[3]: 
/**/prep38.getQueryTimeout();
2020-06-17 22:33:01 jdbc[3]: 
/**/prep38.close();
2020-06-17 22:33:01 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:33:01 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:33:01 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:33:02 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-17 22:33:02 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 22:33:02 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:33:02 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-17 22:33:02 jdbc[3]: 
/**/PreparedStatement prep39 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-17 22:33:02 jdbc[3]: 
/**/prep39.setString(1, "EquipmentMS");
2020-06-17 22:33:02 jdbc[3]: 
/**/prep39.setString(2, "INFO");
2020-06-17 22:33:02 jdbc[3]: 
/**/prep39.setNull(3, 12);
2020-06-17 22:33:02 jdbc[3]: 
/**/prep39.setString(4, "/api/equipments/2");
2020-06-17 22:33:02 jdbc[3]: 
/**/prep39.setString(5, "[Apple Keyboard]");
2020-06-17 22:33:02 jdbc[3]: 
/**/prep39.setString(6, "5e5ea740c817c103");
2020-06-17 22:33:02 jdbc[3]: 
/**/prep39.setString(7, "2020-06-18T03:33:01.272Z");
2020-06-17 22:33:02 jdbc[3]: 
/**/prep39.setString(8, "5e5ea740c817c103");
2020-06-17 22:33:02 jdbc[3]: 
/**/prep39.executeUpdate();
2020-06-17 22:33:02 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-17 22:33:02 lock: 3 shared read lock ok LOG_TBL 
2020-06-17 22:33:02 jdbc[3]: 
/*SQL l:147 #:1*/insert into log_tbl (id, application_name, level, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'EquipmentMS', 2: 'INFO', 3: NULL, 4: '/api/equipments/2', 5: '[Apple Keyboard]', 6: '5e5ea740c817c103', 7: '2020-06-18T03:33:01.272Z', 8: '5e5ea740c817c103'};
2020-06-17 22:33:02 jdbc[3]: 
/**/ResultSet rs83 = prep39.getGeneratedKeys();
2020-06-17 22:33:02 jdbc[3]: 
/**/rs83.next();
2020-06-17 22:33:02 jdbc[3]: 
/**/ResultSetMetaData rsMeta12 = rs83.getMetaData();
2020-06-17 22:33:02 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-17 22:33:02 jdbc[3]: 
/**/rsMeta12.getColumnCount();
2020-06-17 22:33:02 jdbc[3]: 
/**/rs83.getLong(1);
2020-06-17 22:33:02 jdbc[3]: 
/**/rs83.close();
2020-06-17 22:33:02 jdbc[3]: 
/**/prep39.getMaxRows();
2020-06-17 22:33:02 jdbc[3]: 
/**/prep39.getQueryTimeout();
2020-06-17 22:33:02 jdbc[3]: 
/**/prep39.close();
2020-06-17 22:33:02 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:33:02 lock: 3 shared read lock unlock LOG_TBL 
2020-06-17 22:33:02 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:33:02 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-17 22:33:02 jdbc[3]: 
/**/conn0.commit();
2020-06-17 22:33:02 jdbc[3]: 
/*SQL */COMMIT;
2020-06-17 22:33:02 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-17 22:33:02 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:33:02 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:36:51 jdbc[13]: 
/**/conn10.close();
2020-06-17 22:36:51 lock: 13 shared read lock unlock SYS 
2020-06-17 22:36:51 database: disconnecting session #13
2020-06-17 22:36:51 database: disconnected session #13
2020-06-17 22:36:51 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-17 22:36:51 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-17 22:36:51 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-17 22:36:51 jdbc[3]: 
/**/Statement stat8 = conn0.createStatement();
2020-06-17 22:36:51 jdbc[3]: 
/**/stat8.execute("drop table if exists equipment_tbl CASCADE ");
2020-06-17 22:36:51 lock: 3 exclusive write lock requesting for EQUIPMENT_TBL 
2020-06-17 22:36:51 lock: 3 exclusive write lock added for EQUIPMENT_TBL 
2020-06-17 22:36:51 lock: 3 exclusive write lock requesting for SYS 
2020-06-17 22:36:51 lock: 3 exclusive write lock added for SYS 
2020-06-17 22:36:51 jdbc[3]: 
/*SQL t:2*/drop table if exists equipment_tbl CASCADE;
2020-06-17 22:36:51 lock: 3 exclusive write lock unlock SYS 
2020-06-17 22:36:51 jdbc[3]: 
/**/stat8.getWarnings();
2020-06-17 22:36:51 jdbc[3]: 
/**/stat8.execute("drop table if exists log_tbl CASCADE ");
2020-06-17 22:36:51 lock: 3 exclusive write lock requesting for LOG_TBL 
2020-06-17 22:36:51 lock: 3 exclusive write lock added for LOG_TBL 
2020-06-17 22:36:51 lock: 3 exclusive write lock requesting for SYS 
2020-06-17 22:36:51 lock: 3 exclusive write lock added for SYS 
2020-06-17 22:36:51 jdbc[3]: 
/*SQL */drop table if exists log_tbl CASCADE;
2020-06-17 22:36:51 lock: 3 exclusive write lock unlock SYS 
2020-06-17 22:36:51 jdbc[3]: 
/**/stat8.getWarnings();
2020-06-17 22:36:51 jdbc[3]: 
/**/stat8.close();
2020-06-17 22:36:51 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-17 22:36:51 database: closing /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/EquipmentMS/equipmentdb from shutdown hook
2020-06-17 22:36:51 lock: 3 shared read lock unlock SYS 
2020-06-17 22:36:51 database: disconnecting session #3
2020-06-17 22:36:51 database: disconnected session #3
2020-06-17 22:36:51 lock: 4 shared read lock unlock SYS 
2020-06-17 22:36:51 database: disconnecting session #4
2020-06-17 22:36:51 database: disconnected session #4
2020-06-17 22:36:51 lock: 5 shared read lock unlock SYS 
2020-06-17 22:36:51 database: disconnecting session #5
2020-06-17 22:36:51 database: disconnected session #5
2020-06-17 22:36:51 lock: 6 shared read lock unlock SYS 
2020-06-17 22:36:51 database: disconnecting session #6
2020-06-17 22:36:51 database: disconnected session #6
2020-06-17 22:36:51 lock: 7 shared read lock unlock SYS 
2020-06-17 22:36:51 database: disconnecting session #7
2020-06-17 22:36:51 database: disconnected session #7
2020-06-17 22:36:51 jdbc[3]: 
/**/conn0.close();
2020-06-17 22:36:51 lock: 8 shared read lock unlock SYS 
2020-06-17 22:36:51 jdbc[4]: 
/**/conn1.close();
2020-06-17 22:36:51 database: disconnecting session #8
2020-06-17 22:36:51 database: disconnected session #8
2020-06-17 22:36:51 jdbc[5]: 
/**/conn2.close();
2020-06-17 22:36:51 lock: 9 shared read lock unlock SYS 
2020-06-17 22:36:51 database: disconnecting session #9
2020-06-17 22:36:51 jdbc[6]: 
/**/conn3.close();
2020-06-17 22:36:51 database: disconnected session #9
2020-06-17 22:36:51 jdbc[7]: 
/**/conn4.close();
2020-06-17 22:36:51 lock: 10 shared read lock unlock SYS 
2020-06-17 22:36:51 jdbc[8]: 
/**/conn5.close();
2020-06-17 22:36:51 database: disconnecting session #10
2020-06-17 22:36:51 jdbc[9]: 
/**/conn6.close();
2020-06-17 22:36:51 database: disconnected session #10
2020-06-17 22:36:51 jdbc[10]: 
/**/conn7.close();
2020-06-17 22:36:51 lock: 11 shared read lock unlock SYS 
2020-06-17 22:36:51 database: disconnecting session #11
2020-06-17 22:36:51 jdbc[11]: 
/**/conn8.close();
2020-06-17 22:36:51 database: disconnected session #11
2020-06-17 22:36:51 jdbc[12]: 
/**/conn9.close();
2020-06-17 22:36:51 lock: 12 shared read lock unlock SYS 
2020-06-17 22:36:51 database: disconnecting session #12
2020-06-17 22:36:51 database: disconnected session #12
2020-06-17 22:36:51 database: closing /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/EquipmentMS/equipmentdb
2020-06-17 22:36:51 lock: 1 shared read lock unlock SYS 
2020-06-17 22:36:51 lock: 2 shared read lock unlock SYS 
2020-06-17 22:36:51 database: closed
2020-06-20 04:44:55 jdbc[13]: 
/**/Connection conn10 = DriverManager.getConnection("jdbc:h2:file:./equipmentdb;TRACE_LEVEL_FILE=3;FORBID_CREATION=TRUE", "SA", "");
2020-06-20 04:44:55 jdbc[13]: 
/**/DatabaseMetaData dbMeta3 = conn10.getMetaData();
2020-06-20 04:44:55 jdbc[13]: 
/**/PreparedStatement prep16 = conn10.prepareStatement("SELECT NAME, VALUE FROM INFORMATION_SCHEMA.SETTINGS WHERE NAME IN (?, ?, ?, ?)");
2020-06-20 04:44:55 jdbc[13]: Plan       : calculate cost for plan [SETTINGS:-7:org.h2.table.MetaTable@341fad31]
2020-06-20 04:44:55 jdbc[13]: Plan       :   for table filter SETTINGS:-7:org.h2.table.MetaTable@341fad31
2020-06-20 04:44:55 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-20 04:44:55 jdbc[13]: Plan       :   best plan item cost 9,900 index meta
2020-06-20 04:44:55 jdbc[13]: Plan       : plan cost 9,901
2020-06-20 04:44:55 jdbc[13]: 
/**/prep16.setString(1, "MODE");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep16.setString(2, "DATABASE_TO_UPPER");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep16.setString(3, "DATABASE_TO_LOWER");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep16.setString(4, "CASE_INSENSITIVE_IDENTIFIERS");
2020-06-20 04:44:55 jdbc[13]: 
/**/ResultSet rs21 = prep16.executeQuery();
2020-06-20 04:44:55 jdbc[13]: 
/*SQL l:78 #:4*/SELECT NAME, VALUE FROM INFORMATION_SCHEMA.SETTINGS WHERE NAME IN (?, ?, ?, ?) {1: 'MODE', 2: 'DATABASE_TO_UPPER', 3: 'DATABASE_TO_LOWER', 4: 'CASE_INSENSITIVE_IDENTIFIERS'};
2020-06-20 04:44:55 jdbc[13]: 
/**/rs21.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs21.getString(2);
2020-06-20 04:44:55 jdbc[13]: 
/**/rs21.getString(1);
2020-06-20 04:44:55 jdbc[13]: 
/**/rs21.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs21.getString(2);
2020-06-20 04:44:55 jdbc[13]: 
/**/rs21.getString(1);
2020-06-20 04:44:55 jdbc[13]: 
/**/rs21.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs21.getString(2);
2020-06-20 04:44:55 jdbc[13]: 
/**/rs21.getString(1);
2020-06-20 04:44:55 jdbc[13]: 
/**/rs21.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs21.getString(2);
2020-06-20 04:44:55 jdbc[13]: 
/**/rs21.getString(1);
2020-06-20 04:44:55 jdbc[13]: 
/**/rs21.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/prep16.close();
2020-06-20 04:44:55 jdbc[13]: 
/**/DatabaseMetaData dbMeta4 = conn10.getMetaData();
2020-06-20 04:44:55 jdbc[13]: 
/**/dbMeta4.getSchemas();
2020-06-20 04:44:55 jdbc[13]: 
/**/PreparedStatement prep17 = conn10.prepareStatement("SELECT SCHEMA_NAME TABLE_SCHEM, CATALOG_NAME TABLE_CATALOG,  IS_DEFAULT FROM INFORMATION_SCHEMA.SCHEMATA ORDER BY SCHEMA_NAME");
2020-06-20 04:44:55 jdbc[13]: Plan       : calculate cost for plan [SCHEMATA:-14:org.h2.table.MetaTable@22718dcb]
2020-06-20 04:44:55 jdbc[13]: Plan       :   for table filter SCHEMATA:-14:org.h2.table.MetaTable@22718dcb
2020-06-20 04:44:55 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-20 04:44:55 jdbc[13]: Plan       :   best plan item cost 10,000 index meta
2020-06-20 04:44:55 jdbc[13]: Plan       : plan cost 10,001
2020-06-20 04:44:55 jdbc[13]: 
/**/ResultSet rs22 = prep17.executeQuery();
2020-06-20 04:44:55 jdbc[13]: 
/*SQL #:2*/SELECT SCHEMA_NAME TABLE_SCHEM, CATALOG_NAME TABLE_CATALOG,  IS_DEFAULT FROM INFORMATION_SCHEMA.SCHEMATA ORDER BY SCHEMA_NAME;
2020-06-20 04:44:55 jdbc[13]: 
/**/rs22.findColumn("IS_DEFAULT");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs22.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs22.getBoolean(3);
2020-06-20 04:44:55 jdbc[13]: 
/**/rs22.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs22.getBoolean(3);
2020-06-20 04:44:55 jdbc[13]: 
/**/rs22.getString("TABLE_SCHEM");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs22.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/dbMeta4.getSchemas();
2020-06-20 04:44:55 jdbc[13]: 
/**/PreparedStatement prep18 = conn10.prepareStatement("SELECT SCHEMA_NAME TABLE_SCHEM, CATALOG_NAME TABLE_CATALOG,  IS_DEFAULT FROM INFORMATION_SCHEMA.SCHEMATA ORDER BY SCHEMA_NAME");
2020-06-20 04:44:55 jdbc[13]: Plan       : calculate cost for plan [SCHEMATA:-14:org.h2.table.MetaTable@22718dcb]
2020-06-20 04:44:55 jdbc[13]: Plan       :   for table filter SCHEMATA:-14:org.h2.table.MetaTable@22718dcb
2020-06-20 04:44:55 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-20 04:44:55 jdbc[13]: Plan       :   best plan item cost 10,000 index meta
2020-06-20 04:44:55 jdbc[13]: Plan       : plan cost 10,001
2020-06-20 04:44:55 jdbc[13]: 
/**/ResultSet rs23 = prep18.executeQuery();
2020-06-20 04:44:55 jdbc[13]: 
/*SQL #:2*/SELECT SCHEMA_NAME TABLE_SCHEM, CATALOG_NAME TABLE_CATALOG,  IS_DEFAULT FROM INFORMATION_SCHEMA.SCHEMATA ORDER BY SCHEMA_NAME;
2020-06-20 04:44:55 jdbc[13]: 
/**/rs23.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs23.getString("TABLE_SCHEM");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs23.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs23.getString("TABLE_SCHEM");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs23.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs23.close();
2020-06-20 04:44:55 jdbc[13]: 
/**/prep18.close();
2020-06-20 04:44:55 jdbc[13]: 
/**/dbMeta4.getTables(null, "INFORMATION_SCHEMA", null, new String[]{"TABLE", "SYSTEM TABLE", "VIEW", "SYSTEM VIEW", "TABLE LINK", "SYNONYM", "EXTERNAL"});
2020-06-20 04:44:55 jdbc[13]: 
/**/PreparedStatement prep19 = conn10.prepareStatement("SELECT TABLE_CAT, TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_CAT, TYPE_SCHEM, TYPE_NAME, SELF_REFERENCING_COL_NAME, REF_GENERATION, SQL FROM (SELECT SYNONYM_CATALOG TABLE_CAT, SYNONYM_SCHEMA TABLE_SCHEM, SYNONYM_NAME as TABLE_NAME, TYPE_NAME AS TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME AS TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, NULL AS SQL FROM INFORMATION_SCHEMA.SYNONYMS WHERE SYNONYM_CATALOG LIKE ?1 ESCAPE ?4 AND SYNONYM_SCHEMA LIKE ?2 ESCAPE ?4 AND SYNONYM_NAME LIKE ?3 ESCAPE ?4 UNION SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5, ?6, ?7, ?8, ?9, ?10, ?11)) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME");
2020-06-20 04:44:55 jdbc[13]: Plan       : calculate cost for plan [_0]
2020-06-20 04:44:55 jdbc[13]: Plan       :   for table filter _0
2020-06-20 04:44:55 jdbc[13]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@104afaa2]
2020-06-20 04:44:55 jdbc[13]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@104afaa2
2020-06-20 04:44:55 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-20 04:44:55 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-20 04:44:55 jdbc[13]: Plan       :   best plan item cost 4,022 index meta
2020-06-20 04:44:55 jdbc[13]: Plan       : plan cost 4,023
2020-06-20 04:44:55 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@26ab0dca]
2020-06-20 04:44:55 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@26ab0dca
2020-06-20 04:44:55 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-20 04:44:55 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-20 04:44:55 jdbc[13]: Plan       :   best plan item cost 3,981.78 index meta
2020-06-20 04:44:55 jdbc[13]: Plan       : plan cost 3,982.78
2020-06-20 04:44:55 jdbc[13]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@104afaa2]
2020-06-20 04:44:55 jdbc[13]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@104afaa2
2020-06-20 04:44:55 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-20 04:44:55 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-20 04:44:55 jdbc[13]: Plan       :   best plan item cost 4,022 index meta
2020-06-20 04:44:55 jdbc[13]: Plan       : plan cost 4,023
2020-06-20 04:44:55 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@26ab0dca]
2020-06-20 04:44:55 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@26ab0dca
2020-06-20 04:44:55 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-20 04:44:55 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-20 04:44:55 jdbc[13]: Plan       :   best plan item cost 3,981.78 index meta
2020-06-20 04:44:55 jdbc[13]: Plan       : plan cost 3,982.78
2020-06-20 04:44:55 jdbc[13]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@104afaa2]
2020-06-20 04:44:55 jdbc[13]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@104afaa2
2020-06-20 04:44:55 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-20 04:44:55 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-20 04:44:55 jdbc[13]: Plan       :   best plan item cost 4,022 index meta
2020-06-20 04:44:55 jdbc[13]: Plan       : plan cost 4,023
2020-06-20 04:44:55 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@26ab0dca]
2020-06-20 04:44:55 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@26ab0dca
2020-06-20 04:44:55 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-20 04:44:55 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-20 04:44:55 jdbc[13]: Plan       :   best plan item cost 3,981.78 index meta
2020-06-20 04:44:55 jdbc[13]: Plan       : plan cost 3,982.78
2020-06-20 04:44:55 jdbc[13]: Plan       :   best plan item cost 8,005.78 index (SELECT
    SYNONYM_CATALOG AS TABLE_CAT,
    SYNONYM_SCHEMA AS TABLE_SCHEM,
    SYNONYM_NAME AS TABLE_NAME,
    TYPE_NAME AS TABLE_TYPE,
    REMARKS,
    TYPE_NAME AS TYPE_CAT,
    TYPE_NAME AS TYPE_SCHEM,
    TYPE_NAME AS TYPE_NAME,
    TYPE_NAME AS SELF_REFERENCING_COL_NAME,
    TYPE_NAME AS REF_GENERATION,
    NULL AS SQL
FROM INFORMATION_SCHEMA.SYNONYMS
    /* meta */
WHERE (SYNONYM_NAME LIKE ?3 ESCAPE ?4)
    AND ((SYNONYM_CATALOG LIKE ?1 ESCAPE ?4)
    AND (SYNONYM_SCHEMA LIKE ?2 ESCAPE ?4)))
UNION
(SELECT
    TABLE_CATALOG AS TABLE_CAT,
    TABLE_SCHEMA AS TABLE_SCHEM,
    TABLE_NAME,
    TABLE_TYPE,
    REMARKS,
    TYPE_NAME AS TYPE_CAT,
    TYPE_NAME AS TYPE_SCHEM,
    TYPE_NAME,
    TYPE_NAME AS SELF_REFERENCING_COL_NAME,
    TYPE_NAME AS REF_GENERATION,
    SQL
FROM INFORMATION_SCHEMA.TABLES
    /* meta */
WHERE (TABLE_TYPE IN(?5, ?6, ?7, ?8, ?9, ?10, ?11))
    AND ((TABLE_NAME LIKE ?3 ESCAPE ?4)
    AND ((TABLE_CATALOG LIKE ?1 ESCAPE ?4)
    AND (TABLE_SCHEMA LIKE ?2 ESCAPE ?4))))
2020-06-20 04:44:55 jdbc[13]: Plan       : plan cost 8,006.78
2020-06-20 04:44:55 jdbc[13]: 
/**/prep19.setString(1, "%");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep19.setString(2, "INFORMATION_SCHEMA");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep19.setString(3, "%");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep19.setString(4, "\\");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep19.setString(5, "TABLE");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep19.setString(6, "SYSTEM TABLE");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep19.setString(7, "VIEW");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep19.setString(8, "SYSTEM VIEW");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep19.setString(9, "TABLE LINK");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep19.setString(10, "SYNONYM");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep19.setString(11, "EXTERNAL");
2020-06-20 04:44:55 jdbc[13]: 
/**/ResultSet rs24 = prep19.executeQuery();
2020-06-20 04:44:55 jdbc[13]: Plan       : calculate cost for plan [_1]
2020-06-20 04:44:55 jdbc[13]: Plan       :   for table filter _1
2020-06-20 04:44:55 jdbc[13]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@104afaa2]
2020-06-20 04:44:55 jdbc[13]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@104afaa2
2020-06-20 04:44:55 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-20 04:44:55 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-20 04:44:55 jdbc[13]: Plan       :   best plan item cost 4,022 index meta
2020-06-20 04:44:55 jdbc[13]: Plan       : plan cost 4,023
2020-06-20 04:44:55 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@26ab0dca]
2020-06-20 04:44:55 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@26ab0dca
2020-06-20 04:44:55 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-20 04:44:55 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-20 04:44:55 jdbc[13]: Plan       :   best plan item cost 3,981.78 index meta
2020-06-20 04:44:55 jdbc[13]: Plan       : plan cost 3,982.78
2020-06-20 04:44:55 jdbc[13]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@104afaa2]
2020-06-20 04:44:55 jdbc[13]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@104afaa2
2020-06-20 04:44:55 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-20 04:44:55 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-20 04:44:55 jdbc[13]: Plan       :   best plan item cost 4,022 index meta
2020-06-20 04:44:55 jdbc[13]: Plan       : plan cost 4,023
2020-06-20 04:44:55 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@26ab0dca]
2020-06-20 04:44:55 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@26ab0dca
2020-06-20 04:44:55 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-20 04:44:55 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-20 04:44:55 jdbc[13]: Plan       :   best plan item cost 3,981.78 index meta
2020-06-20 04:44:55 jdbc[13]: Plan       : plan cost 3,982.78
2020-06-20 04:44:55 jdbc[13]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@104afaa2]
2020-06-20 04:44:55 jdbc[13]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@104afaa2
2020-06-20 04:44:55 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-20 04:44:55 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-20 04:44:55 jdbc[13]: Plan       :   best plan item cost 4,022 index meta
2020-06-20 04:44:55 jdbc[13]: Plan       : plan cost 4,023
2020-06-20 04:44:55 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@26ab0dca]
2020-06-20 04:44:55 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@26ab0dca
2020-06-20 04:44:55 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-20 04:44:55 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-20 04:44:55 jdbc[13]: Plan       :   best plan item cost 3,981.78 index meta
2020-06-20 04:44:55 jdbc[13]: Plan       : plan cost 3,982.78
2020-06-20 04:44:55 jdbc[13]: Plan       :   best plan item cost 8,005.78 index (SELECT
    SYNONYM_CATALOG AS TABLE_CAT,
    SYNONYM_SCHEMA AS TABLE_SCHEM,
    SYNONYM_NAME AS TABLE_NAME,
    TYPE_NAME AS TABLE_TYPE,
    REMARKS,
    TYPE_NAME AS TYPE_CAT,
    TYPE_NAME AS TYPE_SCHEM,
    TYPE_NAME AS TYPE_NAME,
    TYPE_NAME AS SELF_REFERENCING_COL_NAME,
    TYPE_NAME AS REF_GENERATION,
    NULL AS SQL
FROM INFORMATION_SCHEMA.SYNONYMS
    /* meta */
WHERE (SYNONYM_NAME LIKE ?3 ESCAPE ?4)
    AND ((SYNONYM_CATALOG LIKE ?1 ESCAPE ?4)
    AND (SYNONYM_SCHEMA LIKE ?2 ESCAPE ?4)))
UNION
(SELECT
    TABLE_CATALOG AS TABLE_CAT,
    TABLE_SCHEMA AS TABLE_SCHEM,
    TABLE_NAME,
    TABLE_TYPE,
    REMARKS,
    TYPE_NAME AS TYPE_CAT,
    TYPE_NAME AS TYPE_SCHEM,
    TYPE_NAME,
    TYPE_NAME AS SELF_REFERENCING_COL_NAME,
    TYPE_NAME AS REF_GENERATION,
    SQL
FROM INFORMATION_SCHEMA.TABLES
    /* meta */
WHERE (TABLE_TYPE IN(?5, ?6, ?7, ?8, ?9, ?10, ?11))
    AND ((TABLE_NAME LIKE ?3 ESCAPE ?4)
    AND ((TABLE_CATALOG LIKE ?1 ESCAPE ?4)
    AND (TABLE_SCHEMA LIKE ?2 ESCAPE ?4))))
2020-06-20 04:44:55 jdbc[13]: Plan       : plan cost 8,006.78
2020-06-20 04:44:55 jdbc[13]: 
/*SQL l:1007 #:33 t:2*/SELECT TABLE_CAT, TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_CAT, TYPE_SCHEM, TYPE_NAME, SELF_REFERENCING_COL_NAME, REF_GENERATION, SQL FROM (SELECT SYNONYM_CATALOG TABLE_CAT, SYNONYM_SCHEMA TABLE_SCHEM, SYNONYM_NAME as TABLE_NAME, TYPE_NAME AS TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME AS TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, NULL AS SQL FROM INFORMATION_SCHEMA.SYNONYMS WHERE SYNONYM_CATALOG LIKE ?1 ESCAPE ?4 AND SYNONYM_SCHEMA LIKE ?2 ESCAPE ?4 AND SYNONYM_NAME LIKE ?3 ESCAPE ?4 UNION SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5, ?6, ?7, ?8, ?9, ?10, ?11)) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME {1: '%', 2: 'INFORMATION_SCHEMA', 3: '%', 4: '\\', 5: 'TABLE', 6: 'SYSTEM TABLE', 7: 'VIEW', 8: 'SYSTEM VIEW', 9: 'TABLE LINK', 10: 'SYNONYM', 11: 'EXTERNAL'};
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.getString("TABLE_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.getString("TABLE_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.getString("TABLE_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.getString("TABLE_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.getString("TABLE_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.getString("TABLE_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.getString("TABLE_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.getString("TABLE_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.getString("TABLE_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.getString("TABLE_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.getString("TABLE_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.getString("TABLE_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.getString("TABLE_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.getString("TABLE_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.getString("TABLE_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.getString("TABLE_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.getString("TABLE_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.getString("TABLE_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.getString("TABLE_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.getString("TABLE_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.getString("TABLE_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.getString("TABLE_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.getString("TABLE_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.getString("TABLE_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.getString("TABLE_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.getString("TABLE_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.getString("TABLE_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.getString("TABLE_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.getString("TABLE_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.getString("TABLE_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.getString("TABLE_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.getString("TABLE_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.getString("TABLE_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.getString("TABLE_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.getString("TABLE_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.getString("TABLE_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.getString("TABLE_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.getString("TABLE_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.getString("TABLE_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.getString("TABLE_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.getString("TABLE_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.getString("TABLE_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.getString("TABLE_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.getString("TABLE_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.getString("TABLE_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.getString("TABLE_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.getString("TABLE_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.getString("TABLE_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.getString("TABLE_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.getString("TABLE_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.getString("TABLE_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.getString("TABLE_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.getString("TABLE_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.getString("TABLE_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.getString("TABLE_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.getString("TABLE_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.getString("TABLE_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.getString("TABLE_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.getString("TABLE_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.getString("TABLE_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.getString("TABLE_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.getString("TABLE_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.getString("TABLE_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.getString("TABLE_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.getString("TABLE_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.getString("TABLE_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs24.close();
2020-06-20 04:44:55 jdbc[13]: 
/**/prep19.close();
2020-06-20 04:44:55 jdbc[13]: 
/**/dbMeta4.getConnection();
2020-06-20 04:44:55 jdbc[13]: 
/**/PreparedStatement prep20 = conn10.prepareStatement("SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ?");
2020-06-20 04:44:55 jdbc[13]: Plan       : calculate cost for plan [COLUMNS:-2:org.h2.table.MetaTable@2c272c2b]
2020-06-20 04:44:55 jdbc[13]: Plan       :   for table filter COLUMNS:-2:org.h2.table.MetaTable@2c272c2b
2020-06-20 04:44:55 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-20 04:44:55 jdbc[13]: Table      :     potential plan item cost 28 index meta
2020-06-20 04:44:55 jdbc[13]: Plan       :   best plan item cost 27.44 index meta
2020-06-20 04:44:55 jdbc[13]: Plan       : plan cost 28.44
2020-06-20 04:44:55 jdbc[13]: 
/**/prep20.setString(1, "INFORMATION_SCHEMA");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep20.setString(2, "CATALOGS");
2020-06-20 04:44:55 jdbc[13]: 
/**/ResultSet rs25 = prep20.executeQuery();
2020-06-20 04:44:55 jdbc[13]: 
/*SQL l:123 #:1*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'CATALOGS'};
2020-06-20 04:44:55 jdbc[13]: 
/**/rs25.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs25.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs25.close();
2020-06-20 04:44:55 jdbc[13]: 
/**/prep20.setString(1, "INFORMATION_SCHEMA");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep20.setString(2, "COLLATIONS");
2020-06-20 04:44:55 jdbc[13]: 
/**/ResultSet rs26 = prep20.executeQuery();
2020-06-20 04:44:55 jdbc[13]: 
/*SQL l:123 #:2*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'COLLATIONS'};
2020-06-20 04:44:55 jdbc[13]: 
/**/rs26.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs26.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs26.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs26.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs26.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs26.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs26.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs26.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs26.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs26.close();
2020-06-20 04:44:55 jdbc[13]: 
/**/prep20.setString(1, "INFORMATION_SCHEMA");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep20.setString(2, "COLUMNS");
2020-06-20 04:44:55 jdbc[13]: 
/**/ResultSet rs27 = prep20.executeQuery();
2020-06-20 04:44:55 jdbc[13]: 
/*SQL l:123 #:32*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'COLUMNS'};
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs27.close();
2020-06-20 04:44:55 jdbc[13]: 
/**/prep20.setString(1, "INFORMATION_SCHEMA");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep20.setString(2, "COLUMN_PRIVILEGES");
2020-06-20 04:44:55 jdbc[13]: 
/**/ResultSet rs28 = prep20.executeQuery();
2020-06-20 04:44:55 jdbc[13]: 
/*SQL l:123 #:8*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'COLUMN_PRIVILEGES'};
2020-06-20 04:44:55 jdbc[13]: 
/**/rs28.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs28.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs28.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs28.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs28.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs28.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs28.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs28.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs28.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs28.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs28.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs28.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs28.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs28.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs28.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs28.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs28.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs28.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs28.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs28.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs28.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs28.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs28.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs28.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs28.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs28.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs28.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs28.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs28.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs28.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs28.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs28.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs28.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs28.close();
2020-06-20 04:44:55 jdbc[13]: 
/**/prep20.setString(1, "INFORMATION_SCHEMA");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep20.setString(2, "CONSTANTS");
2020-06-20 04:44:55 jdbc[13]: 
/**/ResultSet rs29 = prep20.executeQuery();
2020-06-20 04:44:55 jdbc[13]: 
/*SQL l:123 #:7*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'CONSTANTS'};
2020-06-20 04:44:55 jdbc[13]: 
/**/rs29.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs29.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs29.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs29.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs29.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs29.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs29.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs29.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs29.close();
2020-06-20 04:44:55 jdbc[13]: 
/**/prep20.setString(1, "INFORMATION_SCHEMA");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep20.setString(2, "CONSTRAINTS");
2020-06-20 04:44:55 jdbc[13]: 
/**/ResultSet rs30 = prep20.executeQuery();
2020-06-20 04:44:55 jdbc[13]: 
/*SQL l:123 #:13*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'CONSTRAINTS'};
2020-06-20 04:44:55 jdbc[13]: 
/**/rs30.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs30.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs30.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs30.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs30.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs30.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs30.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs30.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs30.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs30.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs30.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs30.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs30.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs30.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs30.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs30.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs30.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs30.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs30.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs30.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs30.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs30.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs30.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs30.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs30.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs30.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs30.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs30.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs30.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs30.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs30.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs30.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs30.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs30.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs30.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs30.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs30.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs30.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs30.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs30.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs30.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs30.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs30.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs30.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs30.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs30.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs30.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs30.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs30.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs30.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs30.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs30.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs30.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs30.close();
2020-06-20 04:44:55 jdbc[13]: 
/**/prep20.setString(1, "INFORMATION_SCHEMA");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep20.setString(2, "CROSS_REFERENCES");
2020-06-20 04:44:55 jdbc[13]: 
/**/ResultSet rs31 = prep20.executeQuery();
2020-06-20 04:44:55 jdbc[13]: 
/*SQL l:123 #:14*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'CROSS_REFERENCES'};
2020-06-20 04:44:55 jdbc[13]: 
/**/rs31.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs31.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs31.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs31.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs31.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs31.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs31.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs31.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs31.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs31.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs31.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs31.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs31.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs31.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs31.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs31.close();
2020-06-20 04:44:55 jdbc[13]: 
/**/prep20.setString(1, "INFORMATION_SCHEMA");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep20.setString(2, "DOMAINS");
2020-06-20 04:44:55 jdbc[13]: 
/**/ResultSet rs32 = prep20.executeQuery();
2020-06-20 04:44:55 jdbc[13]: 
/*SQL l:123 #:14*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'DOMAINS'};
2020-06-20 04:44:55 jdbc[13]: 
/**/rs32.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs32.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs32.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs32.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs32.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs32.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs32.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs32.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs32.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs32.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs32.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs32.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs32.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs32.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs32.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs32.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs32.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs32.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs32.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs32.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs32.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs32.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs32.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs32.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs32.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs32.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs32.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs32.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs32.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs32.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs32.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs32.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs32.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs32.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs32.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs32.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs32.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs32.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs32.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs32.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs32.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs32.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs32.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs32.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs32.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs32.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs32.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs32.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs32.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs32.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs32.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs32.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs32.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs32.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs32.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs32.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs32.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs32.close();
2020-06-20 04:44:55 jdbc[13]: 
/**/prep20.setString(1, "INFORMATION_SCHEMA");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep20.setString(2, "FUNCTION_ALIASES");
2020-06-20 04:44:55 jdbc[13]: 
/**/ResultSet rs33 = prep20.executeQuery();
2020-06-20 04:44:55 jdbc[13]: 
/*SQL l:123 #:12*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'FUNCTION_ALIASES'};
2020-06-20 04:44:55 jdbc[13]: 
/**/rs33.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs33.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs33.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs33.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs33.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs33.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs33.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs33.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs33.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs33.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs33.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs33.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs33.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs33.close();
2020-06-20 04:44:55 jdbc[13]: 
/**/prep20.setString(1, "INFORMATION_SCHEMA");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep20.setString(2, "FUNCTION_COLUMNS");
2020-06-20 04:44:55 jdbc[13]: 
/**/ResultSet rs34 = prep20.executeQuery();
2020-06-20 04:44:55 jdbc[13]: 
/*SQL l:123 #:17 t:7*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'FUNCTION_COLUMNS'};
2020-06-20 04:44:55 jdbc[13]: 
/**/rs34.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs34.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs34.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs34.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs34.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs34.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs34.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs34.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs34.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs34.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs34.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs34.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs34.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs34.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs34.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs34.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs34.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs34.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs34.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs34.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs34.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs34.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs34.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs34.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs34.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs34.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs34.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs34.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs34.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs34.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs34.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs34.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs34.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs34.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs34.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs34.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs34.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs34.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs34.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs34.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs34.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs34.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs34.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs34.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs34.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs34.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs34.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs34.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs34.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs34.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs34.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs34.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs34.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs34.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs34.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs34.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs34.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs34.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs34.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs34.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs34.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs34.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs34.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs34.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs34.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs34.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs34.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs34.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs34.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs34.close();
2020-06-20 04:44:55 jdbc[13]: 
/**/prep20.setString(1, "INFORMATION_SCHEMA");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep20.setString(2, "HELP");
2020-06-20 04:44:55 jdbc[13]: 
/**/ResultSet rs35 = prep20.executeQuery();
2020-06-20 04:44:55 jdbc[13]: 
/*SQL l:123 #:5*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'HELP'};
2020-06-20 04:44:55 jdbc[13]: 
/**/rs35.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs35.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs35.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs35.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs35.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs35.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs35.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs35.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs35.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs35.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs35.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs35.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs35.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs35.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs35.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs35.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs35.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs35.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs35.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs35.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs35.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs35.close();
2020-06-20 04:44:55 jdbc[13]: 
/**/prep20.setString(1, "INFORMATION_SCHEMA");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep20.setString(2, "INDEXES");
2020-06-20 04:44:55 jdbc[13]: 
/**/ResultSet rs36 = prep20.executeQuery();
2020-06-20 04:44:55 jdbc[13]: 
/*SQL l:123 #:22*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'INDEXES'};
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs36.close();
2020-06-20 04:44:55 jdbc[13]: 
/**/prep20.setString(1, "INFORMATION_SCHEMA");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep20.setString(2, "IN_DOUBT");
2020-06-20 04:44:55 jdbc[13]: 
/**/ResultSet rs37 = prep20.executeQuery();
2020-06-20 04:44:55 jdbc[13]: 
/*SQL l:123 #:2*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'IN_DOUBT'};
2020-06-20 04:44:55 jdbc[13]: 
/**/rs37.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs37.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs37.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs37.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs37.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs37.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs37.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs37.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs37.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs37.close();
2020-06-20 04:44:55 jdbc[13]: 
/**/prep20.setString(1, "INFORMATION_SCHEMA");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep20.setString(2, "KEY_COLUMN_USAGE");
2020-06-20 04:44:55 jdbc[13]: 
/**/ResultSet rs38 = prep20.executeQuery();
2020-06-20 04:44:55 jdbc[13]: 
/*SQL l:123 #:9*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'KEY_COLUMN_USAGE'};
2020-06-20 04:44:55 jdbc[13]: 
/**/rs38.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs38.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs38.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs38.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs38.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs38.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs38.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs38.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs38.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs38.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs38.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs38.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs38.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs38.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs38.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs38.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs38.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs38.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs38.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs38.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs38.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs38.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs38.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs38.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs38.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs38.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs38.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs38.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs38.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs38.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs38.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs38.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs38.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs38.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs38.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs38.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs38.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs38.close();
2020-06-20 04:44:55 jdbc[13]: 
/**/prep20.setString(1, "INFORMATION_SCHEMA");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep20.setString(2, "LOCKS");
2020-06-20 04:44:55 jdbc[13]: 
/**/ResultSet rs39 = prep20.executeQuery();
2020-06-20 04:44:55 jdbc[13]: 
/*SQL l:123 #:4*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'LOCKS'};
2020-06-20 04:44:55 jdbc[13]: 
/**/rs39.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs39.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs39.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs39.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs39.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs39.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs39.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs39.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs39.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs39.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs39.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs39.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs39.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs39.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs39.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs39.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs39.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs39.close();
2020-06-20 04:44:55 jdbc[13]: 
/**/prep20.setString(1, "INFORMATION_SCHEMA");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep20.setString(2, "QUERY_STATISTICS");
2020-06-20 04:44:55 jdbc[13]: 
/**/ResultSet rs40 = prep20.executeQuery();
2020-06-20 04:44:55 jdbc[13]: 
/*SQL l:123 #:12*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'QUERY_STATISTICS'};
2020-06-20 04:44:55 jdbc[13]: 
/**/rs40.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs40.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs40.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs40.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs40.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs40.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs40.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs40.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs40.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs40.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs40.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs40.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs40.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs40.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs40.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs40.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs40.close();
2020-06-20 04:44:55 jdbc[13]: 
/**/prep20.setString(1, "INFORMATION_SCHEMA");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep20.setString(2, "REFERENTIAL_CONSTRAINTS");
2020-06-20 04:44:55 jdbc[13]: 
/**/ResultSet rs41 = prep20.executeQuery();
2020-06-20 04:44:55 jdbc[13]: 
/*SQL l:123 #:9*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'REFERENTIAL_CONSTRAINTS'};
2020-06-20 04:44:55 jdbc[13]: 
/**/rs41.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs41.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs41.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs41.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs41.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs41.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs41.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs41.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs41.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs41.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs41.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs41.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs41.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs41.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs41.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs41.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs41.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs41.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs41.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs41.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs41.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs41.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs41.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs41.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs41.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs41.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs41.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs41.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs41.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs41.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs41.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs41.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs41.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs41.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs41.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs41.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs41.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs41.close();
2020-06-20 04:44:55 jdbc[13]: 
/**/prep20.setString(1, "INFORMATION_SCHEMA");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep20.setString(2, "RIGHTS");
2020-06-20 04:44:55 jdbc[13]: 
/**/ResultSet rs42 = prep20.executeQuery();
2020-06-20 04:44:55 jdbc[13]: 
/*SQL l:123 #:7*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'RIGHTS'};
2020-06-20 04:44:55 jdbc[13]: 
/**/rs42.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs42.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs42.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs42.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs42.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs42.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs42.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs42.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs42.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs42.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs42.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs42.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs42.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs42.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs42.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs42.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs42.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs42.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs42.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs42.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs42.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs42.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs42.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs42.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs42.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs42.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs42.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs42.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs42.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs42.close();
2020-06-20 04:44:55 jdbc[13]: 
/**/prep20.setString(1, "INFORMATION_SCHEMA");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep20.setString(2, "ROLES");
2020-06-20 04:44:55 jdbc[13]: 
/**/ResultSet rs43 = prep20.executeQuery();
2020-06-20 04:44:55 jdbc[13]: 
/*SQL l:123 #:3*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'ROLES'};
2020-06-20 04:44:55 jdbc[13]: 
/**/rs43.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs43.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs43.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs43.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs43.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs43.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs43.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs43.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs43.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs43.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs43.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs43.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs43.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs43.close();
2020-06-20 04:44:55 jdbc[13]: 
/**/prep20.setString(1, "INFORMATION_SCHEMA");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep20.setString(2, "SCHEMATA");
2020-06-20 04:44:55 jdbc[13]: 
/**/ResultSet rs44 = prep20.executeQuery();
2020-06-20 04:44:55 jdbc[13]: 
/*SQL l:123 #:8*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'SCHEMATA'};
2020-06-20 04:44:55 jdbc[13]: 
/**/rs44.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs44.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs44.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs44.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs44.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs44.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs44.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs44.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs44.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs44.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs44.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs44.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs44.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs44.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs44.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs44.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs44.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs44.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs44.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs44.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs44.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs44.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs44.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs44.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs44.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs44.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs44.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs44.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs44.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs44.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs44.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs44.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs44.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs44.close();
2020-06-20 04:44:55 jdbc[13]: 
/**/prep20.setString(1, "INFORMATION_SCHEMA");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep20.setString(2, "SEQUENCES");
2020-06-20 04:44:55 jdbc[13]: 
/**/ResultSet rs45 = prep20.executeQuery();
2020-06-20 04:44:55 jdbc[13]: 
/*SQL l:123 #:12*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'SEQUENCES'};
2020-06-20 04:44:55 jdbc[13]: 
/**/rs45.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs45.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs45.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs45.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs45.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs45.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs45.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs45.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs45.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs45.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs45.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs45.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs45.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs45.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs45.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs45.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs45.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs45.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs45.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs45.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs45.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs45.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs45.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs45.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs45.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs45.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs45.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs45.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs45.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs45.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs45.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs45.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs45.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs45.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs45.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs45.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs45.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs45.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs45.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs45.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs45.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs45.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs45.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs45.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs45.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs45.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs45.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs45.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs45.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs45.close();
2020-06-20 04:44:55 jdbc[13]: 
/**/prep20.setString(1, "INFORMATION_SCHEMA");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep20.setString(2, "SESSIONS");
2020-06-20 04:44:55 jdbc[13]: 
/**/ResultSet rs46 = prep20.executeQuery();
2020-06-20 04:44:55 jdbc[13]: 
/*SQL l:123 #:12*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'SESSIONS'};
2020-06-20 04:44:55 jdbc[13]: 
/**/rs46.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs46.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs46.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs46.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs46.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs46.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs46.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs46.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs46.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs46.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs46.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs46.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs46.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs46.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs46.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs46.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs46.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs46.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs46.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs46.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs46.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs46.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs46.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs46.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs46.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs46.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs46.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs46.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs46.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs46.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs46.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs46.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs46.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs46.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs46.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs46.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs46.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs46.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs46.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs46.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs46.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs46.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs46.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs46.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs46.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs46.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs46.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs46.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs46.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs46.close();
2020-06-20 04:44:55 jdbc[13]: 
/**/prep20.setString(1, "INFORMATION_SCHEMA");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep20.setString(2, "SESSION_STATE");
2020-06-20 04:44:55 jdbc[13]: 
/**/ResultSet rs47 = prep20.executeQuery();
2020-06-20 04:44:55 jdbc[13]: 
/*SQL l:123 #:2*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'SESSION_STATE'};
2020-06-20 04:44:55 jdbc[13]: 
/**/rs47.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs47.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs47.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs47.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs47.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs47.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs47.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs47.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs47.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs47.close();
2020-06-20 04:44:55 jdbc[13]: 
/**/prep20.setString(1, "INFORMATION_SCHEMA");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep20.setString(2, "SETTINGS");
2020-06-20 04:44:55 jdbc[13]: 
/**/ResultSet rs48 = prep20.executeQuery();
2020-06-20 04:44:55 jdbc[13]: 
/*SQL l:123 #:2*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'SETTINGS'};
2020-06-20 04:44:55 jdbc[13]: 
/**/rs48.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs48.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs48.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs48.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs48.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs48.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs48.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs48.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs48.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs48.close();
2020-06-20 04:44:55 jdbc[13]: 
/**/prep20.setString(1, "INFORMATION_SCHEMA");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep20.setString(2, "SYNONYMS");
2020-06-20 04:44:55 jdbc[13]: 
/**/ResultSet rs49 = prep20.executeQuery();
2020-06-20 04:44:55 jdbc[13]: 
/*SQL l:123 #:9*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'SYNONYMS'};
2020-06-20 04:44:55 jdbc[13]: 
/**/rs49.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs49.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs49.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs49.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs49.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs49.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs49.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs49.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs49.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs49.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs49.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs49.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs49.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs49.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs49.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs49.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs49.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs49.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs49.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs49.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs49.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs49.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs49.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs49.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs49.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs49.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs49.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs49.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs49.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs49.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs49.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs49.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs49.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs49.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs49.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs49.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs49.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs49.close();
2020-06-20 04:44:55 jdbc[13]: 
/**/prep20.setString(1, "INFORMATION_SCHEMA");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep20.setString(2, "TABLES");
2020-06-20 04:44:55 jdbc[13]: 
/**/ResultSet rs50 = prep20.executeQuery();
2020-06-20 04:44:55 jdbc[13]: 
/*SQL l:123 #:12*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'TABLES'};
2020-06-20 04:44:55 jdbc[13]: 
/**/rs50.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs50.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs50.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs50.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs50.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs50.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs50.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs50.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs50.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs50.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs50.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs50.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs50.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs50.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs50.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs50.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs50.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs50.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs50.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs50.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs50.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs50.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs50.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs50.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs50.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs50.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs50.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs50.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs50.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs50.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs50.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs50.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs50.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs50.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs50.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs50.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs50.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs50.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs50.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs50.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs50.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs50.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs50.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs50.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs50.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs50.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs50.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs50.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs50.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs50.close();
2020-06-20 04:44:55 jdbc[13]: 
/**/prep20.setString(1, "INFORMATION_SCHEMA");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep20.setString(2, "TABLE_CONSTRAINTS");
2020-06-20 04:44:55 jdbc[13]: 
/**/ResultSet rs51 = prep20.executeQuery();
2020-06-20 04:44:55 jdbc[13]: 
/*SQL l:123 #:9*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'TABLE_CONSTRAINTS'};
2020-06-20 04:44:55 jdbc[13]: 
/**/rs51.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs51.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs51.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs51.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs51.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs51.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs51.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs51.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs51.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs51.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs51.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs51.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs51.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs51.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs51.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs51.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs51.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs51.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs51.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs51.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs51.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs51.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs51.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs51.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs51.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs51.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs51.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs51.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs51.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs51.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs51.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs51.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs51.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs51.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs51.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs51.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs51.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs51.close();
2020-06-20 04:44:55 jdbc[13]: 
/**/prep20.setString(1, "INFORMATION_SCHEMA");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep20.setString(2, "TABLE_PRIVILEGES");
2020-06-20 04:44:55 jdbc[13]: 
/**/ResultSet rs52 = prep20.executeQuery();
2020-06-20 04:44:55 jdbc[13]: 
/*SQL l:123 #:7*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'TABLE_PRIVILEGES'};
2020-06-20 04:44:55 jdbc[13]: 
/**/rs52.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs52.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs52.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs52.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs52.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs52.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs52.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs52.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs52.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs52.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs52.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs52.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs52.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs52.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs52.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs52.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs52.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs52.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs52.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs52.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs52.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs52.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs52.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs52.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs52.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs52.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs52.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs52.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs52.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs52.close();
2020-06-20 04:44:55 jdbc[13]: 
/**/prep20.setString(1, "INFORMATION_SCHEMA");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep20.setString(2, "TABLE_TYPES");
2020-06-20 04:44:55 jdbc[13]: 
/**/ResultSet rs53 = prep20.executeQuery();
2020-06-20 04:44:55 jdbc[13]: 
/*SQL l:123 #:1*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'TABLE_TYPES'};
2020-06-20 04:44:55 jdbc[13]: 
/**/rs53.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs53.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs53.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs53.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs53.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs53.close();
2020-06-20 04:44:55 jdbc[13]: 
/**/prep20.setString(1, "INFORMATION_SCHEMA");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep20.setString(2, "TRIGGERS");
2020-06-20 04:44:55 jdbc[13]: 
/**/ResultSet rs54 = prep20.executeQuery();
2020-06-20 04:44:55 jdbc[13]: 
/*SQL l:123 #:14*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'TRIGGERS'};
2020-06-20 04:44:55 jdbc[13]: 
/**/rs54.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs54.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs54.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs54.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs54.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs54.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs54.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs54.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs54.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs54.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs54.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs54.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs54.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs54.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs54.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs54.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs54.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs54.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs54.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs54.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs54.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs54.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs54.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs54.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs54.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs54.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs54.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs54.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs54.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs54.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs54.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs54.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs54.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs54.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs54.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs54.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs54.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs54.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs54.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs54.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs54.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs54.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs54.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs54.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs54.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs54.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs54.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs54.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs54.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs54.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs54.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs54.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs54.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs54.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs54.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs54.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs54.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs54.close();
2020-06-20 04:44:55 jdbc[13]: 
/**/prep20.setString(1, "INFORMATION_SCHEMA");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep20.setString(2, "TYPE_INFO");
2020-06-20 04:44:55 jdbc[13]: 
/**/ResultSet rs55 = prep20.executeQuery();
2020-06-20 04:44:55 jdbc[13]: 
/*SQL l:123 #:14*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'TYPE_INFO'};
2020-06-20 04:44:55 jdbc[13]: 
/**/rs55.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs55.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs55.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs55.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs55.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs55.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs55.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs55.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs55.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs55.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs55.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs55.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs55.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs55.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs55.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs55.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs55.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs55.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs55.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs55.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs55.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs55.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs55.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs55.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs55.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs55.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs55.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs55.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs55.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs55.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs55.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs55.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs55.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs55.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs55.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs55.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs55.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs55.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs55.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs55.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs55.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs55.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs55.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs55.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs55.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs55.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs55.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs55.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs55.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs55.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs55.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs55.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs55.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs55.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs55.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs55.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs55.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs55.close();
2020-06-20 04:44:55 jdbc[13]: 
/**/prep20.setString(1, "INFORMATION_SCHEMA");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep20.setString(2, "USERS");
2020-06-20 04:44:55 jdbc[13]: 
/**/ResultSet rs56 = prep20.executeQuery();
2020-06-20 04:44:55 jdbc[13]: 
/*SQL l:123 #:4*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'USERS'};
2020-06-20 04:44:55 jdbc[13]: 
/**/rs56.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs56.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs56.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs56.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs56.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs56.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs56.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs56.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs56.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs56.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs56.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs56.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs56.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs56.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs56.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs56.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs56.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs56.close();
2020-06-20 04:44:55 jdbc[13]: 
/**/prep20.setString(1, "INFORMATION_SCHEMA");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep20.setString(2, "VIEWS");
2020-06-20 04:44:55 jdbc[13]: 
/**/ResultSet rs57 = prep20.executeQuery();
2020-06-20 04:44:55 jdbc[13]: 
/*SQL l:123 #:9*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'INFORMATION_SCHEMA', 2: 'VIEWS'};
2020-06-20 04:44:55 jdbc[13]: 
/**/rs57.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs57.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs57.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs57.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs57.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs57.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs57.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs57.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs57.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs57.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs57.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs57.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs57.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs57.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs57.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs57.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs57.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs57.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs57.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs57.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs57.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs57.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs57.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs57.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs57.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs57.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs57.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs57.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs57.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs57.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs57.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs57.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs57.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs57.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs57.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs57.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs57.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs57.close();
2020-06-20 04:44:55 jdbc[13]: 
/**/prep20.close();
2020-06-20 04:44:55 jdbc[13]: 
/**/dbMeta4.getProcedures(null, "INFORMATION_SCHEMA", null);
2020-06-20 04:44:55 jdbc[13]: 
/**/PreparedStatement prep21 = conn10.prepareStatement("SELECT ALIAS_CATALOG PROCEDURE_CAT, ALIAS_SCHEMA PROCEDURE_SCHEM, ALIAS_NAME PROCEDURE_NAME, COLUMN_COUNT NUM_INPUT_PARAMS, ZERO() NUM_OUTPUT_PARAMS, ZERO() NUM_RESULT_SETS, REMARKS, RETURNS_RESULT PROCEDURE_TYPE, ALIAS_NAME SPECIFIC_NAME FROM INFORMATION_SCHEMA.FUNCTION_ALIASES WHERE ALIAS_CATALOG LIKE ? ESCAPE ? AND ALIAS_SCHEMA LIKE ? ESCAPE ? AND ALIAS_NAME LIKE ? ESCAPE ? ORDER BY PROCEDURE_SCHEM, PROCEDURE_NAME, NUM_INPUT_PARAMS");
2020-06-20 04:44:55 jdbc[13]: Plan       : calculate cost for plan [FUNCTION_ALIASES:-13:org.h2.table.MetaTable@22ad7d79]
2020-06-20 04:44:55 jdbc[13]: Plan       :   for table filter FUNCTION_ALIASES:-13:org.h2.table.MetaTable@22ad7d79
2020-06-20 04:44:55 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-20 04:44:55 jdbc[13]: Plan       :   best plan item cost 10,000 index meta
2020-06-20 04:44:55 jdbc[13]: Plan       : plan cost 10,001
2020-06-20 04:44:55 jdbc[13]: 
/**/prep21.setString(1, "%");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep21.setString(2, "\\");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep21.setString(3, "INFORMATION_SCHEMA");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep21.setString(4, "\\");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep21.setString(5, "%");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep21.setString(6, "\\");
2020-06-20 04:44:55 jdbc[13]: 
/**/ResultSet rs58 = prep21.executeQuery();
2020-06-20 04:44:55 jdbc[13]: Plan       : calculate cost for plan [FUNCTION_ALIASES:-13:org.h2.table.MetaTable@22ad7d79]
2020-06-20 04:44:55 jdbc[13]: Plan       :   for table filter FUNCTION_ALIASES:-13:org.h2.table.MetaTable@22ad7d79
2020-06-20 04:44:55 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-20 04:44:55 jdbc[13]: Plan       :   best plan item cost 9,800 index meta
2020-06-20 04:44:55 jdbc[13]: Plan       : plan cost 9,801
2020-06-20 04:44:55 jdbc[13]: 
/*SQL l:438*/SELECT ALIAS_CATALOG PROCEDURE_CAT, ALIAS_SCHEMA PROCEDURE_SCHEM, ALIAS_NAME PROCEDURE_NAME, COLUMN_COUNT NUM_INPUT_PARAMS, ZERO() NUM_OUTPUT_PARAMS, ZERO() NUM_RESULT_SETS, REMARKS, RETURNS_RESULT PROCEDURE_TYPE, ALIAS_NAME SPECIFIC_NAME FROM INFORMATION_SCHEMA.FUNCTION_ALIASES WHERE ALIAS_CATALOG LIKE ? ESCAPE ? AND ALIAS_SCHEMA LIKE ? ESCAPE ? AND ALIAS_NAME LIKE ? ESCAPE ? ORDER BY PROCEDURE_SCHEM, PROCEDURE_NAME, NUM_INPUT_PARAMS {1: '%', 2: '\\', 3: 'INFORMATION_SCHEMA', 4: '\\', 5: '%', 6: '\\'};
2020-06-20 04:44:55 jdbc[13]: 
/**/rs58.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs58.close();
2020-06-20 04:44:55 jdbc[13]: 
/**/prep21.close();
2020-06-20 04:44:55 jdbc[13]: 
/**/dbMeta4.getTables(null, "PUBLIC", null, new String[]{"TABLE", "SYSTEM TABLE", "VIEW", "SYSTEM VIEW", "TABLE LINK", "SYNONYM", "EXTERNAL"});
2020-06-20 04:44:55 jdbc[13]: 
/**/PreparedStatement prep22 = conn10.prepareStatement("SELECT TABLE_CAT, TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_CAT, TYPE_SCHEM, TYPE_NAME, SELF_REFERENCING_COL_NAME, REF_GENERATION, SQL FROM (SELECT SYNONYM_CATALOG TABLE_CAT, SYNONYM_SCHEMA TABLE_SCHEM, SYNONYM_NAME as TABLE_NAME, TYPE_NAME AS TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME AS TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, NULL AS SQL FROM INFORMATION_SCHEMA.SYNONYMS WHERE SYNONYM_CATALOG LIKE ?1 ESCAPE ?4 AND SYNONYM_SCHEMA LIKE ?2 ESCAPE ?4 AND SYNONYM_NAME LIKE ?3 ESCAPE ?4 UNION SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5, ?6, ?7, ?8, ?9, ?10, ?11)) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep22.setString(1, "%");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep22.setString(2, "PUBLIC");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep22.setString(3, "%");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep22.setString(4, "\\");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep22.setString(5, "TABLE");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep22.setString(6, "SYSTEM TABLE");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep22.setString(7, "VIEW");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep22.setString(8, "SYSTEM VIEW");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep22.setString(9, "TABLE LINK");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep22.setString(10, "SYNONYM");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep22.setString(11, "EXTERNAL");
2020-06-20 04:44:55 jdbc[13]: 
/**/ResultSet rs59 = prep22.executeQuery();
2020-06-20 04:44:55 jdbc[13]: Plan       : calculate cost for plan [_2]
2020-06-20 04:44:55 jdbc[13]: Plan       :   for table filter _2
2020-06-20 04:44:55 jdbc[13]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@104afaa2]
2020-06-20 04:44:55 jdbc[13]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@104afaa2
2020-06-20 04:44:55 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-20 04:44:55 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-20 04:44:55 jdbc[13]: Plan       :   best plan item cost 4,022 index meta
2020-06-20 04:44:55 jdbc[13]: Plan       : plan cost 4,023
2020-06-20 04:44:55 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@26ab0dca]
2020-06-20 04:44:55 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@26ab0dca
2020-06-20 04:44:55 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-20 04:44:55 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-20 04:44:55 jdbc[13]: Plan       :   best plan item cost 3,981.78 index meta
2020-06-20 04:44:55 jdbc[13]: Plan       : plan cost 3,982.78
2020-06-20 04:44:55 jdbc[13]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@104afaa2]
2020-06-20 04:44:55 jdbc[13]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@104afaa2
2020-06-20 04:44:55 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-20 04:44:55 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-20 04:44:55 jdbc[13]: Plan       :   best plan item cost 4,022 index meta
2020-06-20 04:44:55 jdbc[13]: Plan       : plan cost 4,023
2020-06-20 04:44:55 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@26ab0dca]
2020-06-20 04:44:55 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@26ab0dca
2020-06-20 04:44:55 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-20 04:44:55 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-20 04:44:55 jdbc[13]: Plan       :   best plan item cost 3,981.78 index meta
2020-06-20 04:44:55 jdbc[13]: Plan       : plan cost 3,982.78
2020-06-20 04:44:55 jdbc[13]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@104afaa2]
2020-06-20 04:44:55 jdbc[13]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@104afaa2
2020-06-20 04:44:55 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-20 04:44:55 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-20 04:44:55 jdbc[13]: Plan       :   best plan item cost 4,022 index meta
2020-06-20 04:44:55 jdbc[13]: Plan       : plan cost 4,023
2020-06-20 04:44:55 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@26ab0dca]
2020-06-20 04:44:55 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@26ab0dca
2020-06-20 04:44:55 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-20 04:44:55 jdbc[13]: Table      :     potential plan item cost 4,022 index meta
2020-06-20 04:44:55 jdbc[13]: Plan       :   best plan item cost 3,981.78 index meta
2020-06-20 04:44:55 jdbc[13]: Plan       : plan cost 3,982.78
2020-06-20 04:44:55 jdbc[13]: Plan       :   best plan item cost 8,005.78 index (SELECT
    SYNONYM_CATALOG AS TABLE_CAT,
    SYNONYM_SCHEMA AS TABLE_SCHEM,
    SYNONYM_NAME AS TABLE_NAME,
    TYPE_NAME AS TABLE_TYPE,
    REMARKS,
    TYPE_NAME AS TYPE_CAT,
    TYPE_NAME AS TYPE_SCHEM,
    TYPE_NAME AS TYPE_NAME,
    TYPE_NAME AS SELF_REFERENCING_COL_NAME,
    TYPE_NAME AS REF_GENERATION,
    NULL AS SQL
FROM INFORMATION_SCHEMA.SYNONYMS
    /* meta */
WHERE (SYNONYM_NAME LIKE ?3 ESCAPE ?4)
    AND ((SYNONYM_CATALOG LIKE ?1 ESCAPE ?4)
    AND (SYNONYM_SCHEMA LIKE ?2 ESCAPE ?4)))
UNION
(SELECT
    TABLE_CATALOG AS TABLE_CAT,
    TABLE_SCHEMA AS TABLE_SCHEM,
    TABLE_NAME,
    TABLE_TYPE,
    REMARKS,
    TYPE_NAME AS TYPE_CAT,
    TYPE_NAME AS TYPE_SCHEM,
    TYPE_NAME,
    TYPE_NAME AS SELF_REFERENCING_COL_NAME,
    TYPE_NAME AS REF_GENERATION,
    SQL
FROM INFORMATION_SCHEMA.TABLES
    /* meta */
WHERE (TABLE_TYPE IN(?5, ?6, ?7, ?8, ?9, ?10, ?11))
    AND ((TABLE_NAME LIKE ?3 ESCAPE ?4)
    AND ((TABLE_CATALOG LIKE ?1 ESCAPE ?4)
    AND (TABLE_SCHEMA LIKE ?2 ESCAPE ?4))))
2020-06-20 04:44:55 jdbc[13]: Plan       : plan cost 8,006.78
2020-06-20 04:44:55 jdbc[13]: 
/*SQL l:1007 #:2*/SELECT TABLE_CAT, TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_CAT, TYPE_SCHEM, TYPE_NAME, SELF_REFERENCING_COL_NAME, REF_GENERATION, SQL FROM (SELECT SYNONYM_CATALOG TABLE_CAT, SYNONYM_SCHEMA TABLE_SCHEM, SYNONYM_NAME as TABLE_NAME, TYPE_NAME AS TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME AS TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, NULL AS SQL FROM INFORMATION_SCHEMA.SYNONYMS WHERE SYNONYM_CATALOG LIKE ?1 ESCAPE ?4 AND SYNONYM_SCHEMA LIKE ?2 ESCAPE ?4 AND SYNONYM_NAME LIKE ?3 ESCAPE ?4 UNION SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5, ?6, ?7, ?8, ?9, ?10, ?11)) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME {1: '%', 2: 'PUBLIC', 3: '%', 4: '\\', 5: 'TABLE', 6: 'SYSTEM TABLE', 7: 'VIEW', 8: 'SYSTEM VIEW', 9: 'TABLE LINK', 10: 'SYNONYM', 11: 'EXTERNAL'};
2020-06-20 04:44:55 jdbc[13]: 
/**/rs59.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs59.getString("TABLE_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs59.getString("TABLE_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs59.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs59.getString("TABLE_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs59.getString("TABLE_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs59.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs59.close();
2020-06-20 04:44:55 jdbc[13]: 
/**/prep22.close();
2020-06-20 04:44:55 jdbc[13]: 
/**/dbMeta4.getConnection();
2020-06-20 04:44:55 jdbc[13]: 
/**/PreparedStatement prep23 = conn10.prepareStatement("SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ?");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep23.setString(1, "PUBLIC");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep23.setString(2, "EQUIPMENT_TBL");
2020-06-20 04:44:55 jdbc[13]: 
/**/ResultSet rs60 = prep23.executeQuery();
2020-06-20 04:44:55 jdbc[13]: 
/*SQL l:123 #:3*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'PUBLIC', 2: 'EQUIPMENT_TBL'};
2020-06-20 04:44:55 jdbc[13]: 
/**/rs60.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs60.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs60.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs60.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs60.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs60.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs60.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs60.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs60.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs60.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs60.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs60.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs60.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs60.close();
2020-06-20 04:44:55 jdbc[13]: 
/**/prep23.setString(1, "PUBLIC");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep23.setString(2, "LOG_TBL");
2020-06-20 04:44:55 jdbc[13]: 
/**/ResultSet rs61 = prep23.executeQuery();
2020-06-20 04:44:55 jdbc[13]: 
/*SQL l:123 #:10*/SELECT COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? {1: 'PUBLIC', 2: 'LOG_TBL'};
2020-06-20 04:44:55 jdbc[13]: 
/**/rs61.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs61.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs61.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs61.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs61.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs61.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs61.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs61.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs61.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs61.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs61.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs61.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs61.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs61.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs61.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs61.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs61.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs61.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs61.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs61.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs61.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs61.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs61.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs61.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs61.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs61.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs61.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs61.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs61.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs61.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs61.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs61.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs61.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs61.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs61.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs61.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs61.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs61.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs61.getInt("ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs61.getString("COLUMN_TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs61.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs61.close();
2020-06-20 04:44:55 jdbc[13]: 
/**/prep23.close();
2020-06-20 04:44:55 jdbc[13]: 
/**/dbMeta4.getProcedures(null, "PUBLIC", null);
2020-06-20 04:44:55 jdbc[13]: 
/**/PreparedStatement prep24 = conn10.prepareStatement("SELECT ALIAS_CATALOG PROCEDURE_CAT, ALIAS_SCHEMA PROCEDURE_SCHEM, ALIAS_NAME PROCEDURE_NAME, COLUMN_COUNT NUM_INPUT_PARAMS, ZERO() NUM_OUTPUT_PARAMS, ZERO() NUM_RESULT_SETS, REMARKS, RETURNS_RESULT PROCEDURE_TYPE, ALIAS_NAME SPECIFIC_NAME FROM INFORMATION_SCHEMA.FUNCTION_ALIASES WHERE ALIAS_CATALOG LIKE ? ESCAPE ? AND ALIAS_SCHEMA LIKE ? ESCAPE ? AND ALIAS_NAME LIKE ? ESCAPE ? ORDER BY PROCEDURE_SCHEM, PROCEDURE_NAME, NUM_INPUT_PARAMS");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep24.setString(1, "%");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep24.setString(2, "\\");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep24.setString(3, "PUBLIC");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep24.setString(4, "\\");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep24.setString(5, "%");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep24.setString(6, "\\");
2020-06-20 04:44:55 jdbc[13]: 
/**/ResultSet rs62 = prep24.executeQuery();
2020-06-20 04:44:55 jdbc[13]: Plan       : calculate cost for plan [FUNCTION_ALIASES:-13:org.h2.table.MetaTable@22ad7d79]
2020-06-20 04:44:55 jdbc[13]: Plan       :   for table filter FUNCTION_ALIASES:-13:org.h2.table.MetaTable@22ad7d79
2020-06-20 04:44:55 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-20 04:44:55 jdbc[13]: Plan       :   best plan item cost 9,900 index meta
2020-06-20 04:44:55 jdbc[13]: Plan       : plan cost 9,901
2020-06-20 04:44:55 jdbc[13]: 
/*SQL l:438*/SELECT ALIAS_CATALOG PROCEDURE_CAT, ALIAS_SCHEMA PROCEDURE_SCHEM, ALIAS_NAME PROCEDURE_NAME, COLUMN_COUNT NUM_INPUT_PARAMS, ZERO() NUM_OUTPUT_PARAMS, ZERO() NUM_RESULT_SETS, REMARKS, RETURNS_RESULT PROCEDURE_TYPE, ALIAS_NAME SPECIFIC_NAME FROM INFORMATION_SCHEMA.FUNCTION_ALIASES WHERE ALIAS_CATALOG LIKE ? ESCAPE ? AND ALIAS_SCHEMA LIKE ? ESCAPE ? AND ALIAS_NAME LIKE ? ESCAPE ? ORDER BY PROCEDURE_SCHEM, PROCEDURE_NAME, NUM_INPUT_PARAMS {1: '%', 2: '\\', 3: 'PUBLIC', 4: '\\', 5: '%', 6: '\\'};
2020-06-20 04:44:55 jdbc[13]: 
/**/rs62.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs62.close();
2020-06-20 04:44:55 jdbc[13]: 
/**/prep24.close();
2020-06-20 04:44:55 jdbc[13]: 
/**/dbMeta3.getIndexInfo(null, "PUBLIC", "EQUIPMENT_TBL", false, true);
2020-06-20 04:44:55 jdbc[13]: 
/**/PreparedStatement prep25 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, NON_UNIQUE, TABLE_CATALOG INDEX_QUALIFIER, INDEX_NAME, INDEX_TYPE TYPE, ORDINAL_POSITION, COLUMN_NAME, ASC_OR_DESC, CARDINALITY, PAGES, FILTER_CONDITION, SORT_TYPE FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND (TRUE) AND TABLE_NAME = ? ORDER BY NON_UNIQUE, TYPE, TABLE_SCHEM, INDEX_NAME, ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@e4cdcf4]
2020-06-20 04:44:55 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@e4cdcf4
2020-06-20 04:44:55 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-20 04:44:55 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-20 04:44:55 jdbc[13]: Plan       :   best plan item cost 324.72 index meta
2020-06-20 04:44:55 jdbc[13]: Plan       : plan cost 325.72
2020-06-20 04:44:55 jdbc[13]: 
/**/prep25.setString(1, "%");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep25.setString(2, "\\");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep25.setString(3, "PUBLIC");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep25.setString(4, "\\");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep25.setString(5, "EQUIPMENT_TBL");
2020-06-20 04:44:55 jdbc[13]: 
/**/ResultSet rs63 = prep25.executeQuery();
2020-06-20 04:44:55 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@e4cdcf4]
2020-06-20 04:44:55 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@e4cdcf4
2020-06-20 04:44:55 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-20 04:44:55 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-20 04:44:55 jdbc[13]: Plan       :   best plan item cost 321.44 index meta
2020-06-20 04:44:55 jdbc[13]: Plan       : plan cost 322.44
2020-06-20 04:44:55 jdbc[13]: 
/*SQL l:433 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, NON_UNIQUE, TABLE_CATALOG INDEX_QUALIFIER, INDEX_NAME, INDEX_TYPE TYPE, ORDINAL_POSITION, COLUMN_NAME, ASC_OR_DESC, CARDINALITY, PAGES, FILTER_CONDITION, SORT_TYPE FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND (TRUE) AND TABLE_NAME = ? ORDER BY NON_UNIQUE, TYPE, TABLE_SCHEM, INDEX_NAME, ORDINAL_POSITION {1: '%', 2: '\\', 3: 'PUBLIC', 4: '\\', 5: 'EQUIPMENT_TBL'};
2020-06-20 04:44:55 jdbc[13]: 
/**/rs63.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs63.getString("INDEX_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs63.getInt("TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs63.getBoolean("NON_UNIQUE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs63.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs63.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs63.close();
2020-06-20 04:44:55 jdbc[13]: 
/**/prep25.close();
2020-06-20 04:44:55 jdbc[13]: 
/**/dbMeta3.getIndexInfo(null, "PUBLIC", "LOG_TBL", false, true);
2020-06-20 04:44:55 jdbc[13]: 
/**/PreparedStatement prep26 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, NON_UNIQUE, TABLE_CATALOG INDEX_QUALIFIER, INDEX_NAME, INDEX_TYPE TYPE, ORDINAL_POSITION, COLUMN_NAME, ASC_OR_DESC, CARDINALITY, PAGES, FILTER_CONDITION, SORT_TYPE FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND (TRUE) AND TABLE_NAME = ? ORDER BY NON_UNIQUE, TYPE, TABLE_SCHEM, INDEX_NAME, ORDINAL_POSITION");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep26.setString(1, "%");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep26.setString(2, "\\");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep26.setString(3, "PUBLIC");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep26.setString(4, "\\");
2020-06-20 04:44:55 jdbc[13]: 
/**/prep26.setString(5, "LOG_TBL");
2020-06-20 04:44:55 jdbc[13]: 
/**/ResultSet rs64 = prep26.executeQuery();
2020-06-20 04:44:55 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@e4cdcf4]
2020-06-20 04:44:55 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@e4cdcf4
2020-06-20 04:44:55 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-20 04:44:55 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-20 04:44:55 jdbc[13]: Plan       :   best plan item cost 321.44 index meta
2020-06-20 04:44:55 jdbc[13]: Plan       : plan cost 322.44
2020-06-20 04:44:55 jdbc[13]: 
/*SQL l:433 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, NON_UNIQUE, TABLE_CATALOG INDEX_QUALIFIER, INDEX_NAME, INDEX_TYPE TYPE, ORDINAL_POSITION, COLUMN_NAME, ASC_OR_DESC, CARDINALITY, PAGES, FILTER_CONDITION, SORT_TYPE FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND (TRUE) AND TABLE_NAME = ? ORDER BY NON_UNIQUE, TYPE, TABLE_SCHEM, INDEX_NAME, ORDINAL_POSITION {1: '%', 2: '\\', 3: 'PUBLIC', 4: '\\', 5: 'LOG_TBL'};
2020-06-20 04:44:55 jdbc[13]: 
/**/rs64.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs64.getString("INDEX_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs64.getInt("TYPE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs64.getBoolean("NON_UNIQUE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs64.getString("COLUMN_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs64.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs64.close();
2020-06-20 04:44:55 jdbc[13]: 
/**/prep26.close();
2020-06-20 04:44:55 jdbc[13]: 
/**/Statement stat3 = conn10.createStatement();
2020-06-20 04:44:55 jdbc[13]: 
/**/ResultSet rs65 = stat3.executeQuery("SELECT * FROM INFORMATION_SCHEMA.SEQUENCES ORDER BY SEQUENCE_NAME");
2020-06-20 04:44:55 jdbc[13]: Plan       : calculate cost for plan [SEQUENCES:-9:org.h2.table.MetaTable@7a6b7c8d]
2020-06-20 04:44:55 jdbc[13]: Plan       :   for table filter SEQUENCES:-9:org.h2.table.MetaTable@7a6b7c8d
2020-06-20 04:44:55 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-20 04:44:55 jdbc[13]: Plan       :   best plan item cost 10,000 index meta
2020-06-20 04:44:55 jdbc[13]: Plan       : plan cost 10,001
2020-06-20 04:44:55 jdbc[13]: 
/*SQL #:2*/SELECT * FROM INFORMATION_SCHEMA.SEQUENCES ORDER BY SEQUENCE_NAME;
2020-06-20 04:44:55 jdbc[13]: 
/**/rs65.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs65.getString("SEQUENCE_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs65.getString("CURRENT_VALUE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs65.getString("INCREMENT");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs65.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs65.getString("SEQUENCE_NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs65.getString("CURRENT_VALUE");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs65.getString("INCREMENT");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs65.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs65.close();
2020-06-20 04:44:55 jdbc[13]: 
/**/ResultSet rs66 = stat3.executeQuery("SELECT * FROM INFORMATION_SCHEMA.USERS ORDER BY NAME");
2020-06-20 04:44:55 jdbc[13]: Plan       : calculate cost for plan [USERS:-10:org.h2.table.MetaTable@61fa910d]
2020-06-20 04:44:55 jdbc[13]: Plan       :   for table filter USERS:-10:org.h2.table.MetaTable@61fa910d
2020-06-20 04:44:55 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-20 04:44:55 jdbc[13]: Plan       :   best plan item cost 10,000 index meta
2020-06-20 04:44:55 jdbc[13]: Plan       : plan cost 10,001
2020-06-20 04:44:55 jdbc[13]: 
/*SQL #:1*/SELECT * FROM INFORMATION_SCHEMA.USERS ORDER BY NAME;
2020-06-20 04:44:55 jdbc[13]: 
/**/rs66.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs66.getString("NAME");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs66.getString("ADMIN");
2020-06-20 04:44:55 jdbc[13]: 
/**/rs66.next();
2020-06-20 04:44:55 jdbc[13]: 
/**/rs66.close();
2020-06-20 04:44:55 jdbc[13]: 
/**/stat3.close();
2020-06-20 04:44:55 jdbc[13]: 
/**/dbMeta3.getDatabaseProductName();
2020-06-20 04:44:55 jdbc[13]: 
/**/dbMeta3.getDatabaseProductVersion();
2020-06-20 04:44:58 jdbc[13]: 
/**/Statement stat4 = conn10.createStatement(1004, 1008);
2020-06-20 04:44:58 jdbc[13]: 
/**/stat4.setMaxRows(1000);
2020-06-20 04:44:58 jdbc[13]: 
/**/stat4.execute("SELECT * FROM LOG_TBL");
2020-06-20 04:44:58 jdbc[13]: Plan       : calculate cost for plan [PUBLIC.LOG_TBL]
2020-06-20 04:44:58 jdbc[13]: Plan       :   for table filter PUBLIC.LOG_TBL
2020-06-20 04:44:58 jdbc[13]: Table      :     potential plan item cost 10,240 index PUBLIC.LOG_TBL.tableScan
2020-06-20 04:44:58 jdbc[13]: Table      :     potential plan item cost 10,250 index PUBLIC.PRIMARY_KEY_3F
2020-06-20 04:44:58 jdbc[13]: Plan       :   best plan item cost 10,240 index PUBLIC.LOG_TBL.tableScan
2020-06-20 04:44:58 jdbc[13]: Plan       : plan cost 10,241
2020-06-20 04:44:58 jdbc[13]: 
/*SQL #:4*/SELECT * FROM LOG_TBL;
2020-06-20 04:44:58 jdbc[13]: 
/**/ResultSet rs67 = stat4.getResultSet();
2020-06-20 04:44:58 jdbc[13]: 
/**/ResultSetMetaData rsMeta8 = rs67.getMetaData();
2020-06-20 04:44:58 jdbc[13]: 
/**/conn10.getCatalog();
2020-06-20 04:44:58 jdbc[13]: 
/*SQL #:1*/CALL DATABASE();
2020-06-20 04:44:58 jdbc[13]: 
/**/rsMeta8.getColumnCount();
2020-06-20 04:44:58 jdbc[13]: 
/**/rsMeta8.getColumnLabel(1);
2020-06-20 04:44:58 jdbc[13]: 
/**/rsMeta8.getColumnLabel(2);
2020-06-20 04:44:58 jdbc[13]: 
/**/rsMeta8.getColumnLabel(3);
2020-06-20 04:44:58 jdbc[13]: 
/**/rsMeta8.getColumnLabel(4);
2020-06-20 04:44:58 jdbc[13]: 
/**/rsMeta8.getColumnLabel(5);
2020-06-20 04:44:58 jdbc[13]: 
/**/rsMeta8.getColumnLabel(6);
2020-06-20 04:44:58 jdbc[13]: 
/**/rsMeta8.getColumnLabel(7);
2020-06-20 04:44:58 jdbc[13]: 
/**/rsMeta8.getColumnLabel(8);
2020-06-20 04:44:58 jdbc[13]: 
/**/rsMeta8.getColumnLabel(9);
2020-06-20 04:44:58 jdbc[13]: 
/**/rsMeta8.getColumnLabel(10);
2020-06-20 04:44:58 jdbc[13]: 
/**/rs67.next();
2020-06-20 04:44:58 jdbc[13]: 
/**/rs67.getString(1);
2020-06-20 04:44:58 jdbc[13]: 
/**/rs67.getString(2);
2020-06-20 04:44:58 jdbc[13]: 
/**/rs67.getString(3);
2020-06-20 04:44:58 jdbc[13]: 
/**/rs67.getString(4);
2020-06-20 04:44:58 jdbc[13]: 
/**/rs67.getString(5);
2020-06-20 04:44:58 jdbc[13]: 
/**/rs67.getString(6);
2020-06-20 04:44:58 jdbc[13]: 
/**/rs67.getString(7);
2020-06-20 04:44:58 jdbc[13]: 
/**/rs67.getString(8);
2020-06-20 04:44:58 jdbc[13]: 
/**/rs67.getString(9);
2020-06-20 04:44:58 jdbc[13]: 
/**/rs67.getString(10);
2020-06-20 04:44:58 jdbc[13]: 
/**/rs67.next();
2020-06-20 04:44:58 jdbc[13]: 
/**/rs67.getString(1);
2020-06-20 04:44:58 jdbc[13]: 
/**/rs67.getString(2);
2020-06-20 04:44:58 jdbc[13]: 
/**/rs67.getString(3);
2020-06-20 04:44:58 jdbc[13]: 
/**/rs67.getString(4);
2020-06-20 04:44:58 jdbc[13]: 
/**/rs67.getString(5);
2020-06-20 04:44:58 jdbc[13]: 
/**/rs67.getString(6);
2020-06-20 04:44:58 jdbc[13]: 
/**/rs67.getString(7);
2020-06-20 04:44:58 jdbc[13]: 
/**/rs67.getString(8);
2020-06-20 04:44:58 jdbc[13]: 
/**/rs67.getString(9);
2020-06-20 04:44:58 jdbc[13]: 
/**/rs67.getString(10);
2020-06-20 04:44:58 jdbc[13]: 
/**/rs67.next();
2020-06-20 04:44:58 jdbc[13]: 
/**/rs67.getString(1);
2020-06-20 04:44:58 jdbc[13]: 
/**/rs67.getString(2);
2020-06-20 04:44:58 jdbc[13]: 
/**/rs67.getString(3);
2020-06-20 04:44:58 jdbc[13]: 
/**/rs67.getString(4);
2020-06-20 04:44:58 jdbc[13]: 
/**/rs67.getString(5);
2020-06-20 04:44:58 jdbc[13]: 
/**/rs67.getString(6);
2020-06-20 04:44:58 jdbc[13]: 
/**/rs67.getString(7);
2020-06-20 04:44:58 jdbc[13]: 
/**/rs67.getString(8);
2020-06-20 04:44:58 jdbc[13]: 
/**/rs67.getString(9);
2020-06-20 04:44:58 jdbc[13]: 
/**/rs67.getString(10);
2020-06-20 04:44:58 jdbc[13]: 
/**/rs67.next();
2020-06-20 04:44:58 jdbc[13]: 
/**/rs67.getString(1);
2020-06-20 04:44:58 jdbc[13]: 
/**/rs67.getString(2);
2020-06-20 04:44:58 jdbc[13]: 
/**/rs67.getString(3);
2020-06-20 04:44:58 jdbc[13]: 
/**/rs67.getString(4);
2020-06-20 04:44:58 jdbc[13]: 
/**/rs67.getString(5);
2020-06-20 04:44:58 jdbc[13]: 
/**/rs67.getString(6);
2020-06-20 04:44:58 jdbc[13]: 
/**/rs67.getString(7);
2020-06-20 04:44:58 jdbc[13]: 
/**/rs67.getString(8);
2020-06-20 04:44:58 jdbc[13]: 
/**/rs67.getString(9);
2020-06-20 04:44:58 jdbc[13]: 
/**/rs67.getString(10);
2020-06-20 04:44:58 jdbc[13]: 
/**/rs67.next();
2020-06-20 04:44:58 jdbc[13]: 
/**/rs67.getConcurrency();
2020-06-20 04:44:58 jdbc[13]: 
/**/DatabaseMetaData dbMeta5 = conn10.getMetaData();
2020-06-20 04:44:58 jdbc[13]: 
/**/dbMeta5.getTables(null, "PUBLIC", "LOG_TBL", new String[]{"TABLE"});
2020-06-20 04:44:58 jdbc[13]: 
/**/PreparedStatement prep27 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME");
2020-06-20 04:44:58 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@26ab0dca]
2020-06-20 04:44:58 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@26ab0dca
2020-06-20 04:44:58 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-20 04:44:58 jdbc[13]: Table      :     potential plan item cost 4,322 index meta
2020-06-20 04:44:58 jdbc[13]: Plan       :   best plan item cost 4,278.78 index meta
2020-06-20 04:44:58 jdbc[13]: Plan       : plan cost 4,279.78
2020-06-20 04:44:58 jdbc[13]: 
/**/prep27.setString(1, "%");
2020-06-20 04:44:58 jdbc[13]: 
/**/prep27.setString(2, "PUBLIC");
2020-06-20 04:44:58 jdbc[13]: 
/**/prep27.setString(3, "LOG_TBL");
2020-06-20 04:44:58 jdbc[13]: 
/**/prep27.setString(4, "\\");
2020-06-20 04:44:58 jdbc[13]: 
/**/prep27.setString(5, "TABLE");
2020-06-20 04:44:58 jdbc[13]: 
/**/ResultSet rs68 = prep27.executeQuery();
2020-06-20 04:44:58 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@26ab0dca]
2020-06-20 04:44:58 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@26ab0dca
2020-06-20 04:44:58 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-20 04:44:58 jdbc[13]: Table      :     potential plan item cost 1,324 index meta
2020-06-20 04:44:58 jdbc[13]: Plan       :   best plan item cost 1,271.04 index meta
2020-06-20 04:44:58 jdbc[13]: Plan       : plan cost 1,272.04
2020-06-20 04:44:58 jdbc[13]: 
/*SQL l:414 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME {1: '%', 2: 'PUBLIC', 3: 'LOG_TBL', 4: '\\', 5: 'TABLE'};
2020-06-20 04:44:58 jdbc[13]: 
/**/rs68.next();
2020-06-20 04:44:58 jdbc[13]: 
/**/rs68.getString("SQL");
2020-06-20 04:44:58 jdbc[13]: 
/**/rs68.getString("TABLE_NAME");
2020-06-20 04:44:58 jdbc[13]: 
/**/dbMeta5.getPrimaryKeys(null, "PUBLIC", "LOG_TBL");
2020-06-20 04:44:58 jdbc[13]: 
/**/PreparedStatement prep28 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME");
2020-06-20 04:44:58 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@e4cdcf4]
2020-06-20 04:44:58 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@e4cdcf4
2020-06-20 04:44:58 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-20 04:44:58 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-20 04:44:58 jdbc[13]: Plan       :   best plan item cost 321.44 index meta
2020-06-20 04:44:58 jdbc[13]: Plan       : plan cost 322.44
2020-06-20 04:44:58 jdbc[13]: 
/**/prep28.setString(1, "%");
2020-06-20 04:44:58 jdbc[13]: 
/**/prep28.setString(2, "\\");
2020-06-20 04:44:58 jdbc[13]: 
/**/prep28.setString(3, "PUBLIC");
2020-06-20 04:44:58 jdbc[13]: 
/**/prep28.setString(4, "\\");
2020-06-20 04:44:58 jdbc[13]: 
/**/prep28.setString(5, "LOG_TBL");
2020-06-20 04:44:58 jdbc[13]: 
/**/ResultSet rs69 = prep28.executeQuery();
2020-06-20 04:44:58 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@e4cdcf4]
2020-06-20 04:44:58 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@e4cdcf4
2020-06-20 04:44:58 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-20 04:44:58 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-20 04:44:58 jdbc[13]: Plan       :   best plan item cost 318.16 index meta
2020-06-20 04:44:58 jdbc[13]: Plan       : plan cost 319.16
2020-06-20 04:44:58 jdbc[13]: 
/*SQL l:316 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME {1: '%', 2: '\\', 3: 'PUBLIC', 4: '\\', 5: 'LOG_TBL'};
2020-06-20 04:44:58 jdbc[13]: 
/**/rs69.next();
2020-06-20 04:44:58 jdbc[13]: 
/**/rs69.getString("COLUMN_NAME");
2020-06-20 04:44:58 jdbc[13]: 
/**/rs69.next();
2020-06-20 04:44:58 jdbc[13]: 
/**/rs67.getType();
2020-06-20 04:44:58 jdbc[13]: 
/**/rs67.close();
2020-06-20 04:44:58 jdbc[13]: 
/**/stat4.close();
2020-06-20 04:45:11 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-20 04:45:11 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-20 04:45:11 jdbc[3]: 
/**/PreparedStatement prep29 = conn0.prepareStatement("select equipment0_.id as id1_0_, equipment0_.cust_id as cust_id2_0_, equipment0_.equipment_name as equipmen3_0_ from equipment_tbl equipment0_ where equipment0_.cust_id=?");
2020-06-20 04:45:11 jdbc[3]: Plan       : calculate cost for plan [EQUIPMENT0_]
2020-06-20 04:45:11 jdbc[3]: Plan       :   for table filter EQUIPMENT0_
2020-06-20 04:45:11 jdbc[3]: Table      :     potential plan item cost 10,240 index PUBLIC.EQUIPMENT_TBL.tableScan
2020-06-20 04:45:11 jdbc[3]: Table      :     potential plan item cost 10,250 index PUBLIC.PRIMARY_KEY_3
2020-06-20 04:45:11 jdbc[3]: Plan       :   best plan item cost 10,137.6 index PUBLIC.EQUIPMENT_TBL.tableScan
2020-06-20 04:45:11 jdbc[3]: Plan       : plan cost 10,138.6
2020-06-20 04:45:11 jdbc[3]: 
/**/prep29.setLong(1, 1L);
2020-06-20 04:45:11 jdbc[3]: 
/**/ResultSet rs70 = prep29.executeQuery();
2020-06-20 04:45:11 jdbc[3]: 
/*SQL l:170 #:3*/select equipment0_.id as id1_0_, equipment0_.cust_id as cust_id2_0_, equipment0_.equipment_name as equipmen3_0_ from equipment_tbl equipment0_ where equipment0_.cust_id=? {1: 1};
2020-06-20 04:45:11 jdbc[3]: 
/**/rs70.next();
2020-06-20 04:45:11 jdbc[3]: 
/**/rs70.getLong("id1_0_");
2020-06-20 04:45:11 jdbc[3]: 
/**/rs70.wasNull();
2020-06-20 04:45:11 jdbc[3]: 
/**/rs70.getLong("cust_id2_0_");
2020-06-20 04:45:11 jdbc[3]: 
/**/rs70.wasNull();
2020-06-20 04:45:11 jdbc[3]: 
/**/rs70.getString("equipmen3_0_");
2020-06-20 04:45:11 jdbc[3]: 
/**/rs70.wasNull();
2020-06-20 04:45:11 jdbc[3]: 
/**/rs70.next();
2020-06-20 04:45:11 jdbc[3]: 
/**/rs70.getLong("id1_0_");
2020-06-20 04:45:11 jdbc[3]: 
/**/rs70.wasNull();
2020-06-20 04:45:11 jdbc[3]: 
/**/rs70.getLong("cust_id2_0_");
2020-06-20 04:45:11 jdbc[3]: 
/**/rs70.wasNull();
2020-06-20 04:45:11 jdbc[3]: 
/**/rs70.getString("equipmen3_0_");
2020-06-20 04:45:11 jdbc[3]: 
/**/rs70.wasNull();
2020-06-20 04:45:11 jdbc[3]: 
/**/rs70.next();
2020-06-20 04:45:11 jdbc[3]: 
/**/rs70.getLong("id1_0_");
2020-06-20 04:45:11 jdbc[3]: 
/**/rs70.wasNull();
2020-06-20 04:45:11 jdbc[3]: 
/**/rs70.getLong("cust_id2_0_");
2020-06-20 04:45:11 jdbc[3]: 
/**/rs70.wasNull();
2020-06-20 04:45:11 jdbc[3]: 
/**/rs70.getString("equipmen3_0_");
2020-06-20 04:45:11 jdbc[3]: 
/**/rs70.wasNull();
2020-06-20 04:45:11 jdbc[3]: 
/**/rs70.next();
2020-06-20 04:45:11 jdbc[3]: 
/**/rs70.close();
2020-06-20 04:45:11 jdbc[3]: 
/**/prep29.getMaxRows();
2020-06-20 04:45:11 jdbc[3]: 
/**/prep29.getQueryTimeout();
2020-06-20 04:45:11 jdbc[3]: 
/**/prep29.close();
2020-06-20 04:45:11 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-20 04:45:11 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-20 04:45:11 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-20 04:45:12 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-20 04:45:12 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-20 04:45:12 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-20 04:45:12 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-20 04:45:12 jdbc[3]: 
/**/PreparedStatement prep30 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, message, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-20 04:45:12 jdbc[3]: 
/**/prep30.setString(1, "EquipmentMS");
2020-06-20 04:45:12 jdbc[3]: 
/**/prep30.setString(2, "INFO");
2020-06-20 04:45:12 jdbc[3]: 
/**/prep30.setString(3, "Exiting  class EquipmentController  with method getAllequipmentNameByCustomerId and argument[1]");
2020-06-20 04:45:12 jdbc[3]: 
/**/prep30.setNull(4, 12);
2020-06-20 04:45:12 jdbc[3]: 
/**/prep30.setString(5, "/api/equipments/1");
2020-06-20 04:45:12 jdbc[3]: 
/**/prep30.setString(6, "[Mouse, Keyboard, guitar]");
2020-06-20 04:45:12 jdbc[3]: 
/**/prep30.setString(7, "d059a3293e8a0faf");
2020-06-20 04:45:12 jdbc[3]: 
/**/prep30.setString(8, "2020-06-20T09:45:11.408Z");
2020-06-20 04:45:12 jdbc[3]: 
/**/prep30.setString(9, "d059a3293e8a0faf");
2020-06-20 04:45:12 jdbc[3]: 
/**/prep30.executeUpdate();
2020-06-20 04:45:12 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-20 04:45:12 lock: 3 shared read lock ok LOG_TBL 
2020-06-20 04:45:12 jdbc[3]: 
/*SQL l:159 #:1*/insert into log_tbl (id, application_name, level, message, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'EquipmentMS', 2: 'INFO', 3: 'Exiting  class EquipmentController  with method getAllequipmentNameByCustomerId and argument[1]', 4: NULL, 5: '/api/equipments/1', 6: '[Mouse, Keyboard, guitar]', 7: 'd059a3293e8a0faf', 8: '2020-06-20T09:45:11.408Z', 9: 'd059a3293e8a0faf'};
2020-06-20 04:45:12 jdbc[3]: 
/**/ResultSet rs71 = prep30.getGeneratedKeys();
2020-06-20 04:45:12 jdbc[3]: 
/**/rs71.next();
2020-06-20 04:45:12 jdbc[3]: 
/**/ResultSetMetaData rsMeta9 = rs71.getMetaData();
2020-06-20 04:45:12 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-20 04:45:12 jdbc[3]: 
/**/rsMeta9.getColumnCount();
2020-06-20 04:45:12 jdbc[3]: 
/**/rs71.getLong(1);
2020-06-20 04:45:12 jdbc[3]: 
/**/rs71.close();
2020-06-20 04:45:12 jdbc[3]: 
/**/prep30.getMaxRows();
2020-06-20 04:45:12 jdbc[3]: 
/**/prep30.getQueryTimeout();
2020-06-20 04:45:12 jdbc[3]: 
/**/prep30.close();
2020-06-20 04:45:12 jdbc[3]: 
/**/conn0.commit();
2020-06-20 04:45:12 lock: 3 shared read lock unlock LOG_TBL 
2020-06-20 04:45:12 jdbc[3]: 
/*SQL */COMMIT;
2020-06-20 04:45:12 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-20 04:45:12 jdbc[3]: 
/**/conn0.commit();
2020-06-20 04:45:12 jdbc[3]: 
/*SQL */COMMIT;
2020-06-20 04:45:12 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-20 04:45:12 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-20 04:45:12 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-20 04:45:12 jdbc[3]: 
/**/PreparedStatement prep31 = conn0.prepareStatement("select equipment0_.id as id1_0_, equipment0_.cust_id as cust_id2_0_, equipment0_.equipment_name as equipmen3_0_ from equipment_tbl equipment0_ where equipment0_.cust_id=?");
2020-06-20 04:45:12 jdbc[3]: 
/**/prep31.setLong(1, 12L);
2020-06-20 04:45:12 jdbc[3]: 
/**/ResultSet rs72 = prep31.executeQuery();
2020-06-20 04:45:12 jdbc[3]: 
/*SQL l:170*/select equipment0_.id as id1_0_, equipment0_.cust_id as cust_id2_0_, equipment0_.equipment_name as equipmen3_0_ from equipment_tbl equipment0_ where equipment0_.cust_id=? {1: 12};
2020-06-20 04:45:12 jdbc[3]: 
/**/rs72.next();
2020-06-20 04:45:12 jdbc[3]: 
/**/rs72.close();
2020-06-20 04:45:12 jdbc[3]: 
/**/prep31.getMaxRows();
2020-06-20 04:45:12 jdbc[3]: 
/**/prep31.getQueryTimeout();
2020-06-20 04:45:12 jdbc[3]: 
/**/prep31.close();
2020-06-20 04:45:12 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-20 04:45:12 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-20 04:45:12 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-20 04:45:13 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-20 04:45:13 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-20 04:45:13 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-20 04:45:13 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-20 04:45:13 jdbc[3]: 
/**/PreparedStatement prep32 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, message, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-20 04:45:13 jdbc[3]: 
/**/prep32.setString(1, "EquipmentMS");
2020-06-20 04:45:13 jdbc[3]: 
/**/prep32.setString(2, "INFO");
2020-06-20 04:45:13 jdbc[3]: 
/**/prep32.setString(3, "Exiting  class EquipmentController  with method getAllequipmentNameByCustomerId and argument[12]");
2020-06-20 04:45:13 jdbc[3]: 
/**/prep32.setNull(4, 12);
2020-06-20 04:45:13 jdbc[3]: 
/**/prep32.setString(5, "/api/equipments/12");
2020-06-20 04:45:13 jdbc[3]: 
/**/prep32.setString(6, "[]");
2020-06-20 04:45:13 jdbc[3]: 
/**/prep32.setString(7, "7375d9bee0a78f55");
2020-06-20 04:45:13 jdbc[3]: 
/**/prep32.setString(8, "2020-06-20T09:45:12.027Z");
2020-06-20 04:45:13 jdbc[3]: 
/**/prep32.setString(9, "7375d9bee0a78f55");
2020-06-20 04:45:13 jdbc[3]: 
/**/prep32.executeUpdate();
2020-06-20 04:45:13 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-20 04:45:13 lock: 3 shared read lock ok LOG_TBL 
2020-06-20 04:45:13 jdbc[3]: 
/*SQL l:159 #:1*/insert into log_tbl (id, application_name, level, message, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'EquipmentMS', 2: 'INFO', 3: 'Exiting  class EquipmentController  with method getAllequipmentNameByCustomerId and argument[12]', 4: NULL, 5: '/api/equipments/12', 6: '[]', 7: '7375d9bee0a78f55', 8: '2020-06-20T09:45:12.027Z', 9: '7375d9bee0a78f55'};
2020-06-20 04:45:13 jdbc[3]: 
/**/ResultSet rs73 = prep32.getGeneratedKeys();
2020-06-20 04:45:13 jdbc[3]: 
/**/rs73.next();
2020-06-20 04:45:13 jdbc[3]: 
/**/ResultSetMetaData rsMeta10 = rs73.getMetaData();
2020-06-20 04:45:13 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-20 04:45:13 jdbc[3]: 
/**/rsMeta10.getColumnCount();
2020-06-20 04:45:13 jdbc[3]: 
/**/rs73.getLong(1);
2020-06-20 04:45:13 jdbc[3]: 
/**/rs73.close();
2020-06-20 04:45:13 jdbc[3]: 
/**/prep32.getMaxRows();
2020-06-20 04:45:13 jdbc[3]: 
/**/prep32.getQueryTimeout();
2020-06-20 04:45:13 jdbc[3]: 
/**/prep32.close();
2020-06-20 04:45:13 jdbc[3]: 
/**/conn0.commit();
2020-06-20 04:45:13 lock: 3 shared read lock unlock LOG_TBL 
2020-06-20 04:45:13 jdbc[3]: 
/*SQL */COMMIT;
2020-06-20 04:45:13 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-20 04:45:13 jdbc[3]: 
/**/conn0.commit();
2020-06-20 04:45:13 jdbc[3]: 
/*SQL */COMMIT;
2020-06-20 04:45:13 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-20 04:45:13 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-20 04:45:13 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-20 04:45:18 jdbc[13]: 
/**/Statement stat5 = conn10.createStatement(1004, 1008);
2020-06-20 04:45:18 jdbc[13]: 
/**/stat5.setMaxRows(1000);
2020-06-20 04:45:18 jdbc[13]: 
/**/stat5.execute("SELECT * FROM LOG_TBL");
2020-06-20 04:45:18 jdbc[13]: 
/*SQL #:6*/SELECT * FROM LOG_TBL;
2020-06-20 04:45:18 jdbc[13]: 
/**/ResultSet rs74 = stat5.getResultSet();
2020-06-20 04:45:18 jdbc[13]: 
/**/ResultSetMetaData rsMeta11 = rs74.getMetaData();
2020-06-20 04:45:18 jdbc[13]: 
/**/conn10.getCatalog();
2020-06-20 04:45:18 jdbc[13]: 
/**/rsMeta11.getColumnCount();
2020-06-20 04:45:18 jdbc[13]: 
/**/rsMeta11.getColumnLabel(1);
2020-06-20 04:45:18 jdbc[13]: 
/**/rsMeta11.getColumnLabel(2);
2020-06-20 04:45:18 jdbc[13]: 
/**/rsMeta11.getColumnLabel(3);
2020-06-20 04:45:18 jdbc[13]: 
/**/rsMeta11.getColumnLabel(4);
2020-06-20 04:45:18 jdbc[13]: 
/**/rsMeta11.getColumnLabel(5);
2020-06-20 04:45:18 jdbc[13]: 
/**/rsMeta11.getColumnLabel(6);
2020-06-20 04:45:18 jdbc[13]: 
/**/rsMeta11.getColumnLabel(7);
2020-06-20 04:45:18 jdbc[13]: 
/**/rsMeta11.getColumnLabel(8);
2020-06-20 04:45:18 jdbc[13]: 
/**/rsMeta11.getColumnLabel(9);
2020-06-20 04:45:18 jdbc[13]: 
/**/rsMeta11.getColumnLabel(10);
2020-06-20 04:45:18 jdbc[13]: 
/**/rs74.next();
2020-06-20 04:45:18 jdbc[13]: 
/**/rs74.getString(1);
2020-06-20 04:45:18 jdbc[13]: 
/**/rs74.getString(2);
2020-06-20 04:45:18 jdbc[13]: 
/**/rs74.getString(3);
2020-06-20 04:45:18 jdbc[13]: 
/**/rs74.getString(4);
2020-06-20 04:45:18 jdbc[13]: 
/**/rs74.getString(5);
2020-06-20 04:45:18 jdbc[13]: 
/**/rs74.getString(6);
2020-06-20 04:45:18 jdbc[13]: 
/**/rs74.getString(7);
2020-06-20 04:45:18 jdbc[13]: 
/**/rs74.getString(8);
2020-06-20 04:45:18 jdbc[13]: 
/**/rs74.getString(9);
2020-06-20 04:45:18 jdbc[13]: 
/**/rs74.getString(10);
2020-06-20 04:45:18 jdbc[13]: 
/**/rs74.next();
2020-06-20 04:45:18 jdbc[13]: 
/**/rs74.getString(1);
2020-06-20 04:45:18 jdbc[13]: 
/**/rs74.getString(2);
2020-06-20 04:45:18 jdbc[13]: 
/**/rs74.getString(3);
2020-06-20 04:45:18 jdbc[13]: 
/**/rs74.getString(4);
2020-06-20 04:45:18 jdbc[13]: 
/**/rs74.getString(5);
2020-06-20 04:45:18 jdbc[13]: 
/**/rs74.getString(6);
2020-06-20 04:45:18 jdbc[13]: 
/**/rs74.getString(7);
2020-06-20 04:45:18 jdbc[13]: 
/**/rs74.getString(8);
2020-06-20 04:45:18 jdbc[13]: 
/**/rs74.getString(9);
2020-06-20 04:45:18 jdbc[13]: 
/**/rs74.getString(10);
2020-06-20 04:45:18 jdbc[13]: 
/**/rs74.next();
2020-06-20 04:45:18 jdbc[13]: 
/**/rs74.getString(1);
2020-06-20 04:45:18 jdbc[13]: 
/**/rs74.getString(2);
2020-06-20 04:45:18 jdbc[13]: 
/**/rs74.getString(3);
2020-06-20 04:45:18 jdbc[13]: 
/**/rs74.getString(4);
2020-06-20 04:45:18 jdbc[13]: 
/**/rs74.getString(5);
2020-06-20 04:45:18 jdbc[13]: 
/**/rs74.getString(6);
2020-06-20 04:45:18 jdbc[13]: 
/**/rs74.getString(7);
2020-06-20 04:45:18 jdbc[13]: 
/**/rs74.getString(8);
2020-06-20 04:45:18 jdbc[13]: 
/**/rs74.getString(9);
2020-06-20 04:45:18 jdbc[13]: 
/**/rs74.getString(10);
2020-06-20 04:45:18 jdbc[13]: 
/**/rs74.next();
2020-06-20 04:45:18 jdbc[13]: 
/**/rs74.getString(1);
2020-06-20 04:45:18 jdbc[13]: 
/**/rs74.getString(2);
2020-06-20 04:45:18 jdbc[13]: 
/**/rs74.getString(3);
2020-06-20 04:45:18 jdbc[13]: 
/**/rs74.getString(4);
2020-06-20 04:45:18 jdbc[13]: 
/**/rs74.getString(5);
2020-06-20 04:45:18 jdbc[13]: 
/**/rs74.getString(6);
2020-06-20 04:45:18 jdbc[13]: 
/**/rs74.getString(7);
2020-06-20 04:45:18 jdbc[13]: 
/**/rs74.getString(8);
2020-06-20 04:45:18 jdbc[13]: 
/**/rs74.getString(9);
2020-06-20 04:45:18 jdbc[13]: 
/**/rs74.getString(10);
2020-06-20 04:45:18 jdbc[13]: 
/**/rs74.next();
2020-06-20 04:45:18 jdbc[13]: 
/**/rs74.getString(1);
2020-06-20 04:45:18 jdbc[13]: 
/**/rs74.getString(2);
2020-06-20 04:45:18 jdbc[13]: 
/**/rs74.getString(3);
2020-06-20 04:45:18 jdbc[13]: 
/**/rs74.getString(4);
2020-06-20 04:45:18 jdbc[13]: 
/**/rs74.getString(5);
2020-06-20 04:45:18 jdbc[13]: 
/**/rs74.getString(6);
2020-06-20 04:45:18 jdbc[13]: 
/**/rs74.getString(7);
2020-06-20 04:45:18 jdbc[13]: 
/**/rs74.getString(8);
2020-06-20 04:45:18 jdbc[13]: 
/**/rs74.getString(9);
2020-06-20 04:45:18 jdbc[13]: 
/**/rs74.getString(10);
2020-06-20 04:45:18 jdbc[13]: 
/**/rs74.next();
2020-06-20 04:45:18 jdbc[13]: 
/**/rs74.getString(1);
2020-06-20 04:45:18 jdbc[13]: 
/**/rs74.getString(2);
2020-06-20 04:45:18 jdbc[13]: 
/**/rs74.getString(3);
2020-06-20 04:45:18 jdbc[13]: 
/**/rs74.getString(4);
2020-06-20 04:45:18 jdbc[13]: 
/**/rs74.getString(5);
2020-06-20 04:45:18 jdbc[13]: 
/**/rs74.getString(6);
2020-06-20 04:45:18 jdbc[13]: 
/**/rs74.getString(7);
2020-06-20 04:45:18 jdbc[13]: 
/**/rs74.getString(8);
2020-06-20 04:45:18 jdbc[13]: 
/**/rs74.getString(9);
2020-06-20 04:45:18 jdbc[13]: 
/**/rs74.getString(10);
2020-06-20 04:45:18 jdbc[13]: 
/**/rs74.next();
2020-06-20 04:45:18 jdbc[13]: 
/**/rs74.getConcurrency();
2020-06-20 04:45:18 jdbc[13]: 
/**/DatabaseMetaData dbMeta6 = conn10.getMetaData();
2020-06-20 04:45:18 jdbc[13]: 
/**/dbMeta6.getTables(null, "PUBLIC", "LOG_TBL", new String[]{"TABLE"});
2020-06-20 04:45:18 jdbc[13]: 
/**/PreparedStatement prep33 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME");
2020-06-20 04:45:18 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@26ab0dca]
2020-06-20 04:45:18 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@26ab0dca
2020-06-20 04:45:18 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-20 04:45:18 jdbc[13]: Table      :     potential plan item cost 4,322 index meta
2020-06-20 04:45:18 jdbc[13]: Plan       :   best plan item cost 4,278.78 index meta
2020-06-20 04:45:18 jdbc[13]: Plan       : plan cost 4,279.78
2020-06-20 04:45:18 jdbc[13]: 
/**/prep33.setString(1, "%");
2020-06-20 04:45:18 jdbc[13]: 
/**/prep33.setString(2, "PUBLIC");
2020-06-20 04:45:18 jdbc[13]: 
/**/prep33.setString(3, "LOG_TBL");
2020-06-20 04:45:18 jdbc[13]: 
/**/prep33.setString(4, "\\");
2020-06-20 04:45:18 jdbc[13]: 
/**/prep33.setString(5, "TABLE");
2020-06-20 04:45:18 jdbc[13]: 
/**/ResultSet rs75 = prep33.executeQuery();
2020-06-20 04:45:18 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@26ab0dca]
2020-06-20 04:45:18 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@26ab0dca
2020-06-20 04:45:18 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-20 04:45:18 jdbc[13]: Table      :     potential plan item cost 1,324 index meta
2020-06-20 04:45:18 jdbc[13]: Plan       :   best plan item cost 1,271.04 index meta
2020-06-20 04:45:18 jdbc[13]: Plan       : plan cost 1,272.04
2020-06-20 04:45:18 jdbc[13]: 
/*SQL l:414 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME {1: '%', 2: 'PUBLIC', 3: 'LOG_TBL', 4: '\\', 5: 'TABLE'};
2020-06-20 04:45:18 jdbc[13]: 
/**/rs75.next();
2020-06-20 04:45:18 jdbc[13]: 
/**/rs75.getString("SQL");
2020-06-20 04:45:18 jdbc[13]: 
/**/rs75.getString("TABLE_NAME");
2020-06-20 04:45:18 jdbc[13]: 
/**/dbMeta6.getPrimaryKeys(null, "PUBLIC", "LOG_TBL");
2020-06-20 04:45:18 jdbc[13]: 
/**/PreparedStatement prep34 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME");
2020-06-20 04:45:18 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@e4cdcf4]
2020-06-20 04:45:18 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@e4cdcf4
2020-06-20 04:45:18 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-20 04:45:18 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-20 04:45:18 jdbc[13]: Plan       :   best plan item cost 321.44 index meta
2020-06-20 04:45:18 jdbc[13]: Plan       : plan cost 322.44
2020-06-20 04:45:18 jdbc[13]: 
/**/prep34.setString(1, "%");
2020-06-20 04:45:18 jdbc[13]: 
/**/prep34.setString(2, "\\");
2020-06-20 04:45:18 jdbc[13]: 
/**/prep34.setString(3, "PUBLIC");
2020-06-20 04:45:18 jdbc[13]: 
/**/prep34.setString(4, "\\");
2020-06-20 04:45:18 jdbc[13]: 
/**/prep34.setString(5, "LOG_TBL");
2020-06-20 04:45:18 jdbc[13]: 
/**/ResultSet rs76 = prep34.executeQuery();
2020-06-20 04:45:18 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@e4cdcf4]
2020-06-20 04:45:18 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@e4cdcf4
2020-06-20 04:45:18 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-20 04:45:18 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-20 04:45:18 jdbc[13]: Plan       :   best plan item cost 318.16 index meta
2020-06-20 04:45:18 jdbc[13]: Plan       : plan cost 319.16
2020-06-20 04:45:18 jdbc[13]: 
/*SQL l:316 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME {1: '%', 2: '\\', 3: 'PUBLIC', 4: '\\', 5: 'LOG_TBL'};
2020-06-20 04:45:18 jdbc[13]: 
/**/rs76.next();
2020-06-20 04:45:18 jdbc[13]: 
/**/rs76.getString("COLUMN_NAME");
2020-06-20 04:45:18 jdbc[13]: 
/**/rs76.next();
2020-06-20 04:45:18 jdbc[13]: 
/**/rs74.getType();
2020-06-20 04:45:18 jdbc[13]: 
/**/rs74.close();
2020-06-20 04:45:18 jdbc[13]: 
/**/stat5.close();
2020-06-20 04:45:25 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-20 04:45:25 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-20 04:45:25 jdbc[3]: 
/**/PreparedStatement prep35 = conn0.prepareStatement("select equipment0_.id as id1_0_, equipment0_.cust_id as cust_id2_0_, equipment0_.equipment_name as equipmen3_0_ from equipment_tbl equipment0_ where equipment0_.cust_id=?");
2020-06-20 04:45:25 jdbc[3]: 
/**/prep35.setLong(1, 2L);
2020-06-20 04:45:25 jdbc[3]: 
/**/ResultSet rs77 = prep35.executeQuery();
2020-06-20 04:45:25 jdbc[3]: 
/*SQL l:170 #:1*/select equipment0_.id as id1_0_, equipment0_.cust_id as cust_id2_0_, equipment0_.equipment_name as equipmen3_0_ from equipment_tbl equipment0_ where equipment0_.cust_id=? {1: 2};
2020-06-20 04:45:25 jdbc[3]: 
/**/rs77.next();
2020-06-20 04:45:25 jdbc[3]: 
/**/rs77.getLong("id1_0_");
2020-06-20 04:45:25 jdbc[3]: 
/**/rs77.wasNull();
2020-06-20 04:45:25 jdbc[3]: 
/**/rs77.getLong("cust_id2_0_");
2020-06-20 04:45:25 jdbc[3]: 
/**/rs77.wasNull();
2020-06-20 04:45:25 jdbc[3]: 
/**/rs77.getString("equipmen3_0_");
2020-06-20 04:45:25 jdbc[3]: 
/**/rs77.wasNull();
2020-06-20 04:45:25 jdbc[3]: 
/**/rs77.next();
2020-06-20 04:45:25 jdbc[3]: 
/**/rs77.close();
2020-06-20 04:45:25 jdbc[3]: 
/**/prep35.getMaxRows();
2020-06-20 04:45:25 jdbc[3]: 
/**/prep35.getQueryTimeout();
2020-06-20 04:45:25 jdbc[3]: 
/**/prep35.close();
2020-06-20 04:45:25 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-20 04:45:25 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-20 04:45:25 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-20 04:45:26 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-20 04:45:26 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-20 04:45:26 jdbc[3]: 
/**/PreparedStatement prep36 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, message, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-20 04:45:26 jdbc[3]: 
/**/prep36.setString(1, "EquipmentMS");
2020-06-20 04:45:26 jdbc[3]: 
/**/prep36.setString(2, "INFO");
2020-06-20 04:45:26 jdbc[3]: 
/**/prep36.setString(3, "Exiting  class EquipmentController  with method getAllequipmentNameByCustomerId and argument[2]");
2020-06-20 04:45:26 jdbc[3]: 
/**/prep36.setNull(4, 12);
2020-06-20 04:45:26 jdbc[3]: 
/**/prep36.setString(5, "/api/equipments/2");
2020-06-20 04:45:26 jdbc[3]: 
/**/prep36.setString(6, "[Apple Keyboard]");
2020-06-20 04:45:26 jdbc[3]: 
/**/prep36.setString(7, "d9f1257df9164999");
2020-06-20 04:45:26 jdbc[3]: 
/**/prep36.setString(8, "2020-06-20T09:45:25.513Z");
2020-06-20 04:45:26 jdbc[3]: 
/**/prep36.setString(9, "d9f1257df9164999");
2020-06-20 04:45:26 jdbc[3]: 
/**/prep36.executeUpdate();
2020-06-20 04:45:26 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-20 04:45:26 lock: 3 shared read lock ok LOG_TBL 
2020-06-20 04:45:26 jdbc[3]: 
/*SQL l:159 #:1*/insert into log_tbl (id, application_name, level, message, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'EquipmentMS', 2: 'INFO', 3: 'Exiting  class EquipmentController  with method getAllequipmentNameByCustomerId and argument[2]', 4: NULL, 5: '/api/equipments/2', 6: '[Apple Keyboard]', 7: 'd9f1257df9164999', 8: '2020-06-20T09:45:25.513Z', 9: 'd9f1257df9164999'};
2020-06-20 04:45:26 jdbc[3]: 
/**/ResultSet rs78 = prep36.getGeneratedKeys();
2020-06-20 04:45:26 jdbc[3]: 
/**/rs78.next();
2020-06-20 04:45:26 jdbc[3]: 
/**/ResultSetMetaData rsMeta12 = rs78.getMetaData();
2020-06-20 04:45:26 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-20 04:45:26 jdbc[3]: 
/**/rsMeta12.getColumnCount();
2020-06-20 04:45:26 jdbc[3]: 
/**/rs78.getLong(1);
2020-06-20 04:45:26 jdbc[3]: 
/**/rs78.close();
2020-06-20 04:45:26 jdbc[3]: 
/**/prep36.getMaxRows();
2020-06-20 04:45:26 jdbc[3]: 
/**/prep36.getQueryTimeout();
2020-06-20 04:45:26 jdbc[3]: 
/**/prep36.close();
2020-06-20 04:45:26 jdbc[3]: 
/**/conn0.commit();
2020-06-20 04:45:26 lock: 3 shared read lock unlock LOG_TBL 
2020-06-20 04:45:26 jdbc[3]: 
/*SQL */COMMIT;
2020-06-20 04:45:26 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-20 04:45:26 jdbc[3]: 
/**/conn0.commit();
2020-06-20 04:45:26 jdbc[3]: 
/*SQL */COMMIT;
2020-06-20 04:45:26 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-20 04:45:26 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-20 04:45:26 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-20 04:45:28 jdbc[13]: 
/**/Statement stat6 = conn10.createStatement(1004, 1008);
2020-06-20 04:45:28 jdbc[13]: 
/**/stat6.setMaxRows(1000);
2020-06-20 04:45:28 jdbc[13]: 
/**/stat6.execute("SELECT * FROM LOG_TBL");
2020-06-20 04:45:28 jdbc[13]: 
/*SQL #:7*/SELECT * FROM LOG_TBL;
2020-06-20 04:45:28 jdbc[13]: 
/**/ResultSet rs79 = stat6.getResultSet();
2020-06-20 04:45:28 jdbc[13]: 
/**/ResultSetMetaData rsMeta13 = rs79.getMetaData();
2020-06-20 04:45:28 jdbc[13]: 
/**/conn10.getCatalog();
2020-06-20 04:45:28 jdbc[13]: 
/**/rsMeta13.getColumnCount();
2020-06-20 04:45:28 jdbc[13]: 
/**/rsMeta13.getColumnLabel(1);
2020-06-20 04:45:28 jdbc[13]: 
/**/rsMeta13.getColumnLabel(2);
2020-06-20 04:45:28 jdbc[13]: 
/**/rsMeta13.getColumnLabel(3);
2020-06-20 04:45:28 jdbc[13]: 
/**/rsMeta13.getColumnLabel(4);
2020-06-20 04:45:28 jdbc[13]: 
/**/rsMeta13.getColumnLabel(5);
2020-06-20 04:45:28 jdbc[13]: 
/**/rsMeta13.getColumnLabel(6);
2020-06-20 04:45:28 jdbc[13]: 
/**/rsMeta13.getColumnLabel(7);
2020-06-20 04:45:28 jdbc[13]: 
/**/rsMeta13.getColumnLabel(8);
2020-06-20 04:45:28 jdbc[13]: 
/**/rsMeta13.getColumnLabel(9);
2020-06-20 04:45:28 jdbc[13]: 
/**/rsMeta13.getColumnLabel(10);
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.next();
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.getString(1);
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.getString(2);
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.getString(3);
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.getString(4);
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.getString(5);
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.getString(6);
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.getString(7);
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.getString(8);
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.getString(9);
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.getString(10);
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.next();
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.getString(1);
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.getString(2);
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.getString(3);
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.getString(4);
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.getString(5);
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.getString(6);
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.getString(7);
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.getString(8);
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.getString(9);
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.getString(10);
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.next();
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.getString(1);
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.getString(2);
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.getString(3);
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.getString(4);
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.getString(5);
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.getString(6);
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.getString(7);
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.getString(8);
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.getString(9);
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.getString(10);
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.next();
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.getString(1);
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.getString(2);
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.getString(3);
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.getString(4);
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.getString(5);
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.getString(6);
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.getString(7);
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.getString(8);
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.getString(9);
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.getString(10);
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.next();
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.getString(1);
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.getString(2);
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.getString(3);
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.getString(4);
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.getString(5);
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.getString(6);
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.getString(7);
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.getString(8);
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.getString(9);
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.getString(10);
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.next();
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.getString(1);
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.getString(2);
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.getString(3);
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.getString(4);
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.getString(5);
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.getString(6);
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.getString(7);
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.getString(8);
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.getString(9);
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.getString(10);
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.next();
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.getString(1);
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.getString(2);
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.getString(3);
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.getString(4);
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.getString(5);
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.getString(6);
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.getString(7);
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.getString(8);
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.getString(9);
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.getString(10);
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.next();
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.getConcurrency();
2020-06-20 04:45:28 jdbc[13]: 
/**/DatabaseMetaData dbMeta7 = conn10.getMetaData();
2020-06-20 04:45:28 jdbc[13]: 
/**/dbMeta7.getTables(null, "PUBLIC", "LOG_TBL", new String[]{"TABLE"});
2020-06-20 04:45:28 jdbc[13]: 
/**/PreparedStatement prep37 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME");
2020-06-20 04:45:28 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@26ab0dca]
2020-06-20 04:45:28 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@26ab0dca
2020-06-20 04:45:28 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-20 04:45:28 jdbc[13]: Table      :     potential plan item cost 4,322 index meta
2020-06-20 04:45:28 jdbc[13]: Plan       :   best plan item cost 4,278.78 index meta
2020-06-20 04:45:28 jdbc[13]: Plan       : plan cost 4,279.78
2020-06-20 04:45:28 jdbc[13]: 
/**/prep37.setString(1, "%");
2020-06-20 04:45:28 jdbc[13]: 
/**/prep37.setString(2, "PUBLIC");
2020-06-20 04:45:28 jdbc[13]: 
/**/prep37.setString(3, "LOG_TBL");
2020-06-20 04:45:28 jdbc[13]: 
/**/prep37.setString(4, "\\");
2020-06-20 04:45:28 jdbc[13]: 
/**/prep37.setString(5, "TABLE");
2020-06-20 04:45:28 jdbc[13]: 
/**/ResultSet rs80 = prep37.executeQuery();
2020-06-20 04:45:28 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@26ab0dca]
2020-06-20 04:45:28 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@26ab0dca
2020-06-20 04:45:28 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-20 04:45:28 jdbc[13]: Table      :     potential plan item cost 1,324 index meta
2020-06-20 04:45:28 jdbc[13]: Plan       :   best plan item cost 1,271.04 index meta
2020-06-20 04:45:28 jdbc[13]: Plan       : plan cost 1,272.04
2020-06-20 04:45:28 jdbc[13]: 
/*SQL l:414 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME {1: '%', 2: 'PUBLIC', 3: 'LOG_TBL', 4: '\\', 5: 'TABLE'};
2020-06-20 04:45:28 jdbc[13]: 
/**/rs80.next();
2020-06-20 04:45:28 jdbc[13]: 
/**/rs80.getString("SQL");
2020-06-20 04:45:28 jdbc[13]: 
/**/rs80.getString("TABLE_NAME");
2020-06-20 04:45:28 jdbc[13]: 
/**/dbMeta7.getPrimaryKeys(null, "PUBLIC", "LOG_TBL");
2020-06-20 04:45:28 jdbc[13]: 
/**/PreparedStatement prep38 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME");
2020-06-20 04:45:28 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@e4cdcf4]
2020-06-20 04:45:28 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@e4cdcf4
2020-06-20 04:45:28 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-20 04:45:28 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-20 04:45:28 jdbc[13]: Plan       :   best plan item cost 321.44 index meta
2020-06-20 04:45:28 jdbc[13]: Plan       : plan cost 322.44
2020-06-20 04:45:28 jdbc[13]: 
/**/prep38.setString(1, "%");
2020-06-20 04:45:28 jdbc[13]: 
/**/prep38.setString(2, "\\");
2020-06-20 04:45:28 jdbc[13]: 
/**/prep38.setString(3, "PUBLIC");
2020-06-20 04:45:28 jdbc[13]: 
/**/prep38.setString(4, "\\");
2020-06-20 04:45:28 jdbc[13]: 
/**/prep38.setString(5, "LOG_TBL");
2020-06-20 04:45:28 jdbc[13]: 
/**/ResultSet rs81 = prep38.executeQuery();
2020-06-20 04:45:28 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@e4cdcf4]
2020-06-20 04:45:28 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@e4cdcf4
2020-06-20 04:45:28 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-20 04:45:28 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-20 04:45:28 jdbc[13]: Plan       :   best plan item cost 318.16 index meta
2020-06-20 04:45:28 jdbc[13]: Plan       : plan cost 319.16
2020-06-20 04:45:28 jdbc[13]: 
/*SQL l:316 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME {1: '%', 2: '\\', 3: 'PUBLIC', 4: '\\', 5: 'LOG_TBL'};
2020-06-20 04:45:28 jdbc[13]: 
/**/rs81.next();
2020-06-20 04:45:28 jdbc[13]: 
/**/rs81.getString("COLUMN_NAME");
2020-06-20 04:45:28 jdbc[13]: 
/**/rs81.next();
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.getType();
2020-06-20 04:45:28 jdbc[13]: 
/**/rs79.close();
2020-06-20 04:45:28 jdbc[13]: 
/**/stat6.close();
2020-06-20 04:45:34 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-20 04:45:34 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-20 04:45:34 jdbc[3]: 
/**/PreparedStatement prep39 = conn0.prepareStatement("select equipment0_.id as id1_0_, equipment0_.cust_id as cust_id2_0_, equipment0_.equipment_name as equipmen3_0_ from equipment_tbl equipment0_ where equipment0_.cust_id=?");
2020-06-20 04:45:34 jdbc[3]: 
/**/prep39.setLong(1, 3L);
2020-06-20 04:45:34 jdbc[3]: 
/**/ResultSet rs82 = prep39.executeQuery();
2020-06-20 04:45:34 jdbc[3]: 
/*SQL l:170*/select equipment0_.id as id1_0_, equipment0_.cust_id as cust_id2_0_, equipment0_.equipment_name as equipmen3_0_ from equipment_tbl equipment0_ where equipment0_.cust_id=? {1: 3};
2020-06-20 04:45:34 jdbc[3]: 
/**/rs82.next();
2020-06-20 04:45:34 jdbc[3]: 
/**/rs82.close();
2020-06-20 04:45:34 jdbc[3]: 
/**/prep39.getMaxRows();
2020-06-20 04:45:34 jdbc[3]: 
/**/prep39.getQueryTimeout();
2020-06-20 04:45:34 jdbc[3]: 
/**/prep39.close();
2020-06-20 04:45:34 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-20 04:45:34 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-20 04:45:34 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-20 04:45:35 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-20 04:45:35 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-20 04:45:35 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-20 04:45:35 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-20 04:45:35 jdbc[3]: 
/**/PreparedStatement prep40 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, message, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-20 04:45:35 jdbc[3]: 
/**/prep40.setString(1, "EquipmentMS");
2020-06-20 04:45:35 jdbc[3]: 
/**/prep40.setString(2, "INFO");
2020-06-20 04:45:35 jdbc[3]: 
/**/prep40.setString(3, "Exiting  class EquipmentController  with method getAllequipmentNameByCustomerId and argument[3]");
2020-06-20 04:45:35 jdbc[3]: 
/**/prep40.setNull(4, 12);
2020-06-20 04:45:35 jdbc[3]: 
/**/prep40.setString(5, "/api/equipments/3");
2020-06-20 04:45:35 jdbc[3]: 
/**/prep40.setString(6, "[]");
2020-06-20 04:45:35 jdbc[3]: 
/**/prep40.setString(7, "d3553e2a153c9b49");
2020-06-20 04:45:35 jdbc[3]: 
/**/prep40.setString(8, "2020-06-20T09:45:34.469Z");
2020-06-20 04:45:35 jdbc[3]: 
/**/prep40.setString(9, "d3553e2a153c9b49");
2020-06-20 04:45:35 jdbc[3]: 
/**/prep40.executeUpdate();
2020-06-20 04:45:35 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-20 04:45:35 lock: 3 shared read lock ok LOG_TBL 
2020-06-20 04:45:35 jdbc[3]: 
/*SQL l:159 #:1*/insert into log_tbl (id, application_name, level, message, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'EquipmentMS', 2: 'INFO', 3: 'Exiting  class EquipmentController  with method getAllequipmentNameByCustomerId and argument[3]', 4: NULL, 5: '/api/equipments/3', 6: '[]', 7: 'd3553e2a153c9b49', 8: '2020-06-20T09:45:34.469Z', 9: 'd3553e2a153c9b49'};
2020-06-20 04:45:35 jdbc[3]: 
/**/ResultSet rs83 = prep40.getGeneratedKeys();
2020-06-20 04:45:35 jdbc[3]: 
/**/rs83.next();
2020-06-20 04:45:35 jdbc[3]: 
/**/ResultSetMetaData rsMeta14 = rs83.getMetaData();
2020-06-20 04:45:35 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-20 04:45:35 jdbc[3]: 
/**/rsMeta14.getColumnCount();
2020-06-20 04:45:35 jdbc[3]: 
/**/rs83.getLong(1);
2020-06-20 04:45:35 jdbc[3]: 
/**/rs83.close();
2020-06-20 04:45:35 jdbc[3]: 
/**/prep40.getMaxRows();
2020-06-20 04:45:35 jdbc[3]: 
/**/prep40.getQueryTimeout();
2020-06-20 04:45:35 jdbc[3]: 
/**/prep40.close();
2020-06-20 04:45:35 jdbc[3]: 
/**/conn0.commit();
2020-06-20 04:45:35 lock: 3 shared read lock unlock LOG_TBL 
2020-06-20 04:45:35 jdbc[3]: 
/*SQL */COMMIT;
2020-06-20 04:45:35 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-20 04:45:35 jdbc[3]: 
/**/conn0.commit();
2020-06-20 04:45:35 jdbc[3]: 
/*SQL */COMMIT;
2020-06-20 04:45:35 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-20 04:45:35 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-20 04:45:35 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-20 04:45:37 jdbc[13]: 
/**/Statement stat7 = conn10.createStatement(1004, 1008);
2020-06-20 04:45:37 jdbc[13]: 
/**/stat7.setMaxRows(1000);
2020-06-20 04:45:37 jdbc[13]: 
/**/stat7.execute("SELECT * FROM LOG_TBL");
2020-06-20 04:45:37 jdbc[13]: 
/*SQL #:8*/SELECT * FROM LOG_TBL;
2020-06-20 04:45:37 jdbc[13]: 
/**/ResultSet rs84 = stat7.getResultSet();
2020-06-20 04:45:37 jdbc[13]: 
/**/ResultSetMetaData rsMeta15 = rs84.getMetaData();
2020-06-20 04:45:37 jdbc[13]: 
/**/conn10.getCatalog();
2020-06-20 04:45:37 jdbc[13]: 
/**/rsMeta15.getColumnCount();
2020-06-20 04:45:37 jdbc[13]: 
/**/rsMeta15.getColumnLabel(1);
2020-06-20 04:45:37 jdbc[13]: 
/**/rsMeta15.getColumnLabel(2);
2020-06-20 04:45:37 jdbc[13]: 
/**/rsMeta15.getColumnLabel(3);
2020-06-20 04:45:37 jdbc[13]: 
/**/rsMeta15.getColumnLabel(4);
2020-06-20 04:45:37 jdbc[13]: 
/**/rsMeta15.getColumnLabel(5);
2020-06-20 04:45:37 jdbc[13]: 
/**/rsMeta15.getColumnLabel(6);
2020-06-20 04:45:37 jdbc[13]: 
/**/rsMeta15.getColumnLabel(7);
2020-06-20 04:45:37 jdbc[13]: 
/**/rsMeta15.getColumnLabel(8);
2020-06-20 04:45:37 jdbc[13]: 
/**/rsMeta15.getColumnLabel(9);
2020-06-20 04:45:37 jdbc[13]: 
/**/rsMeta15.getColumnLabel(10);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.next();
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(1);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(2);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(3);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(4);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(5);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(6);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(7);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(8);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(9);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(10);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.next();
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(1);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(2);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(3);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(4);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(5);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(6);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(7);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(8);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(9);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(10);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.next();
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(1);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(2);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(3);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(4);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(5);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(6);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(7);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(8);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(9);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(10);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.next();
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(1);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(2);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(3);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(4);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(5);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(6);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(7);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(8);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(9);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(10);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.next();
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(1);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(2);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(3);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(4);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(5);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(6);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(7);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(8);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(9);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(10);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.next();
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(1);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(2);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(3);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(4);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(5);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(6);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(7);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(8);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(9);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(10);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.next();
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(1);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(2);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(3);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(4);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(5);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(6);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(7);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(8);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(9);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(10);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.next();
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(1);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(2);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(3);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(4);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(5);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(6);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(7);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(8);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(9);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getString(10);
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.next();
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getConcurrency();
2020-06-20 04:45:37 jdbc[13]: 
/**/DatabaseMetaData dbMeta8 = conn10.getMetaData();
2020-06-20 04:45:37 jdbc[13]: 
/**/dbMeta8.getTables(null, "PUBLIC", "LOG_TBL", new String[]{"TABLE"});
2020-06-20 04:45:37 jdbc[13]: 
/**/PreparedStatement prep41 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME");
2020-06-20 04:45:37 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@26ab0dca]
2020-06-20 04:45:37 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@26ab0dca
2020-06-20 04:45:37 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-20 04:45:37 jdbc[13]: Table      :     potential plan item cost 4,322 index meta
2020-06-20 04:45:37 jdbc[13]: Plan       :   best plan item cost 4,278.78 index meta
2020-06-20 04:45:37 jdbc[13]: Plan       : plan cost 4,279.78
2020-06-20 04:45:37 jdbc[13]: 
/**/prep41.setString(1, "%");
2020-06-20 04:45:37 jdbc[13]: 
/**/prep41.setString(2, "PUBLIC");
2020-06-20 04:45:37 jdbc[13]: 
/**/prep41.setString(3, "LOG_TBL");
2020-06-20 04:45:37 jdbc[13]: 
/**/prep41.setString(4, "\\");
2020-06-20 04:45:37 jdbc[13]: 
/**/prep41.setString(5, "TABLE");
2020-06-20 04:45:37 jdbc[13]: 
/**/ResultSet rs85 = prep41.executeQuery();
2020-06-20 04:45:37 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@26ab0dca]
2020-06-20 04:45:37 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@26ab0dca
2020-06-20 04:45:37 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-20 04:45:37 jdbc[13]: Table      :     potential plan item cost 1,324 index meta
2020-06-20 04:45:37 jdbc[13]: Plan       :   best plan item cost 1,271.04 index meta
2020-06-20 04:45:37 jdbc[13]: Plan       : plan cost 1,272.04
2020-06-20 04:45:37 jdbc[13]: 
/*SQL l:414 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME {1: '%', 2: 'PUBLIC', 3: 'LOG_TBL', 4: '\\', 5: 'TABLE'};
2020-06-20 04:45:37 jdbc[13]: 
/**/rs85.next();
2020-06-20 04:45:37 jdbc[13]: 
/**/rs85.getString("SQL");
2020-06-20 04:45:37 jdbc[13]: 
/**/rs85.getString("TABLE_NAME");
2020-06-20 04:45:37 jdbc[13]: 
/**/dbMeta8.getPrimaryKeys(null, "PUBLIC", "LOG_TBL");
2020-06-20 04:45:37 jdbc[13]: 
/**/PreparedStatement prep42 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME");
2020-06-20 04:45:37 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@e4cdcf4]
2020-06-20 04:45:37 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@e4cdcf4
2020-06-20 04:45:37 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-20 04:45:37 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-20 04:45:37 jdbc[13]: Plan       :   best plan item cost 321.44 index meta
2020-06-20 04:45:37 jdbc[13]: Plan       : plan cost 322.44
2020-06-20 04:45:37 jdbc[13]: 
/**/prep42.setString(1, "%");
2020-06-20 04:45:37 jdbc[13]: 
/**/prep42.setString(2, "\\");
2020-06-20 04:45:37 jdbc[13]: 
/**/prep42.setString(3, "PUBLIC");
2020-06-20 04:45:37 jdbc[13]: 
/**/prep42.setString(4, "\\");
2020-06-20 04:45:37 jdbc[13]: 
/**/prep42.setString(5, "LOG_TBL");
2020-06-20 04:45:37 jdbc[13]: 
/**/ResultSet rs86 = prep42.executeQuery();
2020-06-20 04:45:37 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@e4cdcf4]
2020-06-20 04:45:37 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@e4cdcf4
2020-06-20 04:45:37 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-20 04:45:37 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-20 04:45:37 jdbc[13]: Plan       :   best plan item cost 318.16 index meta
2020-06-20 04:45:37 jdbc[13]: Plan       : plan cost 319.16
2020-06-20 04:45:37 jdbc[13]: 
/*SQL l:316 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME {1: '%', 2: '\\', 3: 'PUBLIC', 4: '\\', 5: 'LOG_TBL'};
2020-06-20 04:45:37 jdbc[13]: 
/**/rs86.next();
2020-06-20 04:45:37 jdbc[13]: 
/**/rs86.getString("COLUMN_NAME");
2020-06-20 04:45:37 jdbc[13]: 
/**/rs86.next();
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.getType();
2020-06-20 04:45:37 jdbc[13]: 
/**/rs84.close();
2020-06-20 04:45:37 jdbc[13]: 
/**/stat7.close();
2020-06-20 04:45:44 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-20 04:45:44 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-20 04:45:44 jdbc[3]: 
/**/PreparedStatement prep43 = conn0.prepareStatement("select equipment0_.id as id1_0_, equipment0_.cust_id as cust_id2_0_, equipment0_.equipment_name as equipmen3_0_ from equipment_tbl equipment0_ where equipment0_.cust_id=?");
2020-06-20 04:45:44 jdbc[3]: 
/**/prep43.setLong(1, 11L);
2020-06-20 04:45:44 jdbc[3]: 
/**/ResultSet rs87 = prep43.executeQuery();
2020-06-20 04:45:44 jdbc[3]: 
/*SQL l:170*/select equipment0_.id as id1_0_, equipment0_.cust_id as cust_id2_0_, equipment0_.equipment_name as equipmen3_0_ from equipment_tbl equipment0_ where equipment0_.cust_id=? {1: 11};
2020-06-20 04:45:44 jdbc[3]: 
/**/rs87.next();
2020-06-20 04:45:44 jdbc[3]: 
/**/rs87.close();
2020-06-20 04:45:44 jdbc[3]: 
/**/prep43.getMaxRows();
2020-06-20 04:45:44 jdbc[3]: 
/**/prep43.getQueryTimeout();
2020-06-20 04:45:44 jdbc[3]: 
/**/prep43.close();
2020-06-20 04:45:44 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-20 04:45:44 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-20 04:45:44 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-20 04:45:45 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-20 04:45:45 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-20 04:45:45 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-20 04:45:45 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-20 04:45:45 jdbc[3]: 
/**/PreparedStatement prep44 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, message, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-20 04:45:45 jdbc[3]: 
/**/prep44.setString(1, "EquipmentMS");
2020-06-20 04:45:45 jdbc[3]: 
/**/prep44.setString(2, "INFO");
2020-06-20 04:45:45 jdbc[3]: 
/**/prep44.setString(3, "Exiting  class EquipmentController  with method getAllequipmentNameByCustomerId and argument[11]");
2020-06-20 04:45:45 jdbc[3]: 
/**/prep44.setNull(4, 12);
2020-06-20 04:45:45 jdbc[3]: 
/**/prep44.setString(5, "/api/equipments/11");
2020-06-20 04:45:45 jdbc[3]: 
/**/prep44.setString(6, "[]");
2020-06-20 04:45:45 jdbc[3]: 
/**/prep44.setString(7, "657bab8ba914a73f");
2020-06-20 04:45:45 jdbc[3]: 
/**/prep44.setString(8, "2020-06-20T09:45:44.502Z");
2020-06-20 04:45:45 jdbc[3]: 
/**/prep44.setString(9, "657bab8ba914a73f");
2020-06-20 04:45:45 jdbc[3]: 
/**/prep44.executeUpdate();
2020-06-20 04:45:45 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-20 04:45:45 lock: 3 shared read lock ok LOG_TBL 
2020-06-20 04:45:45 jdbc[3]: 
/*SQL l:159 #:1*/insert into log_tbl (id, application_name, level, message, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'EquipmentMS', 2: 'INFO', 3: 'Exiting  class EquipmentController  with method getAllequipmentNameByCustomerId and argument[11]', 4: NULL, 5: '/api/equipments/11', 6: '[]', 7: '657bab8ba914a73f', 8: '2020-06-20T09:45:44.502Z', 9: '657bab8ba914a73f'};
2020-06-20 04:45:45 jdbc[3]: 
/**/ResultSet rs88 = prep44.getGeneratedKeys();
2020-06-20 04:45:45 jdbc[3]: 
/**/rs88.next();
2020-06-20 04:45:45 jdbc[3]: 
/**/ResultSetMetaData rsMeta16 = rs88.getMetaData();
2020-06-20 04:45:45 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-20 04:45:45 jdbc[3]: 
/**/rsMeta16.getColumnCount();
2020-06-20 04:45:45 jdbc[3]: 
/**/rs88.getLong(1);
2020-06-20 04:45:45 jdbc[3]: 
/**/rs88.close();
2020-06-20 04:45:45 jdbc[3]: 
/**/prep44.getMaxRows();
2020-06-20 04:45:45 jdbc[3]: 
/**/prep44.getQueryTimeout();
2020-06-20 04:45:45 jdbc[3]: 
/**/prep44.close();
2020-06-20 04:45:45 jdbc[3]: 
/**/conn0.commit();
2020-06-20 04:45:45 lock: 3 shared read lock unlock LOG_TBL 
2020-06-20 04:45:45 jdbc[3]: 
/*SQL */COMMIT;
2020-06-20 04:45:45 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-20 04:45:45 jdbc[3]: 
/**/conn0.commit();
2020-06-20 04:45:45 jdbc[3]: 
/*SQL */COMMIT;
2020-06-20 04:45:45 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-20 04:45:45 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-20 04:45:45 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-20 04:45:50 jdbc[13]: 
/**/Statement stat8 = conn10.createStatement(1004, 1008);
2020-06-20 04:45:50 jdbc[13]: 
/**/stat8.setMaxRows(1000);
2020-06-20 04:45:50 jdbc[13]: 
/**/stat8.execute("SELECT * FROM LOG_TBL");
2020-06-20 04:45:50 jdbc[13]: 
/*SQL #:9*/SELECT * FROM LOG_TBL;
2020-06-20 04:45:50 jdbc[13]: 
/**/ResultSet rs89 = stat8.getResultSet();
2020-06-20 04:45:50 jdbc[13]: 
/**/ResultSetMetaData rsMeta17 = rs89.getMetaData();
2020-06-20 04:45:50 jdbc[13]: 
/**/conn10.getCatalog();
2020-06-20 04:45:50 jdbc[13]: 
/**/rsMeta17.getColumnCount();
2020-06-20 04:45:50 jdbc[13]: 
/**/rsMeta17.getColumnLabel(1);
2020-06-20 04:45:50 jdbc[13]: 
/**/rsMeta17.getColumnLabel(2);
2020-06-20 04:45:50 jdbc[13]: 
/**/rsMeta17.getColumnLabel(3);
2020-06-20 04:45:50 jdbc[13]: 
/**/rsMeta17.getColumnLabel(4);
2020-06-20 04:45:50 jdbc[13]: 
/**/rsMeta17.getColumnLabel(5);
2020-06-20 04:45:50 jdbc[13]: 
/**/rsMeta17.getColumnLabel(6);
2020-06-20 04:45:50 jdbc[13]: 
/**/rsMeta17.getColumnLabel(7);
2020-06-20 04:45:50 jdbc[13]: 
/**/rsMeta17.getColumnLabel(8);
2020-06-20 04:45:50 jdbc[13]: 
/**/rsMeta17.getColumnLabel(9);
2020-06-20 04:45:50 jdbc[13]: 
/**/rsMeta17.getColumnLabel(10);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.next();
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(1);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(2);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(3);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(4);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(5);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(6);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(7);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(8);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(9);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(10);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.next();
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(1);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(2);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(3);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(4);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(5);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(6);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(7);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(8);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(9);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(10);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.next();
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(1);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(2);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(3);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(4);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(5);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(6);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(7);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(8);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(9);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(10);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.next();
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(1);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(2);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(3);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(4);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(5);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(6);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(7);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(8);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(9);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(10);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.next();
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(1);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(2);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(3);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(4);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(5);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(6);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(7);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(8);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(9);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(10);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.next();
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(1);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(2);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(3);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(4);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(5);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(6);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(7);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(8);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(9);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(10);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.next();
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(1);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(2);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(3);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(4);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(5);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(6);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(7);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(8);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(9);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(10);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.next();
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(1);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(2);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(3);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(4);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(5);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(6);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(7);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(8);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(9);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(10);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.next();
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(1);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(2);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(3);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(4);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(5);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(6);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(7);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(8);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(9);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getString(10);
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.next();
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getConcurrency();
2020-06-20 04:45:50 jdbc[13]: 
/**/DatabaseMetaData dbMeta9 = conn10.getMetaData();
2020-06-20 04:45:50 jdbc[13]: 
/**/dbMeta9.getTables(null, "PUBLIC", "LOG_TBL", new String[]{"TABLE"});
2020-06-20 04:45:50 jdbc[13]: 
/**/PreparedStatement prep45 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME");
2020-06-20 04:45:50 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@26ab0dca]
2020-06-20 04:45:50 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@26ab0dca
2020-06-20 04:45:50 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-20 04:45:50 jdbc[13]: Table      :     potential plan item cost 4,322 index meta
2020-06-20 04:45:50 jdbc[13]: Plan       :   best plan item cost 4,278.78 index meta
2020-06-20 04:45:50 jdbc[13]: Plan       : plan cost 4,279.78
2020-06-20 04:45:50 jdbc[13]: 
/**/prep45.setString(1, "%");
2020-06-20 04:45:50 jdbc[13]: 
/**/prep45.setString(2, "PUBLIC");
2020-06-20 04:45:50 jdbc[13]: 
/**/prep45.setString(3, "LOG_TBL");
2020-06-20 04:45:50 jdbc[13]: 
/**/prep45.setString(4, "\\");
2020-06-20 04:45:50 jdbc[13]: 
/**/prep45.setString(5, "TABLE");
2020-06-20 04:45:50 jdbc[13]: 
/**/ResultSet rs90 = prep45.executeQuery();
2020-06-20 04:45:50 jdbc[13]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@26ab0dca]
2020-06-20 04:45:50 jdbc[13]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@26ab0dca
2020-06-20 04:45:50 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-20 04:45:50 jdbc[13]: Table      :     potential plan item cost 1,324 index meta
2020-06-20 04:45:50 jdbc[13]: Plan       :   best plan item cost 1,271.04 index meta
2020-06-20 04:45:50 jdbc[13]: Plan       : plan cost 1,272.04
2020-06-20 04:45:50 jdbc[13]: 
/*SQL l:414 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4 AND TABLE_TYPE IN(?5) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME {1: '%', 2: 'PUBLIC', 3: 'LOG_TBL', 4: '\\', 5: 'TABLE'};
2020-06-20 04:45:50 jdbc[13]: 
/**/rs90.next();
2020-06-20 04:45:50 jdbc[13]: 
/**/rs90.getString("SQL");
2020-06-20 04:45:50 jdbc[13]: 
/**/rs90.getString("TABLE_NAME");
2020-06-20 04:45:50 jdbc[13]: 
/**/dbMeta9.getPrimaryKeys(null, "PUBLIC", "LOG_TBL");
2020-06-20 04:45:50 jdbc[13]: 
/**/PreparedStatement prep46 = conn10.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME");
2020-06-20 04:45:50 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@e4cdcf4]
2020-06-20 04:45:50 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@e4cdcf4
2020-06-20 04:45:50 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-20 04:45:50 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-20 04:45:50 jdbc[13]: Plan       :   best plan item cost 321.44 index meta
2020-06-20 04:45:50 jdbc[13]: Plan       : plan cost 322.44
2020-06-20 04:45:50 jdbc[13]: 
/**/prep46.setString(1, "%");
2020-06-20 04:45:50 jdbc[13]: 
/**/prep46.setString(2, "\\");
2020-06-20 04:45:50 jdbc[13]: 
/**/prep46.setString(3, "PUBLIC");
2020-06-20 04:45:50 jdbc[13]: 
/**/prep46.setString(4, "\\");
2020-06-20 04:45:50 jdbc[13]: 
/**/prep46.setString(5, "LOG_TBL");
2020-06-20 04:45:50 jdbc[13]: 
/**/ResultSet rs91 = prep46.executeQuery();
2020-06-20 04:45:50 jdbc[13]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@e4cdcf4]
2020-06-20 04:45:50 jdbc[13]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@e4cdcf4
2020-06-20 04:45:50 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2020-06-20 04:45:50 jdbc[13]: Table      :     potential plan item cost 328 index meta
2020-06-20 04:45:50 jdbc[13]: Plan       :   best plan item cost 318.16 index meta
2020-06-20 04:45:50 jdbc[13]: Plan       : plan cost 319.16
2020-06-20 04:45:50 jdbc[13]: 
/*SQL l:316 #:1*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME {1: '%', 2: '\\', 3: 'PUBLIC', 4: '\\', 5: 'LOG_TBL'};
2020-06-20 04:45:50 jdbc[13]: 
/**/rs91.next();
2020-06-20 04:45:50 jdbc[13]: 
/**/rs91.getString("COLUMN_NAME");
2020-06-20 04:45:50 jdbc[13]: 
/**/rs91.next();
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.getType();
2020-06-20 04:45:50 jdbc[13]: 
/**/rs89.close();
2020-06-20 04:45:50 jdbc[13]: 
/**/stat8.close();
2020-06-20 04:46:46 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-20 04:46:46 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-20 04:46:46 jdbc[3]: 
/**/PreparedStatement prep47 = conn0.prepareStatement("select equipment0_.id as id1_0_, equipment0_.cust_id as cust_id2_0_, equipment0_.equipment_name as equipmen3_0_ from equipment_tbl equipment0_ where equipment0_.cust_id=?");
2020-06-20 04:46:46 jdbc[3]: 
/**/prep47.setLong(1, 1L);
2020-06-20 04:46:46 jdbc[3]: 
/**/ResultSet rs92 = prep47.executeQuery();
2020-06-20 04:46:46 jdbc[3]: 
/*SQL l:170 #:3*/select equipment0_.id as id1_0_, equipment0_.cust_id as cust_id2_0_, equipment0_.equipment_name as equipmen3_0_ from equipment_tbl equipment0_ where equipment0_.cust_id=? {1: 1};
2020-06-20 04:46:46 jdbc[3]: 
/**/rs92.next();
2020-06-20 04:46:46 jdbc[3]: 
/**/rs92.getLong("id1_0_");
2020-06-20 04:46:46 jdbc[3]: 
/**/rs92.wasNull();
2020-06-20 04:46:46 jdbc[3]: 
/**/rs92.getLong("cust_id2_0_");
2020-06-20 04:46:46 jdbc[3]: 
/**/rs92.wasNull();
2020-06-20 04:46:46 jdbc[3]: 
/**/rs92.getString("equipmen3_0_");
2020-06-20 04:46:46 jdbc[3]: 
/**/rs92.wasNull();
2020-06-20 04:46:46 jdbc[3]: 
/**/rs92.next();
2020-06-20 04:46:46 jdbc[3]: 
/**/rs92.getLong("id1_0_");
2020-06-20 04:46:46 jdbc[3]: 
/**/rs92.wasNull();
2020-06-20 04:46:46 jdbc[3]: 
/**/rs92.getLong("cust_id2_0_");
2020-06-20 04:46:46 jdbc[3]: 
/**/rs92.wasNull();
2020-06-20 04:46:46 jdbc[3]: 
/**/rs92.getString("equipmen3_0_");
2020-06-20 04:46:46 jdbc[3]: 
/**/rs92.wasNull();
2020-06-20 04:46:46 jdbc[3]: 
/**/rs92.next();
2020-06-20 04:46:46 jdbc[3]: 
/**/rs92.getLong("id1_0_");
2020-06-20 04:46:46 jdbc[3]: 
/**/rs92.wasNull();
2020-06-20 04:46:46 jdbc[3]: 
/**/rs92.getLong("cust_id2_0_");
2020-06-20 04:46:46 jdbc[3]: 
/**/rs92.wasNull();
2020-06-20 04:46:46 jdbc[3]: 
/**/rs92.getString("equipmen3_0_");
2020-06-20 04:46:46 jdbc[3]: 
/**/rs92.wasNull();
2020-06-20 04:46:46 jdbc[3]: 
/**/rs92.next();
2020-06-20 04:46:46 jdbc[3]: 
/**/rs92.close();
2020-06-20 04:46:46 jdbc[3]: 
/**/prep47.getMaxRows();
2020-06-20 04:46:46 jdbc[3]: 
/**/prep47.getQueryTimeout();
2020-06-20 04:46:46 jdbc[3]: 
/**/prep47.close();
2020-06-20 04:46:46 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-20 04:46:46 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-20 04:46:46 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-20 04:46:47 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-20 04:46:47 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-20 04:46:47 jdbc[3]: 
/**/PreparedStatement prep48 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, message, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-20 04:46:47 jdbc[3]: 
/**/prep48.setString(1, "EquipmentMS");
2020-06-20 04:46:47 jdbc[3]: 
/**/prep48.setString(2, "INFO");
2020-06-20 04:46:47 jdbc[3]: 
/**/prep48.setString(3, "Exiting  class EquipmentController  with method getAllequipmentNameByCustomerId and argument[1]");
2020-06-20 04:46:47 jdbc[3]: 
/**/prep48.setString(4, "018ee784d1cf2a0c");
2020-06-20 04:46:47 jdbc[3]: 
/**/prep48.setString(5, "/api/equipments/1");
2020-06-20 04:46:47 jdbc[3]: 
/**/prep48.setString(6, "[Mouse, Keyboard, guitar]");
2020-06-20 04:46:47 jdbc[3]: 
/**/prep48.setString(7, "ca75247bd8ce638b");
2020-06-20 04:46:47 jdbc[3]: 
/**/prep48.setString(8, "2020-06-20T09:46:46.918Z");
2020-06-20 04:46:47 jdbc[3]: 
/**/prep48.setString(9, "5ee10daaba57214c");
2020-06-20 04:46:47 jdbc[3]: 
/**/prep48.executeUpdate();
2020-06-20 04:46:47 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-20 04:46:47 lock: 3 shared read lock ok LOG_TBL 
2020-06-20 04:46:47 jdbc[3]: 
/*SQL l:159 #:1*/insert into log_tbl (id, application_name, level, message, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'EquipmentMS', 2: 'INFO', 3: 'Exiting  class EquipmentController  with method getAllequipmentNameByCustomerId and argument[1]', 4: '018ee784d1cf2a0c', 5: '/api/equipments/1', 6: '[Mouse, Keyboard, guitar]', 7: 'ca75247bd8ce638b', 8: '2020-06-20T09:46:46.918Z', 9: '5ee10daaba57214c'};
2020-06-20 04:46:47 jdbc[3]: 
/**/ResultSet rs93 = prep48.getGeneratedKeys();
2020-06-20 04:46:47 jdbc[3]: 
/**/rs93.next();
2020-06-20 04:46:47 jdbc[3]: 
/**/ResultSetMetaData rsMeta18 = rs93.getMetaData();
2020-06-20 04:46:47 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-20 04:46:47 jdbc[3]: 
/**/rsMeta18.getColumnCount();
2020-06-20 04:46:47 jdbc[3]: 
/**/rs93.getLong(1);
2020-06-20 04:46:47 jdbc[3]: 
/**/rs93.close();
2020-06-20 04:46:47 jdbc[3]: 
/**/prep48.getMaxRows();
2020-06-20 04:46:47 jdbc[3]: 
/**/prep48.getQueryTimeout();
2020-06-20 04:46:47 jdbc[3]: 
/**/prep48.close();
2020-06-20 04:46:47 jdbc[3]: 
/**/conn0.commit();
2020-06-20 04:46:47 lock: 3 shared read lock unlock LOG_TBL 
2020-06-20 04:46:47 jdbc[3]: 
/*SQL */COMMIT;
2020-06-20 04:46:47 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-20 04:46:47 jdbc[3]: 
/**/conn0.commit();
2020-06-20 04:46:47 jdbc[3]: 
/*SQL */COMMIT;
2020-06-20 04:46:47 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-20 04:46:47 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-20 04:46:47 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-20 04:46:49 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-20 04:46:49 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-20 04:46:49 jdbc[3]: 
/**/PreparedStatement prep49 = conn0.prepareStatement("select equipment0_.id as id1_0_, equipment0_.cust_id as cust_id2_0_, equipment0_.equipment_name as equipmen3_0_ from equipment_tbl equipment0_ where equipment0_.cust_id=?");
2020-06-20 04:46:49 jdbc[3]: 
/**/prep49.setLong(1, 2L);
2020-06-20 04:46:49 jdbc[3]: 
/**/ResultSet rs94 = prep49.executeQuery();
2020-06-20 04:46:49 jdbc[3]: 
/*SQL l:170 #:1*/select equipment0_.id as id1_0_, equipment0_.cust_id as cust_id2_0_, equipment0_.equipment_name as equipmen3_0_ from equipment_tbl equipment0_ where equipment0_.cust_id=? {1: 2};
2020-06-20 04:46:49 jdbc[3]: 
/**/rs94.next();
2020-06-20 04:46:49 jdbc[3]: 
/**/rs94.getLong("id1_0_");
2020-06-20 04:46:49 jdbc[3]: 
/**/rs94.wasNull();
2020-06-20 04:46:49 jdbc[3]: 
/**/rs94.getLong("cust_id2_0_");
2020-06-20 04:46:49 jdbc[3]: 
/**/rs94.wasNull();
2020-06-20 04:46:49 jdbc[3]: 
/**/rs94.getString("equipmen3_0_");
2020-06-20 04:46:49 jdbc[3]: 
/**/rs94.wasNull();
2020-06-20 04:46:49 jdbc[3]: 
/**/rs94.next();
2020-06-20 04:46:49 jdbc[3]: 
/**/rs94.close();
2020-06-20 04:46:49 jdbc[3]: 
/**/prep49.getMaxRows();
2020-06-20 04:46:49 jdbc[3]: 
/**/prep49.getQueryTimeout();
2020-06-20 04:46:49 jdbc[3]: 
/**/prep49.close();
2020-06-20 04:46:49 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-20 04:46:49 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-20 04:46:49 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-20 04:46:50 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-20 04:46:50 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-20 04:46:50 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-20 04:46:50 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-20 04:46:50 jdbc[3]: 
/**/PreparedStatement prep50 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, message, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-20 04:46:50 jdbc[3]: 
/**/prep50.setString(1, "EquipmentMS");
2020-06-20 04:46:50 jdbc[3]: 
/**/prep50.setString(2, "INFO");
2020-06-20 04:46:50 jdbc[3]: 
/**/prep50.setString(3, "Exiting  class EquipmentController  with method getAllequipmentNameByCustomerId and argument[2]");
2020-06-20 04:46:50 jdbc[3]: 
/**/prep50.setString(4, "020b724cbc15eb56");
2020-06-20 04:46:50 jdbc[3]: 
/**/prep50.setString(5, "/api/equipments/2");
2020-06-20 04:46:50 jdbc[3]: 
/**/prep50.setString(6, "[Apple Keyboard]");
2020-06-20 04:46:50 jdbc[3]: 
/**/prep50.setString(7, "0d706b64a5197215");
2020-06-20 04:46:50 jdbc[3]: 
/**/prep50.setString(8, "2020-06-20T09:46:49.474Z");
2020-06-20 04:46:50 jdbc[3]: 
/**/prep50.setString(9, "e8f53ddef32c72f9");
2020-06-20 04:46:50 jdbc[3]: 
/**/prep50.executeUpdate();
2020-06-20 04:46:50 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-20 04:46:50 lock: 3 shared read lock ok LOG_TBL 
2020-06-20 04:46:50 jdbc[3]: 
/*SQL l:159 #:1*/insert into log_tbl (id, application_name, level, message, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'EquipmentMS', 2: 'INFO', 3: 'Exiting  class EquipmentController  with method getAllequipmentNameByCustomerId and argument[2]', 4: '020b724cbc15eb56', 5: '/api/equipments/2', 6: '[Apple Keyboard]', 7: '0d706b64a5197215', 8: '2020-06-20T09:46:49.474Z', 9: 'e8f53ddef32c72f9'};
2020-06-20 04:46:50 jdbc[3]: 
/**/ResultSet rs95 = prep50.getGeneratedKeys();
2020-06-20 04:46:50 jdbc[3]: 
/**/rs95.next();
2020-06-20 04:46:50 jdbc[3]: 
/**/ResultSetMetaData rsMeta19 = rs95.getMetaData();
2020-06-20 04:46:50 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-20 04:46:50 jdbc[3]: 
/**/rsMeta19.getColumnCount();
2020-06-20 04:46:50 jdbc[3]: 
/**/rs95.getLong(1);
2020-06-20 04:46:50 jdbc[3]: 
/**/rs95.close();
2020-06-20 04:46:50 jdbc[3]: 
/**/prep50.getMaxRows();
2020-06-20 04:46:50 jdbc[3]: 
/**/prep50.getQueryTimeout();
2020-06-20 04:46:50 jdbc[3]: 
/**/prep50.close();
2020-06-20 04:46:50 jdbc[3]: 
/**/conn0.commit();
2020-06-20 04:46:50 lock: 3 shared read lock unlock LOG_TBL 
2020-06-20 04:46:50 jdbc[3]: 
/*SQL */COMMIT;
2020-06-20 04:46:50 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-20 04:46:50 jdbc[3]: 
/**/conn0.commit();
2020-06-20 04:46:50 jdbc[3]: 
/*SQL */COMMIT;
2020-06-20 04:46:50 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-20 04:46:50 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-20 04:46:50 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-20 04:47:25 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-20 04:47:25 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-20 04:47:25 jdbc[3]: 
/**/PreparedStatement prep51 = conn0.prepareStatement("select equipment0_.id as id1_0_, equipment0_.cust_id as cust_id2_0_, equipment0_.equipment_name as equipmen3_0_ from equipment_tbl equipment0_ where equipment0_.cust_id=?");
2020-06-20 04:47:25 jdbc[3]: 
/**/prep51.setLong(1, 3L);
2020-06-20 04:47:25 jdbc[3]: 
/**/ResultSet rs96 = prep51.executeQuery();
2020-06-20 04:47:25 jdbc[3]: 
/*SQL l:170*/select equipment0_.id as id1_0_, equipment0_.cust_id as cust_id2_0_, equipment0_.equipment_name as equipmen3_0_ from equipment_tbl equipment0_ where equipment0_.cust_id=? {1: 3};
2020-06-20 04:47:25 jdbc[3]: 
/**/rs96.next();
2020-06-20 04:47:25 jdbc[3]: 
/**/rs96.close();
2020-06-20 04:47:25 jdbc[3]: 
/**/prep51.getMaxRows();
2020-06-20 04:47:25 jdbc[3]: 
/**/prep51.getQueryTimeout();
2020-06-20 04:47:25 jdbc[3]: 
/**/prep51.close();
2020-06-20 04:47:25 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-20 04:47:25 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-20 04:47:25 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-20 04:47:26 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-20 04:47:26 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2020-06-20 04:47:26 jdbc[3]: 
/**/PreparedStatement prep52 = conn0.prepareStatement("insert into log_tbl (id, application_name, level, message, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?, ?)", 1);;
2020-06-20 04:47:26 jdbc[3]: 
/**/prep52.setString(1, "EquipmentMS");
2020-06-20 04:47:26 jdbc[3]: 
/**/prep52.setString(2, "INFO");
2020-06-20 04:47:26 jdbc[3]: 
/**/prep52.setString(3, "Exiting  class EquipmentController  with method getAllequipmentNameByCustomerId and argument[3]");
2020-06-20 04:47:26 jdbc[3]: 
/**/prep52.setString(4, "5161c290e874b581");
2020-06-20 04:47:26 jdbc[3]: 
/**/prep52.setString(5, "/api/equipments/3");
2020-06-20 04:47:26 jdbc[3]: 
/**/prep52.setString(6, "[]");
2020-06-20 04:47:26 jdbc[3]: 
/**/prep52.setString(7, "42b8d21640809f0f");
2020-06-20 04:47:26 jdbc[3]: 
/**/prep52.setString(8, "2020-06-20T09:47:25.659Z");
2020-06-20 04:47:26 jdbc[3]: 
/**/prep52.setString(9, "bb957b9011790f64");
2020-06-20 04:47:26 jdbc[3]: 
/**/prep52.executeUpdate();
2020-06-20 04:47:26 lock: 3 shared read lock requesting for LOG_TBL 
2020-06-20 04:47:26 lock: 3 shared read lock ok LOG_TBL 
2020-06-20 04:47:26 jdbc[3]: 
/*SQL l:159 #:1*/insert into log_tbl (id, application_name, level, message, parent_span_id, request, response, span_id, time, trace_id) values (null, ?, ?, ?, ?, ?, ?, ?, ?, ?) {1: 'EquipmentMS', 2: 'INFO', 3: 'Exiting  class EquipmentController  with method getAllequipmentNameByCustomerId and argument[3]', 4: '5161c290e874b581', 5: '/api/equipments/3', 6: '[]', 7: '42b8d21640809f0f', 8: '2020-06-20T09:47:25.659Z', 9: 'bb957b9011790f64'};
2020-06-20 04:47:26 jdbc[3]: 
/**/ResultSet rs97 = prep52.getGeneratedKeys();
2020-06-20 04:47:26 jdbc[3]: 
/**/rs97.next();
2020-06-20 04:47:26 jdbc[3]: 
/**/ResultSetMetaData rsMeta20 = rs97.getMetaData();
2020-06-20 04:47:26 jdbc[3]: 
/**/conn0.getCatalog();
2020-06-20 04:47:26 jdbc[3]: 
/**/rsMeta20.getColumnCount();
2020-06-20 04:47:26 jdbc[3]: 
/**/rs97.getLong(1);
2020-06-20 04:47:26 jdbc[3]: 
/**/rs97.close();
2020-06-20 04:47:26 jdbc[3]: 
/**/prep52.getMaxRows();
2020-06-20 04:47:26 jdbc[3]: 
/**/prep52.getQueryTimeout();
2020-06-20 04:47:26 jdbc[3]: 
/**/prep52.close();
2020-06-20 04:47:26 jdbc[3]: 
/**/conn0.commit();
2020-06-20 04:47:26 lock: 3 shared read lock unlock LOG_TBL 
2020-06-20 04:47:26 jdbc[3]: 
/*SQL */COMMIT;
2020-06-20 04:47:26 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2020-06-20 04:47:26 jdbc[3]: 
/**/conn0.commit();
2020-06-20 04:47:26 jdbc[3]: 
/*SQL */COMMIT;
2020-06-20 04:47:26 jdbc[3]: 
/**/conn0.getWarnings();
2020-06-20 04:47:26 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-20 04:47:26 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-20 04:48:36 jdbc[13]: 
/**/conn10.close();
2020-06-20 04:48:36 lock: 13 shared read lock unlock SYS 
2020-06-20 04:48:36 database: disconnecting session #13
2020-06-20 04:48:36 database: disconnected session #13
2020-06-20 04:48:36 jdbc[3]: 
/**/conn0.isValid(5);
2020-06-20 04:48:36 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2020-06-20 04:48:36 jdbc[3]: 
/**/conn0.getAutoCommit();
2020-06-20 04:48:36 jdbc[3]: 
/**/Statement stat9 = conn0.createStatement();
2020-06-20 04:48:36 jdbc[3]: 
/**/stat9.execute("drop table if exists equipment_tbl CASCADE ");
2020-06-20 04:48:36 lock: 3 exclusive write lock requesting for EQUIPMENT_TBL 
2020-06-20 04:48:36 lock: 3 exclusive write lock added for EQUIPMENT_TBL 
2020-06-20 04:48:36 lock: 3 exclusive write lock requesting for SYS 
2020-06-20 04:48:36 lock: 3 exclusive write lock added for SYS 
2020-06-20 04:48:36 jdbc[3]: 
/*SQL t:2*/drop table if exists equipment_tbl CASCADE;
2020-06-20 04:48:36 lock: 3 exclusive write lock unlock SYS 
2020-06-20 04:48:36 jdbc[3]: 
/**/stat9.getWarnings();
2020-06-20 04:48:36 jdbc[3]: 
/**/stat9.execute("drop table if exists log_tbl CASCADE ");
2020-06-20 04:48:36 lock: 3 exclusive write lock requesting for LOG_TBL 
2020-06-20 04:48:36 lock: 3 exclusive write lock added for LOG_TBL 
2020-06-20 04:48:36 lock: 3 exclusive write lock requesting for SYS 
2020-06-20 04:48:36 lock: 3 exclusive write lock added for SYS 
2020-06-20 04:48:36 jdbc[3]: 
/*SQL */drop table if exists log_tbl CASCADE;
2020-06-20 04:48:36 lock: 3 exclusive write lock unlock SYS 
2020-06-20 04:48:36 jdbc[3]: 
/**/stat9.getWarnings();
2020-06-20 04:48:36 jdbc[3]: 
/**/stat9.close();
2020-06-20 04:48:36 jdbc[3]: 
/**/conn0.clearWarnings();
2020-06-20 04:48:36 database: closing /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/EquipmentMS/equipmentdb from shutdown hook
2020-06-20 04:48:36 lock: 3 shared read lock unlock SYS 
2020-06-20 04:48:36 database: disconnecting session #3
2020-06-20 04:48:36 database: disconnected session #3
2020-06-20 04:48:36 lock: 4 shared read lock unlock SYS 
2020-06-20 04:48:36 database: disconnecting session #4
2020-06-20 04:48:36 database: disconnected session #4
2020-06-20 04:48:36 lock: 5 shared read lock unlock SYS 
2020-06-20 04:48:36 database: disconnecting session #5
2020-06-20 04:48:36 database: disconnected session #5
2020-06-20 04:48:36 lock: 6 shared read lock unlock SYS 
2020-06-20 04:48:36 database: disconnecting session #6
2020-06-20 04:48:36 database: disconnected session #6
2020-06-20 04:48:36 lock: 7 shared read lock unlock SYS 
2020-06-20 04:48:36 database: disconnecting session #7
2020-06-20 04:48:36 database: disconnected session #7
2020-06-20 04:48:36 lock: 8 shared read lock unlock SYS 
2020-06-20 04:48:36 database: disconnecting session #8
2020-06-20 04:48:36 database: disconnected session #8
2020-06-20 04:48:36 lock: 9 shared read lock unlock SYS 
2020-06-20 04:48:36 jdbc[3]: 
/**/conn0.close();
2020-06-20 04:48:36 database: disconnecting session #9
2020-06-20 04:48:36 jdbc[4]: 
/**/conn1.close();
2020-06-20 04:48:36 database: disconnected session #9
2020-06-20 04:48:36 jdbc[5]: 
/**/conn2.close();
2020-06-20 04:48:36 lock: 10 shared read lock unlock SYS 
2020-06-20 04:48:36 jdbc[6]: 
/**/conn3.close();
2020-06-20 04:48:36 database: disconnecting session #10
2020-06-20 04:48:36 database: disconnected session #10
2020-06-20 04:48:36 jdbc[7]: 
/**/conn4.close();
2020-06-20 04:48:36 lock: 11 shared read lock unlock SYS 
2020-06-20 04:48:36 jdbc[8]: 
/**/conn5.close();
2020-06-20 04:48:36 database: disconnecting session #11
2020-06-20 04:48:36 jdbc[9]: 
/**/conn6.close();
2020-06-20 04:48:36 database: disconnected session #11
2020-06-20 04:48:36 jdbc[10]: 
/**/conn7.close();
2020-06-20 04:48:36 lock: 12 shared read lock unlock SYS 
2020-06-20 04:48:36 jdbc[11]: 
/**/conn8.close();
2020-06-20 04:48:36 database: disconnecting session #12
2020-06-20 04:48:36 jdbc[12]: 
/**/conn9.close();
2020-06-20 04:48:36 database: disconnected session #12
2020-06-20 04:48:36 database: closing /Users/bek/Documents/workspace-spring-tool-suite-4-4.6.2.RELEASE/Microservice-TASK/EquipmentMS/equipmentdb
2020-06-20 04:48:36 lock: 1 shared read lock unlock SYS 
2020-06-20 04:48:36 lock: 2 shared read lock unlock SYS 
2020-06-20 04:48:36 database: closed
